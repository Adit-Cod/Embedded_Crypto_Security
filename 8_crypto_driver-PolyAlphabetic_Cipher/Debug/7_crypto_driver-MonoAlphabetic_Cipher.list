
7_crypto_driver-MonoAlphabetic_Cipher.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c80  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000284  08001e50  08001e50  00011e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080020d4  080020d4  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  080020d4  080020d4  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080020d4  080020d4  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080020d4  080020d4  000120d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080020d8  080020d8  000120d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080020dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000044  20000068  08002144  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  08002144  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000473d  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000fa2  00000000  00000000  000247cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000288  00000000  00000000  00025778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000210  00000000  00000000  00025a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b1a1  00000000  00000000  00025c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004452  00000000  00000000  00040db1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091152  00000000  00000000  00045203  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d6355  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001028  00000000  00000000  000d63a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08001e38 	.word	0x08001e38

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08001e38 	.word	0x08001e38

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <encrypt_monoalphabetic>:
#include<string.h>
#include"MonoAlphabetic_Cipher.h"

/* Encrypt using monoalphabetic engine */
void encrypt_monoalphabetic(char* plain_text, char* key, char* encryptedtext)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b086      	sub	sp, #24
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	60f8      	str	r0, [r7, #12]
 80002c8:	60b9      	str	r1, [r7, #8]
 80002ca:	607a      	str	r2, [r7, #4]
	char plaintext_l ;
    for(int i = 0; i < strlen(plain_text); i++)
 80002cc:	2300      	movs	r3, #0
 80002ce:	617b      	str	r3, [r7, #20]
 80002d0:	e02c      	b.n	800032c <encrypt_monoalphabetic+0x6c>
    {
    	plaintext_l = plain_text[i];
 80002d2:	697b      	ldr	r3, [r7, #20]
 80002d4:	68fa      	ldr	r2, [r7, #12]
 80002d6:	4413      	add	r3, r2
 80002d8:	781b      	ldrb	r3, [r3, #0]
 80002da:	74fb      	strb	r3, [r7, #19]

    	if(plaintext_l >= 'a' && plaintext_l <= 'z')
 80002dc:	7cfb      	ldrb	r3, [r7, #19]
 80002de:	2b60      	cmp	r3, #96	; 0x60
 80002e0:	d90c      	bls.n	80002fc <encrypt_monoalphabetic+0x3c>
 80002e2:	7cfb      	ldrb	r3, [r7, #19]
 80002e4:	2b7a      	cmp	r3, #122	; 0x7a
 80002e6:	d809      	bhi.n	80002fc <encrypt_monoalphabetic+0x3c>
    	{
    		encryptedtext[i] = key[plaintext_l - 'a'];
 80002e8:	7cfb      	ldrb	r3, [r7, #19]
 80002ea:	3b61      	subs	r3, #97	; 0x61
 80002ec:	68ba      	ldr	r2, [r7, #8]
 80002ee:	441a      	add	r2, r3
 80002f0:	697b      	ldr	r3, [r7, #20]
 80002f2:	6879      	ldr	r1, [r7, #4]
 80002f4:	440b      	add	r3, r1
 80002f6:	7812      	ldrb	r2, [r2, #0]
 80002f8:	701a      	strb	r2, [r3, #0]
 80002fa:	e014      	b.n	8000326 <encrypt_monoalphabetic+0x66>
    	}
    	else if(plaintext_l >= 'A' && plaintext_l <= 'Z')
 80002fc:	7cfb      	ldrb	r3, [r7, #19]
 80002fe:	2b40      	cmp	r3, #64	; 0x40
 8000300:	d90c      	bls.n	800031c <encrypt_monoalphabetic+0x5c>
 8000302:	7cfb      	ldrb	r3, [r7, #19]
 8000304:	2b5a      	cmp	r3, #90	; 0x5a
 8000306:	d809      	bhi.n	800031c <encrypt_monoalphabetic+0x5c>
    	{
    		encryptedtext[i] = key[plaintext_l - 'A'];
 8000308:	7cfb      	ldrb	r3, [r7, #19]
 800030a:	3b41      	subs	r3, #65	; 0x41
 800030c:	68ba      	ldr	r2, [r7, #8]
 800030e:	441a      	add	r2, r3
 8000310:	697b      	ldr	r3, [r7, #20]
 8000312:	6879      	ldr	r1, [r7, #4]
 8000314:	440b      	add	r3, r1
 8000316:	7812      	ldrb	r2, [r2, #0]
 8000318:	701a      	strb	r2, [r3, #0]
 800031a:	e004      	b.n	8000326 <encrypt_monoalphabetic+0x66>
    	}
    	else
    	{
    		encryptedtext[i] = plaintext_l;
 800031c:	697b      	ldr	r3, [r7, #20]
 800031e:	687a      	ldr	r2, [r7, #4]
 8000320:	4413      	add	r3, r2
 8000322:	7cfa      	ldrb	r2, [r7, #19]
 8000324:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < strlen(plain_text); i++)
 8000326:	697b      	ldr	r3, [r7, #20]
 8000328:	3301      	adds	r3, #1
 800032a:	617b      	str	r3, [r7, #20]
 800032c:	68f8      	ldr	r0, [r7, #12]
 800032e:	f7ff ff6f 	bl	8000210 <strlen>
 8000332:	4602      	mov	r2, r0
 8000334:	697b      	ldr	r3, [r7, #20]
 8000336:	429a      	cmp	r2, r3
 8000338:	d8cb      	bhi.n	80002d2 <encrypt_monoalphabetic+0x12>
    	}
    }
    encryptedtext[strlen(plain_text)] = '\0';
 800033a:	68f8      	ldr	r0, [r7, #12]
 800033c:	f7ff ff68 	bl	8000210 <strlen>
 8000340:	4602      	mov	r2, r0
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	4413      	add	r3, r2
 8000346:	2200      	movs	r2, #0
 8000348:	701a      	strb	r2, [r3, #0]
}
 800034a:	bf00      	nop
 800034c:	3718      	adds	r7, #24
 800034e:	46bd      	mov	sp, r7
 8000350:	bd80      	pop	{r7, pc}

08000352 <decrypt_monoalphabetic>:


void decrypt_monoalphabetic(char* encrypted_text, char* key, char* decryptedtext)
{
 8000352:	b580      	push	{r7, lr}
 8000354:	b088      	sub	sp, #32
 8000356:	af00      	add	r7, sp, #0
 8000358:	60f8      	str	r0, [r7, #12]
 800035a:	60b9      	str	r1, [r7, #8]
 800035c:	607a      	str	r2, [r7, #4]

	char encryptor;
	for(int i = 0 ; i< strlen(encrypted_text); i++)
 800035e:	2300      	movs	r3, #0
 8000360:	61fb      	str	r3, [r7, #28]
 8000362:	e04e      	b.n	8000402 <decrypt_monoalphabetic+0xb0>
	{
		encryptor = encrypted_text[i];
 8000364:	69fb      	ldr	r3, [r7, #28]
 8000366:	68fa      	ldr	r2, [r7, #12]
 8000368:	4413      	add	r3, r2
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	74fb      	strb	r3, [r7, #19]
		if(encryptor >= 'a' && encryptor <= 'z')
 800036e:	7cfb      	ldrb	r3, [r7, #19]
 8000370:	2b60      	cmp	r3, #96	; 0x60
 8000372:	d91d      	bls.n	80003b0 <decrypt_monoalphabetic+0x5e>
 8000374:	7cfb      	ldrb	r3, [r7, #19]
 8000376:	2b7a      	cmp	r3, #122	; 0x7a
 8000378:	d81a      	bhi.n	80003b0 <decrypt_monoalphabetic+0x5e>
		{
			for(int i = 0 ; i < 26 ; i++)
 800037a:	2300      	movs	r3, #0
 800037c:	61bb      	str	r3, [r7, #24]
 800037e:	e013      	b.n	80003a8 <decrypt_monoalphabetic+0x56>
			{
				if(encryptor == key[i])
 8000380:	69bb      	ldr	r3, [r7, #24]
 8000382:	68ba      	ldr	r2, [r7, #8]
 8000384:	4413      	add	r3, r2
 8000386:	781b      	ldrb	r3, [r3, #0]
 8000388:	7cfa      	ldrb	r2, [r7, #19]
 800038a:	429a      	cmp	r2, r3
 800038c:	d109      	bne.n	80003a2 <decrypt_monoalphabetic+0x50>
				{
					decryptedtext[i] = i + 'a';
 800038e:	69bb      	ldr	r3, [r7, #24]
 8000390:	b2da      	uxtb	r2, r3
 8000392:	69bb      	ldr	r3, [r7, #24]
 8000394:	6879      	ldr	r1, [r7, #4]
 8000396:	440b      	add	r3, r1
 8000398:	3261      	adds	r2, #97	; 0x61
 800039a:	b2d2      	uxtb	r2, r2
 800039c:	701a      	strb	r2, [r3, #0]
					break;
 800039e:	bf00      	nop
			for(int i = 0 ; i < 26 ; i++)
 80003a0:	e02c      	b.n	80003fc <decrypt_monoalphabetic+0xaa>
 80003a2:	69bb      	ldr	r3, [r7, #24]
 80003a4:	3301      	adds	r3, #1
 80003a6:	61bb      	str	r3, [r7, #24]
 80003a8:	69bb      	ldr	r3, [r7, #24]
 80003aa:	2b19      	cmp	r3, #25
 80003ac:	dde8      	ble.n	8000380 <decrypt_monoalphabetic+0x2e>
 80003ae:	e025      	b.n	80003fc <decrypt_monoalphabetic+0xaa>
				}
			}
		}
		else if(encryptor >= 'A' && encryptor <= 'Z')
 80003b0:	7cfb      	ldrb	r3, [r7, #19]
 80003b2:	2b40      	cmp	r3, #64	; 0x40
 80003b4:	d91d      	bls.n	80003f2 <decrypt_monoalphabetic+0xa0>
 80003b6:	7cfb      	ldrb	r3, [r7, #19]
 80003b8:	2b5a      	cmp	r3, #90	; 0x5a
 80003ba:	d81a      	bhi.n	80003f2 <decrypt_monoalphabetic+0xa0>
		{
			for(int i = 0 ; i < 26 ; i++)
 80003bc:	2300      	movs	r3, #0
 80003be:	617b      	str	r3, [r7, #20]
 80003c0:	e013      	b.n	80003ea <decrypt_monoalphabetic+0x98>
			{
				if(encryptor == key[i])
 80003c2:	697b      	ldr	r3, [r7, #20]
 80003c4:	68ba      	ldr	r2, [r7, #8]
 80003c6:	4413      	add	r3, r2
 80003c8:	781b      	ldrb	r3, [r3, #0]
 80003ca:	7cfa      	ldrb	r2, [r7, #19]
 80003cc:	429a      	cmp	r2, r3
 80003ce:	d109      	bne.n	80003e4 <decrypt_monoalphabetic+0x92>
			    {
					decryptedtext[i] = i + 'A';
 80003d0:	697b      	ldr	r3, [r7, #20]
 80003d2:	b2da      	uxtb	r2, r3
 80003d4:	697b      	ldr	r3, [r7, #20]
 80003d6:	6879      	ldr	r1, [r7, #4]
 80003d8:	440b      	add	r3, r1
 80003da:	3241      	adds	r2, #65	; 0x41
 80003dc:	b2d2      	uxtb	r2, r2
 80003de:	701a      	strb	r2, [r3, #0]
					break;
 80003e0:	bf00      	nop
			for(int i = 0 ; i < 26 ; i++)
 80003e2:	e00b      	b.n	80003fc <decrypt_monoalphabetic+0xaa>
 80003e4:	697b      	ldr	r3, [r7, #20]
 80003e6:	3301      	adds	r3, #1
 80003e8:	617b      	str	r3, [r7, #20]
 80003ea:	697b      	ldr	r3, [r7, #20]
 80003ec:	2b19      	cmp	r3, #25
 80003ee:	dde8      	ble.n	80003c2 <decrypt_monoalphabetic+0x70>
 80003f0:	e004      	b.n	80003fc <decrypt_monoalphabetic+0xaa>
				}
			}
		}
		else
			decryptedtext[i] = encryptor;
 80003f2:	69fb      	ldr	r3, [r7, #28]
 80003f4:	687a      	ldr	r2, [r7, #4]
 80003f6:	4413      	add	r3, r2
 80003f8:	7cfa      	ldrb	r2, [r7, #19]
 80003fa:	701a      	strb	r2, [r3, #0]
	for(int i = 0 ; i< strlen(encrypted_text); i++)
 80003fc:	69fb      	ldr	r3, [r7, #28]
 80003fe:	3301      	adds	r3, #1
 8000400:	61fb      	str	r3, [r7, #28]
 8000402:	68f8      	ldr	r0, [r7, #12]
 8000404:	f7ff ff04 	bl	8000210 <strlen>
 8000408:	4602      	mov	r2, r0
 800040a:	69fb      	ldr	r3, [r7, #28]
 800040c:	429a      	cmp	r2, r3
 800040e:	d8a9      	bhi.n	8000364 <decrypt_monoalphabetic+0x12>
	}
	decryptedtext[strlen(encrypted_text)] = '\0';
 8000410:	68f8      	ldr	r0, [r7, #12]
 8000412:	f7ff fefd 	bl	8000210 <strlen>
 8000416:	4602      	mov	r2, r0
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	4413      	add	r3, r2
 800041c:	2200      	movs	r2, #0
 800041e:	701a      	strb	r2, [r3, #0]
}
 8000420:	bf00      	nop
 8000422:	3720      	adds	r7, #32
 8000424:	46bd      	mov	sp, r7
 8000426:	bd80      	pop	{r7, pc}

08000428 <ceasar_encrypt>:

#include "ceasars_cipher.h"


void ceasar_encrypt(char* plain_text, uint8_t key, char* encrypted_data, uint32_t length)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b086      	sub	sp, #24
 800042c:	af00      	add	r7, sp, #0
 800042e:	60f8      	str	r0, [r7, #12]
 8000430:	607a      	str	r2, [r7, #4]
 8000432:	603b      	str	r3, [r7, #0]
 8000434:	460b      	mov	r3, r1
 8000436:	72fb      	strb	r3, [r7, #11]
	/* Store Plaintext_data*/
    uint8_t plaintext_data;

    printf("\r\nCrypto Engine Starting!\r\n");
 8000438:	4827      	ldr	r0, [pc, #156]	; (80004d8 <ceasar_encrypt+0xb0>)
 800043a:	f000 fdcd 	bl	8000fd8 <puts>
    for(uint32_t index = 0; index < length; index++)
 800043e:	2300      	movs	r3, #0
 8000440:	613b      	str	r3, [r7, #16]
 8000442:	e03c      	b.n	80004be <ceasar_encrypt+0x96>
    {
    	plaintext_data = plain_text[index];
 8000444:	68fa      	ldr	r2, [r7, #12]
 8000446:	693b      	ldr	r3, [r7, #16]
 8000448:	4413      	add	r3, r2
 800044a:	781b      	ldrb	r3, [r3, #0]
 800044c:	75fb      	strb	r3, [r7, #23]

    	if(plaintext_data >= 'a' && plaintext_data <= 'z')
 800044e:	7dfb      	ldrb	r3, [r7, #23]
 8000450:	2b60      	cmp	r3, #96	; 0x60
 8000452:	d915      	bls.n	8000480 <ceasar_encrypt+0x58>
 8000454:	7dfb      	ldrb	r3, [r7, #23]
 8000456:	2b7a      	cmp	r3, #122	; 0x7a
 8000458:	d812      	bhi.n	8000480 <ceasar_encrypt+0x58>
    	{
    		plaintext_data = (plaintext_data - 'a' + key)%26 + 'a';
 800045a:	7dfb      	ldrb	r3, [r7, #23]
 800045c:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8000460:	7afb      	ldrb	r3, [r7, #11]
 8000462:	4413      	add	r3, r2
 8000464:	4a1d      	ldr	r2, [pc, #116]	; (80004dc <ceasar_encrypt+0xb4>)
 8000466:	fb82 1203 	smull	r1, r2, r2, r3
 800046a:	10d1      	asrs	r1, r2, #3
 800046c:	17da      	asrs	r2, r3, #31
 800046e:	1a8a      	subs	r2, r1, r2
 8000470:	211a      	movs	r1, #26
 8000472:	fb01 f202 	mul.w	r2, r1, r2
 8000476:	1a9a      	subs	r2, r3, r2
 8000478:	b2d3      	uxtb	r3, r2
 800047a:	3361      	adds	r3, #97	; 0x61
 800047c:	75fb      	strb	r3, [r7, #23]
 800047e:	e016      	b.n	80004ae <ceasar_encrypt+0x86>
    	}
    	else if(plaintext_data >= 'A' && plaintext_data <= 'Z')
 8000480:	7dfb      	ldrb	r3, [r7, #23]
 8000482:	2b40      	cmp	r3, #64	; 0x40
 8000484:	d913      	bls.n	80004ae <ceasar_encrypt+0x86>
 8000486:	7dfb      	ldrb	r3, [r7, #23]
 8000488:	2b5a      	cmp	r3, #90	; 0x5a
 800048a:	d810      	bhi.n	80004ae <ceasar_encrypt+0x86>
    	{
    		plaintext_data = (plaintext_data - 'A' + key)% MAX_NO_OF_ENGLISH_ALPHABETS + 'A';
 800048c:	7dfb      	ldrb	r3, [r7, #23]
 800048e:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8000492:	7afb      	ldrb	r3, [r7, #11]
 8000494:	4413      	add	r3, r2
 8000496:	461a      	mov	r2, r3
 8000498:	4b10      	ldr	r3, [pc, #64]	; (80004dc <ceasar_encrypt+0xb4>)
 800049a:	fba3 1302 	umull	r1, r3, r3, r2
 800049e:	08db      	lsrs	r3, r3, #3
 80004a0:	211a      	movs	r1, #26
 80004a2:	fb01 f303 	mul.w	r3, r1, r3
 80004a6:	1ad3      	subs	r3, r2, r3
 80004a8:	b2db      	uxtb	r3, r3
 80004aa:	3341      	adds	r3, #65	; 0x41
 80004ac:	75fb      	strb	r3, [r7, #23]
    	}

    	encrypted_data[index] = plaintext_data;
 80004ae:	687a      	ldr	r2, [r7, #4]
 80004b0:	693b      	ldr	r3, [r7, #16]
 80004b2:	4413      	add	r3, r2
 80004b4:	7dfa      	ldrb	r2, [r7, #23]
 80004b6:	701a      	strb	r2, [r3, #0]
    for(uint32_t index = 0; index < length; index++)
 80004b8:	693b      	ldr	r3, [r7, #16]
 80004ba:	3301      	adds	r3, #1
 80004bc:	613b      	str	r3, [r7, #16]
 80004be:	693a      	ldr	r2, [r7, #16]
 80004c0:	683b      	ldr	r3, [r7, #0]
 80004c2:	429a      	cmp	r2, r3
 80004c4:	d3be      	bcc.n	8000444 <ceasar_encrypt+0x1c>
    }
    encrypted_data[length] = '\0';
 80004c6:	687a      	ldr	r2, [r7, #4]
 80004c8:	683b      	ldr	r3, [r7, #0]
 80004ca:	4413      	add	r3, r2
 80004cc:	2200      	movs	r2, #0
 80004ce:	701a      	strb	r2, [r3, #0]
}
 80004d0:	bf00      	nop
 80004d2:	3718      	adds	r7, #24
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	08001e50 	.word	0x08001e50
 80004dc:	4ec4ec4f 	.word	0x4ec4ec4f

080004e0 <ceasar_decrypt>:

void ceasar_decrypt(char* encrypted_text, uint8_t key, char* decrypted_text, uint32_t length)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b086      	sub	sp, #24
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	60f8      	str	r0, [r7, #12]
 80004e8:	607a      	str	r2, [r7, #4]
 80004ea:	603b      	str	r3, [r7, #0]
 80004ec:	460b      	mov	r3, r1
 80004ee:	72fb      	strb	r3, [r7, #11]
	printf("\r\n Starting Decryption Engine \r\n");
 80004f0:	4828      	ldr	r0, [pc, #160]	; (8000594 <ceasar_decrypt+0xb4>)
 80004f2:	f000 fd71 	bl	8000fd8 <puts>
    uint8_t encrypted_Data;
    for(int index = 0 ; index < length ; index ++)
 80004f6:	2300      	movs	r3, #0
 80004f8:	613b      	str	r3, [r7, #16]
 80004fa:	e03d      	b.n	8000578 <ceasar_decrypt+0x98>
    {
    	encrypted_Data = encrypted_text[index];
 80004fc:	693b      	ldr	r3, [r7, #16]
 80004fe:	68fa      	ldr	r2, [r7, #12]
 8000500:	4413      	add	r3, r2
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	75fb      	strb	r3, [r7, #23]

        if(encrypted_Data >= 'a' && encrypted_Data <= 'z')
 8000506:	7dfb      	ldrb	r3, [r7, #23]
 8000508:	2b60      	cmp	r3, #96	; 0x60
 800050a:	d915      	bls.n	8000538 <ceasar_decrypt+0x58>
 800050c:	7dfb      	ldrb	r3, [r7, #23]
 800050e:	2b7a      	cmp	r3, #122	; 0x7a
 8000510:	d812      	bhi.n	8000538 <ceasar_decrypt+0x58>
        {
        	encrypted_Data = (encrypted_Data - 'a' - key + MAX_NO_OF_ENGLISH_ALPHABETS ) % MAX_NO_OF_ENGLISH_ALPHABETS + 'a';
 8000512:	7dfb      	ldrb	r3, [r7, #23]
 8000514:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8000518:	7afb      	ldrb	r3, [r7, #11]
 800051a:	1ad3      	subs	r3, r2, r3
 800051c:	f103 021a 	add.w	r2, r3, #26
 8000520:	4b1d      	ldr	r3, [pc, #116]	; (8000598 <ceasar_decrypt+0xb8>)
 8000522:	fba3 1302 	umull	r1, r3, r3, r2
 8000526:	08db      	lsrs	r3, r3, #3
 8000528:	211a      	movs	r1, #26
 800052a:	fb01 f303 	mul.w	r3, r1, r3
 800052e:	1ad3      	subs	r3, r2, r3
 8000530:	b2db      	uxtb	r3, r3
 8000532:	3361      	adds	r3, #97	; 0x61
 8000534:	75fb      	strb	r3, [r7, #23]
 8000536:	e017      	b.n	8000568 <ceasar_decrypt+0x88>
        }
        else if(encrypted_Data >= 'A' && encrypted_Data <= 'Z')
 8000538:	7dfb      	ldrb	r3, [r7, #23]
 800053a:	2b40      	cmp	r3, #64	; 0x40
 800053c:	d914      	bls.n	8000568 <ceasar_decrypt+0x88>
 800053e:	7dfb      	ldrb	r3, [r7, #23]
 8000540:	2b5a      	cmp	r3, #90	; 0x5a
 8000542:	d811      	bhi.n	8000568 <ceasar_decrypt+0x88>
        {
            encrypted_Data = (encrypted_Data - 'A' - key + MAX_NO_OF_ENGLISH_ALPHABETS ) % MAX_NO_OF_ENGLISH_ALPHABETS + 'A';
 8000544:	7dfb      	ldrb	r3, [r7, #23]
 8000546:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800054a:	7afb      	ldrb	r3, [r7, #11]
 800054c:	1ad3      	subs	r3, r2, r3
 800054e:	f103 021a 	add.w	r2, r3, #26
 8000552:	4b11      	ldr	r3, [pc, #68]	; (8000598 <ceasar_decrypt+0xb8>)
 8000554:	fba3 1302 	umull	r1, r3, r3, r2
 8000558:	08db      	lsrs	r3, r3, #3
 800055a:	211a      	movs	r1, #26
 800055c:	fb01 f303 	mul.w	r3, r1, r3
 8000560:	1ad3      	subs	r3, r2, r3
 8000562:	b2db      	uxtb	r3, r3
 8000564:	3341      	adds	r3, #65	; 0x41
 8000566:	75fb      	strb	r3, [r7, #23]
        }
        decrypted_text[index] = encrypted_Data;
 8000568:	693b      	ldr	r3, [r7, #16]
 800056a:	687a      	ldr	r2, [r7, #4]
 800056c:	4413      	add	r3, r2
 800056e:	7dfa      	ldrb	r2, [r7, #23]
 8000570:	701a      	strb	r2, [r3, #0]
    for(int index = 0 ; index < length ; index ++)
 8000572:	693b      	ldr	r3, [r7, #16]
 8000574:	3301      	adds	r3, #1
 8000576:	613b      	str	r3, [r7, #16]
 8000578:	693b      	ldr	r3, [r7, #16]
 800057a:	683a      	ldr	r2, [r7, #0]
 800057c:	429a      	cmp	r2, r3
 800057e:	d8bd      	bhi.n	80004fc <ceasar_decrypt+0x1c>
    }
    decrypted_text[length] = '\0';
 8000580:	687a      	ldr	r2, [r7, #4]
 8000582:	683b      	ldr	r3, [r7, #0]
 8000584:	4413      	add	r3, r2
 8000586:	2200      	movs	r2, #0
 8000588:	701a      	strb	r2, [r3, #0]
}
 800058a:	bf00      	nop
 800058c:	3718      	adds	r7, #24
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	08001e6c 	.word	0x08001e6c
 8000598:	4ec4ec4f 	.word	0x4ec4ec4f

0800059c <encrypt_Ceasar_cipher>:

uint16_t encrypt_Ceasar_cipher(uint16_t value, uint16_t key)
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	460a      	mov	r2, r1
 80005a6:	80fb      	strh	r3, [r7, #6]
 80005a8:	4613      	mov	r3, r2
 80005aa:	80bb      	strh	r3, [r7, #4]
	return (uint16_t)((value + key ) & 0xFFFF);
 80005ac:	88fa      	ldrh	r2, [r7, #6]
 80005ae:	88bb      	ldrh	r3, [r7, #4]
 80005b0:	4413      	add	r3, r2
 80005b2:	b29b      	uxth	r3, r3
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	370c      	adds	r7, #12
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bc80      	pop	{r7}
 80005bc:	4770      	bx	lr

080005be <decrypt_Ceasar_cipher>:

uint16_t decrypt_Ceasar_cipher(uint16_t encrypted_value, uint16_t key)
{
 80005be:	b480      	push	{r7}
 80005c0:	b083      	sub	sp, #12
 80005c2:	af00      	add	r7, sp, #0
 80005c4:	4603      	mov	r3, r0
 80005c6:	460a      	mov	r2, r1
 80005c8:	80fb      	strh	r3, [r7, #6]
 80005ca:	4613      	mov	r3, r2
 80005cc:	80bb      	strh	r3, [r7, #4]
	return (uint16_t)((encrypted_value - key ) & 0xFFFF);
 80005ce:	88fa      	ldrh	r2, [r7, #6]
 80005d0:	88bb      	ldrh	r3, [r7, #4]
 80005d2:	1ad3      	subs	r3, r2, r3
 80005d4:	b29b      	uxth	r3, r3
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	370c      	adds	r7, #12
 80005da:	46bd      	mov	sp, r7
 80005dc:	bc80      	pop	{r7}
 80005de:	4770      	bx	lr

080005e0 <ceasar_decrypt_hack>:

void ceasar_decrypt_hack(char* encrypted_text, uint8_t key)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
 80005e8:	460b      	mov	r3, r1
 80005ea:	70fb      	strb	r3, [r7, #3]
	printf("\r\n Starting Decryption Hack Engine \r\n");
 80005ec:	482c      	ldr	r0, [pc, #176]	; (80006a0 <ceasar_decrypt_hack+0xc0>)
 80005ee:	f000 fcf3 	bl	8000fd8 <puts>
    uint8_t encrypted_Data;

    for(int index = 0 ; encrypted_text[index] != '\0'; index ++)
 80005f2:	2300      	movs	r3, #0
 80005f4:	60fb      	str	r3, [r7, #12]
 80005f6:	e045      	b.n	8000684 <ceasar_decrypt_hack+0xa4>
    {
    	encrypted_Data = encrypted_text[index];
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	687a      	ldr	r2, [r7, #4]
 80005fc:	4413      	add	r3, r2
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	72fb      	strb	r3, [r7, #11]

        if(encrypted_Data >= 'a' && encrypted_Data <= 'z')
 8000602:	7afb      	ldrb	r3, [r7, #11]
 8000604:	2b60      	cmp	r3, #96	; 0x60
 8000606:	d919      	bls.n	800063c <ceasar_decrypt_hack+0x5c>
 8000608:	7afb      	ldrb	r3, [r7, #11]
 800060a:	2b7a      	cmp	r3, #122	; 0x7a
 800060c:	d816      	bhi.n	800063c <ceasar_decrypt_hack+0x5c>
        {
        	encrypted_Data = (encrypted_Data - 'a' - key + MAX_NO_OF_ENGLISH_ALPHABETS ) % MAX_NO_OF_ENGLISH_ALPHABETS + 'a';
 800060e:	7afb      	ldrb	r3, [r7, #11]
 8000610:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8000614:	78fb      	ldrb	r3, [r7, #3]
 8000616:	1ad3      	subs	r3, r2, r3
 8000618:	f103 021a 	add.w	r2, r3, #26
 800061c:	4b21      	ldr	r3, [pc, #132]	; (80006a4 <ceasar_decrypt_hack+0xc4>)
 800061e:	fba3 1302 	umull	r1, r3, r3, r2
 8000622:	08db      	lsrs	r3, r3, #3
 8000624:	211a      	movs	r1, #26
 8000626:	fb01 f303 	mul.w	r3, r1, r3
 800062a:	1ad3      	subs	r3, r2, r3
 800062c:	b2db      	uxtb	r3, r3
 800062e:	3361      	adds	r3, #97	; 0x61
 8000630:	72fb      	strb	r3, [r7, #11]
        	printf("%c",encrypted_Data);
 8000632:	7afb      	ldrb	r3, [r7, #11]
 8000634:	4618      	mov	r0, r3
 8000636:	f000 fc4d 	bl	8000ed4 <putchar>
 800063a:	e020      	b.n	800067e <ceasar_decrypt_hack+0x9e>
        }
        else if(encrypted_Data >= 'A' && encrypted_Data <= 'Z')
 800063c:	7afb      	ldrb	r3, [r7, #11]
 800063e:	2b40      	cmp	r3, #64	; 0x40
 8000640:	d919      	bls.n	8000676 <ceasar_decrypt_hack+0x96>
 8000642:	7afb      	ldrb	r3, [r7, #11]
 8000644:	2b5a      	cmp	r3, #90	; 0x5a
 8000646:	d816      	bhi.n	8000676 <ceasar_decrypt_hack+0x96>
        {
            encrypted_Data = (encrypted_Data - 'A' - key + MAX_NO_OF_ENGLISH_ALPHABETS ) % MAX_NO_OF_ENGLISH_ALPHABETS + 'A';
 8000648:	7afb      	ldrb	r3, [r7, #11]
 800064a:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800064e:	78fb      	ldrb	r3, [r7, #3]
 8000650:	1ad3      	subs	r3, r2, r3
 8000652:	f103 021a 	add.w	r2, r3, #26
 8000656:	4b13      	ldr	r3, [pc, #76]	; (80006a4 <ceasar_decrypt_hack+0xc4>)
 8000658:	fba3 1302 	umull	r1, r3, r3, r2
 800065c:	08db      	lsrs	r3, r3, #3
 800065e:	211a      	movs	r1, #26
 8000660:	fb01 f303 	mul.w	r3, r1, r3
 8000664:	1ad3      	subs	r3, r2, r3
 8000666:	b2db      	uxtb	r3, r3
 8000668:	3341      	adds	r3, #65	; 0x41
 800066a:	72fb      	strb	r3, [r7, #11]
            printf("%c",encrypted_Data);
 800066c:	7afb      	ldrb	r3, [r7, #11]
 800066e:	4618      	mov	r0, r3
 8000670:	f000 fc30 	bl	8000ed4 <putchar>
 8000674:	e003      	b.n	800067e <ceasar_decrypt_hack+0x9e>
        }
        else
        	printf("%c",encrypted_Data);
 8000676:	7afb      	ldrb	r3, [r7, #11]
 8000678:	4618      	mov	r0, r3
 800067a:	f000 fc2b 	bl	8000ed4 <putchar>
    for(int index = 0 ; encrypted_text[index] != '\0'; index ++)
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	3301      	adds	r3, #1
 8000682:	60fb      	str	r3, [r7, #12]
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	687a      	ldr	r2, [r7, #4]
 8000688:	4413      	add	r3, r2
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d1b3      	bne.n	80005f8 <ceasar_decrypt_hack+0x18>
    }
    printf("\r\n");
 8000690:	4805      	ldr	r0, [pc, #20]	; (80006a8 <ceasar_decrypt_hack+0xc8>)
 8000692:	f000 fca1 	bl	8000fd8 <puts>

}
 8000696:	bf00      	nop
 8000698:	3710      	adds	r7, #16
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	08001e8c 	.word	0x08001e8c
 80006a4:	4ec4ec4f 	.word	0x4ec4ec4f
 80006a8:	08001eb4 	.word	0x08001eb4

080006ac <pa1_adc_init>:
 */

#include "adc.h"

void pa1_adc_init(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
    /* Enable Clock TO ADC Channel */
	/* Set Conversion Sequence Start */
	/* Set Conversion Sequence Length */
	/* Enable ADC Length */

	RCC->AHB1ENR |= GPIOAEN;
 80006b0:	4b13      	ldr	r3, [pc, #76]	; (8000700 <pa1_adc_init+0x54>)
 80006b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b4:	4a12      	ldr	r2, [pc, #72]	; (8000700 <pa1_adc_init+0x54>)
 80006b6:	f043 0301 	orr.w	r3, r3, #1
 80006ba:	6313      	str	r3, [r2, #48]	; 0x30
    GPIOA->MODER |= ADC_PIN_2_EN;
 80006bc:	4b11      	ldr	r3, [pc, #68]	; (8000704 <pa1_adc_init+0x58>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a10      	ldr	r2, [pc, #64]	; (8000704 <pa1_adc_init+0x58>)
 80006c2:	f043 0304 	orr.w	r3, r3, #4
 80006c6:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= ADC_PIN_3_EN;
 80006c8:	4b0e      	ldr	r3, [pc, #56]	; (8000704 <pa1_adc_init+0x58>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a0d      	ldr	r2, [pc, #52]	; (8000704 <pa1_adc_init+0x58>)
 80006ce:	f043 0308 	orr.w	r3, r3, #8
 80006d2:	6013      	str	r3, [r2, #0]

    RCC->APB2ENR |= ADC1_EN;
 80006d4:	4b0a      	ldr	r3, [pc, #40]	; (8000700 <pa1_adc_init+0x54>)
 80006d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006d8:	4a09      	ldr	r2, [pc, #36]	; (8000700 <pa1_adc_init+0x54>)
 80006da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006de:	6453      	str	r3, [r2, #68]	; 0x44

    /* Configure specific channel depending on use-case. Refer to the reference Manual for
     * more information
     * */
    ADC1->SQR3 = ADC_CH1;
 80006e0:	4b09      	ldr	r3, [pc, #36]	; (8000708 <pa1_adc_init+0x5c>)
 80006e2:	2201      	movs	r2, #1
 80006e4:	635a      	str	r2, [r3, #52]	; 0x34
    ADC1->SQR1 = ADC_SEQ_LEN_1;
 80006e6:	4b08      	ldr	r3, [pc, #32]	; (8000708 <pa1_adc_init+0x5c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	62da      	str	r2, [r3, #44]	; 0x2c

    ADC1->CR2 |= ADC_CR2_ON;
 80006ec:	4b06      	ldr	r3, [pc, #24]	; (8000708 <pa1_adc_init+0x5c>)
 80006ee:	689b      	ldr	r3, [r3, #8]
 80006f0:	4a05      	ldr	r2, [pc, #20]	; (8000708 <pa1_adc_init+0x5c>)
 80006f2:	f043 0301 	orr.w	r3, r3, #1
 80006f6:	6093      	str	r3, [r2, #8]
}
 80006f8:	bf00      	nop
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bc80      	pop	{r7}
 80006fe:	4770      	bx	lr
 8000700:	40023800 	.word	0x40023800
 8000704:	40020000 	.word	0x40020000
 8000708:	40012000 	.word	0x40012000

0800070c <startadc_conversion>:

void startadc_conversion(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
	/* Enable Continuous Conversion */
	ADC1->CR2 |= CR2_CONT;
 8000710:	4b07      	ldr	r3, [pc, #28]	; (8000730 <startadc_conversion+0x24>)
 8000712:	689b      	ldr	r3, [r3, #8]
 8000714:	4a06      	ldr	r2, [pc, #24]	; (8000730 <startadc_conversion+0x24>)
 8000716:	f043 0302 	orr.w	r3, r3, #2
 800071a:	6093      	str	r3, [r2, #8]
	/* Start ADC Conversion */
	ADC1->CR2 |= CR2_SWSTART;
 800071c:	4b04      	ldr	r3, [pc, #16]	; (8000730 <startadc_conversion+0x24>)
 800071e:	689b      	ldr	r3, [r3, #8]
 8000720:	4a03      	ldr	r2, [pc, #12]	; (8000730 <startadc_conversion+0x24>)
 8000722:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000726:	6093      	str	r3, [r2, #8]

}
 8000728:	bf00      	nop
 800072a:	46bd      	mov	sp, r7
 800072c:	bc80      	pop	{r7}
 800072e:	4770      	bx	lr
 8000730:	40012000 	.word	0x40012000

08000734 <led_init>:

#include "bsp.h"


void led_init(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
	/* Provide Clock Access to the respective Peripheral */
	/* GPIO A for stm32f44xx */

	    RCC->AHB1ENR |= GPIOAEN;
 8000738:	4b0a      	ldr	r3, [pc, #40]	; (8000764 <led_init+0x30>)
 800073a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073c:	4a09      	ldr	r2, [pc, #36]	; (8000764 <led_init+0x30>)
 800073e:	f043 0301 	orr.w	r3, r3, #1
 8000742:	6313      	str	r3, [r2, #48]	; 0x30
	    GPIOA->MODER |= (1U<<10);
 8000744:	4b08      	ldr	r3, [pc, #32]	; (8000768 <led_init+0x34>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a07      	ldr	r2, [pc, #28]	; (8000768 <led_init+0x34>)
 800074a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800074e:	6013      	str	r3, [r2, #0]
	    GPIOA->MODER &= ~(1U<<11);
 8000750:	4b05      	ldr	r3, [pc, #20]	; (8000768 <led_init+0x34>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a04      	ldr	r2, [pc, #16]	; (8000768 <led_init+0x34>)
 8000756:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800075a:	6013      	str	r3, [r2, #0]
}
 800075c:	bf00      	nop
 800075e:	46bd      	mov	sp, r7
 8000760:	bc80      	pop	{r7}
 8000762:	4770      	bx	lr
 8000764:	40023800 	.word	0x40023800
 8000768:	40020000 	.word	0x40020000

0800076c <button_init>:
	/* Set the Pin Low */
	GPIOA->ODR &= (GPIO_DISABLE);
}

void button_init(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= GPIOCEN;
 8000770:	4b0a      	ldr	r3, [pc, #40]	; (800079c <button_init+0x30>)
 8000772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000774:	4a09      	ldr	r2, [pc, #36]	; (800079c <button_init+0x30>)
 8000776:	f043 0304 	orr.w	r3, r3, #4
 800077a:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOC->MODER &=  ~(1<<26);
 800077c:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <button_init+0x34>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a07      	ldr	r2, [pc, #28]	; (80007a0 <button_init+0x34>)
 8000782:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8000786:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &=  ~(1<<27);
 8000788:	4b05      	ldr	r3, [pc, #20]	; (80007a0 <button_init+0x34>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a04      	ldr	r2, [pc, #16]	; (80007a0 <button_init+0x34>)
 800078e:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8000792:	6013      	str	r3, [r2, #0]
}
 8000794:	bf00      	nop
 8000796:	46bd      	mov	sp, r7
 8000798:	bc80      	pop	{r7}
 800079a:	4770      	bx	lr
 800079c:	40023800 	.word	0x40023800
 80007a0:	40020800 	.word	0x40020800

080007a4 <fpu_enable>:

#include "fpu.h"


void fpu_enable(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
	/* Enable Floating Point Unit: Enable CP10 and CP11 Full Access! */
	 SCB->CPACR |= (1<<20);
 80007a8:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <fpu_enable+0x4c>)
 80007aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007ae:	4a10      	ldr	r2, [pc, #64]	; (80007f0 <fpu_enable+0x4c>)
 80007b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80007b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	 SCB->CPACR |= (1<<21);
 80007b8:	4b0d      	ldr	r3, [pc, #52]	; (80007f0 <fpu_enable+0x4c>)
 80007ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007be:	4a0c      	ldr	r2, [pc, #48]	; (80007f0 <fpu_enable+0x4c>)
 80007c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	 SCB->CPACR |= (1<<22);
 80007c8:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <fpu_enable+0x4c>)
 80007ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007ce:	4a08      	ldr	r2, [pc, #32]	; (80007f0 <fpu_enable+0x4c>)
 80007d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	 SCB->CPACR |= (1<<23);
 80007d8:	4b05      	ldr	r3, [pc, #20]	; (80007f0 <fpu_enable+0x4c>)
 80007da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007de:	4a04      	ldr	r2, [pc, #16]	; (80007f0 <fpu_enable+0x4c>)
 80007e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80007e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 80007e8:	bf00      	nop
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bc80      	pop	{r7}
 80007ee:	4770      	bx	lr
 80007f0:	e000ed00 	.word	0xe000ed00

080007f4 <main>:
static uint16_t decrypted_sensor;
static uint16_t sensor_val = 2726;
uint16_t Key = 100;

int main(void)
{
 80007f4:	b5b0      	push	{r4, r5, r7, lr}
 80007f6:	b098      	sub	sp, #96	; 0x60
 80007f8:	af00      	add	r7, sp, #0
	/* Enable FPU */
	fpu_enable();
 80007fa:	f7ff ffd3 	bl	80007a4 <fpu_enable>
    /* initialize UART */
	uart_init();
 80007fe:	f000 f9f3 	bl	8000be8 <uart_init>
	/* Initialize timer */
	timer_init();
 8000802:	f000 f9c5 	bl	8000b90 <timer_init>
    /* Initialize button and led */
	led_init();
 8000806:	f7ff ff95 	bl	8000734 <led_init>
    /* Initialize the button */
	button_init();
 800080a:	f7ff ffaf 	bl	800076c <button_init>
	/* Initialize the ADC module */
	pa1_adc_init();
 800080e:	f7ff ff4d 	bl	80006ac <pa1_adc_init>
    /* Start the conversion */
	startadc_conversion();
 8000812:	f7ff ff7b 	bl	800070c <startadc_conversion>

	printf("Testing the Ceasar's Module!\r\n");
 8000816:	4874      	ldr	r0, [pc, #464]	; (80009e8 <main+0x1f4>)
 8000818:	f000 fbde 	bl	8000fd8 <puts>
	char plain_text[] = "HELLO";
 800081c:	4a73      	ldr	r2, [pc, #460]	; (80009ec <main+0x1f8>)
 800081e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000822:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000826:	6018      	str	r0, [r3, #0]
 8000828:	3304      	adds	r3, #4
 800082a:	8019      	strh	r1, [r3, #0]
	char encrypted_testtext[] = "KHOOR";
 800082c:	4a70      	ldr	r2, [pc, #448]	; (80009f0 <main+0x1fc>)
 800082e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000832:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000836:	6018      	str	r0, [r3, #0]
 8000838:	3304      	adds	r3, #4
 800083a:	8019      	strh	r1, [r3, #0]
	char plain_text_mono[] = "MONO HELLO!";
 800083c:	4a6d      	ldr	r2, [pc, #436]	; (80009f4 <main+0x200>)
 800083e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000842:	ca07      	ldmia	r2, {r0, r1, r2}
 8000844:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	char key_mono[] = "DFGHIJKLMNOPQRSTUVWXYZABCETSMN";
 8000848:	4b6b      	ldr	r3, [pc, #428]	; (80009f8 <main+0x204>)
 800084a:	1d3c      	adds	r4, r7, #4
 800084c:	461d      	mov	r5, r3
 800084e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000850:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000852:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000856:	c407      	stmia	r4!, {r0, r1, r2}
 8000858:	8023      	strh	r3, [r4, #0]
 800085a:	3402      	adds	r4, #2
 800085c:	0c1b      	lsrs	r3, r3, #16
 800085e:	7023      	strb	r3, [r4, #0]
	uint8_t key = 3;
 8000860:	2303      	movs	r3, #3
 8000862:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint32_t length = (uint32_t)strlen(plain_text);
 8000866:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800086a:	4618      	mov	r0, r3
 800086c:	f7ff fcd0 	bl	8000210 <strlen>
 8000870:	6538      	str	r0, [r7, #80]	; 0x50
	char* encrypted_data = (char *)calloc(length+1,sizeof(char));
 8000872:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000874:	3301      	adds	r3, #1
 8000876:	2101      	movs	r1, #1
 8000878:	4618      	mov	r0, r3
 800087a:	f000 fa71 	bl	8000d60 <calloc>
 800087e:	4603      	mov	r3, r0
 8000880:	64fb      	str	r3, [r7, #76]	; 0x4c
    char* decrypted_Data = (char *)calloc(length+1,sizeof(char));
 8000882:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000884:	3301      	adds	r3, #1
 8000886:	2101      	movs	r1, #1
 8000888:	4618      	mov	r0, r3
 800088a:	f000 fa69 	bl	8000d60 <calloc>
 800088e:	4603      	mov	r3, r0
 8000890:	64bb      	str	r3, [r7, #72]	; 0x48
    char* encryptedtext_mono = (char*)calloc(strlen(plain_text_mono)+1, sizeof(char));
 8000892:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000896:	4618      	mov	r0, r3
 8000898:	f7ff fcba 	bl	8000210 <strlen>
 800089c:	4603      	mov	r3, r0
 800089e:	3301      	adds	r3, #1
 80008a0:	2101      	movs	r1, #1
 80008a2:	4618      	mov	r0, r3
 80008a4:	f000 fa5c 	bl	8000d60 <calloc>
 80008a8:	4603      	mov	r3, r0
 80008aa:	647b      	str	r3, [r7, #68]	; 0x44
    char* decryptedtext_mono = (char*)calloc(strlen(plain_text_mono)+1, sizeof(char));
 80008ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008b0:	4618      	mov	r0, r3
 80008b2:	f7ff fcad 	bl	8000210 <strlen>
 80008b6:	4603      	mov	r3, r0
 80008b8:	3301      	adds	r3, #1
 80008ba:	2101      	movs	r1, #1
 80008bc:	4618      	mov	r0, r3
 80008be:	f000 fa4f 	bl	8000d60 <calloc>
 80008c2:	4603      	mov	r3, r0
 80008c4:	643b      	str	r3, [r7, #64]	; 0x40
	printf("The length of the plain_text = %lu \r\n",length);
 80008c6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80008c8:	484c      	ldr	r0, [pc, #304]	; (80009fc <main+0x208>)
 80008ca:	f000 faeb 	bl	8000ea4 <iprintf>

	for(int i = 0 ; i < length; i++)
 80008ce:	2300      	movs	r3, #0
 80008d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80008d2:	e00a      	b.n	80008ea <main+0xf6>
	{
		printf("%c",plain_text[i]);
 80008d4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80008d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80008da:	4413      	add	r3, r2
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	4618      	mov	r0, r3
 80008e0:	f000 faf8 	bl	8000ed4 <putchar>
	for(int i = 0 ; i < length; i++)
 80008e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80008e6:	3301      	adds	r3, #1
 80008e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80008ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80008ec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80008ee:	429a      	cmp	r2, r3
 80008f0:	d8f0      	bhi.n	80008d4 <main+0xe0>
	}

	ceasar_encrypt(plain_text, key, encrypted_data, length);
 80008f2:	f897 1057 	ldrb.w	r1, [r7, #87]	; 0x57
 80008f6:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80008fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80008fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80008fe:	f7ff fd93 	bl	8000428 <ceasar_encrypt>

	printf("\r\n Encrypted Data is:\r\n");
 8000902:	483f      	ldr	r0, [pc, #252]	; (8000a00 <main+0x20c>)
 8000904:	f000 fb68 	bl	8000fd8 <puts>
	puts(encrypted_data);
 8000908:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800090a:	f000 fb65 	bl	8000fd8 <puts>
    printf("Decrypting now\r\n");
 800090e:	483d      	ldr	r0, [pc, #244]	; (8000a04 <main+0x210>)
 8000910:	f000 fb62 	bl	8000fd8 <puts>
    ceasar_decrypt(encrypted_data,key,decrypted_Data,length);
 8000914:	f897 1057 	ldrb.w	r1, [r7, #87]	; 0x57
 8000918:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800091a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800091c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800091e:	f7ff fddf 	bl	80004e0 <ceasar_decrypt>
    printf("\r\n Decrypted Data is:\r\n");
 8000922:	4839      	ldr	r0, [pc, #228]	; (8000a08 <main+0x214>)
 8000924:	f000 fb58 	bl	8000fd8 <puts>
    puts(decrypted_Data);
 8000928:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800092a:	f000 fb55 	bl	8000fd8 <puts>

    encrypted_sensor = encrypt_Ceasar_cipher(sensor_val,Key);
 800092e:	4b37      	ldr	r3, [pc, #220]	; (8000a0c <main+0x218>)
 8000930:	881b      	ldrh	r3, [r3, #0]
 8000932:	4a37      	ldr	r2, [pc, #220]	; (8000a10 <main+0x21c>)
 8000934:	8812      	ldrh	r2, [r2, #0]
 8000936:	4611      	mov	r1, r2
 8000938:	4618      	mov	r0, r3
 800093a:	f7ff fe2f 	bl	800059c <encrypt_Ceasar_cipher>
 800093e:	4603      	mov	r3, r0
 8000940:	461a      	mov	r2, r3
 8000942:	4b34      	ldr	r3, [pc, #208]	; (8000a14 <main+0x220>)
 8000944:	801a      	strh	r2, [r3, #0]
    printf("\r\n Encrypted Value of Sensor %u \r\n",encrypted_sensor);
 8000946:	4b33      	ldr	r3, [pc, #204]	; (8000a14 <main+0x220>)
 8000948:	881b      	ldrh	r3, [r3, #0]
 800094a:	4619      	mov	r1, r3
 800094c:	4832      	ldr	r0, [pc, #200]	; (8000a18 <main+0x224>)
 800094e:	f000 faa9 	bl	8000ea4 <iprintf>
    decrypted_sensor = decrypt_Ceasar_cipher(encrypted_sensor, Key);
 8000952:	4b30      	ldr	r3, [pc, #192]	; (8000a14 <main+0x220>)
 8000954:	881b      	ldrh	r3, [r3, #0]
 8000956:	4a2e      	ldr	r2, [pc, #184]	; (8000a10 <main+0x21c>)
 8000958:	8812      	ldrh	r2, [r2, #0]
 800095a:	4611      	mov	r1, r2
 800095c:	4618      	mov	r0, r3
 800095e:	f7ff fe2e 	bl	80005be <decrypt_Ceasar_cipher>
 8000962:	4603      	mov	r3, r0
 8000964:	461a      	mov	r2, r3
 8000966:	4b2d      	ldr	r3, [pc, #180]	; (8000a1c <main+0x228>)
 8000968:	801a      	strh	r2, [r3, #0]
    printf("\r\n Decrypted Value of Sensor %u \r\n",decrypted_sensor);
 800096a:	4b2c      	ldr	r3, [pc, #176]	; (8000a1c <main+0x228>)
 800096c:	881b      	ldrh	r3, [r3, #0]
 800096e:	4619      	mov	r1, r3
 8000970:	482b      	ldr	r0, [pc, #172]	; (8000a20 <main+0x22c>)
 8000972:	f000 fa97 	bl	8000ea4 <iprintf>

    printf("HACKING THE CEASARS TEXT!\r\n");
 8000976:	482b      	ldr	r0, [pc, #172]	; (8000a24 <main+0x230>)
 8000978:	f000 fb2e 	bl	8000fd8 <puts>
    for(int i = 0 ; i <= 25 ; i++)
 800097c:	2300      	movs	r3, #0
 800097e:	65bb      	str	r3, [r7, #88]	; 0x58
 8000980:	e00e      	b.n	80009a0 <main+0x1ac>
    {
    	printf("Key Value: %d \r\n",i);
 8000982:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8000984:	4828      	ldr	r0, [pc, #160]	; (8000a28 <main+0x234>)
 8000986:	f000 fa8d 	bl	8000ea4 <iprintf>
    	ceasar_decrypt_hack(encrypted_testtext,i);
 800098a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800098c:	b2da      	uxtb	r2, r3
 800098e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000992:	4611      	mov	r1, r2
 8000994:	4618      	mov	r0, r3
 8000996:	f7ff fe23 	bl	80005e0 <ceasar_decrypt_hack>
    for(int i = 0 ; i <= 25 ; i++)
 800099a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800099c:	3301      	adds	r3, #1
 800099e:	65bb      	str	r3, [r7, #88]	; 0x58
 80009a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80009a2:	2b19      	cmp	r3, #25
 80009a4:	dded      	ble.n	8000982 <main+0x18e>
    }

    printf("\r\n Now Start with Mono-alphabetic Encryption\r\n");
 80009a6:	4821      	ldr	r0, [pc, #132]	; (8000a2c <main+0x238>)
 80009a8:	f000 fb16 	bl	8000fd8 <puts>
    puts(plain_text_mono);
 80009ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b0:	4618      	mov	r0, r3
 80009b2:	f000 fb11 	bl	8000fd8 <puts>
    encrypt_monoalphabetic(plain_text_mono, key_mono, encryptedtext_mono);
 80009b6:	1d39      	adds	r1, r7, #4
 80009b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80009be:	4618      	mov	r0, r3
 80009c0:	f7ff fc7e 	bl	80002c0 <encrypt_monoalphabetic>
    printf("\r\n Decryption Starts..\r\n");
 80009c4:	481a      	ldr	r0, [pc, #104]	; (8000a30 <main+0x23c>)
 80009c6:	f000 fb07 	bl	8000fd8 <puts>
    decrypt_monoalphabetic(encryptedtext_mono,key_mono, decryptedtext_mono);
 80009ca:	1d3b      	adds	r3, r7, #4
 80009cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80009ce:	4619      	mov	r1, r3
 80009d0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80009d2:	f7ff fcbe 	bl	8000352 <decrypt_monoalphabetic>
    puts(decryptedtext_mono);
 80009d6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80009d8:	f000 fafe 	bl	8000fd8 <puts>
 80009dc:	2300      	movs	r3, #0

}
 80009de:	4618      	mov	r0, r3
 80009e0:	3760      	adds	r7, #96	; 0x60
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bdb0      	pop	{r4, r5, r7, pc}
 80009e6:	bf00      	nop
 80009e8:	08001eb8 	.word	0x08001eb8
 80009ec:	08002000 	.word	0x08002000
 80009f0:	08002008 	.word	0x08002008
 80009f4:	08002010 	.word	0x08002010
 80009f8:	0800201c 	.word	0x0800201c
 80009fc:	08001ed8 	.word	0x08001ed8
 8000a00:	08001f00 	.word	0x08001f00
 8000a04:	08001f18 	.word	0x08001f18
 8000a08:	08001f28 	.word	0x08001f28
 8000a0c:	20000000 	.word	0x20000000
 8000a10:	20000002 	.word	0x20000002
 8000a14:	20000084 	.word	0x20000084
 8000a18:	08001f40 	.word	0x08001f40
 8000a1c:	20000086 	.word	0x20000086
 8000a20:	08001f64 	.word	0x08001f64
 8000a24:	08001f88 	.word	0x08001f88
 8000a28:	08001fa4 	.word	0x08001fa4
 8000a2c:	08001fb8 	.word	0x08001fb8
 8000a30:	08001fe8 	.word	0x08001fe8

08000a34 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b086      	sub	sp, #24
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	60f8      	str	r0, [r7, #12]
 8000a3c:	60b9      	str	r1, [r7, #8]
 8000a3e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a40:	2300      	movs	r3, #0
 8000a42:	617b      	str	r3, [r7, #20]
 8000a44:	e00a      	b.n	8000a5c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a46:	f3af 8000 	nop.w
 8000a4a:	4601      	mov	r1, r0
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	1c5a      	adds	r2, r3, #1
 8000a50:	60ba      	str	r2, [r7, #8]
 8000a52:	b2ca      	uxtb	r2, r1
 8000a54:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a56:	697b      	ldr	r3, [r7, #20]
 8000a58:	3301      	adds	r3, #1
 8000a5a:	617b      	str	r3, [r7, #20]
 8000a5c:	697a      	ldr	r2, [r7, #20]
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	429a      	cmp	r2, r3
 8000a62:	dbf0      	blt.n	8000a46 <_read+0x12>
	}

return len;
 8000a64:	687b      	ldr	r3, [r7, #4]
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3718      	adds	r7, #24
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	b086      	sub	sp, #24
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	60f8      	str	r0, [r7, #12]
 8000a76:	60b9      	str	r1, [r7, #8]
 8000a78:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	617b      	str	r3, [r7, #20]
 8000a7e:	e009      	b.n	8000a94 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	1c5a      	adds	r2, r3, #1
 8000a84:	60ba      	str	r2, [r7, #8]
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f000 f91d 	bl	8000cc8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	3301      	adds	r3, #1
 8000a92:	617b      	str	r3, [r7, #20]
 8000a94:	697a      	ldr	r2, [r7, #20]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	dbf1      	blt.n	8000a80 <_write+0x12>
	}
	return len;
 8000a9c:	687b      	ldr	r3, [r7, #4]
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3718      	adds	r7, #24
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}

08000aa6 <_close>:

int _close(int file)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	b083      	sub	sp, #12
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	6078      	str	r0, [r7, #4]
	return -1;
 8000aae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	370c      	adds	r7, #12
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bc80      	pop	{r7}
 8000aba:	4770      	bx	lr

08000abc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000acc:	605a      	str	r2, [r3, #4]
	return 0;
 8000ace:	2300      	movs	r3, #0
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	370c      	adds	r7, #12
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bc80      	pop	{r7}
 8000ad8:	4770      	bx	lr

08000ada <_isatty>:

int _isatty(int file)
{
 8000ada:	b480      	push	{r7}
 8000adc:	b083      	sub	sp, #12
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	6078      	str	r0, [r7, #4]
	return 1;
 8000ae2:	2301      	movs	r3, #1
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	370c      	adds	r7, #12
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bc80      	pop	{r7}
 8000aec:	4770      	bx	lr

08000aee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000aee:	b480      	push	{r7}
 8000af0:	b085      	sub	sp, #20
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	60f8      	str	r0, [r7, #12]
 8000af6:	60b9      	str	r1, [r7, #8]
 8000af8:	607a      	str	r2, [r7, #4]
	return 0;
 8000afa:	2300      	movs	r3, #0
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	3714      	adds	r7, #20
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bc80      	pop	{r7}
 8000b04:	4770      	bx	lr
	...

08000b08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b086      	sub	sp, #24
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b10:	4a14      	ldr	r2, [pc, #80]	; (8000b64 <_sbrk+0x5c>)
 8000b12:	4b15      	ldr	r3, [pc, #84]	; (8000b68 <_sbrk+0x60>)
 8000b14:	1ad3      	subs	r3, r2, r3
 8000b16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b1c:	4b13      	ldr	r3, [pc, #76]	; (8000b6c <_sbrk+0x64>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d102      	bne.n	8000b2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b24:	4b11      	ldr	r3, [pc, #68]	; (8000b6c <_sbrk+0x64>)
 8000b26:	4a12      	ldr	r2, [pc, #72]	; (8000b70 <_sbrk+0x68>)
 8000b28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b2a:	4b10      	ldr	r3, [pc, #64]	; (8000b6c <_sbrk+0x64>)
 8000b2c:	681a      	ldr	r2, [r3, #0]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	4413      	add	r3, r2
 8000b32:	693a      	ldr	r2, [r7, #16]
 8000b34:	429a      	cmp	r2, r3
 8000b36:	d207      	bcs.n	8000b48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b38:	f000 f91a 	bl	8000d70 <__errno>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	220c      	movs	r2, #12
 8000b40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b42:	f04f 33ff 	mov.w	r3, #4294967295
 8000b46:	e009      	b.n	8000b5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b48:	4b08      	ldr	r3, [pc, #32]	; (8000b6c <_sbrk+0x64>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b4e:	4b07      	ldr	r3, [pc, #28]	; (8000b6c <_sbrk+0x64>)
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	4413      	add	r3, r2
 8000b56:	4a05      	ldr	r2, [pc, #20]	; (8000b6c <_sbrk+0x64>)
 8000b58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b5a:	68fb      	ldr	r3, [r7, #12]
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3718      	adds	r7, #24
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	20020000 	.word	0x20020000
 8000b68:	00000400 	.word	0x00000400
 8000b6c:	20000088 	.word	0x20000088
 8000b70:	200000b0 	.word	0x200000b0

08000b74 <tick_increment>:
	__enable_irq();
	return current_tick_p;
}

static void tick_increment(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
	current_tick += TICK_FREQ;
 8000b78:	4b04      	ldr	r3, [pc, #16]	; (8000b8c <tick_increment+0x18>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	4a03      	ldr	r2, [pc, #12]	; (8000b8c <tick_increment+0x18>)
 8000b80:	6013      	str	r3, [r2, #0]
}
 8000b82:	bf00      	nop
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bc80      	pop	{r7}
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	20000094 	.word	0x20000094

08000b90 <timer_init>:

void timer_init(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b94:	b672      	cpsid	i
}
 8000b96:	bf00      	nop
	/* Disable the  global interrupt during the running of this timer service */
	__disable_irq();
	/* Load the timer with number of clock cycles per second ; generate a tick each second */
	SysTick->LOAD = ONE_SEC_LOAD-ONE;
 8000b98:	4b0e      	ldr	r3, [pc, #56]	; (8000bd4 <timer_init+0x44>)
 8000b9a:	4a0f      	ldr	r2, [pc, #60]	; (8000bd8 <timer_init+0x48>)
 8000b9c:	605a      	str	r2, [r3, #4]
	/* Clear the systick current value register */
	SysTick->VAL  = 0;
 8000b9e:	4b0d      	ldr	r3, [pc, #52]	; (8000bd4 <timer_init+0x44>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	609a      	str	r2, [r3, #8]
	/* Select Internal Clock Source */
	SysTick->CTRL |= CTRL_CLKSRC;
 8000ba4:	4b0b      	ldr	r3, [pc, #44]	; (8000bd4 <timer_init+0x44>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a0a      	ldr	r2, [pc, #40]	; (8000bd4 <timer_init+0x44>)
 8000baa:	f043 0304 	orr.w	r3, r3, #4
 8000bae:	6013      	str	r3, [r2, #0]
	/* Enable Interrupt */
	SysTick->CTRL |= CTRL_TICKINIT;
 8000bb0:	4b08      	ldr	r3, [pc, #32]	; (8000bd4 <timer_init+0x44>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a07      	ldr	r2, [pc, #28]	; (8000bd4 <timer_init+0x44>)
 8000bb6:	f043 0302 	orr.w	r3, r3, #2
 8000bba:	6013      	str	r3, [r2, #0]
	/* Enable systick */
	SysTick->CTRL |= CTRL_ENABLE;
 8000bbc:	4b05      	ldr	r3, [pc, #20]	; (8000bd4 <timer_init+0x44>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a04      	ldr	r2, [pc, #16]	; (8000bd4 <timer_init+0x44>)
 8000bc2:	f043 0301 	orr.w	r3, r3, #1
 8000bc6:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000bc8:	b662      	cpsie	i
}
 8000bca:	bf00      	nop
	/* Enable Global Interrupt */
	__enable_irq();
}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bc80      	pop	{r7}
 8000bd2:	4770      	bx	lr
 8000bd4:	e000e010 	.word	0xe000e010
 8000bd8:	00f423ff 	.word	0x00f423ff

08000bdc <SysTick_Handler>:


void SysTick_Handler(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
	tick_increment();
 8000be0:	f7ff ffc8 	bl	8000b74 <tick_increment>
}
 8000be4:	bf00      	nop
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <uart_init>:
 static uint16_t compute_uart_bd(uint32_t periph_clk, uint32_t baudrate);
 static void uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate);


 void uart_init(void)
 {
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
		  Configure Transfer Direction
		  Enable the UART module
	 */

	 /* Enable Clock Access to GPIOA */
	 RCC->AHB1ENR  |= GPIOA_EN;
 8000bec:	4b1f      	ldr	r3, [pc, #124]	; (8000c6c <uart_init+0x84>)
 8000bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf0:	4a1e      	ldr	r2, [pc, #120]	; (8000c6c <uart_init+0x84>)
 8000bf2:	f043 0301 	orr.w	r3, r3, #1
 8000bf6:	6313      	str	r3, [r2, #48]	; 0x30
	 /* Set the mode of PA2 to alternate Function mode*/
	 GPIOA->MODER &= ~(GPIOA_AF_PIN4);
 8000bf8:	4b1d      	ldr	r3, [pc, #116]	; (8000c70 <uart_init+0x88>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a1c      	ldr	r2, [pc, #112]	; (8000c70 <uart_init+0x88>)
 8000bfe:	f023 0310 	bic.w	r3, r3, #16
 8000c02:	6013      	str	r3, [r2, #0]
	 GPIOA->MODER |=  GPIOA_AF_PIN5;
 8000c04:	4b1a      	ldr	r3, [pc, #104]	; (8000c70 <uart_init+0x88>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a19      	ldr	r2, [pc, #100]	; (8000c70 <uart_init+0x88>)
 8000c0a:	f043 0320 	orr.w	r3, r3, #32
 8000c0e:	6013      	str	r3, [r2, #0]

	 /* Set the Alternate Function to AF7(Uart2_tx); set it according to the datasheet!  */
	 GPIOA->AFR[0] |= (GPIOA_AFR_PIN8);
 8000c10:	4b17      	ldr	r3, [pc, #92]	; (8000c70 <uart_init+0x88>)
 8000c12:	6a1b      	ldr	r3, [r3, #32]
 8000c14:	4a16      	ldr	r2, [pc, #88]	; (8000c70 <uart_init+0x88>)
 8000c16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c1a:	6213      	str	r3, [r2, #32]
	 GPIOA->AFR[0] |= (GPIOA_AFR_PIN9);
 8000c1c:	4b14      	ldr	r3, [pc, #80]	; (8000c70 <uart_init+0x88>)
 8000c1e:	6a1b      	ldr	r3, [r3, #32]
 8000c20:	4a13      	ldr	r2, [pc, #76]	; (8000c70 <uart_init+0x88>)
 8000c22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c26:	6213      	str	r3, [r2, #32]
	 GPIOA->AFR[0] |= (GPIOA_AFR_PIN10);
 8000c28:	4b11      	ldr	r3, [pc, #68]	; (8000c70 <uart_init+0x88>)
 8000c2a:	6a1b      	ldr	r3, [r3, #32]
 8000c2c:	4a10      	ldr	r2, [pc, #64]	; (8000c70 <uart_init+0x88>)
 8000c2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c32:	6213      	str	r3, [r2, #32]
	 GPIOA->AFR[0] &= ~(GPIOA_AFR_PIN11);
 8000c34:	4b0e      	ldr	r3, [pc, #56]	; (8000c70 <uart_init+0x88>)
 8000c36:	6a1b      	ldr	r3, [r3, #32]
 8000c38:	4a0d      	ldr	r2, [pc, #52]	; (8000c70 <uart_init+0x88>)
 8000c3a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000c3e:	6213      	str	r3, [r2, #32]

	 /* Enable Clock access to UART 2 */
     RCC->APB1ENR |= UART2EN;
 8000c40:	4b0a      	ldr	r3, [pc, #40]	; (8000c6c <uart_init+0x84>)
 8000c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c44:	4a09      	ldr	r2, [pc, #36]	; (8000c6c <uart_init+0x84>)
 8000c46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c4a:	6413      	str	r3, [r2, #64]	; 0x40
	 /* Configure Baud Rate */
     uart_set_baudrate(APB1_CLK, UART_BAUDRATE);
 8000c4c:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000c50:	4808      	ldr	r0, [pc, #32]	; (8000c74 <uart_init+0x8c>)
 8000c52:	f000 f825 	bl	8000ca0 <uart_set_baudrate>
     /* Configure Transfer Direction */
     USART2->CR1 = CR1_TE;
 8000c56:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <uart_init+0x90>)
 8000c58:	2208      	movs	r2, #8
 8000c5a:	60da      	str	r2, [r3, #12]
     /* Enable the UART module */
     USART2->CR1 |= CR1_UE;
 8000c5c:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <uart_init+0x90>)
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	4a05      	ldr	r2, [pc, #20]	; (8000c78 <uart_init+0x90>)
 8000c62:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c66:	60d3      	str	r3, [r2, #12]

 }
 8000c68:	bf00      	nop
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	40023800 	.word	0x40023800
 8000c70:	40020000 	.word	0x40020000
 8000c74:	00f42400 	.word	0x00f42400
 8000c78:	40004400 	.word	0x40004400

08000c7c <compute_uart_bd>:

 static uint16_t compute_uart_bd(uint32_t periph_clk, uint32_t baudrate)
 {
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
 8000c84:	6039      	str	r1, [r7, #0]
	 return ((periph_clk + (baudrate/2U))/baudrate);
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	085a      	lsrs	r2, r3, #1
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	441a      	add	r2, r3
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c94:	b29b      	uxth	r3, r3
 }
 8000c96:	4618      	mov	r0, r3
 8000c98:	370c      	adds	r7, #12
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bc80      	pop	{r7}
 8000c9e:	4770      	bx	lr

08000ca0 <uart_set_baudrate>:

 static void uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate)
 {
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	6039      	str	r1, [r7, #0]
	 USART2->BRR = compute_uart_bd(periph_clk,baudrate);
 8000caa:	6839      	ldr	r1, [r7, #0]
 8000cac:	6878      	ldr	r0, [r7, #4]
 8000cae:	f7ff ffe5 	bl	8000c7c <compute_uart_bd>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	4b03      	ldr	r3, [pc, #12]	; (8000cc4 <uart_set_baudrate+0x24>)
 8000cb8:	609a      	str	r2, [r3, #8]
 }
 8000cba:	bf00      	nop
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40004400 	.word	0x40004400

08000cc8 <__io_putchar>:

 int __io_putchar(int ch)
 {
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
 	uart_write(ch);
 8000cd0:	6878      	ldr	r0, [r7, #4]
 8000cd2:	f000 f805 	bl	8000ce0 <uart_write>
 	return ch;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 }
 8000cd8:	4618      	mov	r0, r3
 8000cda:	3708      	adds	r7, #8
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <uart_write>:

void uart_write(int ch)
 {
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
	 /* Ensure transmit data register is empty before new data can be loaded */
    while(!(USART2->SR & SR_TXE));
 8000ce8:	bf00      	nop
 8000cea:	4b07      	ldr	r3, [pc, #28]	; (8000d08 <uart_write+0x28>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d0f9      	beq.n	8000cea <uart_write+0xa>
    USART2->DR = (ch & 0xFF);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4a03      	ldr	r2, [pc, #12]	; (8000d08 <uart_write+0x28>)
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	6053      	str	r3, [r2, #4]
 }
 8000cfe:	bf00      	nop
 8000d00:	370c      	adds	r7, #12
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bc80      	pop	{r7}
 8000d06:	4770      	bx	lr
 8000d08:	40004400 	.word	0x40004400

08000d0c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d0c:	480d      	ldr	r0, [pc, #52]	; (8000d44 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d0e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d10:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d14:	480c      	ldr	r0, [pc, #48]	; (8000d48 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d16:	490d      	ldr	r1, [pc, #52]	; (8000d4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d18:	4a0d      	ldr	r2, [pc, #52]	; (8000d50 <LoopForever+0xe>)
  movs r3, #0
 8000d1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d1c:	e002      	b.n	8000d24 <LoopCopyDataInit>

08000d1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d22:	3304      	adds	r3, #4

08000d24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d28:	d3f9      	bcc.n	8000d1e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d2a:	4a0a      	ldr	r2, [pc, #40]	; (8000d54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d2c:	4c0a      	ldr	r4, [pc, #40]	; (8000d58 <LoopForever+0x16>)
  movs r3, #0
 8000d2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d30:	e001      	b.n	8000d36 <LoopFillZerobss>

08000d32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d34:	3204      	adds	r2, #4

08000d36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d38:	d3fb      	bcc.n	8000d32 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d3a:	f000 f81f 	bl	8000d7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d3e:	f7ff fd59 	bl	80007f4 <main>

08000d42 <LoopForever>:

LoopForever:
    b LoopForever
 8000d42:	e7fe      	b.n	8000d42 <LoopForever>
  ldr   r0, =_estack
 8000d44:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d4c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000d50:	080020dc 	.word	0x080020dc
  ldr r2, =_sbss
 8000d54:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000d58:	200000ac 	.word	0x200000ac

08000d5c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d5c:	e7fe      	b.n	8000d5c <ADC_IRQHandler>
	...

08000d60 <calloc>:
 8000d60:	4b02      	ldr	r3, [pc, #8]	; (8000d6c <calloc+0xc>)
 8000d62:	460a      	mov	r2, r1
 8000d64:	4601      	mov	r1, r0
 8000d66:	6818      	ldr	r0, [r3, #0]
 8000d68:	f000 b834 	b.w	8000dd4 <_calloc_r>
 8000d6c:	20000004 	.word	0x20000004

08000d70 <__errno>:
 8000d70:	4b01      	ldr	r3, [pc, #4]	; (8000d78 <__errno+0x8>)
 8000d72:	6818      	ldr	r0, [r3, #0]
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	20000004 	.word	0x20000004

08000d7c <__libc_init_array>:
 8000d7c:	b570      	push	{r4, r5, r6, lr}
 8000d7e:	4d0d      	ldr	r5, [pc, #52]	; (8000db4 <__libc_init_array+0x38>)
 8000d80:	4c0d      	ldr	r4, [pc, #52]	; (8000db8 <__libc_init_array+0x3c>)
 8000d82:	1b64      	subs	r4, r4, r5
 8000d84:	10a4      	asrs	r4, r4, #2
 8000d86:	2600      	movs	r6, #0
 8000d88:	42a6      	cmp	r6, r4
 8000d8a:	d109      	bne.n	8000da0 <__libc_init_array+0x24>
 8000d8c:	4d0b      	ldr	r5, [pc, #44]	; (8000dbc <__libc_init_array+0x40>)
 8000d8e:	4c0c      	ldr	r4, [pc, #48]	; (8000dc0 <__libc_init_array+0x44>)
 8000d90:	f001 f852 	bl	8001e38 <_init>
 8000d94:	1b64      	subs	r4, r4, r5
 8000d96:	10a4      	asrs	r4, r4, #2
 8000d98:	2600      	movs	r6, #0
 8000d9a:	42a6      	cmp	r6, r4
 8000d9c:	d105      	bne.n	8000daa <__libc_init_array+0x2e>
 8000d9e:	bd70      	pop	{r4, r5, r6, pc}
 8000da0:	f855 3b04 	ldr.w	r3, [r5], #4
 8000da4:	4798      	blx	r3
 8000da6:	3601      	adds	r6, #1
 8000da8:	e7ee      	b.n	8000d88 <__libc_init_array+0xc>
 8000daa:	f855 3b04 	ldr.w	r3, [r5], #4
 8000dae:	4798      	blx	r3
 8000db0:	3601      	adds	r6, #1
 8000db2:	e7f2      	b.n	8000d9a <__libc_init_array+0x1e>
 8000db4:	080020d4 	.word	0x080020d4
 8000db8:	080020d4 	.word	0x080020d4
 8000dbc:	080020d4 	.word	0x080020d4
 8000dc0:	080020d8 	.word	0x080020d8

08000dc4 <memset>:
 8000dc4:	4402      	add	r2, r0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d100      	bne.n	8000dce <memset+0xa>
 8000dcc:	4770      	bx	lr
 8000dce:	f803 1b01 	strb.w	r1, [r3], #1
 8000dd2:	e7f9      	b.n	8000dc8 <memset+0x4>

08000dd4 <_calloc_r>:
 8000dd4:	b538      	push	{r3, r4, r5, lr}
 8000dd6:	fb02 f501 	mul.w	r5, r2, r1
 8000dda:	4629      	mov	r1, r5
 8000ddc:	f000 f808 	bl	8000df0 <_malloc_r>
 8000de0:	4604      	mov	r4, r0
 8000de2:	b118      	cbz	r0, 8000dec <_calloc_r+0x18>
 8000de4:	462a      	mov	r2, r5
 8000de6:	2100      	movs	r1, #0
 8000de8:	f7ff ffec 	bl	8000dc4 <memset>
 8000dec:	4620      	mov	r0, r4
 8000dee:	bd38      	pop	{r3, r4, r5, pc}

08000df0 <_malloc_r>:
 8000df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000df2:	1ccd      	adds	r5, r1, #3
 8000df4:	f025 0503 	bic.w	r5, r5, #3
 8000df8:	3508      	adds	r5, #8
 8000dfa:	2d0c      	cmp	r5, #12
 8000dfc:	bf38      	it	cc
 8000dfe:	250c      	movcc	r5, #12
 8000e00:	2d00      	cmp	r5, #0
 8000e02:	4606      	mov	r6, r0
 8000e04:	db01      	blt.n	8000e0a <_malloc_r+0x1a>
 8000e06:	42a9      	cmp	r1, r5
 8000e08:	d903      	bls.n	8000e12 <_malloc_r+0x22>
 8000e0a:	230c      	movs	r3, #12
 8000e0c:	6033      	str	r3, [r6, #0]
 8000e0e:	2000      	movs	r0, #0
 8000e10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e12:	f000 fbd7 	bl	80015c4 <__malloc_lock>
 8000e16:	4921      	ldr	r1, [pc, #132]	; (8000e9c <_malloc_r+0xac>)
 8000e18:	680a      	ldr	r2, [r1, #0]
 8000e1a:	4614      	mov	r4, r2
 8000e1c:	b99c      	cbnz	r4, 8000e46 <_malloc_r+0x56>
 8000e1e:	4f20      	ldr	r7, [pc, #128]	; (8000ea0 <_malloc_r+0xb0>)
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	b923      	cbnz	r3, 8000e2e <_malloc_r+0x3e>
 8000e24:	4621      	mov	r1, r4
 8000e26:	4630      	mov	r0, r6
 8000e28:	f000 f8de 	bl	8000fe8 <_sbrk_r>
 8000e2c:	6038      	str	r0, [r7, #0]
 8000e2e:	4629      	mov	r1, r5
 8000e30:	4630      	mov	r0, r6
 8000e32:	f000 f8d9 	bl	8000fe8 <_sbrk_r>
 8000e36:	1c43      	adds	r3, r0, #1
 8000e38:	d123      	bne.n	8000e82 <_malloc_r+0x92>
 8000e3a:	230c      	movs	r3, #12
 8000e3c:	6033      	str	r3, [r6, #0]
 8000e3e:	4630      	mov	r0, r6
 8000e40:	f000 fbc6 	bl	80015d0 <__malloc_unlock>
 8000e44:	e7e3      	b.n	8000e0e <_malloc_r+0x1e>
 8000e46:	6823      	ldr	r3, [r4, #0]
 8000e48:	1b5b      	subs	r3, r3, r5
 8000e4a:	d417      	bmi.n	8000e7c <_malloc_r+0x8c>
 8000e4c:	2b0b      	cmp	r3, #11
 8000e4e:	d903      	bls.n	8000e58 <_malloc_r+0x68>
 8000e50:	6023      	str	r3, [r4, #0]
 8000e52:	441c      	add	r4, r3
 8000e54:	6025      	str	r5, [r4, #0]
 8000e56:	e004      	b.n	8000e62 <_malloc_r+0x72>
 8000e58:	6863      	ldr	r3, [r4, #4]
 8000e5a:	42a2      	cmp	r2, r4
 8000e5c:	bf0c      	ite	eq
 8000e5e:	600b      	streq	r3, [r1, #0]
 8000e60:	6053      	strne	r3, [r2, #4]
 8000e62:	4630      	mov	r0, r6
 8000e64:	f000 fbb4 	bl	80015d0 <__malloc_unlock>
 8000e68:	f104 000b 	add.w	r0, r4, #11
 8000e6c:	1d23      	adds	r3, r4, #4
 8000e6e:	f020 0007 	bic.w	r0, r0, #7
 8000e72:	1ac2      	subs	r2, r0, r3
 8000e74:	d0cc      	beq.n	8000e10 <_malloc_r+0x20>
 8000e76:	1a1b      	subs	r3, r3, r0
 8000e78:	50a3      	str	r3, [r4, r2]
 8000e7a:	e7c9      	b.n	8000e10 <_malloc_r+0x20>
 8000e7c:	4622      	mov	r2, r4
 8000e7e:	6864      	ldr	r4, [r4, #4]
 8000e80:	e7cc      	b.n	8000e1c <_malloc_r+0x2c>
 8000e82:	1cc4      	adds	r4, r0, #3
 8000e84:	f024 0403 	bic.w	r4, r4, #3
 8000e88:	42a0      	cmp	r0, r4
 8000e8a:	d0e3      	beq.n	8000e54 <_malloc_r+0x64>
 8000e8c:	1a21      	subs	r1, r4, r0
 8000e8e:	4630      	mov	r0, r6
 8000e90:	f000 f8aa 	bl	8000fe8 <_sbrk_r>
 8000e94:	3001      	adds	r0, #1
 8000e96:	d1dd      	bne.n	8000e54 <_malloc_r+0x64>
 8000e98:	e7cf      	b.n	8000e3a <_malloc_r+0x4a>
 8000e9a:	bf00      	nop
 8000e9c:	2000008c 	.word	0x2000008c
 8000ea0:	20000090 	.word	0x20000090

08000ea4 <iprintf>:
 8000ea4:	b40f      	push	{r0, r1, r2, r3}
 8000ea6:	4b0a      	ldr	r3, [pc, #40]	; (8000ed0 <iprintf+0x2c>)
 8000ea8:	b513      	push	{r0, r1, r4, lr}
 8000eaa:	681c      	ldr	r4, [r3, #0]
 8000eac:	b124      	cbz	r4, 8000eb8 <iprintf+0x14>
 8000eae:	69a3      	ldr	r3, [r4, #24]
 8000eb0:	b913      	cbnz	r3, 8000eb8 <iprintf+0x14>
 8000eb2:	4620      	mov	r0, r4
 8000eb4:	f000 fa82 	bl	80013bc <__sinit>
 8000eb8:	ab05      	add	r3, sp, #20
 8000eba:	9a04      	ldr	r2, [sp, #16]
 8000ebc:	68a1      	ldr	r1, [r4, #8]
 8000ebe:	9301      	str	r3, [sp, #4]
 8000ec0:	4620      	mov	r0, r4
 8000ec2:	f000 fc01 	bl	80016c8 <_vfiprintf_r>
 8000ec6:	b002      	add	sp, #8
 8000ec8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000ecc:	b004      	add	sp, #16
 8000ece:	4770      	bx	lr
 8000ed0:	20000004 	.word	0x20000004

08000ed4 <putchar>:
 8000ed4:	b538      	push	{r3, r4, r5, lr}
 8000ed6:	4b08      	ldr	r3, [pc, #32]	; (8000ef8 <putchar+0x24>)
 8000ed8:	681c      	ldr	r4, [r3, #0]
 8000eda:	4605      	mov	r5, r0
 8000edc:	b124      	cbz	r4, 8000ee8 <putchar+0x14>
 8000ede:	69a3      	ldr	r3, [r4, #24]
 8000ee0:	b913      	cbnz	r3, 8000ee8 <putchar+0x14>
 8000ee2:	4620      	mov	r0, r4
 8000ee4:	f000 fa6a 	bl	80013bc <__sinit>
 8000ee8:	68a2      	ldr	r2, [r4, #8]
 8000eea:	4629      	mov	r1, r5
 8000eec:	4620      	mov	r0, r4
 8000eee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ef2:	f000 bead 	b.w	8001c50 <_putc_r>
 8000ef6:	bf00      	nop
 8000ef8:	20000004 	.word	0x20000004

08000efc <_puts_r>:
 8000efc:	b570      	push	{r4, r5, r6, lr}
 8000efe:	460e      	mov	r6, r1
 8000f00:	4605      	mov	r5, r0
 8000f02:	b118      	cbz	r0, 8000f0c <_puts_r+0x10>
 8000f04:	6983      	ldr	r3, [r0, #24]
 8000f06:	b90b      	cbnz	r3, 8000f0c <_puts_r+0x10>
 8000f08:	f000 fa58 	bl	80013bc <__sinit>
 8000f0c:	69ab      	ldr	r3, [r5, #24]
 8000f0e:	68ac      	ldr	r4, [r5, #8]
 8000f10:	b913      	cbnz	r3, 8000f18 <_puts_r+0x1c>
 8000f12:	4628      	mov	r0, r5
 8000f14:	f000 fa52 	bl	80013bc <__sinit>
 8000f18:	4b2c      	ldr	r3, [pc, #176]	; (8000fcc <_puts_r+0xd0>)
 8000f1a:	429c      	cmp	r4, r3
 8000f1c:	d120      	bne.n	8000f60 <_puts_r+0x64>
 8000f1e:	686c      	ldr	r4, [r5, #4]
 8000f20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000f22:	07db      	lsls	r3, r3, #31
 8000f24:	d405      	bmi.n	8000f32 <_puts_r+0x36>
 8000f26:	89a3      	ldrh	r3, [r4, #12]
 8000f28:	0598      	lsls	r0, r3, #22
 8000f2a:	d402      	bmi.n	8000f32 <_puts_r+0x36>
 8000f2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000f2e:	f000 fae3 	bl	80014f8 <__retarget_lock_acquire_recursive>
 8000f32:	89a3      	ldrh	r3, [r4, #12]
 8000f34:	0719      	lsls	r1, r3, #28
 8000f36:	d51d      	bpl.n	8000f74 <_puts_r+0x78>
 8000f38:	6923      	ldr	r3, [r4, #16]
 8000f3a:	b1db      	cbz	r3, 8000f74 <_puts_r+0x78>
 8000f3c:	3e01      	subs	r6, #1
 8000f3e:	68a3      	ldr	r3, [r4, #8]
 8000f40:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000f44:	3b01      	subs	r3, #1
 8000f46:	60a3      	str	r3, [r4, #8]
 8000f48:	bb39      	cbnz	r1, 8000f9a <_puts_r+0x9e>
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	da38      	bge.n	8000fc0 <_puts_r+0xc4>
 8000f4e:	4622      	mov	r2, r4
 8000f50:	210a      	movs	r1, #10
 8000f52:	4628      	mov	r0, r5
 8000f54:	f000 f858 	bl	8001008 <__swbuf_r>
 8000f58:	3001      	adds	r0, #1
 8000f5a:	d011      	beq.n	8000f80 <_puts_r+0x84>
 8000f5c:	250a      	movs	r5, #10
 8000f5e:	e011      	b.n	8000f84 <_puts_r+0x88>
 8000f60:	4b1b      	ldr	r3, [pc, #108]	; (8000fd0 <_puts_r+0xd4>)
 8000f62:	429c      	cmp	r4, r3
 8000f64:	d101      	bne.n	8000f6a <_puts_r+0x6e>
 8000f66:	68ac      	ldr	r4, [r5, #8]
 8000f68:	e7da      	b.n	8000f20 <_puts_r+0x24>
 8000f6a:	4b1a      	ldr	r3, [pc, #104]	; (8000fd4 <_puts_r+0xd8>)
 8000f6c:	429c      	cmp	r4, r3
 8000f6e:	bf08      	it	eq
 8000f70:	68ec      	ldreq	r4, [r5, #12]
 8000f72:	e7d5      	b.n	8000f20 <_puts_r+0x24>
 8000f74:	4621      	mov	r1, r4
 8000f76:	4628      	mov	r0, r5
 8000f78:	f000 f898 	bl	80010ac <__swsetup_r>
 8000f7c:	2800      	cmp	r0, #0
 8000f7e:	d0dd      	beq.n	8000f3c <_puts_r+0x40>
 8000f80:	f04f 35ff 	mov.w	r5, #4294967295
 8000f84:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000f86:	07da      	lsls	r2, r3, #31
 8000f88:	d405      	bmi.n	8000f96 <_puts_r+0x9a>
 8000f8a:	89a3      	ldrh	r3, [r4, #12]
 8000f8c:	059b      	lsls	r3, r3, #22
 8000f8e:	d402      	bmi.n	8000f96 <_puts_r+0x9a>
 8000f90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000f92:	f000 fab2 	bl	80014fa <__retarget_lock_release_recursive>
 8000f96:	4628      	mov	r0, r5
 8000f98:	bd70      	pop	{r4, r5, r6, pc}
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	da04      	bge.n	8000fa8 <_puts_r+0xac>
 8000f9e:	69a2      	ldr	r2, [r4, #24]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	dc06      	bgt.n	8000fb2 <_puts_r+0xb6>
 8000fa4:	290a      	cmp	r1, #10
 8000fa6:	d004      	beq.n	8000fb2 <_puts_r+0xb6>
 8000fa8:	6823      	ldr	r3, [r4, #0]
 8000faa:	1c5a      	adds	r2, r3, #1
 8000fac:	6022      	str	r2, [r4, #0]
 8000fae:	7019      	strb	r1, [r3, #0]
 8000fb0:	e7c5      	b.n	8000f3e <_puts_r+0x42>
 8000fb2:	4622      	mov	r2, r4
 8000fb4:	4628      	mov	r0, r5
 8000fb6:	f000 f827 	bl	8001008 <__swbuf_r>
 8000fba:	3001      	adds	r0, #1
 8000fbc:	d1bf      	bne.n	8000f3e <_puts_r+0x42>
 8000fbe:	e7df      	b.n	8000f80 <_puts_r+0x84>
 8000fc0:	6823      	ldr	r3, [r4, #0]
 8000fc2:	250a      	movs	r5, #10
 8000fc4:	1c5a      	adds	r2, r3, #1
 8000fc6:	6022      	str	r2, [r4, #0]
 8000fc8:	701d      	strb	r5, [r3, #0]
 8000fca:	e7db      	b.n	8000f84 <_puts_r+0x88>
 8000fcc:	08002060 	.word	0x08002060
 8000fd0:	08002080 	.word	0x08002080
 8000fd4:	08002040 	.word	0x08002040

08000fd8 <puts>:
 8000fd8:	4b02      	ldr	r3, [pc, #8]	; (8000fe4 <puts+0xc>)
 8000fda:	4601      	mov	r1, r0
 8000fdc:	6818      	ldr	r0, [r3, #0]
 8000fde:	f7ff bf8d 	b.w	8000efc <_puts_r>
 8000fe2:	bf00      	nop
 8000fe4:	20000004 	.word	0x20000004

08000fe8 <_sbrk_r>:
 8000fe8:	b538      	push	{r3, r4, r5, lr}
 8000fea:	4d06      	ldr	r5, [pc, #24]	; (8001004 <_sbrk_r+0x1c>)
 8000fec:	2300      	movs	r3, #0
 8000fee:	4604      	mov	r4, r0
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	602b      	str	r3, [r5, #0]
 8000ff4:	f7ff fd88 	bl	8000b08 <_sbrk>
 8000ff8:	1c43      	adds	r3, r0, #1
 8000ffa:	d102      	bne.n	8001002 <_sbrk_r+0x1a>
 8000ffc:	682b      	ldr	r3, [r5, #0]
 8000ffe:	b103      	cbz	r3, 8001002 <_sbrk_r+0x1a>
 8001000:	6023      	str	r3, [r4, #0]
 8001002:	bd38      	pop	{r3, r4, r5, pc}
 8001004:	200000a8 	.word	0x200000a8

08001008 <__swbuf_r>:
 8001008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800100a:	460e      	mov	r6, r1
 800100c:	4614      	mov	r4, r2
 800100e:	4605      	mov	r5, r0
 8001010:	b118      	cbz	r0, 800101a <__swbuf_r+0x12>
 8001012:	6983      	ldr	r3, [r0, #24]
 8001014:	b90b      	cbnz	r3, 800101a <__swbuf_r+0x12>
 8001016:	f000 f9d1 	bl	80013bc <__sinit>
 800101a:	4b21      	ldr	r3, [pc, #132]	; (80010a0 <__swbuf_r+0x98>)
 800101c:	429c      	cmp	r4, r3
 800101e:	d12b      	bne.n	8001078 <__swbuf_r+0x70>
 8001020:	686c      	ldr	r4, [r5, #4]
 8001022:	69a3      	ldr	r3, [r4, #24]
 8001024:	60a3      	str	r3, [r4, #8]
 8001026:	89a3      	ldrh	r3, [r4, #12]
 8001028:	071a      	lsls	r2, r3, #28
 800102a:	d52f      	bpl.n	800108c <__swbuf_r+0x84>
 800102c:	6923      	ldr	r3, [r4, #16]
 800102e:	b36b      	cbz	r3, 800108c <__swbuf_r+0x84>
 8001030:	6923      	ldr	r3, [r4, #16]
 8001032:	6820      	ldr	r0, [r4, #0]
 8001034:	1ac0      	subs	r0, r0, r3
 8001036:	6963      	ldr	r3, [r4, #20]
 8001038:	b2f6      	uxtb	r6, r6
 800103a:	4283      	cmp	r3, r0
 800103c:	4637      	mov	r7, r6
 800103e:	dc04      	bgt.n	800104a <__swbuf_r+0x42>
 8001040:	4621      	mov	r1, r4
 8001042:	4628      	mov	r0, r5
 8001044:	f000 f926 	bl	8001294 <_fflush_r>
 8001048:	bb30      	cbnz	r0, 8001098 <__swbuf_r+0x90>
 800104a:	68a3      	ldr	r3, [r4, #8]
 800104c:	3b01      	subs	r3, #1
 800104e:	60a3      	str	r3, [r4, #8]
 8001050:	6823      	ldr	r3, [r4, #0]
 8001052:	1c5a      	adds	r2, r3, #1
 8001054:	6022      	str	r2, [r4, #0]
 8001056:	701e      	strb	r6, [r3, #0]
 8001058:	6963      	ldr	r3, [r4, #20]
 800105a:	3001      	adds	r0, #1
 800105c:	4283      	cmp	r3, r0
 800105e:	d004      	beq.n	800106a <__swbuf_r+0x62>
 8001060:	89a3      	ldrh	r3, [r4, #12]
 8001062:	07db      	lsls	r3, r3, #31
 8001064:	d506      	bpl.n	8001074 <__swbuf_r+0x6c>
 8001066:	2e0a      	cmp	r6, #10
 8001068:	d104      	bne.n	8001074 <__swbuf_r+0x6c>
 800106a:	4621      	mov	r1, r4
 800106c:	4628      	mov	r0, r5
 800106e:	f000 f911 	bl	8001294 <_fflush_r>
 8001072:	b988      	cbnz	r0, 8001098 <__swbuf_r+0x90>
 8001074:	4638      	mov	r0, r7
 8001076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001078:	4b0a      	ldr	r3, [pc, #40]	; (80010a4 <__swbuf_r+0x9c>)
 800107a:	429c      	cmp	r4, r3
 800107c:	d101      	bne.n	8001082 <__swbuf_r+0x7a>
 800107e:	68ac      	ldr	r4, [r5, #8]
 8001080:	e7cf      	b.n	8001022 <__swbuf_r+0x1a>
 8001082:	4b09      	ldr	r3, [pc, #36]	; (80010a8 <__swbuf_r+0xa0>)
 8001084:	429c      	cmp	r4, r3
 8001086:	bf08      	it	eq
 8001088:	68ec      	ldreq	r4, [r5, #12]
 800108a:	e7ca      	b.n	8001022 <__swbuf_r+0x1a>
 800108c:	4621      	mov	r1, r4
 800108e:	4628      	mov	r0, r5
 8001090:	f000 f80c 	bl	80010ac <__swsetup_r>
 8001094:	2800      	cmp	r0, #0
 8001096:	d0cb      	beq.n	8001030 <__swbuf_r+0x28>
 8001098:	f04f 37ff 	mov.w	r7, #4294967295
 800109c:	e7ea      	b.n	8001074 <__swbuf_r+0x6c>
 800109e:	bf00      	nop
 80010a0:	08002060 	.word	0x08002060
 80010a4:	08002080 	.word	0x08002080
 80010a8:	08002040 	.word	0x08002040

080010ac <__swsetup_r>:
 80010ac:	4b32      	ldr	r3, [pc, #200]	; (8001178 <__swsetup_r+0xcc>)
 80010ae:	b570      	push	{r4, r5, r6, lr}
 80010b0:	681d      	ldr	r5, [r3, #0]
 80010b2:	4606      	mov	r6, r0
 80010b4:	460c      	mov	r4, r1
 80010b6:	b125      	cbz	r5, 80010c2 <__swsetup_r+0x16>
 80010b8:	69ab      	ldr	r3, [r5, #24]
 80010ba:	b913      	cbnz	r3, 80010c2 <__swsetup_r+0x16>
 80010bc:	4628      	mov	r0, r5
 80010be:	f000 f97d 	bl	80013bc <__sinit>
 80010c2:	4b2e      	ldr	r3, [pc, #184]	; (800117c <__swsetup_r+0xd0>)
 80010c4:	429c      	cmp	r4, r3
 80010c6:	d10f      	bne.n	80010e8 <__swsetup_r+0x3c>
 80010c8:	686c      	ldr	r4, [r5, #4]
 80010ca:	89a3      	ldrh	r3, [r4, #12]
 80010cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80010d0:	0719      	lsls	r1, r3, #28
 80010d2:	d42c      	bmi.n	800112e <__swsetup_r+0x82>
 80010d4:	06dd      	lsls	r5, r3, #27
 80010d6:	d411      	bmi.n	80010fc <__swsetup_r+0x50>
 80010d8:	2309      	movs	r3, #9
 80010da:	6033      	str	r3, [r6, #0]
 80010dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80010e0:	81a3      	strh	r3, [r4, #12]
 80010e2:	f04f 30ff 	mov.w	r0, #4294967295
 80010e6:	e03e      	b.n	8001166 <__swsetup_r+0xba>
 80010e8:	4b25      	ldr	r3, [pc, #148]	; (8001180 <__swsetup_r+0xd4>)
 80010ea:	429c      	cmp	r4, r3
 80010ec:	d101      	bne.n	80010f2 <__swsetup_r+0x46>
 80010ee:	68ac      	ldr	r4, [r5, #8]
 80010f0:	e7eb      	b.n	80010ca <__swsetup_r+0x1e>
 80010f2:	4b24      	ldr	r3, [pc, #144]	; (8001184 <__swsetup_r+0xd8>)
 80010f4:	429c      	cmp	r4, r3
 80010f6:	bf08      	it	eq
 80010f8:	68ec      	ldreq	r4, [r5, #12]
 80010fa:	e7e6      	b.n	80010ca <__swsetup_r+0x1e>
 80010fc:	0758      	lsls	r0, r3, #29
 80010fe:	d512      	bpl.n	8001126 <__swsetup_r+0x7a>
 8001100:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001102:	b141      	cbz	r1, 8001116 <__swsetup_r+0x6a>
 8001104:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001108:	4299      	cmp	r1, r3
 800110a:	d002      	beq.n	8001112 <__swsetup_r+0x66>
 800110c:	4630      	mov	r0, r6
 800110e:	f000 fa65 	bl	80015dc <_free_r>
 8001112:	2300      	movs	r3, #0
 8001114:	6363      	str	r3, [r4, #52]	; 0x34
 8001116:	89a3      	ldrh	r3, [r4, #12]
 8001118:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800111c:	81a3      	strh	r3, [r4, #12]
 800111e:	2300      	movs	r3, #0
 8001120:	6063      	str	r3, [r4, #4]
 8001122:	6923      	ldr	r3, [r4, #16]
 8001124:	6023      	str	r3, [r4, #0]
 8001126:	89a3      	ldrh	r3, [r4, #12]
 8001128:	f043 0308 	orr.w	r3, r3, #8
 800112c:	81a3      	strh	r3, [r4, #12]
 800112e:	6923      	ldr	r3, [r4, #16]
 8001130:	b94b      	cbnz	r3, 8001146 <__swsetup_r+0x9a>
 8001132:	89a3      	ldrh	r3, [r4, #12]
 8001134:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001138:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800113c:	d003      	beq.n	8001146 <__swsetup_r+0x9a>
 800113e:	4621      	mov	r1, r4
 8001140:	4630      	mov	r0, r6
 8001142:	f000 f9ff 	bl	8001544 <__smakebuf_r>
 8001146:	89a0      	ldrh	r0, [r4, #12]
 8001148:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800114c:	f010 0301 	ands.w	r3, r0, #1
 8001150:	d00a      	beq.n	8001168 <__swsetup_r+0xbc>
 8001152:	2300      	movs	r3, #0
 8001154:	60a3      	str	r3, [r4, #8]
 8001156:	6963      	ldr	r3, [r4, #20]
 8001158:	425b      	negs	r3, r3
 800115a:	61a3      	str	r3, [r4, #24]
 800115c:	6923      	ldr	r3, [r4, #16]
 800115e:	b943      	cbnz	r3, 8001172 <__swsetup_r+0xc6>
 8001160:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001164:	d1ba      	bne.n	80010dc <__swsetup_r+0x30>
 8001166:	bd70      	pop	{r4, r5, r6, pc}
 8001168:	0781      	lsls	r1, r0, #30
 800116a:	bf58      	it	pl
 800116c:	6963      	ldrpl	r3, [r4, #20]
 800116e:	60a3      	str	r3, [r4, #8]
 8001170:	e7f4      	b.n	800115c <__swsetup_r+0xb0>
 8001172:	2000      	movs	r0, #0
 8001174:	e7f7      	b.n	8001166 <__swsetup_r+0xba>
 8001176:	bf00      	nop
 8001178:	20000004 	.word	0x20000004
 800117c:	08002060 	.word	0x08002060
 8001180:	08002080 	.word	0x08002080
 8001184:	08002040 	.word	0x08002040

08001188 <__sflush_r>:
 8001188:	898a      	ldrh	r2, [r1, #12]
 800118a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800118e:	4605      	mov	r5, r0
 8001190:	0710      	lsls	r0, r2, #28
 8001192:	460c      	mov	r4, r1
 8001194:	d458      	bmi.n	8001248 <__sflush_r+0xc0>
 8001196:	684b      	ldr	r3, [r1, #4]
 8001198:	2b00      	cmp	r3, #0
 800119a:	dc05      	bgt.n	80011a8 <__sflush_r+0x20>
 800119c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800119e:	2b00      	cmp	r3, #0
 80011a0:	dc02      	bgt.n	80011a8 <__sflush_r+0x20>
 80011a2:	2000      	movs	r0, #0
 80011a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80011a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80011aa:	2e00      	cmp	r6, #0
 80011ac:	d0f9      	beq.n	80011a2 <__sflush_r+0x1a>
 80011ae:	2300      	movs	r3, #0
 80011b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80011b4:	682f      	ldr	r7, [r5, #0]
 80011b6:	602b      	str	r3, [r5, #0]
 80011b8:	d032      	beq.n	8001220 <__sflush_r+0x98>
 80011ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80011bc:	89a3      	ldrh	r3, [r4, #12]
 80011be:	075a      	lsls	r2, r3, #29
 80011c0:	d505      	bpl.n	80011ce <__sflush_r+0x46>
 80011c2:	6863      	ldr	r3, [r4, #4]
 80011c4:	1ac0      	subs	r0, r0, r3
 80011c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80011c8:	b10b      	cbz	r3, 80011ce <__sflush_r+0x46>
 80011ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80011cc:	1ac0      	subs	r0, r0, r3
 80011ce:	2300      	movs	r3, #0
 80011d0:	4602      	mov	r2, r0
 80011d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80011d4:	6a21      	ldr	r1, [r4, #32]
 80011d6:	4628      	mov	r0, r5
 80011d8:	47b0      	blx	r6
 80011da:	1c43      	adds	r3, r0, #1
 80011dc:	89a3      	ldrh	r3, [r4, #12]
 80011de:	d106      	bne.n	80011ee <__sflush_r+0x66>
 80011e0:	6829      	ldr	r1, [r5, #0]
 80011e2:	291d      	cmp	r1, #29
 80011e4:	d82c      	bhi.n	8001240 <__sflush_r+0xb8>
 80011e6:	4a2a      	ldr	r2, [pc, #168]	; (8001290 <__sflush_r+0x108>)
 80011e8:	40ca      	lsrs	r2, r1
 80011ea:	07d6      	lsls	r6, r2, #31
 80011ec:	d528      	bpl.n	8001240 <__sflush_r+0xb8>
 80011ee:	2200      	movs	r2, #0
 80011f0:	6062      	str	r2, [r4, #4]
 80011f2:	04d9      	lsls	r1, r3, #19
 80011f4:	6922      	ldr	r2, [r4, #16]
 80011f6:	6022      	str	r2, [r4, #0]
 80011f8:	d504      	bpl.n	8001204 <__sflush_r+0x7c>
 80011fa:	1c42      	adds	r2, r0, #1
 80011fc:	d101      	bne.n	8001202 <__sflush_r+0x7a>
 80011fe:	682b      	ldr	r3, [r5, #0]
 8001200:	b903      	cbnz	r3, 8001204 <__sflush_r+0x7c>
 8001202:	6560      	str	r0, [r4, #84]	; 0x54
 8001204:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001206:	602f      	str	r7, [r5, #0]
 8001208:	2900      	cmp	r1, #0
 800120a:	d0ca      	beq.n	80011a2 <__sflush_r+0x1a>
 800120c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001210:	4299      	cmp	r1, r3
 8001212:	d002      	beq.n	800121a <__sflush_r+0x92>
 8001214:	4628      	mov	r0, r5
 8001216:	f000 f9e1 	bl	80015dc <_free_r>
 800121a:	2000      	movs	r0, #0
 800121c:	6360      	str	r0, [r4, #52]	; 0x34
 800121e:	e7c1      	b.n	80011a4 <__sflush_r+0x1c>
 8001220:	6a21      	ldr	r1, [r4, #32]
 8001222:	2301      	movs	r3, #1
 8001224:	4628      	mov	r0, r5
 8001226:	47b0      	blx	r6
 8001228:	1c41      	adds	r1, r0, #1
 800122a:	d1c7      	bne.n	80011bc <__sflush_r+0x34>
 800122c:	682b      	ldr	r3, [r5, #0]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d0c4      	beq.n	80011bc <__sflush_r+0x34>
 8001232:	2b1d      	cmp	r3, #29
 8001234:	d001      	beq.n	800123a <__sflush_r+0xb2>
 8001236:	2b16      	cmp	r3, #22
 8001238:	d101      	bne.n	800123e <__sflush_r+0xb6>
 800123a:	602f      	str	r7, [r5, #0]
 800123c:	e7b1      	b.n	80011a2 <__sflush_r+0x1a>
 800123e:	89a3      	ldrh	r3, [r4, #12]
 8001240:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001244:	81a3      	strh	r3, [r4, #12]
 8001246:	e7ad      	b.n	80011a4 <__sflush_r+0x1c>
 8001248:	690f      	ldr	r7, [r1, #16]
 800124a:	2f00      	cmp	r7, #0
 800124c:	d0a9      	beq.n	80011a2 <__sflush_r+0x1a>
 800124e:	0793      	lsls	r3, r2, #30
 8001250:	680e      	ldr	r6, [r1, #0]
 8001252:	bf08      	it	eq
 8001254:	694b      	ldreq	r3, [r1, #20]
 8001256:	600f      	str	r7, [r1, #0]
 8001258:	bf18      	it	ne
 800125a:	2300      	movne	r3, #0
 800125c:	eba6 0807 	sub.w	r8, r6, r7
 8001260:	608b      	str	r3, [r1, #8]
 8001262:	f1b8 0f00 	cmp.w	r8, #0
 8001266:	dd9c      	ble.n	80011a2 <__sflush_r+0x1a>
 8001268:	6a21      	ldr	r1, [r4, #32]
 800126a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800126c:	4643      	mov	r3, r8
 800126e:	463a      	mov	r2, r7
 8001270:	4628      	mov	r0, r5
 8001272:	47b0      	blx	r6
 8001274:	2800      	cmp	r0, #0
 8001276:	dc06      	bgt.n	8001286 <__sflush_r+0xfe>
 8001278:	89a3      	ldrh	r3, [r4, #12]
 800127a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800127e:	81a3      	strh	r3, [r4, #12]
 8001280:	f04f 30ff 	mov.w	r0, #4294967295
 8001284:	e78e      	b.n	80011a4 <__sflush_r+0x1c>
 8001286:	4407      	add	r7, r0
 8001288:	eba8 0800 	sub.w	r8, r8, r0
 800128c:	e7e9      	b.n	8001262 <__sflush_r+0xda>
 800128e:	bf00      	nop
 8001290:	20400001 	.word	0x20400001

08001294 <_fflush_r>:
 8001294:	b538      	push	{r3, r4, r5, lr}
 8001296:	690b      	ldr	r3, [r1, #16]
 8001298:	4605      	mov	r5, r0
 800129a:	460c      	mov	r4, r1
 800129c:	b913      	cbnz	r3, 80012a4 <_fflush_r+0x10>
 800129e:	2500      	movs	r5, #0
 80012a0:	4628      	mov	r0, r5
 80012a2:	bd38      	pop	{r3, r4, r5, pc}
 80012a4:	b118      	cbz	r0, 80012ae <_fflush_r+0x1a>
 80012a6:	6983      	ldr	r3, [r0, #24]
 80012a8:	b90b      	cbnz	r3, 80012ae <_fflush_r+0x1a>
 80012aa:	f000 f887 	bl	80013bc <__sinit>
 80012ae:	4b14      	ldr	r3, [pc, #80]	; (8001300 <_fflush_r+0x6c>)
 80012b0:	429c      	cmp	r4, r3
 80012b2:	d11b      	bne.n	80012ec <_fflush_r+0x58>
 80012b4:	686c      	ldr	r4, [r5, #4]
 80012b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d0ef      	beq.n	800129e <_fflush_r+0xa>
 80012be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80012c0:	07d0      	lsls	r0, r2, #31
 80012c2:	d404      	bmi.n	80012ce <_fflush_r+0x3a>
 80012c4:	0599      	lsls	r1, r3, #22
 80012c6:	d402      	bmi.n	80012ce <_fflush_r+0x3a>
 80012c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80012ca:	f000 f915 	bl	80014f8 <__retarget_lock_acquire_recursive>
 80012ce:	4628      	mov	r0, r5
 80012d0:	4621      	mov	r1, r4
 80012d2:	f7ff ff59 	bl	8001188 <__sflush_r>
 80012d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80012d8:	07da      	lsls	r2, r3, #31
 80012da:	4605      	mov	r5, r0
 80012dc:	d4e0      	bmi.n	80012a0 <_fflush_r+0xc>
 80012de:	89a3      	ldrh	r3, [r4, #12]
 80012e0:	059b      	lsls	r3, r3, #22
 80012e2:	d4dd      	bmi.n	80012a0 <_fflush_r+0xc>
 80012e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80012e6:	f000 f908 	bl	80014fa <__retarget_lock_release_recursive>
 80012ea:	e7d9      	b.n	80012a0 <_fflush_r+0xc>
 80012ec:	4b05      	ldr	r3, [pc, #20]	; (8001304 <_fflush_r+0x70>)
 80012ee:	429c      	cmp	r4, r3
 80012f0:	d101      	bne.n	80012f6 <_fflush_r+0x62>
 80012f2:	68ac      	ldr	r4, [r5, #8]
 80012f4:	e7df      	b.n	80012b6 <_fflush_r+0x22>
 80012f6:	4b04      	ldr	r3, [pc, #16]	; (8001308 <_fflush_r+0x74>)
 80012f8:	429c      	cmp	r4, r3
 80012fa:	bf08      	it	eq
 80012fc:	68ec      	ldreq	r4, [r5, #12]
 80012fe:	e7da      	b.n	80012b6 <_fflush_r+0x22>
 8001300:	08002060 	.word	0x08002060
 8001304:	08002080 	.word	0x08002080
 8001308:	08002040 	.word	0x08002040

0800130c <std>:
 800130c:	2300      	movs	r3, #0
 800130e:	b510      	push	{r4, lr}
 8001310:	4604      	mov	r4, r0
 8001312:	e9c0 3300 	strd	r3, r3, [r0]
 8001316:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800131a:	6083      	str	r3, [r0, #8]
 800131c:	8181      	strh	r1, [r0, #12]
 800131e:	6643      	str	r3, [r0, #100]	; 0x64
 8001320:	81c2      	strh	r2, [r0, #14]
 8001322:	6183      	str	r3, [r0, #24]
 8001324:	4619      	mov	r1, r3
 8001326:	2208      	movs	r2, #8
 8001328:	305c      	adds	r0, #92	; 0x5c
 800132a:	f7ff fd4b 	bl	8000dc4 <memset>
 800132e:	4b05      	ldr	r3, [pc, #20]	; (8001344 <std+0x38>)
 8001330:	6263      	str	r3, [r4, #36]	; 0x24
 8001332:	4b05      	ldr	r3, [pc, #20]	; (8001348 <std+0x3c>)
 8001334:	62a3      	str	r3, [r4, #40]	; 0x28
 8001336:	4b05      	ldr	r3, [pc, #20]	; (800134c <std+0x40>)
 8001338:	62e3      	str	r3, [r4, #44]	; 0x2c
 800133a:	4b05      	ldr	r3, [pc, #20]	; (8001350 <std+0x44>)
 800133c:	6224      	str	r4, [r4, #32]
 800133e:	6323      	str	r3, [r4, #48]	; 0x30
 8001340:	bd10      	pop	{r4, pc}
 8001342:	bf00      	nop
 8001344:	08001ce1 	.word	0x08001ce1
 8001348:	08001d03 	.word	0x08001d03
 800134c:	08001d3b 	.word	0x08001d3b
 8001350:	08001d5f 	.word	0x08001d5f

08001354 <_cleanup_r>:
 8001354:	4901      	ldr	r1, [pc, #4]	; (800135c <_cleanup_r+0x8>)
 8001356:	f000 b8af 	b.w	80014b8 <_fwalk_reent>
 800135a:	bf00      	nop
 800135c:	08001295 	.word	0x08001295

08001360 <__sfmoreglue>:
 8001360:	b570      	push	{r4, r5, r6, lr}
 8001362:	1e4a      	subs	r2, r1, #1
 8001364:	2568      	movs	r5, #104	; 0x68
 8001366:	4355      	muls	r5, r2
 8001368:	460e      	mov	r6, r1
 800136a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800136e:	f7ff fd3f 	bl	8000df0 <_malloc_r>
 8001372:	4604      	mov	r4, r0
 8001374:	b140      	cbz	r0, 8001388 <__sfmoreglue+0x28>
 8001376:	2100      	movs	r1, #0
 8001378:	e9c0 1600 	strd	r1, r6, [r0]
 800137c:	300c      	adds	r0, #12
 800137e:	60a0      	str	r0, [r4, #8]
 8001380:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001384:	f7ff fd1e 	bl	8000dc4 <memset>
 8001388:	4620      	mov	r0, r4
 800138a:	bd70      	pop	{r4, r5, r6, pc}

0800138c <__sfp_lock_acquire>:
 800138c:	4801      	ldr	r0, [pc, #4]	; (8001394 <__sfp_lock_acquire+0x8>)
 800138e:	f000 b8b3 	b.w	80014f8 <__retarget_lock_acquire_recursive>
 8001392:	bf00      	nop
 8001394:	200000a4 	.word	0x200000a4

08001398 <__sfp_lock_release>:
 8001398:	4801      	ldr	r0, [pc, #4]	; (80013a0 <__sfp_lock_release+0x8>)
 800139a:	f000 b8ae 	b.w	80014fa <__retarget_lock_release_recursive>
 800139e:	bf00      	nop
 80013a0:	200000a4 	.word	0x200000a4

080013a4 <__sinit_lock_acquire>:
 80013a4:	4801      	ldr	r0, [pc, #4]	; (80013ac <__sinit_lock_acquire+0x8>)
 80013a6:	f000 b8a7 	b.w	80014f8 <__retarget_lock_acquire_recursive>
 80013aa:	bf00      	nop
 80013ac:	2000009f 	.word	0x2000009f

080013b0 <__sinit_lock_release>:
 80013b0:	4801      	ldr	r0, [pc, #4]	; (80013b8 <__sinit_lock_release+0x8>)
 80013b2:	f000 b8a2 	b.w	80014fa <__retarget_lock_release_recursive>
 80013b6:	bf00      	nop
 80013b8:	2000009f 	.word	0x2000009f

080013bc <__sinit>:
 80013bc:	b510      	push	{r4, lr}
 80013be:	4604      	mov	r4, r0
 80013c0:	f7ff fff0 	bl	80013a4 <__sinit_lock_acquire>
 80013c4:	69a3      	ldr	r3, [r4, #24]
 80013c6:	b11b      	cbz	r3, 80013d0 <__sinit+0x14>
 80013c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80013cc:	f7ff bff0 	b.w	80013b0 <__sinit_lock_release>
 80013d0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80013d4:	6523      	str	r3, [r4, #80]	; 0x50
 80013d6:	4b13      	ldr	r3, [pc, #76]	; (8001424 <__sinit+0x68>)
 80013d8:	4a13      	ldr	r2, [pc, #76]	; (8001428 <__sinit+0x6c>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	62a2      	str	r2, [r4, #40]	; 0x28
 80013de:	42a3      	cmp	r3, r4
 80013e0:	bf04      	itt	eq
 80013e2:	2301      	moveq	r3, #1
 80013e4:	61a3      	streq	r3, [r4, #24]
 80013e6:	4620      	mov	r0, r4
 80013e8:	f000 f820 	bl	800142c <__sfp>
 80013ec:	6060      	str	r0, [r4, #4]
 80013ee:	4620      	mov	r0, r4
 80013f0:	f000 f81c 	bl	800142c <__sfp>
 80013f4:	60a0      	str	r0, [r4, #8]
 80013f6:	4620      	mov	r0, r4
 80013f8:	f000 f818 	bl	800142c <__sfp>
 80013fc:	2200      	movs	r2, #0
 80013fe:	60e0      	str	r0, [r4, #12]
 8001400:	2104      	movs	r1, #4
 8001402:	6860      	ldr	r0, [r4, #4]
 8001404:	f7ff ff82 	bl	800130c <std>
 8001408:	68a0      	ldr	r0, [r4, #8]
 800140a:	2201      	movs	r2, #1
 800140c:	2109      	movs	r1, #9
 800140e:	f7ff ff7d 	bl	800130c <std>
 8001412:	68e0      	ldr	r0, [r4, #12]
 8001414:	2202      	movs	r2, #2
 8001416:	2112      	movs	r1, #18
 8001418:	f7ff ff78 	bl	800130c <std>
 800141c:	2301      	movs	r3, #1
 800141e:	61a3      	str	r3, [r4, #24]
 8001420:	e7d2      	b.n	80013c8 <__sinit+0xc>
 8001422:	bf00      	nop
 8001424:	0800203c 	.word	0x0800203c
 8001428:	08001355 	.word	0x08001355

0800142c <__sfp>:
 800142c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800142e:	4607      	mov	r7, r0
 8001430:	f7ff ffac 	bl	800138c <__sfp_lock_acquire>
 8001434:	4b1e      	ldr	r3, [pc, #120]	; (80014b0 <__sfp+0x84>)
 8001436:	681e      	ldr	r6, [r3, #0]
 8001438:	69b3      	ldr	r3, [r6, #24]
 800143a:	b913      	cbnz	r3, 8001442 <__sfp+0x16>
 800143c:	4630      	mov	r0, r6
 800143e:	f7ff ffbd 	bl	80013bc <__sinit>
 8001442:	3648      	adds	r6, #72	; 0x48
 8001444:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001448:	3b01      	subs	r3, #1
 800144a:	d503      	bpl.n	8001454 <__sfp+0x28>
 800144c:	6833      	ldr	r3, [r6, #0]
 800144e:	b30b      	cbz	r3, 8001494 <__sfp+0x68>
 8001450:	6836      	ldr	r6, [r6, #0]
 8001452:	e7f7      	b.n	8001444 <__sfp+0x18>
 8001454:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001458:	b9d5      	cbnz	r5, 8001490 <__sfp+0x64>
 800145a:	4b16      	ldr	r3, [pc, #88]	; (80014b4 <__sfp+0x88>)
 800145c:	60e3      	str	r3, [r4, #12]
 800145e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001462:	6665      	str	r5, [r4, #100]	; 0x64
 8001464:	f000 f847 	bl	80014f6 <__retarget_lock_init_recursive>
 8001468:	f7ff ff96 	bl	8001398 <__sfp_lock_release>
 800146c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001470:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001474:	6025      	str	r5, [r4, #0]
 8001476:	61a5      	str	r5, [r4, #24]
 8001478:	2208      	movs	r2, #8
 800147a:	4629      	mov	r1, r5
 800147c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001480:	f7ff fca0 	bl	8000dc4 <memset>
 8001484:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001488:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800148c:	4620      	mov	r0, r4
 800148e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001490:	3468      	adds	r4, #104	; 0x68
 8001492:	e7d9      	b.n	8001448 <__sfp+0x1c>
 8001494:	2104      	movs	r1, #4
 8001496:	4638      	mov	r0, r7
 8001498:	f7ff ff62 	bl	8001360 <__sfmoreglue>
 800149c:	4604      	mov	r4, r0
 800149e:	6030      	str	r0, [r6, #0]
 80014a0:	2800      	cmp	r0, #0
 80014a2:	d1d5      	bne.n	8001450 <__sfp+0x24>
 80014a4:	f7ff ff78 	bl	8001398 <__sfp_lock_release>
 80014a8:	230c      	movs	r3, #12
 80014aa:	603b      	str	r3, [r7, #0]
 80014ac:	e7ee      	b.n	800148c <__sfp+0x60>
 80014ae:	bf00      	nop
 80014b0:	0800203c 	.word	0x0800203c
 80014b4:	ffff0001 	.word	0xffff0001

080014b8 <_fwalk_reent>:
 80014b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80014bc:	4606      	mov	r6, r0
 80014be:	4688      	mov	r8, r1
 80014c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80014c4:	2700      	movs	r7, #0
 80014c6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80014ca:	f1b9 0901 	subs.w	r9, r9, #1
 80014ce:	d505      	bpl.n	80014dc <_fwalk_reent+0x24>
 80014d0:	6824      	ldr	r4, [r4, #0]
 80014d2:	2c00      	cmp	r4, #0
 80014d4:	d1f7      	bne.n	80014c6 <_fwalk_reent+0xe>
 80014d6:	4638      	mov	r0, r7
 80014d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80014dc:	89ab      	ldrh	r3, [r5, #12]
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d907      	bls.n	80014f2 <_fwalk_reent+0x3a>
 80014e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80014e6:	3301      	adds	r3, #1
 80014e8:	d003      	beq.n	80014f2 <_fwalk_reent+0x3a>
 80014ea:	4629      	mov	r1, r5
 80014ec:	4630      	mov	r0, r6
 80014ee:	47c0      	blx	r8
 80014f0:	4307      	orrs	r7, r0
 80014f2:	3568      	adds	r5, #104	; 0x68
 80014f4:	e7e9      	b.n	80014ca <_fwalk_reent+0x12>

080014f6 <__retarget_lock_init_recursive>:
 80014f6:	4770      	bx	lr

080014f8 <__retarget_lock_acquire_recursive>:
 80014f8:	4770      	bx	lr

080014fa <__retarget_lock_release_recursive>:
 80014fa:	4770      	bx	lr

080014fc <__swhatbuf_r>:
 80014fc:	b570      	push	{r4, r5, r6, lr}
 80014fe:	460e      	mov	r6, r1
 8001500:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001504:	2900      	cmp	r1, #0
 8001506:	b096      	sub	sp, #88	; 0x58
 8001508:	4614      	mov	r4, r2
 800150a:	461d      	mov	r5, r3
 800150c:	da07      	bge.n	800151e <__swhatbuf_r+0x22>
 800150e:	2300      	movs	r3, #0
 8001510:	602b      	str	r3, [r5, #0]
 8001512:	89b3      	ldrh	r3, [r6, #12]
 8001514:	061a      	lsls	r2, r3, #24
 8001516:	d410      	bmi.n	800153a <__swhatbuf_r+0x3e>
 8001518:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800151c:	e00e      	b.n	800153c <__swhatbuf_r+0x40>
 800151e:	466a      	mov	r2, sp
 8001520:	f000 fc44 	bl	8001dac <_fstat_r>
 8001524:	2800      	cmp	r0, #0
 8001526:	dbf2      	blt.n	800150e <__swhatbuf_r+0x12>
 8001528:	9a01      	ldr	r2, [sp, #4]
 800152a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800152e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001532:	425a      	negs	r2, r3
 8001534:	415a      	adcs	r2, r3
 8001536:	602a      	str	r2, [r5, #0]
 8001538:	e7ee      	b.n	8001518 <__swhatbuf_r+0x1c>
 800153a:	2340      	movs	r3, #64	; 0x40
 800153c:	2000      	movs	r0, #0
 800153e:	6023      	str	r3, [r4, #0]
 8001540:	b016      	add	sp, #88	; 0x58
 8001542:	bd70      	pop	{r4, r5, r6, pc}

08001544 <__smakebuf_r>:
 8001544:	898b      	ldrh	r3, [r1, #12]
 8001546:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001548:	079d      	lsls	r5, r3, #30
 800154a:	4606      	mov	r6, r0
 800154c:	460c      	mov	r4, r1
 800154e:	d507      	bpl.n	8001560 <__smakebuf_r+0x1c>
 8001550:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001554:	6023      	str	r3, [r4, #0]
 8001556:	6123      	str	r3, [r4, #16]
 8001558:	2301      	movs	r3, #1
 800155a:	6163      	str	r3, [r4, #20]
 800155c:	b002      	add	sp, #8
 800155e:	bd70      	pop	{r4, r5, r6, pc}
 8001560:	ab01      	add	r3, sp, #4
 8001562:	466a      	mov	r2, sp
 8001564:	f7ff ffca 	bl	80014fc <__swhatbuf_r>
 8001568:	9900      	ldr	r1, [sp, #0]
 800156a:	4605      	mov	r5, r0
 800156c:	4630      	mov	r0, r6
 800156e:	f7ff fc3f 	bl	8000df0 <_malloc_r>
 8001572:	b948      	cbnz	r0, 8001588 <__smakebuf_r+0x44>
 8001574:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001578:	059a      	lsls	r2, r3, #22
 800157a:	d4ef      	bmi.n	800155c <__smakebuf_r+0x18>
 800157c:	f023 0303 	bic.w	r3, r3, #3
 8001580:	f043 0302 	orr.w	r3, r3, #2
 8001584:	81a3      	strh	r3, [r4, #12]
 8001586:	e7e3      	b.n	8001550 <__smakebuf_r+0xc>
 8001588:	4b0d      	ldr	r3, [pc, #52]	; (80015c0 <__smakebuf_r+0x7c>)
 800158a:	62b3      	str	r3, [r6, #40]	; 0x28
 800158c:	89a3      	ldrh	r3, [r4, #12]
 800158e:	6020      	str	r0, [r4, #0]
 8001590:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001594:	81a3      	strh	r3, [r4, #12]
 8001596:	9b00      	ldr	r3, [sp, #0]
 8001598:	6163      	str	r3, [r4, #20]
 800159a:	9b01      	ldr	r3, [sp, #4]
 800159c:	6120      	str	r0, [r4, #16]
 800159e:	b15b      	cbz	r3, 80015b8 <__smakebuf_r+0x74>
 80015a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80015a4:	4630      	mov	r0, r6
 80015a6:	f000 fc13 	bl	8001dd0 <_isatty_r>
 80015aa:	b128      	cbz	r0, 80015b8 <__smakebuf_r+0x74>
 80015ac:	89a3      	ldrh	r3, [r4, #12]
 80015ae:	f023 0303 	bic.w	r3, r3, #3
 80015b2:	f043 0301 	orr.w	r3, r3, #1
 80015b6:	81a3      	strh	r3, [r4, #12]
 80015b8:	89a0      	ldrh	r0, [r4, #12]
 80015ba:	4305      	orrs	r5, r0
 80015bc:	81a5      	strh	r5, [r4, #12]
 80015be:	e7cd      	b.n	800155c <__smakebuf_r+0x18>
 80015c0:	08001355 	.word	0x08001355

080015c4 <__malloc_lock>:
 80015c4:	4801      	ldr	r0, [pc, #4]	; (80015cc <__malloc_lock+0x8>)
 80015c6:	f7ff bf97 	b.w	80014f8 <__retarget_lock_acquire_recursive>
 80015ca:	bf00      	nop
 80015cc:	200000a0 	.word	0x200000a0

080015d0 <__malloc_unlock>:
 80015d0:	4801      	ldr	r0, [pc, #4]	; (80015d8 <__malloc_unlock+0x8>)
 80015d2:	f7ff bf92 	b.w	80014fa <__retarget_lock_release_recursive>
 80015d6:	bf00      	nop
 80015d8:	200000a0 	.word	0x200000a0

080015dc <_free_r>:
 80015dc:	b538      	push	{r3, r4, r5, lr}
 80015de:	4605      	mov	r5, r0
 80015e0:	2900      	cmp	r1, #0
 80015e2:	d045      	beq.n	8001670 <_free_r+0x94>
 80015e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80015e8:	1f0c      	subs	r4, r1, #4
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	bfb8      	it	lt
 80015ee:	18e4      	addlt	r4, r4, r3
 80015f0:	f7ff ffe8 	bl	80015c4 <__malloc_lock>
 80015f4:	4a1f      	ldr	r2, [pc, #124]	; (8001674 <_free_r+0x98>)
 80015f6:	6813      	ldr	r3, [r2, #0]
 80015f8:	4610      	mov	r0, r2
 80015fa:	b933      	cbnz	r3, 800160a <_free_r+0x2e>
 80015fc:	6063      	str	r3, [r4, #4]
 80015fe:	6014      	str	r4, [r2, #0]
 8001600:	4628      	mov	r0, r5
 8001602:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001606:	f7ff bfe3 	b.w	80015d0 <__malloc_unlock>
 800160a:	42a3      	cmp	r3, r4
 800160c:	d90b      	bls.n	8001626 <_free_r+0x4a>
 800160e:	6821      	ldr	r1, [r4, #0]
 8001610:	1862      	adds	r2, r4, r1
 8001612:	4293      	cmp	r3, r2
 8001614:	bf04      	itt	eq
 8001616:	681a      	ldreq	r2, [r3, #0]
 8001618:	685b      	ldreq	r3, [r3, #4]
 800161a:	6063      	str	r3, [r4, #4]
 800161c:	bf04      	itt	eq
 800161e:	1852      	addeq	r2, r2, r1
 8001620:	6022      	streq	r2, [r4, #0]
 8001622:	6004      	str	r4, [r0, #0]
 8001624:	e7ec      	b.n	8001600 <_free_r+0x24>
 8001626:	461a      	mov	r2, r3
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	b10b      	cbz	r3, 8001630 <_free_r+0x54>
 800162c:	42a3      	cmp	r3, r4
 800162e:	d9fa      	bls.n	8001626 <_free_r+0x4a>
 8001630:	6811      	ldr	r1, [r2, #0]
 8001632:	1850      	adds	r0, r2, r1
 8001634:	42a0      	cmp	r0, r4
 8001636:	d10b      	bne.n	8001650 <_free_r+0x74>
 8001638:	6820      	ldr	r0, [r4, #0]
 800163a:	4401      	add	r1, r0
 800163c:	1850      	adds	r0, r2, r1
 800163e:	4283      	cmp	r3, r0
 8001640:	6011      	str	r1, [r2, #0]
 8001642:	d1dd      	bne.n	8001600 <_free_r+0x24>
 8001644:	6818      	ldr	r0, [r3, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	6053      	str	r3, [r2, #4]
 800164a:	4401      	add	r1, r0
 800164c:	6011      	str	r1, [r2, #0]
 800164e:	e7d7      	b.n	8001600 <_free_r+0x24>
 8001650:	d902      	bls.n	8001658 <_free_r+0x7c>
 8001652:	230c      	movs	r3, #12
 8001654:	602b      	str	r3, [r5, #0]
 8001656:	e7d3      	b.n	8001600 <_free_r+0x24>
 8001658:	6820      	ldr	r0, [r4, #0]
 800165a:	1821      	adds	r1, r4, r0
 800165c:	428b      	cmp	r3, r1
 800165e:	bf04      	itt	eq
 8001660:	6819      	ldreq	r1, [r3, #0]
 8001662:	685b      	ldreq	r3, [r3, #4]
 8001664:	6063      	str	r3, [r4, #4]
 8001666:	bf04      	itt	eq
 8001668:	1809      	addeq	r1, r1, r0
 800166a:	6021      	streq	r1, [r4, #0]
 800166c:	6054      	str	r4, [r2, #4]
 800166e:	e7c7      	b.n	8001600 <_free_r+0x24>
 8001670:	bd38      	pop	{r3, r4, r5, pc}
 8001672:	bf00      	nop
 8001674:	2000008c 	.word	0x2000008c

08001678 <__sfputc_r>:
 8001678:	6893      	ldr	r3, [r2, #8]
 800167a:	3b01      	subs	r3, #1
 800167c:	2b00      	cmp	r3, #0
 800167e:	b410      	push	{r4}
 8001680:	6093      	str	r3, [r2, #8]
 8001682:	da07      	bge.n	8001694 <__sfputc_r+0x1c>
 8001684:	6994      	ldr	r4, [r2, #24]
 8001686:	42a3      	cmp	r3, r4
 8001688:	db01      	blt.n	800168e <__sfputc_r+0x16>
 800168a:	290a      	cmp	r1, #10
 800168c:	d102      	bne.n	8001694 <__sfputc_r+0x1c>
 800168e:	bc10      	pop	{r4}
 8001690:	f7ff bcba 	b.w	8001008 <__swbuf_r>
 8001694:	6813      	ldr	r3, [r2, #0]
 8001696:	1c58      	adds	r0, r3, #1
 8001698:	6010      	str	r0, [r2, #0]
 800169a:	7019      	strb	r1, [r3, #0]
 800169c:	4608      	mov	r0, r1
 800169e:	bc10      	pop	{r4}
 80016a0:	4770      	bx	lr

080016a2 <__sfputs_r>:
 80016a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016a4:	4606      	mov	r6, r0
 80016a6:	460f      	mov	r7, r1
 80016a8:	4614      	mov	r4, r2
 80016aa:	18d5      	adds	r5, r2, r3
 80016ac:	42ac      	cmp	r4, r5
 80016ae:	d101      	bne.n	80016b4 <__sfputs_r+0x12>
 80016b0:	2000      	movs	r0, #0
 80016b2:	e007      	b.n	80016c4 <__sfputs_r+0x22>
 80016b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80016b8:	463a      	mov	r2, r7
 80016ba:	4630      	mov	r0, r6
 80016bc:	f7ff ffdc 	bl	8001678 <__sfputc_r>
 80016c0:	1c43      	adds	r3, r0, #1
 80016c2:	d1f3      	bne.n	80016ac <__sfputs_r+0xa>
 80016c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080016c8 <_vfiprintf_r>:
 80016c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016cc:	460d      	mov	r5, r1
 80016ce:	b09d      	sub	sp, #116	; 0x74
 80016d0:	4614      	mov	r4, r2
 80016d2:	4698      	mov	r8, r3
 80016d4:	4606      	mov	r6, r0
 80016d6:	b118      	cbz	r0, 80016e0 <_vfiprintf_r+0x18>
 80016d8:	6983      	ldr	r3, [r0, #24]
 80016da:	b90b      	cbnz	r3, 80016e0 <_vfiprintf_r+0x18>
 80016dc:	f7ff fe6e 	bl	80013bc <__sinit>
 80016e0:	4b89      	ldr	r3, [pc, #548]	; (8001908 <_vfiprintf_r+0x240>)
 80016e2:	429d      	cmp	r5, r3
 80016e4:	d11b      	bne.n	800171e <_vfiprintf_r+0x56>
 80016e6:	6875      	ldr	r5, [r6, #4]
 80016e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80016ea:	07d9      	lsls	r1, r3, #31
 80016ec:	d405      	bmi.n	80016fa <_vfiprintf_r+0x32>
 80016ee:	89ab      	ldrh	r3, [r5, #12]
 80016f0:	059a      	lsls	r2, r3, #22
 80016f2:	d402      	bmi.n	80016fa <_vfiprintf_r+0x32>
 80016f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80016f6:	f7ff feff 	bl	80014f8 <__retarget_lock_acquire_recursive>
 80016fa:	89ab      	ldrh	r3, [r5, #12]
 80016fc:	071b      	lsls	r3, r3, #28
 80016fe:	d501      	bpl.n	8001704 <_vfiprintf_r+0x3c>
 8001700:	692b      	ldr	r3, [r5, #16]
 8001702:	b9eb      	cbnz	r3, 8001740 <_vfiprintf_r+0x78>
 8001704:	4629      	mov	r1, r5
 8001706:	4630      	mov	r0, r6
 8001708:	f7ff fcd0 	bl	80010ac <__swsetup_r>
 800170c:	b1c0      	cbz	r0, 8001740 <_vfiprintf_r+0x78>
 800170e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001710:	07dc      	lsls	r4, r3, #31
 8001712:	d50e      	bpl.n	8001732 <_vfiprintf_r+0x6a>
 8001714:	f04f 30ff 	mov.w	r0, #4294967295
 8001718:	b01d      	add	sp, #116	; 0x74
 800171a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800171e:	4b7b      	ldr	r3, [pc, #492]	; (800190c <_vfiprintf_r+0x244>)
 8001720:	429d      	cmp	r5, r3
 8001722:	d101      	bne.n	8001728 <_vfiprintf_r+0x60>
 8001724:	68b5      	ldr	r5, [r6, #8]
 8001726:	e7df      	b.n	80016e8 <_vfiprintf_r+0x20>
 8001728:	4b79      	ldr	r3, [pc, #484]	; (8001910 <_vfiprintf_r+0x248>)
 800172a:	429d      	cmp	r5, r3
 800172c:	bf08      	it	eq
 800172e:	68f5      	ldreq	r5, [r6, #12]
 8001730:	e7da      	b.n	80016e8 <_vfiprintf_r+0x20>
 8001732:	89ab      	ldrh	r3, [r5, #12]
 8001734:	0598      	lsls	r0, r3, #22
 8001736:	d4ed      	bmi.n	8001714 <_vfiprintf_r+0x4c>
 8001738:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800173a:	f7ff fede 	bl	80014fa <__retarget_lock_release_recursive>
 800173e:	e7e9      	b.n	8001714 <_vfiprintf_r+0x4c>
 8001740:	2300      	movs	r3, #0
 8001742:	9309      	str	r3, [sp, #36]	; 0x24
 8001744:	2320      	movs	r3, #32
 8001746:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800174a:	f8cd 800c 	str.w	r8, [sp, #12]
 800174e:	2330      	movs	r3, #48	; 0x30
 8001750:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001914 <_vfiprintf_r+0x24c>
 8001754:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001758:	f04f 0901 	mov.w	r9, #1
 800175c:	4623      	mov	r3, r4
 800175e:	469a      	mov	sl, r3
 8001760:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001764:	b10a      	cbz	r2, 800176a <_vfiprintf_r+0xa2>
 8001766:	2a25      	cmp	r2, #37	; 0x25
 8001768:	d1f9      	bne.n	800175e <_vfiprintf_r+0x96>
 800176a:	ebba 0b04 	subs.w	fp, sl, r4
 800176e:	d00b      	beq.n	8001788 <_vfiprintf_r+0xc0>
 8001770:	465b      	mov	r3, fp
 8001772:	4622      	mov	r2, r4
 8001774:	4629      	mov	r1, r5
 8001776:	4630      	mov	r0, r6
 8001778:	f7ff ff93 	bl	80016a2 <__sfputs_r>
 800177c:	3001      	adds	r0, #1
 800177e:	f000 80aa 	beq.w	80018d6 <_vfiprintf_r+0x20e>
 8001782:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001784:	445a      	add	r2, fp
 8001786:	9209      	str	r2, [sp, #36]	; 0x24
 8001788:	f89a 3000 	ldrb.w	r3, [sl]
 800178c:	2b00      	cmp	r3, #0
 800178e:	f000 80a2 	beq.w	80018d6 <_vfiprintf_r+0x20e>
 8001792:	2300      	movs	r3, #0
 8001794:	f04f 32ff 	mov.w	r2, #4294967295
 8001798:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800179c:	f10a 0a01 	add.w	sl, sl, #1
 80017a0:	9304      	str	r3, [sp, #16]
 80017a2:	9307      	str	r3, [sp, #28]
 80017a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80017a8:	931a      	str	r3, [sp, #104]	; 0x68
 80017aa:	4654      	mov	r4, sl
 80017ac:	2205      	movs	r2, #5
 80017ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80017b2:	4858      	ldr	r0, [pc, #352]	; (8001914 <_vfiprintf_r+0x24c>)
 80017b4:	f7fe fd34 	bl	8000220 <memchr>
 80017b8:	9a04      	ldr	r2, [sp, #16]
 80017ba:	b9d8      	cbnz	r0, 80017f4 <_vfiprintf_r+0x12c>
 80017bc:	06d1      	lsls	r1, r2, #27
 80017be:	bf44      	itt	mi
 80017c0:	2320      	movmi	r3, #32
 80017c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80017c6:	0713      	lsls	r3, r2, #28
 80017c8:	bf44      	itt	mi
 80017ca:	232b      	movmi	r3, #43	; 0x2b
 80017cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80017d0:	f89a 3000 	ldrb.w	r3, [sl]
 80017d4:	2b2a      	cmp	r3, #42	; 0x2a
 80017d6:	d015      	beq.n	8001804 <_vfiprintf_r+0x13c>
 80017d8:	9a07      	ldr	r2, [sp, #28]
 80017da:	4654      	mov	r4, sl
 80017dc:	2000      	movs	r0, #0
 80017de:	f04f 0c0a 	mov.w	ip, #10
 80017e2:	4621      	mov	r1, r4
 80017e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80017e8:	3b30      	subs	r3, #48	; 0x30
 80017ea:	2b09      	cmp	r3, #9
 80017ec:	d94e      	bls.n	800188c <_vfiprintf_r+0x1c4>
 80017ee:	b1b0      	cbz	r0, 800181e <_vfiprintf_r+0x156>
 80017f0:	9207      	str	r2, [sp, #28]
 80017f2:	e014      	b.n	800181e <_vfiprintf_r+0x156>
 80017f4:	eba0 0308 	sub.w	r3, r0, r8
 80017f8:	fa09 f303 	lsl.w	r3, r9, r3
 80017fc:	4313      	orrs	r3, r2
 80017fe:	9304      	str	r3, [sp, #16]
 8001800:	46a2      	mov	sl, r4
 8001802:	e7d2      	b.n	80017aa <_vfiprintf_r+0xe2>
 8001804:	9b03      	ldr	r3, [sp, #12]
 8001806:	1d19      	adds	r1, r3, #4
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	9103      	str	r1, [sp, #12]
 800180c:	2b00      	cmp	r3, #0
 800180e:	bfbb      	ittet	lt
 8001810:	425b      	neglt	r3, r3
 8001812:	f042 0202 	orrlt.w	r2, r2, #2
 8001816:	9307      	strge	r3, [sp, #28]
 8001818:	9307      	strlt	r3, [sp, #28]
 800181a:	bfb8      	it	lt
 800181c:	9204      	strlt	r2, [sp, #16]
 800181e:	7823      	ldrb	r3, [r4, #0]
 8001820:	2b2e      	cmp	r3, #46	; 0x2e
 8001822:	d10c      	bne.n	800183e <_vfiprintf_r+0x176>
 8001824:	7863      	ldrb	r3, [r4, #1]
 8001826:	2b2a      	cmp	r3, #42	; 0x2a
 8001828:	d135      	bne.n	8001896 <_vfiprintf_r+0x1ce>
 800182a:	9b03      	ldr	r3, [sp, #12]
 800182c:	1d1a      	adds	r2, r3, #4
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	9203      	str	r2, [sp, #12]
 8001832:	2b00      	cmp	r3, #0
 8001834:	bfb8      	it	lt
 8001836:	f04f 33ff 	movlt.w	r3, #4294967295
 800183a:	3402      	adds	r4, #2
 800183c:	9305      	str	r3, [sp, #20]
 800183e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8001924 <_vfiprintf_r+0x25c>
 8001842:	7821      	ldrb	r1, [r4, #0]
 8001844:	2203      	movs	r2, #3
 8001846:	4650      	mov	r0, sl
 8001848:	f7fe fcea 	bl	8000220 <memchr>
 800184c:	b140      	cbz	r0, 8001860 <_vfiprintf_r+0x198>
 800184e:	2340      	movs	r3, #64	; 0x40
 8001850:	eba0 000a 	sub.w	r0, r0, sl
 8001854:	fa03 f000 	lsl.w	r0, r3, r0
 8001858:	9b04      	ldr	r3, [sp, #16]
 800185a:	4303      	orrs	r3, r0
 800185c:	3401      	adds	r4, #1
 800185e:	9304      	str	r3, [sp, #16]
 8001860:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001864:	482c      	ldr	r0, [pc, #176]	; (8001918 <_vfiprintf_r+0x250>)
 8001866:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800186a:	2206      	movs	r2, #6
 800186c:	f7fe fcd8 	bl	8000220 <memchr>
 8001870:	2800      	cmp	r0, #0
 8001872:	d03f      	beq.n	80018f4 <_vfiprintf_r+0x22c>
 8001874:	4b29      	ldr	r3, [pc, #164]	; (800191c <_vfiprintf_r+0x254>)
 8001876:	bb1b      	cbnz	r3, 80018c0 <_vfiprintf_r+0x1f8>
 8001878:	9b03      	ldr	r3, [sp, #12]
 800187a:	3307      	adds	r3, #7
 800187c:	f023 0307 	bic.w	r3, r3, #7
 8001880:	3308      	adds	r3, #8
 8001882:	9303      	str	r3, [sp, #12]
 8001884:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001886:	443b      	add	r3, r7
 8001888:	9309      	str	r3, [sp, #36]	; 0x24
 800188a:	e767      	b.n	800175c <_vfiprintf_r+0x94>
 800188c:	fb0c 3202 	mla	r2, ip, r2, r3
 8001890:	460c      	mov	r4, r1
 8001892:	2001      	movs	r0, #1
 8001894:	e7a5      	b.n	80017e2 <_vfiprintf_r+0x11a>
 8001896:	2300      	movs	r3, #0
 8001898:	3401      	adds	r4, #1
 800189a:	9305      	str	r3, [sp, #20]
 800189c:	4619      	mov	r1, r3
 800189e:	f04f 0c0a 	mov.w	ip, #10
 80018a2:	4620      	mov	r0, r4
 80018a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80018a8:	3a30      	subs	r2, #48	; 0x30
 80018aa:	2a09      	cmp	r2, #9
 80018ac:	d903      	bls.n	80018b6 <_vfiprintf_r+0x1ee>
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d0c5      	beq.n	800183e <_vfiprintf_r+0x176>
 80018b2:	9105      	str	r1, [sp, #20]
 80018b4:	e7c3      	b.n	800183e <_vfiprintf_r+0x176>
 80018b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80018ba:	4604      	mov	r4, r0
 80018bc:	2301      	movs	r3, #1
 80018be:	e7f0      	b.n	80018a2 <_vfiprintf_r+0x1da>
 80018c0:	ab03      	add	r3, sp, #12
 80018c2:	9300      	str	r3, [sp, #0]
 80018c4:	462a      	mov	r2, r5
 80018c6:	4b16      	ldr	r3, [pc, #88]	; (8001920 <_vfiprintf_r+0x258>)
 80018c8:	a904      	add	r1, sp, #16
 80018ca:	4630      	mov	r0, r6
 80018cc:	f3af 8000 	nop.w
 80018d0:	4607      	mov	r7, r0
 80018d2:	1c78      	adds	r0, r7, #1
 80018d4:	d1d6      	bne.n	8001884 <_vfiprintf_r+0x1bc>
 80018d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80018d8:	07d9      	lsls	r1, r3, #31
 80018da:	d405      	bmi.n	80018e8 <_vfiprintf_r+0x220>
 80018dc:	89ab      	ldrh	r3, [r5, #12]
 80018de:	059a      	lsls	r2, r3, #22
 80018e0:	d402      	bmi.n	80018e8 <_vfiprintf_r+0x220>
 80018e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80018e4:	f7ff fe09 	bl	80014fa <__retarget_lock_release_recursive>
 80018e8:	89ab      	ldrh	r3, [r5, #12]
 80018ea:	065b      	lsls	r3, r3, #25
 80018ec:	f53f af12 	bmi.w	8001714 <_vfiprintf_r+0x4c>
 80018f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80018f2:	e711      	b.n	8001718 <_vfiprintf_r+0x50>
 80018f4:	ab03      	add	r3, sp, #12
 80018f6:	9300      	str	r3, [sp, #0]
 80018f8:	462a      	mov	r2, r5
 80018fa:	4b09      	ldr	r3, [pc, #36]	; (8001920 <_vfiprintf_r+0x258>)
 80018fc:	a904      	add	r1, sp, #16
 80018fe:	4630      	mov	r0, r6
 8001900:	f000 f880 	bl	8001a04 <_printf_i>
 8001904:	e7e4      	b.n	80018d0 <_vfiprintf_r+0x208>
 8001906:	bf00      	nop
 8001908:	08002060 	.word	0x08002060
 800190c:	08002080 	.word	0x08002080
 8001910:	08002040 	.word	0x08002040
 8001914:	080020a0 	.word	0x080020a0
 8001918:	080020aa 	.word	0x080020aa
 800191c:	00000000 	.word	0x00000000
 8001920:	080016a3 	.word	0x080016a3
 8001924:	080020a6 	.word	0x080020a6

08001928 <_printf_common>:
 8001928:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800192c:	4616      	mov	r6, r2
 800192e:	4699      	mov	r9, r3
 8001930:	688a      	ldr	r2, [r1, #8]
 8001932:	690b      	ldr	r3, [r1, #16]
 8001934:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001938:	4293      	cmp	r3, r2
 800193a:	bfb8      	it	lt
 800193c:	4613      	movlt	r3, r2
 800193e:	6033      	str	r3, [r6, #0]
 8001940:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001944:	4607      	mov	r7, r0
 8001946:	460c      	mov	r4, r1
 8001948:	b10a      	cbz	r2, 800194e <_printf_common+0x26>
 800194a:	3301      	adds	r3, #1
 800194c:	6033      	str	r3, [r6, #0]
 800194e:	6823      	ldr	r3, [r4, #0]
 8001950:	0699      	lsls	r1, r3, #26
 8001952:	bf42      	ittt	mi
 8001954:	6833      	ldrmi	r3, [r6, #0]
 8001956:	3302      	addmi	r3, #2
 8001958:	6033      	strmi	r3, [r6, #0]
 800195a:	6825      	ldr	r5, [r4, #0]
 800195c:	f015 0506 	ands.w	r5, r5, #6
 8001960:	d106      	bne.n	8001970 <_printf_common+0x48>
 8001962:	f104 0a19 	add.w	sl, r4, #25
 8001966:	68e3      	ldr	r3, [r4, #12]
 8001968:	6832      	ldr	r2, [r6, #0]
 800196a:	1a9b      	subs	r3, r3, r2
 800196c:	42ab      	cmp	r3, r5
 800196e:	dc26      	bgt.n	80019be <_printf_common+0x96>
 8001970:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001974:	1e13      	subs	r3, r2, #0
 8001976:	6822      	ldr	r2, [r4, #0]
 8001978:	bf18      	it	ne
 800197a:	2301      	movne	r3, #1
 800197c:	0692      	lsls	r2, r2, #26
 800197e:	d42b      	bmi.n	80019d8 <_printf_common+0xb0>
 8001980:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001984:	4649      	mov	r1, r9
 8001986:	4638      	mov	r0, r7
 8001988:	47c0      	blx	r8
 800198a:	3001      	adds	r0, #1
 800198c:	d01e      	beq.n	80019cc <_printf_common+0xa4>
 800198e:	6823      	ldr	r3, [r4, #0]
 8001990:	68e5      	ldr	r5, [r4, #12]
 8001992:	6832      	ldr	r2, [r6, #0]
 8001994:	f003 0306 	and.w	r3, r3, #6
 8001998:	2b04      	cmp	r3, #4
 800199a:	bf08      	it	eq
 800199c:	1aad      	subeq	r5, r5, r2
 800199e:	68a3      	ldr	r3, [r4, #8]
 80019a0:	6922      	ldr	r2, [r4, #16]
 80019a2:	bf0c      	ite	eq
 80019a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80019a8:	2500      	movne	r5, #0
 80019aa:	4293      	cmp	r3, r2
 80019ac:	bfc4      	itt	gt
 80019ae:	1a9b      	subgt	r3, r3, r2
 80019b0:	18ed      	addgt	r5, r5, r3
 80019b2:	2600      	movs	r6, #0
 80019b4:	341a      	adds	r4, #26
 80019b6:	42b5      	cmp	r5, r6
 80019b8:	d11a      	bne.n	80019f0 <_printf_common+0xc8>
 80019ba:	2000      	movs	r0, #0
 80019bc:	e008      	b.n	80019d0 <_printf_common+0xa8>
 80019be:	2301      	movs	r3, #1
 80019c0:	4652      	mov	r2, sl
 80019c2:	4649      	mov	r1, r9
 80019c4:	4638      	mov	r0, r7
 80019c6:	47c0      	blx	r8
 80019c8:	3001      	adds	r0, #1
 80019ca:	d103      	bne.n	80019d4 <_printf_common+0xac>
 80019cc:	f04f 30ff 	mov.w	r0, #4294967295
 80019d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80019d4:	3501      	adds	r5, #1
 80019d6:	e7c6      	b.n	8001966 <_printf_common+0x3e>
 80019d8:	18e1      	adds	r1, r4, r3
 80019da:	1c5a      	adds	r2, r3, #1
 80019dc:	2030      	movs	r0, #48	; 0x30
 80019de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80019e2:	4422      	add	r2, r4
 80019e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80019e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80019ec:	3302      	adds	r3, #2
 80019ee:	e7c7      	b.n	8001980 <_printf_common+0x58>
 80019f0:	2301      	movs	r3, #1
 80019f2:	4622      	mov	r2, r4
 80019f4:	4649      	mov	r1, r9
 80019f6:	4638      	mov	r0, r7
 80019f8:	47c0      	blx	r8
 80019fa:	3001      	adds	r0, #1
 80019fc:	d0e6      	beq.n	80019cc <_printf_common+0xa4>
 80019fe:	3601      	adds	r6, #1
 8001a00:	e7d9      	b.n	80019b6 <_printf_common+0x8e>
	...

08001a04 <_printf_i>:
 8001a04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001a08:	460c      	mov	r4, r1
 8001a0a:	4691      	mov	r9, r2
 8001a0c:	7e27      	ldrb	r7, [r4, #24]
 8001a0e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001a10:	2f78      	cmp	r7, #120	; 0x78
 8001a12:	4680      	mov	r8, r0
 8001a14:	469a      	mov	sl, r3
 8001a16:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001a1a:	d807      	bhi.n	8001a2c <_printf_i+0x28>
 8001a1c:	2f62      	cmp	r7, #98	; 0x62
 8001a1e:	d80a      	bhi.n	8001a36 <_printf_i+0x32>
 8001a20:	2f00      	cmp	r7, #0
 8001a22:	f000 80d8 	beq.w	8001bd6 <_printf_i+0x1d2>
 8001a26:	2f58      	cmp	r7, #88	; 0x58
 8001a28:	f000 80a3 	beq.w	8001b72 <_printf_i+0x16e>
 8001a2c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001a30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001a34:	e03a      	b.n	8001aac <_printf_i+0xa8>
 8001a36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001a3a:	2b15      	cmp	r3, #21
 8001a3c:	d8f6      	bhi.n	8001a2c <_printf_i+0x28>
 8001a3e:	a001      	add	r0, pc, #4	; (adr r0, 8001a44 <_printf_i+0x40>)
 8001a40:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8001a44:	08001a9d 	.word	0x08001a9d
 8001a48:	08001ab1 	.word	0x08001ab1
 8001a4c:	08001a2d 	.word	0x08001a2d
 8001a50:	08001a2d 	.word	0x08001a2d
 8001a54:	08001a2d 	.word	0x08001a2d
 8001a58:	08001a2d 	.word	0x08001a2d
 8001a5c:	08001ab1 	.word	0x08001ab1
 8001a60:	08001a2d 	.word	0x08001a2d
 8001a64:	08001a2d 	.word	0x08001a2d
 8001a68:	08001a2d 	.word	0x08001a2d
 8001a6c:	08001a2d 	.word	0x08001a2d
 8001a70:	08001bbd 	.word	0x08001bbd
 8001a74:	08001ae1 	.word	0x08001ae1
 8001a78:	08001b9f 	.word	0x08001b9f
 8001a7c:	08001a2d 	.word	0x08001a2d
 8001a80:	08001a2d 	.word	0x08001a2d
 8001a84:	08001bdf 	.word	0x08001bdf
 8001a88:	08001a2d 	.word	0x08001a2d
 8001a8c:	08001ae1 	.word	0x08001ae1
 8001a90:	08001a2d 	.word	0x08001a2d
 8001a94:	08001a2d 	.word	0x08001a2d
 8001a98:	08001ba7 	.word	0x08001ba7
 8001a9c:	680b      	ldr	r3, [r1, #0]
 8001a9e:	1d1a      	adds	r2, r3, #4
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	600a      	str	r2, [r1, #0]
 8001aa4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001aa8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001aac:	2301      	movs	r3, #1
 8001aae:	e0a3      	b.n	8001bf8 <_printf_i+0x1f4>
 8001ab0:	6825      	ldr	r5, [r4, #0]
 8001ab2:	6808      	ldr	r0, [r1, #0]
 8001ab4:	062e      	lsls	r6, r5, #24
 8001ab6:	f100 0304 	add.w	r3, r0, #4
 8001aba:	d50a      	bpl.n	8001ad2 <_printf_i+0xce>
 8001abc:	6805      	ldr	r5, [r0, #0]
 8001abe:	600b      	str	r3, [r1, #0]
 8001ac0:	2d00      	cmp	r5, #0
 8001ac2:	da03      	bge.n	8001acc <_printf_i+0xc8>
 8001ac4:	232d      	movs	r3, #45	; 0x2d
 8001ac6:	426d      	negs	r5, r5
 8001ac8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001acc:	485e      	ldr	r0, [pc, #376]	; (8001c48 <_printf_i+0x244>)
 8001ace:	230a      	movs	r3, #10
 8001ad0:	e019      	b.n	8001b06 <_printf_i+0x102>
 8001ad2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8001ad6:	6805      	ldr	r5, [r0, #0]
 8001ad8:	600b      	str	r3, [r1, #0]
 8001ada:	bf18      	it	ne
 8001adc:	b22d      	sxthne	r5, r5
 8001ade:	e7ef      	b.n	8001ac0 <_printf_i+0xbc>
 8001ae0:	680b      	ldr	r3, [r1, #0]
 8001ae2:	6825      	ldr	r5, [r4, #0]
 8001ae4:	1d18      	adds	r0, r3, #4
 8001ae6:	6008      	str	r0, [r1, #0]
 8001ae8:	0628      	lsls	r0, r5, #24
 8001aea:	d501      	bpl.n	8001af0 <_printf_i+0xec>
 8001aec:	681d      	ldr	r5, [r3, #0]
 8001aee:	e002      	b.n	8001af6 <_printf_i+0xf2>
 8001af0:	0669      	lsls	r1, r5, #25
 8001af2:	d5fb      	bpl.n	8001aec <_printf_i+0xe8>
 8001af4:	881d      	ldrh	r5, [r3, #0]
 8001af6:	4854      	ldr	r0, [pc, #336]	; (8001c48 <_printf_i+0x244>)
 8001af8:	2f6f      	cmp	r7, #111	; 0x6f
 8001afa:	bf0c      	ite	eq
 8001afc:	2308      	moveq	r3, #8
 8001afe:	230a      	movne	r3, #10
 8001b00:	2100      	movs	r1, #0
 8001b02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001b06:	6866      	ldr	r6, [r4, #4]
 8001b08:	60a6      	str	r6, [r4, #8]
 8001b0a:	2e00      	cmp	r6, #0
 8001b0c:	bfa2      	ittt	ge
 8001b0e:	6821      	ldrge	r1, [r4, #0]
 8001b10:	f021 0104 	bicge.w	r1, r1, #4
 8001b14:	6021      	strge	r1, [r4, #0]
 8001b16:	b90d      	cbnz	r5, 8001b1c <_printf_i+0x118>
 8001b18:	2e00      	cmp	r6, #0
 8001b1a:	d04d      	beq.n	8001bb8 <_printf_i+0x1b4>
 8001b1c:	4616      	mov	r6, r2
 8001b1e:	fbb5 f1f3 	udiv	r1, r5, r3
 8001b22:	fb03 5711 	mls	r7, r3, r1, r5
 8001b26:	5dc7      	ldrb	r7, [r0, r7]
 8001b28:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001b2c:	462f      	mov	r7, r5
 8001b2e:	42bb      	cmp	r3, r7
 8001b30:	460d      	mov	r5, r1
 8001b32:	d9f4      	bls.n	8001b1e <_printf_i+0x11a>
 8001b34:	2b08      	cmp	r3, #8
 8001b36:	d10b      	bne.n	8001b50 <_printf_i+0x14c>
 8001b38:	6823      	ldr	r3, [r4, #0]
 8001b3a:	07df      	lsls	r7, r3, #31
 8001b3c:	d508      	bpl.n	8001b50 <_printf_i+0x14c>
 8001b3e:	6923      	ldr	r3, [r4, #16]
 8001b40:	6861      	ldr	r1, [r4, #4]
 8001b42:	4299      	cmp	r1, r3
 8001b44:	bfde      	ittt	le
 8001b46:	2330      	movle	r3, #48	; 0x30
 8001b48:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001b4c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001b50:	1b92      	subs	r2, r2, r6
 8001b52:	6122      	str	r2, [r4, #16]
 8001b54:	f8cd a000 	str.w	sl, [sp]
 8001b58:	464b      	mov	r3, r9
 8001b5a:	aa03      	add	r2, sp, #12
 8001b5c:	4621      	mov	r1, r4
 8001b5e:	4640      	mov	r0, r8
 8001b60:	f7ff fee2 	bl	8001928 <_printf_common>
 8001b64:	3001      	adds	r0, #1
 8001b66:	d14c      	bne.n	8001c02 <_printf_i+0x1fe>
 8001b68:	f04f 30ff 	mov.w	r0, #4294967295
 8001b6c:	b004      	add	sp, #16
 8001b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b72:	4835      	ldr	r0, [pc, #212]	; (8001c48 <_printf_i+0x244>)
 8001b74:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001b78:	6823      	ldr	r3, [r4, #0]
 8001b7a:	680e      	ldr	r6, [r1, #0]
 8001b7c:	061f      	lsls	r7, r3, #24
 8001b7e:	f856 5b04 	ldr.w	r5, [r6], #4
 8001b82:	600e      	str	r6, [r1, #0]
 8001b84:	d514      	bpl.n	8001bb0 <_printf_i+0x1ac>
 8001b86:	07d9      	lsls	r1, r3, #31
 8001b88:	bf44      	itt	mi
 8001b8a:	f043 0320 	orrmi.w	r3, r3, #32
 8001b8e:	6023      	strmi	r3, [r4, #0]
 8001b90:	b91d      	cbnz	r5, 8001b9a <_printf_i+0x196>
 8001b92:	6823      	ldr	r3, [r4, #0]
 8001b94:	f023 0320 	bic.w	r3, r3, #32
 8001b98:	6023      	str	r3, [r4, #0]
 8001b9a:	2310      	movs	r3, #16
 8001b9c:	e7b0      	b.n	8001b00 <_printf_i+0xfc>
 8001b9e:	6823      	ldr	r3, [r4, #0]
 8001ba0:	f043 0320 	orr.w	r3, r3, #32
 8001ba4:	6023      	str	r3, [r4, #0]
 8001ba6:	2378      	movs	r3, #120	; 0x78
 8001ba8:	4828      	ldr	r0, [pc, #160]	; (8001c4c <_printf_i+0x248>)
 8001baa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001bae:	e7e3      	b.n	8001b78 <_printf_i+0x174>
 8001bb0:	065e      	lsls	r6, r3, #25
 8001bb2:	bf48      	it	mi
 8001bb4:	b2ad      	uxthmi	r5, r5
 8001bb6:	e7e6      	b.n	8001b86 <_printf_i+0x182>
 8001bb8:	4616      	mov	r6, r2
 8001bba:	e7bb      	b.n	8001b34 <_printf_i+0x130>
 8001bbc:	680b      	ldr	r3, [r1, #0]
 8001bbe:	6826      	ldr	r6, [r4, #0]
 8001bc0:	6960      	ldr	r0, [r4, #20]
 8001bc2:	1d1d      	adds	r5, r3, #4
 8001bc4:	600d      	str	r5, [r1, #0]
 8001bc6:	0635      	lsls	r5, r6, #24
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	d501      	bpl.n	8001bd0 <_printf_i+0x1cc>
 8001bcc:	6018      	str	r0, [r3, #0]
 8001bce:	e002      	b.n	8001bd6 <_printf_i+0x1d2>
 8001bd0:	0671      	lsls	r1, r6, #25
 8001bd2:	d5fb      	bpl.n	8001bcc <_printf_i+0x1c8>
 8001bd4:	8018      	strh	r0, [r3, #0]
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	6123      	str	r3, [r4, #16]
 8001bda:	4616      	mov	r6, r2
 8001bdc:	e7ba      	b.n	8001b54 <_printf_i+0x150>
 8001bde:	680b      	ldr	r3, [r1, #0]
 8001be0:	1d1a      	adds	r2, r3, #4
 8001be2:	600a      	str	r2, [r1, #0]
 8001be4:	681e      	ldr	r6, [r3, #0]
 8001be6:	6862      	ldr	r2, [r4, #4]
 8001be8:	2100      	movs	r1, #0
 8001bea:	4630      	mov	r0, r6
 8001bec:	f7fe fb18 	bl	8000220 <memchr>
 8001bf0:	b108      	cbz	r0, 8001bf6 <_printf_i+0x1f2>
 8001bf2:	1b80      	subs	r0, r0, r6
 8001bf4:	6060      	str	r0, [r4, #4]
 8001bf6:	6863      	ldr	r3, [r4, #4]
 8001bf8:	6123      	str	r3, [r4, #16]
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001c00:	e7a8      	b.n	8001b54 <_printf_i+0x150>
 8001c02:	6923      	ldr	r3, [r4, #16]
 8001c04:	4632      	mov	r2, r6
 8001c06:	4649      	mov	r1, r9
 8001c08:	4640      	mov	r0, r8
 8001c0a:	47d0      	blx	sl
 8001c0c:	3001      	adds	r0, #1
 8001c0e:	d0ab      	beq.n	8001b68 <_printf_i+0x164>
 8001c10:	6823      	ldr	r3, [r4, #0]
 8001c12:	079b      	lsls	r3, r3, #30
 8001c14:	d413      	bmi.n	8001c3e <_printf_i+0x23a>
 8001c16:	68e0      	ldr	r0, [r4, #12]
 8001c18:	9b03      	ldr	r3, [sp, #12]
 8001c1a:	4298      	cmp	r0, r3
 8001c1c:	bfb8      	it	lt
 8001c1e:	4618      	movlt	r0, r3
 8001c20:	e7a4      	b.n	8001b6c <_printf_i+0x168>
 8001c22:	2301      	movs	r3, #1
 8001c24:	4632      	mov	r2, r6
 8001c26:	4649      	mov	r1, r9
 8001c28:	4640      	mov	r0, r8
 8001c2a:	47d0      	blx	sl
 8001c2c:	3001      	adds	r0, #1
 8001c2e:	d09b      	beq.n	8001b68 <_printf_i+0x164>
 8001c30:	3501      	adds	r5, #1
 8001c32:	68e3      	ldr	r3, [r4, #12]
 8001c34:	9903      	ldr	r1, [sp, #12]
 8001c36:	1a5b      	subs	r3, r3, r1
 8001c38:	42ab      	cmp	r3, r5
 8001c3a:	dcf2      	bgt.n	8001c22 <_printf_i+0x21e>
 8001c3c:	e7eb      	b.n	8001c16 <_printf_i+0x212>
 8001c3e:	2500      	movs	r5, #0
 8001c40:	f104 0619 	add.w	r6, r4, #25
 8001c44:	e7f5      	b.n	8001c32 <_printf_i+0x22e>
 8001c46:	bf00      	nop
 8001c48:	080020b1 	.word	0x080020b1
 8001c4c:	080020c2 	.word	0x080020c2

08001c50 <_putc_r>:
 8001c50:	b570      	push	{r4, r5, r6, lr}
 8001c52:	460d      	mov	r5, r1
 8001c54:	4614      	mov	r4, r2
 8001c56:	4606      	mov	r6, r0
 8001c58:	b118      	cbz	r0, 8001c62 <_putc_r+0x12>
 8001c5a:	6983      	ldr	r3, [r0, #24]
 8001c5c:	b90b      	cbnz	r3, 8001c62 <_putc_r+0x12>
 8001c5e:	f7ff fbad 	bl	80013bc <__sinit>
 8001c62:	4b1c      	ldr	r3, [pc, #112]	; (8001cd4 <_putc_r+0x84>)
 8001c64:	429c      	cmp	r4, r3
 8001c66:	d124      	bne.n	8001cb2 <_putc_r+0x62>
 8001c68:	6874      	ldr	r4, [r6, #4]
 8001c6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001c6c:	07d8      	lsls	r0, r3, #31
 8001c6e:	d405      	bmi.n	8001c7c <_putc_r+0x2c>
 8001c70:	89a3      	ldrh	r3, [r4, #12]
 8001c72:	0599      	lsls	r1, r3, #22
 8001c74:	d402      	bmi.n	8001c7c <_putc_r+0x2c>
 8001c76:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001c78:	f7ff fc3e 	bl	80014f8 <__retarget_lock_acquire_recursive>
 8001c7c:	68a3      	ldr	r3, [r4, #8]
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	60a3      	str	r3, [r4, #8]
 8001c84:	da05      	bge.n	8001c92 <_putc_r+0x42>
 8001c86:	69a2      	ldr	r2, [r4, #24]
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	db1c      	blt.n	8001cc6 <_putc_r+0x76>
 8001c8c:	b2eb      	uxtb	r3, r5
 8001c8e:	2b0a      	cmp	r3, #10
 8001c90:	d019      	beq.n	8001cc6 <_putc_r+0x76>
 8001c92:	6823      	ldr	r3, [r4, #0]
 8001c94:	1c5a      	adds	r2, r3, #1
 8001c96:	6022      	str	r2, [r4, #0]
 8001c98:	701d      	strb	r5, [r3, #0]
 8001c9a:	b2ed      	uxtb	r5, r5
 8001c9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001c9e:	07da      	lsls	r2, r3, #31
 8001ca0:	d405      	bmi.n	8001cae <_putc_r+0x5e>
 8001ca2:	89a3      	ldrh	r3, [r4, #12]
 8001ca4:	059b      	lsls	r3, r3, #22
 8001ca6:	d402      	bmi.n	8001cae <_putc_r+0x5e>
 8001ca8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001caa:	f7ff fc26 	bl	80014fa <__retarget_lock_release_recursive>
 8001cae:	4628      	mov	r0, r5
 8001cb0:	bd70      	pop	{r4, r5, r6, pc}
 8001cb2:	4b09      	ldr	r3, [pc, #36]	; (8001cd8 <_putc_r+0x88>)
 8001cb4:	429c      	cmp	r4, r3
 8001cb6:	d101      	bne.n	8001cbc <_putc_r+0x6c>
 8001cb8:	68b4      	ldr	r4, [r6, #8]
 8001cba:	e7d6      	b.n	8001c6a <_putc_r+0x1a>
 8001cbc:	4b07      	ldr	r3, [pc, #28]	; (8001cdc <_putc_r+0x8c>)
 8001cbe:	429c      	cmp	r4, r3
 8001cc0:	bf08      	it	eq
 8001cc2:	68f4      	ldreq	r4, [r6, #12]
 8001cc4:	e7d1      	b.n	8001c6a <_putc_r+0x1a>
 8001cc6:	4629      	mov	r1, r5
 8001cc8:	4622      	mov	r2, r4
 8001cca:	4630      	mov	r0, r6
 8001ccc:	f7ff f99c 	bl	8001008 <__swbuf_r>
 8001cd0:	4605      	mov	r5, r0
 8001cd2:	e7e3      	b.n	8001c9c <_putc_r+0x4c>
 8001cd4:	08002060 	.word	0x08002060
 8001cd8:	08002080 	.word	0x08002080
 8001cdc:	08002040 	.word	0x08002040

08001ce0 <__sread>:
 8001ce0:	b510      	push	{r4, lr}
 8001ce2:	460c      	mov	r4, r1
 8001ce4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ce8:	f000 f894 	bl	8001e14 <_read_r>
 8001cec:	2800      	cmp	r0, #0
 8001cee:	bfab      	itete	ge
 8001cf0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001cf2:	89a3      	ldrhlt	r3, [r4, #12]
 8001cf4:	181b      	addge	r3, r3, r0
 8001cf6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001cfa:	bfac      	ite	ge
 8001cfc:	6563      	strge	r3, [r4, #84]	; 0x54
 8001cfe:	81a3      	strhlt	r3, [r4, #12]
 8001d00:	bd10      	pop	{r4, pc}

08001d02 <__swrite>:
 8001d02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d06:	461f      	mov	r7, r3
 8001d08:	898b      	ldrh	r3, [r1, #12]
 8001d0a:	05db      	lsls	r3, r3, #23
 8001d0c:	4605      	mov	r5, r0
 8001d0e:	460c      	mov	r4, r1
 8001d10:	4616      	mov	r6, r2
 8001d12:	d505      	bpl.n	8001d20 <__swrite+0x1e>
 8001d14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d18:	2302      	movs	r3, #2
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f000 f868 	bl	8001df0 <_lseek_r>
 8001d20:	89a3      	ldrh	r3, [r4, #12]
 8001d22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001d26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001d2a:	81a3      	strh	r3, [r4, #12]
 8001d2c:	4632      	mov	r2, r6
 8001d2e:	463b      	mov	r3, r7
 8001d30:	4628      	mov	r0, r5
 8001d32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001d36:	f000 b817 	b.w	8001d68 <_write_r>

08001d3a <__sseek>:
 8001d3a:	b510      	push	{r4, lr}
 8001d3c:	460c      	mov	r4, r1
 8001d3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d42:	f000 f855 	bl	8001df0 <_lseek_r>
 8001d46:	1c43      	adds	r3, r0, #1
 8001d48:	89a3      	ldrh	r3, [r4, #12]
 8001d4a:	bf15      	itete	ne
 8001d4c:	6560      	strne	r0, [r4, #84]	; 0x54
 8001d4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001d52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001d56:	81a3      	strheq	r3, [r4, #12]
 8001d58:	bf18      	it	ne
 8001d5a:	81a3      	strhne	r3, [r4, #12]
 8001d5c:	bd10      	pop	{r4, pc}

08001d5e <__sclose>:
 8001d5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d62:	f000 b813 	b.w	8001d8c <_close_r>
	...

08001d68 <_write_r>:
 8001d68:	b538      	push	{r3, r4, r5, lr}
 8001d6a:	4d07      	ldr	r5, [pc, #28]	; (8001d88 <_write_r+0x20>)
 8001d6c:	4604      	mov	r4, r0
 8001d6e:	4608      	mov	r0, r1
 8001d70:	4611      	mov	r1, r2
 8001d72:	2200      	movs	r2, #0
 8001d74:	602a      	str	r2, [r5, #0]
 8001d76:	461a      	mov	r2, r3
 8001d78:	f7fe fe79 	bl	8000a6e <_write>
 8001d7c:	1c43      	adds	r3, r0, #1
 8001d7e:	d102      	bne.n	8001d86 <_write_r+0x1e>
 8001d80:	682b      	ldr	r3, [r5, #0]
 8001d82:	b103      	cbz	r3, 8001d86 <_write_r+0x1e>
 8001d84:	6023      	str	r3, [r4, #0]
 8001d86:	bd38      	pop	{r3, r4, r5, pc}
 8001d88:	200000a8 	.word	0x200000a8

08001d8c <_close_r>:
 8001d8c:	b538      	push	{r3, r4, r5, lr}
 8001d8e:	4d06      	ldr	r5, [pc, #24]	; (8001da8 <_close_r+0x1c>)
 8001d90:	2300      	movs	r3, #0
 8001d92:	4604      	mov	r4, r0
 8001d94:	4608      	mov	r0, r1
 8001d96:	602b      	str	r3, [r5, #0]
 8001d98:	f7fe fe85 	bl	8000aa6 <_close>
 8001d9c:	1c43      	adds	r3, r0, #1
 8001d9e:	d102      	bne.n	8001da6 <_close_r+0x1a>
 8001da0:	682b      	ldr	r3, [r5, #0]
 8001da2:	b103      	cbz	r3, 8001da6 <_close_r+0x1a>
 8001da4:	6023      	str	r3, [r4, #0]
 8001da6:	bd38      	pop	{r3, r4, r5, pc}
 8001da8:	200000a8 	.word	0x200000a8

08001dac <_fstat_r>:
 8001dac:	b538      	push	{r3, r4, r5, lr}
 8001dae:	4d07      	ldr	r5, [pc, #28]	; (8001dcc <_fstat_r+0x20>)
 8001db0:	2300      	movs	r3, #0
 8001db2:	4604      	mov	r4, r0
 8001db4:	4608      	mov	r0, r1
 8001db6:	4611      	mov	r1, r2
 8001db8:	602b      	str	r3, [r5, #0]
 8001dba:	f7fe fe7f 	bl	8000abc <_fstat>
 8001dbe:	1c43      	adds	r3, r0, #1
 8001dc0:	d102      	bne.n	8001dc8 <_fstat_r+0x1c>
 8001dc2:	682b      	ldr	r3, [r5, #0]
 8001dc4:	b103      	cbz	r3, 8001dc8 <_fstat_r+0x1c>
 8001dc6:	6023      	str	r3, [r4, #0]
 8001dc8:	bd38      	pop	{r3, r4, r5, pc}
 8001dca:	bf00      	nop
 8001dcc:	200000a8 	.word	0x200000a8

08001dd0 <_isatty_r>:
 8001dd0:	b538      	push	{r3, r4, r5, lr}
 8001dd2:	4d06      	ldr	r5, [pc, #24]	; (8001dec <_isatty_r+0x1c>)
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	4604      	mov	r4, r0
 8001dd8:	4608      	mov	r0, r1
 8001dda:	602b      	str	r3, [r5, #0]
 8001ddc:	f7fe fe7d 	bl	8000ada <_isatty>
 8001de0:	1c43      	adds	r3, r0, #1
 8001de2:	d102      	bne.n	8001dea <_isatty_r+0x1a>
 8001de4:	682b      	ldr	r3, [r5, #0]
 8001de6:	b103      	cbz	r3, 8001dea <_isatty_r+0x1a>
 8001de8:	6023      	str	r3, [r4, #0]
 8001dea:	bd38      	pop	{r3, r4, r5, pc}
 8001dec:	200000a8 	.word	0x200000a8

08001df0 <_lseek_r>:
 8001df0:	b538      	push	{r3, r4, r5, lr}
 8001df2:	4d07      	ldr	r5, [pc, #28]	; (8001e10 <_lseek_r+0x20>)
 8001df4:	4604      	mov	r4, r0
 8001df6:	4608      	mov	r0, r1
 8001df8:	4611      	mov	r1, r2
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	602a      	str	r2, [r5, #0]
 8001dfe:	461a      	mov	r2, r3
 8001e00:	f7fe fe75 	bl	8000aee <_lseek>
 8001e04:	1c43      	adds	r3, r0, #1
 8001e06:	d102      	bne.n	8001e0e <_lseek_r+0x1e>
 8001e08:	682b      	ldr	r3, [r5, #0]
 8001e0a:	b103      	cbz	r3, 8001e0e <_lseek_r+0x1e>
 8001e0c:	6023      	str	r3, [r4, #0]
 8001e0e:	bd38      	pop	{r3, r4, r5, pc}
 8001e10:	200000a8 	.word	0x200000a8

08001e14 <_read_r>:
 8001e14:	b538      	push	{r3, r4, r5, lr}
 8001e16:	4d07      	ldr	r5, [pc, #28]	; (8001e34 <_read_r+0x20>)
 8001e18:	4604      	mov	r4, r0
 8001e1a:	4608      	mov	r0, r1
 8001e1c:	4611      	mov	r1, r2
 8001e1e:	2200      	movs	r2, #0
 8001e20:	602a      	str	r2, [r5, #0]
 8001e22:	461a      	mov	r2, r3
 8001e24:	f7fe fe06 	bl	8000a34 <_read>
 8001e28:	1c43      	adds	r3, r0, #1
 8001e2a:	d102      	bne.n	8001e32 <_read_r+0x1e>
 8001e2c:	682b      	ldr	r3, [r5, #0]
 8001e2e:	b103      	cbz	r3, 8001e32 <_read_r+0x1e>
 8001e30:	6023      	str	r3, [r4, #0]
 8001e32:	bd38      	pop	{r3, r4, r5, pc}
 8001e34:	200000a8 	.word	0x200000a8

08001e38 <_init>:
 8001e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e3a:	bf00      	nop
 8001e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e3e:	bc08      	pop	{r3}
 8001e40:	469e      	mov	lr, r3
 8001e42:	4770      	bx	lr

08001e44 <_fini>:
 8001e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e46:	bf00      	nop
 8001e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e4a:	bc08      	pop	{r3}
 8001e4c:	469e      	mov	lr, r3
 8001e4e:	4770      	bx	lr

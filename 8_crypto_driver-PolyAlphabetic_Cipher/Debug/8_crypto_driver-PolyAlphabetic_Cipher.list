
8_crypto_driver-PolyAlphabetic_Cipher.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f1c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000344  080020ec  080020ec  000120ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002430  08002430  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08002430  08002430  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002430  08002430  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002430  08002430  00012430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002434  08002434  00012434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08002438  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000044  20000068  080024a0  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  080024a0  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000525e  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000011a6  00000000  00000000  000252f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002b0  00000000  00000000  00026498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000228  00000000  00000000  00026748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b435  00000000  00000000  00026970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004e13  00000000  00000000  00041da5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091231  00000000  00000000  00046bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d7de9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001084  00000000  00000000  000d7e3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080020d4 	.word	0x080020d4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	080020d4 	.word	0x080020d4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <encrypt_monoalphabetic>:
#include<string.h>
#include"MonoAlphabetic_Cipher.h"

/* Encrypt using monoalphabetic engine */
void encrypt_monoalphabetic(char* plain_text, char* key, char* encryptedtext)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b086      	sub	sp, #24
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	60f8      	str	r0, [r7, #12]
 80002c8:	60b9      	str	r1, [r7, #8]
 80002ca:	607a      	str	r2, [r7, #4]
	char plaintext_l ;
    for(int i = 0; i < strlen(plain_text); i++)
 80002cc:	2300      	movs	r3, #0
 80002ce:	617b      	str	r3, [r7, #20]
 80002d0:	e02c      	b.n	800032c <encrypt_monoalphabetic+0x6c>
    {
    	plaintext_l = plain_text[i];
 80002d2:	697b      	ldr	r3, [r7, #20]
 80002d4:	68fa      	ldr	r2, [r7, #12]
 80002d6:	4413      	add	r3, r2
 80002d8:	781b      	ldrb	r3, [r3, #0]
 80002da:	74fb      	strb	r3, [r7, #19]

    	if(plaintext_l >= 'a' && plaintext_l <= 'z')
 80002dc:	7cfb      	ldrb	r3, [r7, #19]
 80002de:	2b60      	cmp	r3, #96	; 0x60
 80002e0:	d90c      	bls.n	80002fc <encrypt_monoalphabetic+0x3c>
 80002e2:	7cfb      	ldrb	r3, [r7, #19]
 80002e4:	2b7a      	cmp	r3, #122	; 0x7a
 80002e6:	d809      	bhi.n	80002fc <encrypt_monoalphabetic+0x3c>
    	{
    		encryptedtext[i] = key[plaintext_l - 'a'];
 80002e8:	7cfb      	ldrb	r3, [r7, #19]
 80002ea:	3b61      	subs	r3, #97	; 0x61
 80002ec:	68ba      	ldr	r2, [r7, #8]
 80002ee:	441a      	add	r2, r3
 80002f0:	697b      	ldr	r3, [r7, #20]
 80002f2:	6879      	ldr	r1, [r7, #4]
 80002f4:	440b      	add	r3, r1
 80002f6:	7812      	ldrb	r2, [r2, #0]
 80002f8:	701a      	strb	r2, [r3, #0]
 80002fa:	e014      	b.n	8000326 <encrypt_monoalphabetic+0x66>
    	}
    	else if(plaintext_l >= 'A' && plaintext_l <= 'Z')
 80002fc:	7cfb      	ldrb	r3, [r7, #19]
 80002fe:	2b40      	cmp	r3, #64	; 0x40
 8000300:	d90c      	bls.n	800031c <encrypt_monoalphabetic+0x5c>
 8000302:	7cfb      	ldrb	r3, [r7, #19]
 8000304:	2b5a      	cmp	r3, #90	; 0x5a
 8000306:	d809      	bhi.n	800031c <encrypt_monoalphabetic+0x5c>
    	{
    		encryptedtext[i] = key[plaintext_l - 'A'];
 8000308:	7cfb      	ldrb	r3, [r7, #19]
 800030a:	3b41      	subs	r3, #65	; 0x41
 800030c:	68ba      	ldr	r2, [r7, #8]
 800030e:	441a      	add	r2, r3
 8000310:	697b      	ldr	r3, [r7, #20]
 8000312:	6879      	ldr	r1, [r7, #4]
 8000314:	440b      	add	r3, r1
 8000316:	7812      	ldrb	r2, [r2, #0]
 8000318:	701a      	strb	r2, [r3, #0]
 800031a:	e004      	b.n	8000326 <encrypt_monoalphabetic+0x66>
    	}
    	else
    	{
    		encryptedtext[i] = plaintext_l;
 800031c:	697b      	ldr	r3, [r7, #20]
 800031e:	687a      	ldr	r2, [r7, #4]
 8000320:	4413      	add	r3, r2
 8000322:	7cfa      	ldrb	r2, [r7, #19]
 8000324:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < strlen(plain_text); i++)
 8000326:	697b      	ldr	r3, [r7, #20]
 8000328:	3301      	adds	r3, #1
 800032a:	617b      	str	r3, [r7, #20]
 800032c:	68f8      	ldr	r0, [r7, #12]
 800032e:	f7ff ff6f 	bl	8000210 <strlen>
 8000332:	4602      	mov	r2, r0
 8000334:	697b      	ldr	r3, [r7, #20]
 8000336:	429a      	cmp	r2, r3
 8000338:	d8cb      	bhi.n	80002d2 <encrypt_monoalphabetic+0x12>
    	}
    }
    encryptedtext[strlen(plain_text)] = '\0';
 800033a:	68f8      	ldr	r0, [r7, #12]
 800033c:	f7ff ff68 	bl	8000210 <strlen>
 8000340:	4602      	mov	r2, r0
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	4413      	add	r3, r2
 8000346:	2200      	movs	r2, #0
 8000348:	701a      	strb	r2, [r3, #0]
}
 800034a:	bf00      	nop
 800034c:	3718      	adds	r7, #24
 800034e:	46bd      	mov	sp, r7
 8000350:	bd80      	pop	{r7, pc}

08000352 <decrypt_monoalphabetic>:


void decrypt_monoalphabetic(char* encrypted_text, char* key, char* decryptedtext)
{
 8000352:	b580      	push	{r7, lr}
 8000354:	b088      	sub	sp, #32
 8000356:	af00      	add	r7, sp, #0
 8000358:	60f8      	str	r0, [r7, #12]
 800035a:	60b9      	str	r1, [r7, #8]
 800035c:	607a      	str	r2, [r7, #4]

	char encryptor;
	for(int i = 0 ; i< strlen(encrypted_text); i++)
 800035e:	2300      	movs	r3, #0
 8000360:	61fb      	str	r3, [r7, #28]
 8000362:	e04e      	b.n	8000402 <decrypt_monoalphabetic+0xb0>
	{
		encryptor = encrypted_text[i];
 8000364:	69fb      	ldr	r3, [r7, #28]
 8000366:	68fa      	ldr	r2, [r7, #12]
 8000368:	4413      	add	r3, r2
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	74fb      	strb	r3, [r7, #19]
		if(encryptor >= 'a' && encryptor <= 'z')
 800036e:	7cfb      	ldrb	r3, [r7, #19]
 8000370:	2b60      	cmp	r3, #96	; 0x60
 8000372:	d91d      	bls.n	80003b0 <decrypt_monoalphabetic+0x5e>
 8000374:	7cfb      	ldrb	r3, [r7, #19]
 8000376:	2b7a      	cmp	r3, #122	; 0x7a
 8000378:	d81a      	bhi.n	80003b0 <decrypt_monoalphabetic+0x5e>
		{
			for(int i = 0 ; i < 26 ; i++)
 800037a:	2300      	movs	r3, #0
 800037c:	61bb      	str	r3, [r7, #24]
 800037e:	e013      	b.n	80003a8 <decrypt_monoalphabetic+0x56>
			{
				if(encryptor == key[i])
 8000380:	69bb      	ldr	r3, [r7, #24]
 8000382:	68ba      	ldr	r2, [r7, #8]
 8000384:	4413      	add	r3, r2
 8000386:	781b      	ldrb	r3, [r3, #0]
 8000388:	7cfa      	ldrb	r2, [r7, #19]
 800038a:	429a      	cmp	r2, r3
 800038c:	d109      	bne.n	80003a2 <decrypt_monoalphabetic+0x50>
				{
					decryptedtext[i] = i + 'a';
 800038e:	69bb      	ldr	r3, [r7, #24]
 8000390:	b2da      	uxtb	r2, r3
 8000392:	69bb      	ldr	r3, [r7, #24]
 8000394:	6879      	ldr	r1, [r7, #4]
 8000396:	440b      	add	r3, r1
 8000398:	3261      	adds	r2, #97	; 0x61
 800039a:	b2d2      	uxtb	r2, r2
 800039c:	701a      	strb	r2, [r3, #0]
					break;
 800039e:	bf00      	nop
			for(int i = 0 ; i < 26 ; i++)
 80003a0:	e02c      	b.n	80003fc <decrypt_monoalphabetic+0xaa>
 80003a2:	69bb      	ldr	r3, [r7, #24]
 80003a4:	3301      	adds	r3, #1
 80003a6:	61bb      	str	r3, [r7, #24]
 80003a8:	69bb      	ldr	r3, [r7, #24]
 80003aa:	2b19      	cmp	r3, #25
 80003ac:	dde8      	ble.n	8000380 <decrypt_monoalphabetic+0x2e>
 80003ae:	e025      	b.n	80003fc <decrypt_monoalphabetic+0xaa>
				}
			}
		}
		else if(encryptor >= 'A' && encryptor <= 'Z')
 80003b0:	7cfb      	ldrb	r3, [r7, #19]
 80003b2:	2b40      	cmp	r3, #64	; 0x40
 80003b4:	d91d      	bls.n	80003f2 <decrypt_monoalphabetic+0xa0>
 80003b6:	7cfb      	ldrb	r3, [r7, #19]
 80003b8:	2b5a      	cmp	r3, #90	; 0x5a
 80003ba:	d81a      	bhi.n	80003f2 <decrypt_monoalphabetic+0xa0>
		{
			for(int i = 0 ; i < 26 ; i++)
 80003bc:	2300      	movs	r3, #0
 80003be:	617b      	str	r3, [r7, #20]
 80003c0:	e013      	b.n	80003ea <decrypt_monoalphabetic+0x98>
			{
				if(encryptor == key[i])
 80003c2:	697b      	ldr	r3, [r7, #20]
 80003c4:	68ba      	ldr	r2, [r7, #8]
 80003c6:	4413      	add	r3, r2
 80003c8:	781b      	ldrb	r3, [r3, #0]
 80003ca:	7cfa      	ldrb	r2, [r7, #19]
 80003cc:	429a      	cmp	r2, r3
 80003ce:	d109      	bne.n	80003e4 <decrypt_monoalphabetic+0x92>
			    {
					decryptedtext[i] = i + 'A';
 80003d0:	697b      	ldr	r3, [r7, #20]
 80003d2:	b2da      	uxtb	r2, r3
 80003d4:	697b      	ldr	r3, [r7, #20]
 80003d6:	6879      	ldr	r1, [r7, #4]
 80003d8:	440b      	add	r3, r1
 80003da:	3241      	adds	r2, #65	; 0x41
 80003dc:	b2d2      	uxtb	r2, r2
 80003de:	701a      	strb	r2, [r3, #0]
					break;
 80003e0:	bf00      	nop
			for(int i = 0 ; i < 26 ; i++)
 80003e2:	e00b      	b.n	80003fc <decrypt_monoalphabetic+0xaa>
 80003e4:	697b      	ldr	r3, [r7, #20]
 80003e6:	3301      	adds	r3, #1
 80003e8:	617b      	str	r3, [r7, #20]
 80003ea:	697b      	ldr	r3, [r7, #20]
 80003ec:	2b19      	cmp	r3, #25
 80003ee:	dde8      	ble.n	80003c2 <decrypt_monoalphabetic+0x70>
 80003f0:	e004      	b.n	80003fc <decrypt_monoalphabetic+0xaa>
				}
			}
		}
		else
			decryptedtext[i] = encryptor;
 80003f2:	69fb      	ldr	r3, [r7, #28]
 80003f4:	687a      	ldr	r2, [r7, #4]
 80003f6:	4413      	add	r3, r2
 80003f8:	7cfa      	ldrb	r2, [r7, #19]
 80003fa:	701a      	strb	r2, [r3, #0]
	for(int i = 0 ; i< strlen(encrypted_text); i++)
 80003fc:	69fb      	ldr	r3, [r7, #28]
 80003fe:	3301      	adds	r3, #1
 8000400:	61fb      	str	r3, [r7, #28]
 8000402:	68f8      	ldr	r0, [r7, #12]
 8000404:	f7ff ff04 	bl	8000210 <strlen>
 8000408:	4602      	mov	r2, r0
 800040a:	69fb      	ldr	r3, [r7, #28]
 800040c:	429a      	cmp	r2, r3
 800040e:	d8a9      	bhi.n	8000364 <decrypt_monoalphabetic+0x12>
	}
	decryptedtext[strlen(encrypted_text)] = '\0';
 8000410:	68f8      	ldr	r0, [r7, #12]
 8000412:	f7ff fefd 	bl	8000210 <strlen>
 8000416:	4602      	mov	r2, r0
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	4413      	add	r3, r2
 800041c:	2200      	movs	r2, #0
 800041e:	701a      	strb	r2, [r3, #0]
}
 8000420:	bf00      	nop
 8000422:	3720      	adds	r7, #32
 8000424:	46bd      	mov	sp, r7
 8000426:	bd80      	pop	{r7, pc}

08000428 <encrypt_Vigenere>:
 */

#include "PolyAlphabetic_Cipher.h"

void encrypt_Vigenere(char* plain_text, char* key, char* encrypted_text)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b088      	sub	sp, #32
 800042c:	af00      	add	r7, sp, #0
 800042e:	60f8      	str	r0, [r7, #12]
 8000430:	60b9      	str	r1, [r7, #8]
 8000432:	607a      	str	r2, [r7, #4]
	printf("\r\n Vigenere Engine is now starting... \r\n");
 8000434:	483c      	ldr	r0, [pc, #240]	; (8000528 <encrypt_Vigenere+0x100>)
 8000436:	f000 ff1d 	bl	8001274 <puts>
    char encryptor;
    int keyword_length = strlen(key);
 800043a:	68b8      	ldr	r0, [r7, #8]
 800043c:	f7ff fee8 	bl	8000210 <strlen>
 8000440:	4603      	mov	r3, r0
 8000442:	617b      	str	r3, [r7, #20]
    int looper = 0 ;
 8000444:	2300      	movs	r3, #0
 8000446:	61fb      	str	r3, [r7, #28]
    for(int i = 0 ; i < strlen(plain_text); i ++)
 8000448:	2300      	movs	r3, #0
 800044a:	61bb      	str	r3, [r7, #24]
 800044c:	e058      	b.n	8000500 <encrypt_Vigenere+0xd8>
    {
    	encryptor = plain_text[i];
 800044e:	69bb      	ldr	r3, [r7, #24]
 8000450:	68fa      	ldr	r2, [r7, #12]
 8000452:	4413      	add	r3, r2
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	74fb      	strb	r3, [r7, #19]

    	if(looper == keyword_length)
 8000458:	69fa      	ldr	r2, [r7, #28]
 800045a:	697b      	ldr	r3, [r7, #20]
 800045c:	429a      	cmp	r2, r3
 800045e:	d101      	bne.n	8000464 <encrypt_Vigenere+0x3c>
    		looper = 0;
 8000460:	2300      	movs	r3, #0
 8000462:	61fb      	str	r3, [r7, #28]
    	if(encryptor >= 'a' && encryptor <= 'z')
 8000464:	7cfb      	ldrb	r3, [r7, #19]
 8000466:	2b60      	cmp	r3, #96	; 0x60
 8000468:	d91f      	bls.n	80004aa <encrypt_Vigenere+0x82>
 800046a:	7cfb      	ldrb	r3, [r7, #19]
 800046c:	2b7a      	cmp	r3, #122	; 0x7a
 800046e:	d81c      	bhi.n	80004aa <encrypt_Vigenere+0x82>
    	{
    		encrypted_text[i] = (( encryptor - 'a' + (key[looper++] - 'a'))%MAX_ALPHABET_LENGTH) + 'a';
 8000470:	7cfb      	ldrb	r3, [r7, #19]
 8000472:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8000476:	69fb      	ldr	r3, [r7, #28]
 8000478:	1c59      	adds	r1, r3, #1
 800047a:	61f9      	str	r1, [r7, #28]
 800047c:	4619      	mov	r1, r3
 800047e:	68bb      	ldr	r3, [r7, #8]
 8000480:	440b      	add	r3, r1
 8000482:	781b      	ldrb	r3, [r3, #0]
 8000484:	3b61      	subs	r3, #97	; 0x61
 8000486:	4413      	add	r3, r2
 8000488:	461a      	mov	r2, r3
 800048a:	4b28      	ldr	r3, [pc, #160]	; (800052c <encrypt_Vigenere+0x104>)
 800048c:	fba3 1302 	umull	r1, r3, r3, r2
 8000490:	08db      	lsrs	r3, r3, #3
 8000492:	211a      	movs	r1, #26
 8000494:	fb01 f303 	mul.w	r3, r1, r3
 8000498:	1ad3      	subs	r3, r2, r3
 800049a:	b2da      	uxtb	r2, r3
 800049c:	69bb      	ldr	r3, [r7, #24]
 800049e:	6879      	ldr	r1, [r7, #4]
 80004a0:	440b      	add	r3, r1
 80004a2:	3261      	adds	r2, #97	; 0x61
 80004a4:	b2d2      	uxtb	r2, r2
 80004a6:	701a      	strb	r2, [r3, #0]
 80004a8:	e027      	b.n	80004fa <encrypt_Vigenere+0xd2>
    	}
    	else if(encryptor >= 'A' && encryptor <= 'Z')
 80004aa:	7cfb      	ldrb	r3, [r7, #19]
 80004ac:	2b40      	cmp	r3, #64	; 0x40
 80004ae:	d91f      	bls.n	80004f0 <encrypt_Vigenere+0xc8>
 80004b0:	7cfb      	ldrb	r3, [r7, #19]
 80004b2:	2b5a      	cmp	r3, #90	; 0x5a
 80004b4:	d81c      	bhi.n	80004f0 <encrypt_Vigenere+0xc8>
    	{
    		encrypted_text[i] = (( encryptor - 'A' + (key[looper++] - 'A'))%MAX_ALPHABET_LENGTH) + 'A';
 80004b6:	7cfb      	ldrb	r3, [r7, #19]
 80004b8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80004bc:	69fb      	ldr	r3, [r7, #28]
 80004be:	1c59      	adds	r1, r3, #1
 80004c0:	61f9      	str	r1, [r7, #28]
 80004c2:	4619      	mov	r1, r3
 80004c4:	68bb      	ldr	r3, [r7, #8]
 80004c6:	440b      	add	r3, r1
 80004c8:	781b      	ldrb	r3, [r3, #0]
 80004ca:	3b41      	subs	r3, #65	; 0x41
 80004cc:	4413      	add	r3, r2
 80004ce:	461a      	mov	r2, r3
 80004d0:	4b16      	ldr	r3, [pc, #88]	; (800052c <encrypt_Vigenere+0x104>)
 80004d2:	fba3 1302 	umull	r1, r3, r3, r2
 80004d6:	08db      	lsrs	r3, r3, #3
 80004d8:	211a      	movs	r1, #26
 80004da:	fb01 f303 	mul.w	r3, r1, r3
 80004de:	1ad3      	subs	r3, r2, r3
 80004e0:	b2da      	uxtb	r2, r3
 80004e2:	69bb      	ldr	r3, [r7, #24]
 80004e4:	6879      	ldr	r1, [r7, #4]
 80004e6:	440b      	add	r3, r1
 80004e8:	3241      	adds	r2, #65	; 0x41
 80004ea:	b2d2      	uxtb	r2, r2
 80004ec:	701a      	strb	r2, [r3, #0]
 80004ee:	e004      	b.n	80004fa <encrypt_Vigenere+0xd2>
    	}
    	else
    		encrypted_text[i] = encryptor;
 80004f0:	69bb      	ldr	r3, [r7, #24]
 80004f2:	687a      	ldr	r2, [r7, #4]
 80004f4:	4413      	add	r3, r2
 80004f6:	7cfa      	ldrb	r2, [r7, #19]
 80004f8:	701a      	strb	r2, [r3, #0]
    for(int i = 0 ; i < strlen(plain_text); i ++)
 80004fa:	69bb      	ldr	r3, [r7, #24]
 80004fc:	3301      	adds	r3, #1
 80004fe:	61bb      	str	r3, [r7, #24]
 8000500:	68f8      	ldr	r0, [r7, #12]
 8000502:	f7ff fe85 	bl	8000210 <strlen>
 8000506:	4602      	mov	r2, r0
 8000508:	69bb      	ldr	r3, [r7, #24]
 800050a:	429a      	cmp	r2, r3
 800050c:	d89f      	bhi.n	800044e <encrypt_Vigenere+0x26>
    }
    encrypted_text[strlen(plain_text)] = '\0';
 800050e:	68f8      	ldr	r0, [r7, #12]
 8000510:	f7ff fe7e 	bl	8000210 <strlen>
 8000514:	4602      	mov	r2, r0
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	4413      	add	r3, r2
 800051a:	2200      	movs	r2, #0
 800051c:	701a      	strb	r2, [r3, #0]
}
 800051e:	bf00      	nop
 8000520:	3720      	adds	r7, #32
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	080020ec 	.word	0x080020ec
 800052c:	4ec4ec4f 	.word	0x4ec4ec4f

08000530 <decrypt_Vigenere>:

void decrypt_Vigenere(char* encrypted_text, char* key, char* decrypted_text)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b088      	sub	sp, #32
 8000534:	af00      	add	r7, sp, #0
 8000536:	60f8      	str	r0, [r7, #12]
 8000538:	60b9      	str	r1, [r7, #8]
 800053a:	607a      	str	r2, [r7, #4]
	    printf("\r\n Vigenere Engine is now Decrypting ... \r\n");
 800053c:	483d      	ldr	r0, [pc, #244]	; (8000634 <decrypt_Vigenere+0x104>)
 800053e:	f000 fe99 	bl	8001274 <puts>
	    char decryptor;
	    int keyword_length = strlen(key);
 8000542:	68b8      	ldr	r0, [r7, #8]
 8000544:	f7ff fe64 	bl	8000210 <strlen>
 8000548:	4603      	mov	r3, r0
 800054a:	617b      	str	r3, [r7, #20]
	    int looper = 0 ;
 800054c:	2300      	movs	r3, #0
 800054e:	61fb      	str	r3, [r7, #28]
	    for(int i = 0 ; i < strlen(encrypted_text); i ++)
 8000550:	2300      	movs	r3, #0
 8000552:	61bb      	str	r3, [r7, #24]
 8000554:	e05a      	b.n	800060c <decrypt_Vigenere+0xdc>
	    {
	    	decryptor = encrypted_text[i];
 8000556:	69bb      	ldr	r3, [r7, #24]
 8000558:	68fa      	ldr	r2, [r7, #12]
 800055a:	4413      	add	r3, r2
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	74fb      	strb	r3, [r7, #19]
	    	if(looper == keyword_length)
 8000560:	69fa      	ldr	r2, [r7, #28]
 8000562:	697b      	ldr	r3, [r7, #20]
 8000564:	429a      	cmp	r2, r3
 8000566:	d101      	bne.n	800056c <decrypt_Vigenere+0x3c>
	    	looper = 0;
 8000568:	2300      	movs	r3, #0
 800056a:	61fb      	str	r3, [r7, #28]
	    	if(decryptor >= 'a' && decryptor <= 'z')
 800056c:	7cfb      	ldrb	r3, [r7, #19]
 800056e:	2b60      	cmp	r3, #96	; 0x60
 8000570:	d920      	bls.n	80005b4 <decrypt_Vigenere+0x84>
 8000572:	7cfb      	ldrb	r3, [r7, #19]
 8000574:	2b7a      	cmp	r3, #122	; 0x7a
 8000576:	d81d      	bhi.n	80005b4 <decrypt_Vigenere+0x84>
	    	{
	    		decrypted_text[i] = (( decryptor - 'a' + (key[looper++] - 'a')+ MAX_ALPHABET_LENGTH )%MAX_ALPHABET_LENGTH) + 'a';
 8000578:	7cfb      	ldrb	r3, [r7, #19]
 800057a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800057e:	69fb      	ldr	r3, [r7, #28]
 8000580:	1c59      	adds	r1, r3, #1
 8000582:	61f9      	str	r1, [r7, #28]
 8000584:	4619      	mov	r1, r3
 8000586:	68bb      	ldr	r3, [r7, #8]
 8000588:	440b      	add	r3, r1
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	3b61      	subs	r3, #97	; 0x61
 800058e:	4413      	add	r3, r2
 8000590:	f103 021a 	add.w	r2, r3, #26
 8000594:	4b28      	ldr	r3, [pc, #160]	; (8000638 <decrypt_Vigenere+0x108>)
 8000596:	fba3 1302 	umull	r1, r3, r3, r2
 800059a:	08db      	lsrs	r3, r3, #3
 800059c:	211a      	movs	r1, #26
 800059e:	fb01 f303 	mul.w	r3, r1, r3
 80005a2:	1ad3      	subs	r3, r2, r3
 80005a4:	b2da      	uxtb	r2, r3
 80005a6:	69bb      	ldr	r3, [r7, #24]
 80005a8:	6879      	ldr	r1, [r7, #4]
 80005aa:	440b      	add	r3, r1
 80005ac:	3261      	adds	r2, #97	; 0x61
 80005ae:	b2d2      	uxtb	r2, r2
 80005b0:	701a      	strb	r2, [r3, #0]
 80005b2:	e028      	b.n	8000606 <decrypt_Vigenere+0xd6>
	    	}
	    	else if(decryptor >= 'A' && decryptor <= 'Z')
 80005b4:	7cfb      	ldrb	r3, [r7, #19]
 80005b6:	2b40      	cmp	r3, #64	; 0x40
 80005b8:	d920      	bls.n	80005fc <decrypt_Vigenere+0xcc>
 80005ba:	7cfb      	ldrb	r3, [r7, #19]
 80005bc:	2b5a      	cmp	r3, #90	; 0x5a
 80005be:	d81d      	bhi.n	80005fc <decrypt_Vigenere+0xcc>
	    	{
	    		decrypted_text[i] = (( decryptor - 'A' + (key[looper++] - 'A') + MAX_ALPHABET_LENGTH)%MAX_ALPHABET_LENGTH) + 'A';
 80005c0:	7cfb      	ldrb	r3, [r7, #19]
 80005c2:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80005c6:	69fb      	ldr	r3, [r7, #28]
 80005c8:	1c59      	adds	r1, r3, #1
 80005ca:	61f9      	str	r1, [r7, #28]
 80005cc:	4619      	mov	r1, r3
 80005ce:	68bb      	ldr	r3, [r7, #8]
 80005d0:	440b      	add	r3, r1
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	3b41      	subs	r3, #65	; 0x41
 80005d6:	4413      	add	r3, r2
 80005d8:	f103 021a 	add.w	r2, r3, #26
 80005dc:	4b16      	ldr	r3, [pc, #88]	; (8000638 <decrypt_Vigenere+0x108>)
 80005de:	fba3 1302 	umull	r1, r3, r3, r2
 80005e2:	08db      	lsrs	r3, r3, #3
 80005e4:	211a      	movs	r1, #26
 80005e6:	fb01 f303 	mul.w	r3, r1, r3
 80005ea:	1ad3      	subs	r3, r2, r3
 80005ec:	b2da      	uxtb	r2, r3
 80005ee:	69bb      	ldr	r3, [r7, #24]
 80005f0:	6879      	ldr	r1, [r7, #4]
 80005f2:	440b      	add	r3, r1
 80005f4:	3241      	adds	r2, #65	; 0x41
 80005f6:	b2d2      	uxtb	r2, r2
 80005f8:	701a      	strb	r2, [r3, #0]
 80005fa:	e004      	b.n	8000606 <decrypt_Vigenere+0xd6>
	    	}
	    	else
	    		decrypted_text[i] = decryptor;
 80005fc:	69bb      	ldr	r3, [r7, #24]
 80005fe:	687a      	ldr	r2, [r7, #4]
 8000600:	4413      	add	r3, r2
 8000602:	7cfa      	ldrb	r2, [r7, #19]
 8000604:	701a      	strb	r2, [r3, #0]
	    for(int i = 0 ; i < strlen(encrypted_text); i ++)
 8000606:	69bb      	ldr	r3, [r7, #24]
 8000608:	3301      	adds	r3, #1
 800060a:	61bb      	str	r3, [r7, #24]
 800060c:	68f8      	ldr	r0, [r7, #12]
 800060e:	f7ff fdff 	bl	8000210 <strlen>
 8000612:	4602      	mov	r2, r0
 8000614:	69bb      	ldr	r3, [r7, #24]
 8000616:	429a      	cmp	r2, r3
 8000618:	d89d      	bhi.n	8000556 <decrypt_Vigenere+0x26>
	    }
	    decrypted_text[strlen(encrypted_text)] = '\0';
 800061a:	68f8      	ldr	r0, [r7, #12]
 800061c:	f7ff fdf8 	bl	8000210 <strlen>
 8000620:	4602      	mov	r2, r0
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	4413      	add	r3, r2
 8000626:	2200      	movs	r2, #0
 8000628:	701a      	strb	r2, [r3, #0]
}
 800062a:	bf00      	nop
 800062c:	3720      	adds	r7, #32
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	08002114 	.word	0x08002114
 8000638:	4ec4ec4f 	.word	0x4ec4ec4f

0800063c <ceasar_encrypt>:

#include "ceasars_cipher.h"


void ceasar_encrypt(char* plain_text, uint8_t key, char* encrypted_data, uint32_t length)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b086      	sub	sp, #24
 8000640:	af00      	add	r7, sp, #0
 8000642:	60f8      	str	r0, [r7, #12]
 8000644:	607a      	str	r2, [r7, #4]
 8000646:	603b      	str	r3, [r7, #0]
 8000648:	460b      	mov	r3, r1
 800064a:	72fb      	strb	r3, [r7, #11]
	/* Store Plaintext_data*/
    uint8_t plaintext_data;

    printf("\r\nCrypto Engine Starting!\r\n");
 800064c:	4827      	ldr	r0, [pc, #156]	; (80006ec <ceasar_encrypt+0xb0>)
 800064e:	f000 fe11 	bl	8001274 <puts>
    for(uint32_t index = 0; index < length; index++)
 8000652:	2300      	movs	r3, #0
 8000654:	613b      	str	r3, [r7, #16]
 8000656:	e03c      	b.n	80006d2 <ceasar_encrypt+0x96>
    {
    	plaintext_data = plain_text[index];
 8000658:	68fa      	ldr	r2, [r7, #12]
 800065a:	693b      	ldr	r3, [r7, #16]
 800065c:	4413      	add	r3, r2
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	75fb      	strb	r3, [r7, #23]

    	if(plaintext_data >= 'a' && plaintext_data <= 'z')
 8000662:	7dfb      	ldrb	r3, [r7, #23]
 8000664:	2b60      	cmp	r3, #96	; 0x60
 8000666:	d915      	bls.n	8000694 <ceasar_encrypt+0x58>
 8000668:	7dfb      	ldrb	r3, [r7, #23]
 800066a:	2b7a      	cmp	r3, #122	; 0x7a
 800066c:	d812      	bhi.n	8000694 <ceasar_encrypt+0x58>
    	{
    		plaintext_data = (plaintext_data - 'a' + key)%26 + 'a';
 800066e:	7dfb      	ldrb	r3, [r7, #23]
 8000670:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8000674:	7afb      	ldrb	r3, [r7, #11]
 8000676:	4413      	add	r3, r2
 8000678:	4a1d      	ldr	r2, [pc, #116]	; (80006f0 <ceasar_encrypt+0xb4>)
 800067a:	fb82 1203 	smull	r1, r2, r2, r3
 800067e:	10d1      	asrs	r1, r2, #3
 8000680:	17da      	asrs	r2, r3, #31
 8000682:	1a8a      	subs	r2, r1, r2
 8000684:	211a      	movs	r1, #26
 8000686:	fb01 f202 	mul.w	r2, r1, r2
 800068a:	1a9a      	subs	r2, r3, r2
 800068c:	b2d3      	uxtb	r3, r2
 800068e:	3361      	adds	r3, #97	; 0x61
 8000690:	75fb      	strb	r3, [r7, #23]
 8000692:	e016      	b.n	80006c2 <ceasar_encrypt+0x86>
    	}
    	else if(plaintext_data >= 'A' && plaintext_data <= 'Z')
 8000694:	7dfb      	ldrb	r3, [r7, #23]
 8000696:	2b40      	cmp	r3, #64	; 0x40
 8000698:	d913      	bls.n	80006c2 <ceasar_encrypt+0x86>
 800069a:	7dfb      	ldrb	r3, [r7, #23]
 800069c:	2b5a      	cmp	r3, #90	; 0x5a
 800069e:	d810      	bhi.n	80006c2 <ceasar_encrypt+0x86>
    	{
    		plaintext_data = (plaintext_data - 'A' + key)% MAX_NO_OF_ENGLISH_ALPHABETS + 'A';
 80006a0:	7dfb      	ldrb	r3, [r7, #23]
 80006a2:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80006a6:	7afb      	ldrb	r3, [r7, #11]
 80006a8:	4413      	add	r3, r2
 80006aa:	461a      	mov	r2, r3
 80006ac:	4b10      	ldr	r3, [pc, #64]	; (80006f0 <ceasar_encrypt+0xb4>)
 80006ae:	fba3 1302 	umull	r1, r3, r3, r2
 80006b2:	08db      	lsrs	r3, r3, #3
 80006b4:	211a      	movs	r1, #26
 80006b6:	fb01 f303 	mul.w	r3, r1, r3
 80006ba:	1ad3      	subs	r3, r2, r3
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	3341      	adds	r3, #65	; 0x41
 80006c0:	75fb      	strb	r3, [r7, #23]
    	}

    	encrypted_data[index] = plaintext_data;
 80006c2:	687a      	ldr	r2, [r7, #4]
 80006c4:	693b      	ldr	r3, [r7, #16]
 80006c6:	4413      	add	r3, r2
 80006c8:	7dfa      	ldrb	r2, [r7, #23]
 80006ca:	701a      	strb	r2, [r3, #0]
    for(uint32_t index = 0; index < length; index++)
 80006cc:	693b      	ldr	r3, [r7, #16]
 80006ce:	3301      	adds	r3, #1
 80006d0:	613b      	str	r3, [r7, #16]
 80006d2:	693a      	ldr	r2, [r7, #16]
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	429a      	cmp	r2, r3
 80006d8:	d3be      	bcc.n	8000658 <ceasar_encrypt+0x1c>
    }
    encrypted_data[length] = '\0';
 80006da:	687a      	ldr	r2, [r7, #4]
 80006dc:	683b      	ldr	r3, [r7, #0]
 80006de:	4413      	add	r3, r2
 80006e0:	2200      	movs	r2, #0
 80006e2:	701a      	strb	r2, [r3, #0]
}
 80006e4:	bf00      	nop
 80006e6:	3718      	adds	r7, #24
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	08002140 	.word	0x08002140
 80006f0:	4ec4ec4f 	.word	0x4ec4ec4f

080006f4 <ceasar_decrypt>:

void ceasar_decrypt(char* encrypted_text, uint8_t key, char* decrypted_text, uint32_t length)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b086      	sub	sp, #24
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	60f8      	str	r0, [r7, #12]
 80006fc:	607a      	str	r2, [r7, #4]
 80006fe:	603b      	str	r3, [r7, #0]
 8000700:	460b      	mov	r3, r1
 8000702:	72fb      	strb	r3, [r7, #11]
	printf("\r\n Starting Decryption Engine \r\n");
 8000704:	4828      	ldr	r0, [pc, #160]	; (80007a8 <ceasar_decrypt+0xb4>)
 8000706:	f000 fdb5 	bl	8001274 <puts>
    uint8_t encrypted_Data;
    for(int index = 0 ; index < length ; index ++)
 800070a:	2300      	movs	r3, #0
 800070c:	613b      	str	r3, [r7, #16]
 800070e:	e03d      	b.n	800078c <ceasar_decrypt+0x98>
    {
    	encrypted_Data = encrypted_text[index];
 8000710:	693b      	ldr	r3, [r7, #16]
 8000712:	68fa      	ldr	r2, [r7, #12]
 8000714:	4413      	add	r3, r2
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	75fb      	strb	r3, [r7, #23]

        if(encrypted_Data >= 'a' && encrypted_Data <= 'z')
 800071a:	7dfb      	ldrb	r3, [r7, #23]
 800071c:	2b60      	cmp	r3, #96	; 0x60
 800071e:	d915      	bls.n	800074c <ceasar_decrypt+0x58>
 8000720:	7dfb      	ldrb	r3, [r7, #23]
 8000722:	2b7a      	cmp	r3, #122	; 0x7a
 8000724:	d812      	bhi.n	800074c <ceasar_decrypt+0x58>
        {
        	encrypted_Data = (encrypted_Data - 'a' - key + MAX_NO_OF_ENGLISH_ALPHABETS ) % MAX_NO_OF_ENGLISH_ALPHABETS + 'a';
 8000726:	7dfb      	ldrb	r3, [r7, #23]
 8000728:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800072c:	7afb      	ldrb	r3, [r7, #11]
 800072e:	1ad3      	subs	r3, r2, r3
 8000730:	f103 021a 	add.w	r2, r3, #26
 8000734:	4b1d      	ldr	r3, [pc, #116]	; (80007ac <ceasar_decrypt+0xb8>)
 8000736:	fba3 1302 	umull	r1, r3, r3, r2
 800073a:	08db      	lsrs	r3, r3, #3
 800073c:	211a      	movs	r1, #26
 800073e:	fb01 f303 	mul.w	r3, r1, r3
 8000742:	1ad3      	subs	r3, r2, r3
 8000744:	b2db      	uxtb	r3, r3
 8000746:	3361      	adds	r3, #97	; 0x61
 8000748:	75fb      	strb	r3, [r7, #23]
 800074a:	e017      	b.n	800077c <ceasar_decrypt+0x88>
        }
        else if(encrypted_Data >= 'A' && encrypted_Data <= 'Z')
 800074c:	7dfb      	ldrb	r3, [r7, #23]
 800074e:	2b40      	cmp	r3, #64	; 0x40
 8000750:	d914      	bls.n	800077c <ceasar_decrypt+0x88>
 8000752:	7dfb      	ldrb	r3, [r7, #23]
 8000754:	2b5a      	cmp	r3, #90	; 0x5a
 8000756:	d811      	bhi.n	800077c <ceasar_decrypt+0x88>
        {
            encrypted_Data = (encrypted_Data - 'A' - key + MAX_NO_OF_ENGLISH_ALPHABETS ) % MAX_NO_OF_ENGLISH_ALPHABETS + 'A';
 8000758:	7dfb      	ldrb	r3, [r7, #23]
 800075a:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800075e:	7afb      	ldrb	r3, [r7, #11]
 8000760:	1ad3      	subs	r3, r2, r3
 8000762:	f103 021a 	add.w	r2, r3, #26
 8000766:	4b11      	ldr	r3, [pc, #68]	; (80007ac <ceasar_decrypt+0xb8>)
 8000768:	fba3 1302 	umull	r1, r3, r3, r2
 800076c:	08db      	lsrs	r3, r3, #3
 800076e:	211a      	movs	r1, #26
 8000770:	fb01 f303 	mul.w	r3, r1, r3
 8000774:	1ad3      	subs	r3, r2, r3
 8000776:	b2db      	uxtb	r3, r3
 8000778:	3341      	adds	r3, #65	; 0x41
 800077a:	75fb      	strb	r3, [r7, #23]
        }
        decrypted_text[index] = encrypted_Data;
 800077c:	693b      	ldr	r3, [r7, #16]
 800077e:	687a      	ldr	r2, [r7, #4]
 8000780:	4413      	add	r3, r2
 8000782:	7dfa      	ldrb	r2, [r7, #23]
 8000784:	701a      	strb	r2, [r3, #0]
    for(int index = 0 ; index < length ; index ++)
 8000786:	693b      	ldr	r3, [r7, #16]
 8000788:	3301      	adds	r3, #1
 800078a:	613b      	str	r3, [r7, #16]
 800078c:	693b      	ldr	r3, [r7, #16]
 800078e:	683a      	ldr	r2, [r7, #0]
 8000790:	429a      	cmp	r2, r3
 8000792:	d8bd      	bhi.n	8000710 <ceasar_decrypt+0x1c>
    }
    decrypted_text[length] = '\0';
 8000794:	687a      	ldr	r2, [r7, #4]
 8000796:	683b      	ldr	r3, [r7, #0]
 8000798:	4413      	add	r3, r2
 800079a:	2200      	movs	r2, #0
 800079c:	701a      	strb	r2, [r3, #0]
}
 800079e:	bf00      	nop
 80007a0:	3718      	adds	r7, #24
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	0800215c 	.word	0x0800215c
 80007ac:	4ec4ec4f 	.word	0x4ec4ec4f

080007b0 <encrypt_Ceasar_cipher>:

uint16_t encrypt_Ceasar_cipher(uint16_t value, uint16_t key)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	4603      	mov	r3, r0
 80007b8:	460a      	mov	r2, r1
 80007ba:	80fb      	strh	r3, [r7, #6]
 80007bc:	4613      	mov	r3, r2
 80007be:	80bb      	strh	r3, [r7, #4]
	return (uint16_t)((value + key ) & 0xFFFF);
 80007c0:	88fa      	ldrh	r2, [r7, #6]
 80007c2:	88bb      	ldrh	r3, [r7, #4]
 80007c4:	4413      	add	r3, r2
 80007c6:	b29b      	uxth	r3, r3
}
 80007c8:	4618      	mov	r0, r3
 80007ca:	370c      	adds	r7, #12
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bc80      	pop	{r7}
 80007d0:	4770      	bx	lr

080007d2 <decrypt_Ceasar_cipher>:

uint16_t decrypt_Ceasar_cipher(uint16_t encrypted_value, uint16_t key)
{
 80007d2:	b480      	push	{r7}
 80007d4:	b083      	sub	sp, #12
 80007d6:	af00      	add	r7, sp, #0
 80007d8:	4603      	mov	r3, r0
 80007da:	460a      	mov	r2, r1
 80007dc:	80fb      	strh	r3, [r7, #6]
 80007de:	4613      	mov	r3, r2
 80007e0:	80bb      	strh	r3, [r7, #4]
	return (uint16_t)((encrypted_value - key ) & 0xFFFF);
 80007e2:	88fa      	ldrh	r2, [r7, #6]
 80007e4:	88bb      	ldrh	r3, [r7, #4]
 80007e6:	1ad3      	subs	r3, r2, r3
 80007e8:	b29b      	uxth	r3, r3
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	370c      	adds	r7, #12
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bc80      	pop	{r7}
 80007f2:	4770      	bx	lr

080007f4 <ceasar_decrypt_hack>:

void ceasar_decrypt_hack(char* encrypted_text, uint8_t key)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b084      	sub	sp, #16
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
 80007fc:	460b      	mov	r3, r1
 80007fe:	70fb      	strb	r3, [r7, #3]
	printf("\r\n Starting Decryption Hack Engine \r\n");
 8000800:	482c      	ldr	r0, [pc, #176]	; (80008b4 <ceasar_decrypt_hack+0xc0>)
 8000802:	f000 fd37 	bl	8001274 <puts>
    uint8_t encrypted_Data;

    for(int index = 0 ; encrypted_text[index] != '\0'; index ++)
 8000806:	2300      	movs	r3, #0
 8000808:	60fb      	str	r3, [r7, #12]
 800080a:	e045      	b.n	8000898 <ceasar_decrypt_hack+0xa4>
    {
    	encrypted_Data = encrypted_text[index];
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	687a      	ldr	r2, [r7, #4]
 8000810:	4413      	add	r3, r2
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	72fb      	strb	r3, [r7, #11]

        if(encrypted_Data >= 'a' && encrypted_Data <= 'z')
 8000816:	7afb      	ldrb	r3, [r7, #11]
 8000818:	2b60      	cmp	r3, #96	; 0x60
 800081a:	d919      	bls.n	8000850 <ceasar_decrypt_hack+0x5c>
 800081c:	7afb      	ldrb	r3, [r7, #11]
 800081e:	2b7a      	cmp	r3, #122	; 0x7a
 8000820:	d816      	bhi.n	8000850 <ceasar_decrypt_hack+0x5c>
        {
        	encrypted_Data = (encrypted_Data - 'a' - key + MAX_NO_OF_ENGLISH_ALPHABETS ) % MAX_NO_OF_ENGLISH_ALPHABETS + 'a';
 8000822:	7afb      	ldrb	r3, [r7, #11]
 8000824:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8000828:	78fb      	ldrb	r3, [r7, #3]
 800082a:	1ad3      	subs	r3, r2, r3
 800082c:	f103 021a 	add.w	r2, r3, #26
 8000830:	4b21      	ldr	r3, [pc, #132]	; (80008b8 <ceasar_decrypt_hack+0xc4>)
 8000832:	fba3 1302 	umull	r1, r3, r3, r2
 8000836:	08db      	lsrs	r3, r3, #3
 8000838:	211a      	movs	r1, #26
 800083a:	fb01 f303 	mul.w	r3, r1, r3
 800083e:	1ad3      	subs	r3, r2, r3
 8000840:	b2db      	uxtb	r3, r3
 8000842:	3361      	adds	r3, #97	; 0x61
 8000844:	72fb      	strb	r3, [r7, #11]
        	printf("%c",encrypted_Data);
 8000846:	7afb      	ldrb	r3, [r7, #11]
 8000848:	4618      	mov	r0, r3
 800084a:	f000 fc91 	bl	8001170 <putchar>
 800084e:	e020      	b.n	8000892 <ceasar_decrypt_hack+0x9e>
        }
        else if(encrypted_Data >= 'A' && encrypted_Data <= 'Z')
 8000850:	7afb      	ldrb	r3, [r7, #11]
 8000852:	2b40      	cmp	r3, #64	; 0x40
 8000854:	d919      	bls.n	800088a <ceasar_decrypt_hack+0x96>
 8000856:	7afb      	ldrb	r3, [r7, #11]
 8000858:	2b5a      	cmp	r3, #90	; 0x5a
 800085a:	d816      	bhi.n	800088a <ceasar_decrypt_hack+0x96>
        {
            encrypted_Data = (encrypted_Data - 'A' - key + MAX_NO_OF_ENGLISH_ALPHABETS ) % MAX_NO_OF_ENGLISH_ALPHABETS + 'A';
 800085c:	7afb      	ldrb	r3, [r7, #11]
 800085e:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8000862:	78fb      	ldrb	r3, [r7, #3]
 8000864:	1ad3      	subs	r3, r2, r3
 8000866:	f103 021a 	add.w	r2, r3, #26
 800086a:	4b13      	ldr	r3, [pc, #76]	; (80008b8 <ceasar_decrypt_hack+0xc4>)
 800086c:	fba3 1302 	umull	r1, r3, r3, r2
 8000870:	08db      	lsrs	r3, r3, #3
 8000872:	211a      	movs	r1, #26
 8000874:	fb01 f303 	mul.w	r3, r1, r3
 8000878:	1ad3      	subs	r3, r2, r3
 800087a:	b2db      	uxtb	r3, r3
 800087c:	3341      	adds	r3, #65	; 0x41
 800087e:	72fb      	strb	r3, [r7, #11]
            printf("%c",encrypted_Data);
 8000880:	7afb      	ldrb	r3, [r7, #11]
 8000882:	4618      	mov	r0, r3
 8000884:	f000 fc74 	bl	8001170 <putchar>
 8000888:	e003      	b.n	8000892 <ceasar_decrypt_hack+0x9e>
        }
        else
        	printf("%c",encrypted_Data);
 800088a:	7afb      	ldrb	r3, [r7, #11]
 800088c:	4618      	mov	r0, r3
 800088e:	f000 fc6f 	bl	8001170 <putchar>
    for(int index = 0 ; encrypted_text[index] != '\0'; index ++)
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	3301      	adds	r3, #1
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	687a      	ldr	r2, [r7, #4]
 800089c:	4413      	add	r3, r2
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d1b3      	bne.n	800080c <ceasar_decrypt_hack+0x18>
    }
    printf("\r\n");
 80008a4:	4805      	ldr	r0, [pc, #20]	; (80008bc <ceasar_decrypt_hack+0xc8>)
 80008a6:	f000 fce5 	bl	8001274 <puts>

}
 80008aa:	bf00      	nop
 80008ac:	3710      	adds	r7, #16
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	0800217c 	.word	0x0800217c
 80008b8:	4ec4ec4f 	.word	0x4ec4ec4f
 80008bc:	080021a4 	.word	0x080021a4

080008c0 <pa1_adc_init>:
 */

#include "adc.h"

void pa1_adc_init(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
    /* Enable Clock TO ADC Channel */
	/* Set Conversion Sequence Start */
	/* Set Conversion Sequence Length */
	/* Enable ADC Length */

	RCC->AHB1ENR |= GPIOAEN;
 80008c4:	4b13      	ldr	r3, [pc, #76]	; (8000914 <pa1_adc_init+0x54>)
 80008c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c8:	4a12      	ldr	r2, [pc, #72]	; (8000914 <pa1_adc_init+0x54>)
 80008ca:	f043 0301 	orr.w	r3, r3, #1
 80008ce:	6313      	str	r3, [r2, #48]	; 0x30
    GPIOA->MODER |= ADC_PIN_2_EN;
 80008d0:	4b11      	ldr	r3, [pc, #68]	; (8000918 <pa1_adc_init+0x58>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a10      	ldr	r2, [pc, #64]	; (8000918 <pa1_adc_init+0x58>)
 80008d6:	f043 0304 	orr.w	r3, r3, #4
 80008da:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= ADC_PIN_3_EN;
 80008dc:	4b0e      	ldr	r3, [pc, #56]	; (8000918 <pa1_adc_init+0x58>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a0d      	ldr	r2, [pc, #52]	; (8000918 <pa1_adc_init+0x58>)
 80008e2:	f043 0308 	orr.w	r3, r3, #8
 80008e6:	6013      	str	r3, [r2, #0]

    RCC->APB2ENR |= ADC1_EN;
 80008e8:	4b0a      	ldr	r3, [pc, #40]	; (8000914 <pa1_adc_init+0x54>)
 80008ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ec:	4a09      	ldr	r2, [pc, #36]	; (8000914 <pa1_adc_init+0x54>)
 80008ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008f2:	6453      	str	r3, [r2, #68]	; 0x44

    /* Configure specific channel depending on use-case. Refer to the reference Manual for
     * more information
     * */
    ADC1->SQR3 = ADC_CH1;
 80008f4:	4b09      	ldr	r3, [pc, #36]	; (800091c <pa1_adc_init+0x5c>)
 80008f6:	2201      	movs	r2, #1
 80008f8:	635a      	str	r2, [r3, #52]	; 0x34
    ADC1->SQR1 = ADC_SEQ_LEN_1;
 80008fa:	4b08      	ldr	r3, [pc, #32]	; (800091c <pa1_adc_init+0x5c>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	62da      	str	r2, [r3, #44]	; 0x2c

    ADC1->CR2 |= ADC_CR2_ON;
 8000900:	4b06      	ldr	r3, [pc, #24]	; (800091c <pa1_adc_init+0x5c>)
 8000902:	689b      	ldr	r3, [r3, #8]
 8000904:	4a05      	ldr	r2, [pc, #20]	; (800091c <pa1_adc_init+0x5c>)
 8000906:	f043 0301 	orr.w	r3, r3, #1
 800090a:	6093      	str	r3, [r2, #8]
}
 800090c:	bf00      	nop
 800090e:	46bd      	mov	sp, r7
 8000910:	bc80      	pop	{r7}
 8000912:	4770      	bx	lr
 8000914:	40023800 	.word	0x40023800
 8000918:	40020000 	.word	0x40020000
 800091c:	40012000 	.word	0x40012000

08000920 <startadc_conversion>:

void startadc_conversion(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
	/* Enable Continuous Conversion */
	ADC1->CR2 |= CR2_CONT;
 8000924:	4b07      	ldr	r3, [pc, #28]	; (8000944 <startadc_conversion+0x24>)
 8000926:	689b      	ldr	r3, [r3, #8]
 8000928:	4a06      	ldr	r2, [pc, #24]	; (8000944 <startadc_conversion+0x24>)
 800092a:	f043 0302 	orr.w	r3, r3, #2
 800092e:	6093      	str	r3, [r2, #8]
	/* Start ADC Conversion */
	ADC1->CR2 |= CR2_SWSTART;
 8000930:	4b04      	ldr	r3, [pc, #16]	; (8000944 <startadc_conversion+0x24>)
 8000932:	689b      	ldr	r3, [r3, #8]
 8000934:	4a03      	ldr	r2, [pc, #12]	; (8000944 <startadc_conversion+0x24>)
 8000936:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800093a:	6093      	str	r3, [r2, #8]

}
 800093c:	bf00      	nop
 800093e:	46bd      	mov	sp, r7
 8000940:	bc80      	pop	{r7}
 8000942:	4770      	bx	lr
 8000944:	40012000 	.word	0x40012000

08000948 <led_init>:

#include "bsp.h"


void led_init(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
	/* Provide Clock Access to the respective Peripheral */
	/* GPIO A for stm32f44xx */

	    RCC->AHB1ENR |= GPIOAEN;
 800094c:	4b0a      	ldr	r3, [pc, #40]	; (8000978 <led_init+0x30>)
 800094e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000950:	4a09      	ldr	r2, [pc, #36]	; (8000978 <led_init+0x30>)
 8000952:	f043 0301 	orr.w	r3, r3, #1
 8000956:	6313      	str	r3, [r2, #48]	; 0x30
	    GPIOA->MODER |= (1U<<10);
 8000958:	4b08      	ldr	r3, [pc, #32]	; (800097c <led_init+0x34>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a07      	ldr	r2, [pc, #28]	; (800097c <led_init+0x34>)
 800095e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000962:	6013      	str	r3, [r2, #0]
	    GPIOA->MODER &= ~(1U<<11);
 8000964:	4b05      	ldr	r3, [pc, #20]	; (800097c <led_init+0x34>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a04      	ldr	r2, [pc, #16]	; (800097c <led_init+0x34>)
 800096a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800096e:	6013      	str	r3, [r2, #0]
}
 8000970:	bf00      	nop
 8000972:	46bd      	mov	sp, r7
 8000974:	bc80      	pop	{r7}
 8000976:	4770      	bx	lr
 8000978:	40023800 	.word	0x40023800
 800097c:	40020000 	.word	0x40020000

08000980 <button_init>:
	/* Set the Pin Low */
	GPIOA->ODR &= (GPIO_DISABLE);
}

void button_init(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= GPIOCEN;
 8000984:	4b0a      	ldr	r3, [pc, #40]	; (80009b0 <button_init+0x30>)
 8000986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000988:	4a09      	ldr	r2, [pc, #36]	; (80009b0 <button_init+0x30>)
 800098a:	f043 0304 	orr.w	r3, r3, #4
 800098e:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOC->MODER &=  ~(1<<26);
 8000990:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <button_init+0x34>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a07      	ldr	r2, [pc, #28]	; (80009b4 <button_init+0x34>)
 8000996:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800099a:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &=  ~(1<<27);
 800099c:	4b05      	ldr	r3, [pc, #20]	; (80009b4 <button_init+0x34>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a04      	ldr	r2, [pc, #16]	; (80009b4 <button_init+0x34>)
 80009a2:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80009a6:	6013      	str	r3, [r2, #0]
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bc80      	pop	{r7}
 80009ae:	4770      	bx	lr
 80009b0:	40023800 	.word	0x40023800
 80009b4:	40020800 	.word	0x40020800

080009b8 <fpu_enable>:

#include "fpu.h"


void fpu_enable(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
	/* Enable Floating Point Unit: Enable CP10 and CP11 Full Access! */
	 SCB->CPACR |= (1<<20);
 80009bc:	4b11      	ldr	r3, [pc, #68]	; (8000a04 <fpu_enable+0x4c>)
 80009be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009c2:	4a10      	ldr	r2, [pc, #64]	; (8000a04 <fpu_enable+0x4c>)
 80009c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80009c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	 SCB->CPACR |= (1<<21);
 80009cc:	4b0d      	ldr	r3, [pc, #52]	; (8000a04 <fpu_enable+0x4c>)
 80009ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009d2:	4a0c      	ldr	r2, [pc, #48]	; (8000a04 <fpu_enable+0x4c>)
 80009d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	 SCB->CPACR |= (1<<22);
 80009dc:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <fpu_enable+0x4c>)
 80009de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009e2:	4a08      	ldr	r2, [pc, #32]	; (8000a04 <fpu_enable+0x4c>)
 80009e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	 SCB->CPACR |= (1<<23);
 80009ec:	4b05      	ldr	r3, [pc, #20]	; (8000a04 <fpu_enable+0x4c>)
 80009ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009f2:	4a04      	ldr	r2, [pc, #16]	; (8000a04 <fpu_enable+0x4c>)
 80009f4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80009f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bc80      	pop	{r7}
 8000a02:	4770      	bx	lr
 8000a04:	e000ed00 	.word	0xe000ed00

08000a08 <main>:
static uint16_t decrypted_sensor;
static uint16_t sensor_val = 2726;
uint16_t Key = 100;

int main(void)
{
 8000a08:	b5b0      	push	{r4, r5, r7, lr}
 8000a0a:	b09e      	sub	sp, #120	; 0x78
 8000a0c:	af00      	add	r7, sp, #0
	/* Enable FPU */
	fpu_enable();
 8000a0e:	f7ff ffd3 	bl	80009b8 <fpu_enable>
    /* initialize UART */
	uart_init();
 8000a12:	f000 fa37 	bl	8000e84 <uart_init>
	/* Initialize timer */
	timer_init();
 8000a16:	f000 fa09 	bl	8000e2c <timer_init>
    /* Initialize button and led */
	led_init();
 8000a1a:	f7ff ff95 	bl	8000948 <led_init>
    /* Initialize the button */
	button_init();
 8000a1e:	f7ff ffaf 	bl	8000980 <button_init>
	/* Initialize the ADC module */
	pa1_adc_init();
 8000a22:	f7ff ff4d 	bl	80008c0 <pa1_adc_init>
    /* Start the conversion */
	startadc_conversion();
 8000a26:	f7ff ff7b 	bl	8000920 <startadc_conversion>

	printf("Testing the Ceasar's Module!\r\n");
 8000a2a:	4892      	ldr	r0, [pc, #584]	; (8000c74 <main+0x26c>)
 8000a2c:	f000 fc22 	bl	8001274 <puts>
	char plain_text[] = "HELLO";
 8000a30:	4a91      	ldr	r2, [pc, #580]	; (8000c78 <main+0x270>)
 8000a32:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a36:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a3a:	6018      	str	r0, [r3, #0]
 8000a3c:	3304      	adds	r3, #4
 8000a3e:	8019      	strh	r1, [r3, #0]
	char encrypted_testtext[] = "KHOOR";
 8000a40:	4a8e      	ldr	r2, [pc, #568]	; (8000c7c <main+0x274>)
 8000a42:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a46:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a4a:	6018      	str	r0, [r3, #0]
 8000a4c:	3304      	adds	r3, #4
 8000a4e:	8019      	strh	r1, [r3, #0]
	char plain_text_mono[] = "MONO HELLO!";
 8000a50:	4a8b      	ldr	r2, [pc, #556]	; (8000c80 <main+0x278>)
 8000a52:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a56:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a58:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	char key_mono[] = "DFGHIJKLMNOPQRSTUVWXYZABCETSMN";
 8000a5c:	4b89      	ldr	r3, [pc, #548]	; (8000c84 <main+0x27c>)
 8000a5e:	f107 0414 	add.w	r4, r7, #20
 8000a62:	461d      	mov	r5, r3
 8000a64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a68:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000a6c:	c407      	stmia	r4!, {r0, r1, r2}
 8000a6e:	8023      	strh	r3, [r4, #0]
 8000a70:	3402      	adds	r4, #2
 8000a72:	0c1b      	lsrs	r3, r3, #16
 8000a74:	7023      	strb	r3, [r4, #0]
	char key_poly[] = "KEY";
 8000a76:	4b84      	ldr	r3, [pc, #528]	; (8000c88 <main+0x280>)
 8000a78:	613b      	str	r3, [r7, #16]
	char plain_text_poly[] = "POLY HELLO!";
 8000a7a:	4a84      	ldr	r2, [pc, #528]	; (8000c8c <main+0x284>)
 8000a7c:	1d3b      	adds	r3, r7, #4
 8000a7e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a80:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	uint8_t key = 3;
 8000a84:	2303      	movs	r3, #3
 8000a86:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	uint32_t length = (uint32_t)strlen(plain_text);
 8000a8a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f7ff fbbe 	bl	8000210 <strlen>
 8000a94:	66b8      	str	r0, [r7, #104]	; 0x68
	char* encrypted_data = (char *)calloc(length+1,sizeof(char));
 8000a96:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000a98:	3301      	adds	r3, #1
 8000a9a:	2101      	movs	r1, #1
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f000 faad 	bl	8000ffc <calloc>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	667b      	str	r3, [r7, #100]	; 0x64
    char* decrypted_Data = (char *)calloc(length+1,sizeof(char));
 8000aa6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	2101      	movs	r1, #1
 8000aac:	4618      	mov	r0, r3
 8000aae:	f000 faa5 	bl	8000ffc <calloc>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	663b      	str	r3, [r7, #96]	; 0x60
    char* encryptedtext_mono = (char*)calloc(strlen(plain_text_mono)+1, sizeof(char));
 8000ab6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000aba:	4618      	mov	r0, r3
 8000abc:	f7ff fba8 	bl	8000210 <strlen>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	3301      	adds	r3, #1
 8000ac4:	2101      	movs	r1, #1
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f000 fa98 	bl	8000ffc <calloc>
 8000acc:	4603      	mov	r3, r0
 8000ace:	65fb      	str	r3, [r7, #92]	; 0x5c
    char* decryptedtext_mono = (char*)calloc(strlen(plain_text_mono)+1, sizeof(char));
 8000ad0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f7ff fb9b 	bl	8000210 <strlen>
 8000ada:	4603      	mov	r3, r0
 8000adc:	3301      	adds	r3, #1
 8000ade:	2101      	movs	r1, #1
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f000 fa8b 	bl	8000ffc <calloc>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	65bb      	str	r3, [r7, #88]	; 0x58
    char* encrypted_text_poly = (char*)calloc(strlen(plain_text_poly)+1, sizeof(char));
 8000aea:	1d3b      	adds	r3, r7, #4
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff fb8f 	bl	8000210 <strlen>
 8000af2:	4603      	mov	r3, r0
 8000af4:	3301      	adds	r3, #1
 8000af6:	2101      	movs	r1, #1
 8000af8:	4618      	mov	r0, r3
 8000afa:	f000 fa7f 	bl	8000ffc <calloc>
 8000afe:	4603      	mov	r3, r0
 8000b00:	657b      	str	r3, [r7, #84]	; 0x54
    char* decrypted_text_poly = (char*)calloc(strlen(plain_text_poly)+1, sizeof(char));
 8000b02:	1d3b      	adds	r3, r7, #4
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff fb83 	bl	8000210 <strlen>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	2101      	movs	r1, #1
 8000b10:	4618      	mov	r0, r3
 8000b12:	f000 fa73 	bl	8000ffc <calloc>
 8000b16:	4603      	mov	r3, r0
 8000b18:	653b      	str	r3, [r7, #80]	; 0x50

	printf("The length of the plain_text = %lu \r\n",length);
 8000b1a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8000b1c:	485c      	ldr	r0, [pc, #368]	; (8000c90 <main+0x288>)
 8000b1e:	f000 fb0f 	bl	8001140 <iprintf>

	for(int i = 0 ; i < length; i++)
 8000b22:	2300      	movs	r3, #0
 8000b24:	677b      	str	r3, [r7, #116]	; 0x74
 8000b26:	e00a      	b.n	8000b3e <main+0x136>
	{
		printf("%c",plain_text[i]);
 8000b28:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000b2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000b2e:	4413      	add	r3, r2
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	4618      	mov	r0, r3
 8000b34:	f000 fb1c 	bl	8001170 <putchar>
	for(int i = 0 ; i < length; i++)
 8000b38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000b3a:	3301      	adds	r3, #1
 8000b3c:	677b      	str	r3, [r7, #116]	; 0x74
 8000b3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000b40:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000b42:	429a      	cmp	r2, r3
 8000b44:	d8f0      	bhi.n	8000b28 <main+0x120>
	}

	ceasar_encrypt(plain_text, key, encrypted_data, length);
 8000b46:	f897 106f 	ldrb.w	r1, [r7, #111]	; 0x6f
 8000b4a:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8000b4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000b50:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000b52:	f7ff fd73 	bl	800063c <ceasar_encrypt>

	printf("\r\n Encrypted Data is:\r\n");
 8000b56:	484f      	ldr	r0, [pc, #316]	; (8000c94 <main+0x28c>)
 8000b58:	f000 fb8c 	bl	8001274 <puts>
	puts(encrypted_data);
 8000b5c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000b5e:	f000 fb89 	bl	8001274 <puts>
    printf("Decrypting now\r\n");
 8000b62:	484d      	ldr	r0, [pc, #308]	; (8000c98 <main+0x290>)
 8000b64:	f000 fb86 	bl	8001274 <puts>
    ceasar_decrypt(encrypted_data,key,decrypted_Data,length);
 8000b68:	f897 106f 	ldrb.w	r1, [r7, #111]	; 0x6f
 8000b6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000b6e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000b70:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000b72:	f7ff fdbf 	bl	80006f4 <ceasar_decrypt>
    printf("\r\n Decrypted Data is:\r\n");
 8000b76:	4849      	ldr	r0, [pc, #292]	; (8000c9c <main+0x294>)
 8000b78:	f000 fb7c 	bl	8001274 <puts>
    puts(decrypted_Data);
 8000b7c:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8000b7e:	f000 fb79 	bl	8001274 <puts>

    encrypted_sensor = encrypt_Ceasar_cipher(sensor_val,Key);
 8000b82:	4b47      	ldr	r3, [pc, #284]	; (8000ca0 <main+0x298>)
 8000b84:	881b      	ldrh	r3, [r3, #0]
 8000b86:	4a47      	ldr	r2, [pc, #284]	; (8000ca4 <main+0x29c>)
 8000b88:	8812      	ldrh	r2, [r2, #0]
 8000b8a:	4611      	mov	r1, r2
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff fe0f 	bl	80007b0 <encrypt_Ceasar_cipher>
 8000b92:	4603      	mov	r3, r0
 8000b94:	461a      	mov	r2, r3
 8000b96:	4b44      	ldr	r3, [pc, #272]	; (8000ca8 <main+0x2a0>)
 8000b98:	801a      	strh	r2, [r3, #0]
    printf("\r\n Encrypted Value of Sensor %u \r\n",encrypted_sensor);
 8000b9a:	4b43      	ldr	r3, [pc, #268]	; (8000ca8 <main+0x2a0>)
 8000b9c:	881b      	ldrh	r3, [r3, #0]
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4842      	ldr	r0, [pc, #264]	; (8000cac <main+0x2a4>)
 8000ba2:	f000 facd 	bl	8001140 <iprintf>
    decrypted_sensor = decrypt_Ceasar_cipher(encrypted_sensor, Key);
 8000ba6:	4b40      	ldr	r3, [pc, #256]	; (8000ca8 <main+0x2a0>)
 8000ba8:	881b      	ldrh	r3, [r3, #0]
 8000baa:	4a3e      	ldr	r2, [pc, #248]	; (8000ca4 <main+0x29c>)
 8000bac:	8812      	ldrh	r2, [r2, #0]
 8000bae:	4611      	mov	r1, r2
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f7ff fe0e 	bl	80007d2 <decrypt_Ceasar_cipher>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	461a      	mov	r2, r3
 8000bba:	4b3d      	ldr	r3, [pc, #244]	; (8000cb0 <main+0x2a8>)
 8000bbc:	801a      	strh	r2, [r3, #0]
    printf("\r\n Decrypted Value of Sensor %u \r\n",decrypted_sensor);
 8000bbe:	4b3c      	ldr	r3, [pc, #240]	; (8000cb0 <main+0x2a8>)
 8000bc0:	881b      	ldrh	r3, [r3, #0]
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	483b      	ldr	r0, [pc, #236]	; (8000cb4 <main+0x2ac>)
 8000bc6:	f000 fabb 	bl	8001140 <iprintf>

    printf("HACKING THE CEASARS TEXT!\r\n");
 8000bca:	483b      	ldr	r0, [pc, #236]	; (8000cb8 <main+0x2b0>)
 8000bcc:	f000 fb52 	bl	8001274 <puts>
    for(int i = 0 ; i <= 25 ; i++)
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	673b      	str	r3, [r7, #112]	; 0x70
 8000bd4:	e00e      	b.n	8000bf4 <main+0x1ec>
    {
    	printf("Key Value: %d \r\n",i);
 8000bd6:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8000bd8:	4838      	ldr	r0, [pc, #224]	; (8000cbc <main+0x2b4>)
 8000bda:	f000 fab1 	bl	8001140 <iprintf>
    	ceasar_decrypt_hack(encrypted_testtext,i);
 8000bde:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000be0:	b2da      	uxtb	r2, r3
 8000be2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000be6:	4611      	mov	r1, r2
 8000be8:	4618      	mov	r0, r3
 8000bea:	f7ff fe03 	bl	80007f4 <ceasar_decrypt_hack>
    for(int i = 0 ; i <= 25 ; i++)
 8000bee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	673b      	str	r3, [r7, #112]	; 0x70
 8000bf4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000bf6:	2b19      	cmp	r3, #25
 8000bf8:	dded      	ble.n	8000bd6 <main+0x1ce>
    }

    printf("\r\n Now Start with Mono-alphabetic Encryption\r\n");
 8000bfa:	4831      	ldr	r0, [pc, #196]	; (8000cc0 <main+0x2b8>)
 8000bfc:	f000 fb3a 	bl	8001274 <puts>
    puts(plain_text_mono);
 8000c00:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c04:	4618      	mov	r0, r3
 8000c06:	f000 fb35 	bl	8001274 <puts>
    encrypt_monoalphabetic(plain_text_mono, key_mono, encryptedtext_mono);
 8000c0a:	f107 0114 	add.w	r1, r7, #20
 8000c0e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c12:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff fb53 	bl	80002c0 <encrypt_monoalphabetic>
    printf("\r\n Decryption Starts..\r\n");
 8000c1a:	482a      	ldr	r0, [pc, #168]	; (8000cc4 <main+0x2bc>)
 8000c1c:	f000 fb2a 	bl	8001274 <puts>
    decrypt_monoalphabetic(encryptedtext_mono,key_mono, decryptedtext_mono);
 8000c20:	f107 0314 	add.w	r3, r7, #20
 8000c24:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000c26:	4619      	mov	r1, r3
 8000c28:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000c2a:	f7ff fb92 	bl	8000352 <decrypt_monoalphabetic>
    puts(decryptedtext_mono);
 8000c2e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8000c30:	f000 fb20 	bl	8001274 <puts>

    printf("\r\n Now Start with Poly-alphabetic Encryption\r\n");
 8000c34:	4824      	ldr	r0, [pc, #144]	; (8000cc8 <main+0x2c0>)
 8000c36:	f000 fb1d 	bl	8001274 <puts>
    puts(plain_text_poly);
 8000c3a:	1d3b      	adds	r3, r7, #4
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f000 fb19 	bl	8001274 <puts>
    encrypt_Vigenere(plain_text_poly, key_poly, encrypted_text_poly);
 8000c42:	f107 0110 	add.w	r1, r7, #16
 8000c46:	1d3b      	adds	r3, r7, #4
 8000c48:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f7ff fbec 	bl	8000428 <encrypt_Vigenere>
    printf("decryption of poly_alphabetic starts now.. \r\n");
 8000c50:	481e      	ldr	r0, [pc, #120]	; (8000ccc <main+0x2c4>)
 8000c52:	f000 fb0f 	bl	8001274 <puts>
    decrypt_Vigenere(encrypted_text_poly,key_poly,decrypted_text_poly);
 8000c56:	f107 0310 	add.w	r3, r7, #16
 8000c5a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8000c60:	f7ff fc66 	bl	8000530 <decrypt_Vigenere>
    puts(decrypted_text_poly);
 8000c64:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8000c66:	f000 fb05 	bl	8001274 <puts>
 8000c6a:	2300      	movs	r3, #0
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3778      	adds	r7, #120	; 0x78
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bdb0      	pop	{r4, r5, r7, pc}
 8000c74:	080021a8 	.word	0x080021a8
 8000c78:	08002350 	.word	0x08002350
 8000c7c:	08002358 	.word	0x08002358
 8000c80:	08002360 	.word	0x08002360
 8000c84:	0800236c 	.word	0x0800236c
 8000c88:	0059454b 	.word	0x0059454b
 8000c8c:	0800238c 	.word	0x0800238c
 8000c90:	080021c8 	.word	0x080021c8
 8000c94:	080021f0 	.word	0x080021f0
 8000c98:	08002208 	.word	0x08002208
 8000c9c:	08002218 	.word	0x08002218
 8000ca0:	20000000 	.word	0x20000000
 8000ca4:	20000002 	.word	0x20000002
 8000ca8:	20000084 	.word	0x20000084
 8000cac:	08002230 	.word	0x08002230
 8000cb0:	20000086 	.word	0x20000086
 8000cb4:	08002254 	.word	0x08002254
 8000cb8:	08002278 	.word	0x08002278
 8000cbc:	08002294 	.word	0x08002294
 8000cc0:	080022a8 	.word	0x080022a8
 8000cc4:	080022d8 	.word	0x080022d8
 8000cc8:	080022f0 	.word	0x080022f0
 8000ccc:	08002320 	.word	0x08002320

08000cd0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b086      	sub	sp, #24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	60f8      	str	r0, [r7, #12]
 8000cd8:	60b9      	str	r1, [r7, #8]
 8000cda:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]
 8000ce0:	e00a      	b.n	8000cf8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ce2:	f3af 8000 	nop.w
 8000ce6:	4601      	mov	r1, r0
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	1c5a      	adds	r2, r3, #1
 8000cec:	60ba      	str	r2, [r7, #8]
 8000cee:	b2ca      	uxtb	r2, r1
 8000cf0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	617b      	str	r3, [r7, #20]
 8000cf8:	697a      	ldr	r2, [r7, #20]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	dbf0      	blt.n	8000ce2 <_read+0x12>
	}

return len;
 8000d00:	687b      	ldr	r3, [r7, #4]
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3718      	adds	r7, #24
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b086      	sub	sp, #24
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	60f8      	str	r0, [r7, #12]
 8000d12:	60b9      	str	r1, [r7, #8]
 8000d14:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d16:	2300      	movs	r3, #0
 8000d18:	617b      	str	r3, [r7, #20]
 8000d1a:	e009      	b.n	8000d30 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	1c5a      	adds	r2, r3, #1
 8000d20:	60ba      	str	r2, [r7, #8]
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	4618      	mov	r0, r3
 8000d26:	f000 f91d 	bl	8000f64 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	3301      	adds	r3, #1
 8000d2e:	617b      	str	r3, [r7, #20]
 8000d30:	697a      	ldr	r2, [r7, #20]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	429a      	cmp	r2, r3
 8000d36:	dbf1      	blt.n	8000d1c <_write+0x12>
	}
	return len;
 8000d38:	687b      	ldr	r3, [r7, #4]
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3718      	adds	r7, #24
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <_close>:

int _close(int file)
{
 8000d42:	b480      	push	{r7}
 8000d44:	b083      	sub	sp, #12
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	6078      	str	r0, [r7, #4]
	return -1;
 8000d4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	370c      	adds	r7, #12
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bc80      	pop	{r7}
 8000d56:	4770      	bx	lr

08000d58 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d68:	605a      	str	r2, [r3, #4]
	return 0;
 8000d6a:	2300      	movs	r3, #0
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bc80      	pop	{r7}
 8000d74:	4770      	bx	lr

08000d76 <_isatty>:

int _isatty(int file)
{
 8000d76:	b480      	push	{r7}
 8000d78:	b083      	sub	sp, #12
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	6078      	str	r0, [r7, #4]
	return 1;
 8000d7e:	2301      	movs	r3, #1
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bc80      	pop	{r7}
 8000d88:	4770      	bx	lr

08000d8a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	b085      	sub	sp, #20
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	60f8      	str	r0, [r7, #12]
 8000d92:	60b9      	str	r1, [r7, #8]
 8000d94:	607a      	str	r2, [r7, #4]
	return 0;
 8000d96:	2300      	movs	r3, #0
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3714      	adds	r7, #20
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bc80      	pop	{r7}
 8000da0:	4770      	bx	lr
	...

08000da4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b086      	sub	sp, #24
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dac:	4a14      	ldr	r2, [pc, #80]	; (8000e00 <_sbrk+0x5c>)
 8000dae:	4b15      	ldr	r3, [pc, #84]	; (8000e04 <_sbrk+0x60>)
 8000db0:	1ad3      	subs	r3, r2, r3
 8000db2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000db8:	4b13      	ldr	r3, [pc, #76]	; (8000e08 <_sbrk+0x64>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d102      	bne.n	8000dc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dc0:	4b11      	ldr	r3, [pc, #68]	; (8000e08 <_sbrk+0x64>)
 8000dc2:	4a12      	ldr	r2, [pc, #72]	; (8000e0c <_sbrk+0x68>)
 8000dc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dc6:	4b10      	ldr	r3, [pc, #64]	; (8000e08 <_sbrk+0x64>)
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4413      	add	r3, r2
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	d207      	bcs.n	8000de4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dd4:	f000 f91a 	bl	800100c <__errno>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	220c      	movs	r2, #12
 8000ddc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dde:	f04f 33ff 	mov.w	r3, #4294967295
 8000de2:	e009      	b.n	8000df8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000de4:	4b08      	ldr	r3, [pc, #32]	; (8000e08 <_sbrk+0x64>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dea:	4b07      	ldr	r3, [pc, #28]	; (8000e08 <_sbrk+0x64>)
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4413      	add	r3, r2
 8000df2:	4a05      	ldr	r2, [pc, #20]	; (8000e08 <_sbrk+0x64>)
 8000df4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000df6:	68fb      	ldr	r3, [r7, #12]
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3718      	adds	r7, #24
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	20020000 	.word	0x20020000
 8000e04:	00000400 	.word	0x00000400
 8000e08:	20000088 	.word	0x20000088
 8000e0c:	200000b0 	.word	0x200000b0

08000e10 <tick_increment>:
	__enable_irq();
	return current_tick_p;
}

static void tick_increment(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
	current_tick += TICK_FREQ;
 8000e14:	4b04      	ldr	r3, [pc, #16]	; (8000e28 <tick_increment+0x18>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	3301      	adds	r3, #1
 8000e1a:	4a03      	ldr	r2, [pc, #12]	; (8000e28 <tick_increment+0x18>)
 8000e1c:	6013      	str	r3, [r2, #0]
}
 8000e1e:	bf00      	nop
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bc80      	pop	{r7}
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	20000094 	.word	0x20000094

08000e2c <timer_init>:

void timer_init(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e30:	b672      	cpsid	i
}
 8000e32:	bf00      	nop
	/* Disable the  global interrupt during the running of this timer service */
	__disable_irq();
	/* Load the timer with number of clock cycles per second ; generate a tick each second */
	SysTick->LOAD = ONE_SEC_LOAD-ONE;
 8000e34:	4b0e      	ldr	r3, [pc, #56]	; (8000e70 <timer_init+0x44>)
 8000e36:	4a0f      	ldr	r2, [pc, #60]	; (8000e74 <timer_init+0x48>)
 8000e38:	605a      	str	r2, [r3, #4]
	/* Clear the systick current value register */
	SysTick->VAL  = 0;
 8000e3a:	4b0d      	ldr	r3, [pc, #52]	; (8000e70 <timer_init+0x44>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	609a      	str	r2, [r3, #8]
	/* Select Internal Clock Source */
	SysTick->CTRL |= CTRL_CLKSRC;
 8000e40:	4b0b      	ldr	r3, [pc, #44]	; (8000e70 <timer_init+0x44>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a0a      	ldr	r2, [pc, #40]	; (8000e70 <timer_init+0x44>)
 8000e46:	f043 0304 	orr.w	r3, r3, #4
 8000e4a:	6013      	str	r3, [r2, #0]
	/* Enable Interrupt */
	SysTick->CTRL |= CTRL_TICKINIT;
 8000e4c:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <timer_init+0x44>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a07      	ldr	r2, [pc, #28]	; (8000e70 <timer_init+0x44>)
 8000e52:	f043 0302 	orr.w	r3, r3, #2
 8000e56:	6013      	str	r3, [r2, #0]
	/* Enable systick */
	SysTick->CTRL |= CTRL_ENABLE;
 8000e58:	4b05      	ldr	r3, [pc, #20]	; (8000e70 <timer_init+0x44>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a04      	ldr	r2, [pc, #16]	; (8000e70 <timer_init+0x44>)
 8000e5e:	f043 0301 	orr.w	r3, r3, #1
 8000e62:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000e64:	b662      	cpsie	i
}
 8000e66:	bf00      	nop
	/* Enable Global Interrupt */
	__enable_irq();
}
 8000e68:	bf00      	nop
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bc80      	pop	{r7}
 8000e6e:	4770      	bx	lr
 8000e70:	e000e010 	.word	0xe000e010
 8000e74:	00f423ff 	.word	0x00f423ff

08000e78 <SysTick_Handler>:


void SysTick_Handler(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
	tick_increment();
 8000e7c:	f7ff ffc8 	bl	8000e10 <tick_increment>
}
 8000e80:	bf00      	nop
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <uart_init>:
 static uint16_t compute_uart_bd(uint32_t periph_clk, uint32_t baudrate);
 static void uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate);


 void uart_init(void)
 {
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
		  Configure Transfer Direction
		  Enable the UART module
	 */

	 /* Enable Clock Access to GPIOA */
	 RCC->AHB1ENR  |= GPIOA_EN;
 8000e88:	4b1f      	ldr	r3, [pc, #124]	; (8000f08 <uart_init+0x84>)
 8000e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8c:	4a1e      	ldr	r2, [pc, #120]	; (8000f08 <uart_init+0x84>)
 8000e8e:	f043 0301 	orr.w	r3, r3, #1
 8000e92:	6313      	str	r3, [r2, #48]	; 0x30
	 /* Set the mode of PA2 to alternate Function mode*/
	 GPIOA->MODER &= ~(GPIOA_AF_PIN4);
 8000e94:	4b1d      	ldr	r3, [pc, #116]	; (8000f0c <uart_init+0x88>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a1c      	ldr	r2, [pc, #112]	; (8000f0c <uart_init+0x88>)
 8000e9a:	f023 0310 	bic.w	r3, r3, #16
 8000e9e:	6013      	str	r3, [r2, #0]
	 GPIOA->MODER |=  GPIOA_AF_PIN5;
 8000ea0:	4b1a      	ldr	r3, [pc, #104]	; (8000f0c <uart_init+0x88>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a19      	ldr	r2, [pc, #100]	; (8000f0c <uart_init+0x88>)
 8000ea6:	f043 0320 	orr.w	r3, r3, #32
 8000eaa:	6013      	str	r3, [r2, #0]

	 /* Set the Alternate Function to AF7(Uart2_tx); set it according to the datasheet!  */
	 GPIOA->AFR[0] |= (GPIOA_AFR_PIN8);
 8000eac:	4b17      	ldr	r3, [pc, #92]	; (8000f0c <uart_init+0x88>)
 8000eae:	6a1b      	ldr	r3, [r3, #32]
 8000eb0:	4a16      	ldr	r2, [pc, #88]	; (8000f0c <uart_init+0x88>)
 8000eb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eb6:	6213      	str	r3, [r2, #32]
	 GPIOA->AFR[0] |= (GPIOA_AFR_PIN9);
 8000eb8:	4b14      	ldr	r3, [pc, #80]	; (8000f0c <uart_init+0x88>)
 8000eba:	6a1b      	ldr	r3, [r3, #32]
 8000ebc:	4a13      	ldr	r2, [pc, #76]	; (8000f0c <uart_init+0x88>)
 8000ebe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ec2:	6213      	str	r3, [r2, #32]
	 GPIOA->AFR[0] |= (GPIOA_AFR_PIN10);
 8000ec4:	4b11      	ldr	r3, [pc, #68]	; (8000f0c <uart_init+0x88>)
 8000ec6:	6a1b      	ldr	r3, [r3, #32]
 8000ec8:	4a10      	ldr	r2, [pc, #64]	; (8000f0c <uart_init+0x88>)
 8000eca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ece:	6213      	str	r3, [r2, #32]
	 GPIOA->AFR[0] &= ~(GPIOA_AFR_PIN11);
 8000ed0:	4b0e      	ldr	r3, [pc, #56]	; (8000f0c <uart_init+0x88>)
 8000ed2:	6a1b      	ldr	r3, [r3, #32]
 8000ed4:	4a0d      	ldr	r2, [pc, #52]	; (8000f0c <uart_init+0x88>)
 8000ed6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000eda:	6213      	str	r3, [r2, #32]

	 /* Enable Clock access to UART 2 */
     RCC->APB1ENR |= UART2EN;
 8000edc:	4b0a      	ldr	r3, [pc, #40]	; (8000f08 <uart_init+0x84>)
 8000ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee0:	4a09      	ldr	r2, [pc, #36]	; (8000f08 <uart_init+0x84>)
 8000ee2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ee6:	6413      	str	r3, [r2, #64]	; 0x40
	 /* Configure Baud Rate */
     uart_set_baudrate(APB1_CLK, UART_BAUDRATE);
 8000ee8:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000eec:	4808      	ldr	r0, [pc, #32]	; (8000f10 <uart_init+0x8c>)
 8000eee:	f000 f825 	bl	8000f3c <uart_set_baudrate>
     /* Configure Transfer Direction */
     USART2->CR1 = CR1_TE;
 8000ef2:	4b08      	ldr	r3, [pc, #32]	; (8000f14 <uart_init+0x90>)
 8000ef4:	2208      	movs	r2, #8
 8000ef6:	60da      	str	r2, [r3, #12]
     /* Enable the UART module */
     USART2->CR1 |= CR1_UE;
 8000ef8:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <uart_init+0x90>)
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	4a05      	ldr	r2, [pc, #20]	; (8000f14 <uart_init+0x90>)
 8000efe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f02:	60d3      	str	r3, [r2, #12]

 }
 8000f04:	bf00      	nop
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40023800 	.word	0x40023800
 8000f0c:	40020000 	.word	0x40020000
 8000f10:	00f42400 	.word	0x00f42400
 8000f14:	40004400 	.word	0x40004400

08000f18 <compute_uart_bd>:

 static uint16_t compute_uart_bd(uint32_t periph_clk, uint32_t baudrate)
 {
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	6039      	str	r1, [r7, #0]
	 return ((periph_clk + (baudrate/2U))/baudrate);
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	085a      	lsrs	r2, r3, #1
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	441a      	add	r2, r3
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f30:	b29b      	uxth	r3, r3
 }
 8000f32:	4618      	mov	r0, r3
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bc80      	pop	{r7}
 8000f3a:	4770      	bx	lr

08000f3c <uart_set_baudrate>:

 static void uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate)
 {
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	6039      	str	r1, [r7, #0]
	 USART2->BRR = compute_uart_bd(periph_clk,baudrate);
 8000f46:	6839      	ldr	r1, [r7, #0]
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f7ff ffe5 	bl	8000f18 <compute_uart_bd>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	461a      	mov	r2, r3
 8000f52:	4b03      	ldr	r3, [pc, #12]	; (8000f60 <uart_set_baudrate+0x24>)
 8000f54:	609a      	str	r2, [r3, #8]
 }
 8000f56:	bf00      	nop
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	40004400 	.word	0x40004400

08000f64 <__io_putchar>:

 int __io_putchar(int ch)
 {
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 	uart_write(ch);
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f000 f805 	bl	8000f7c <uart_write>
 	return ch;
 8000f72:	687b      	ldr	r3, [r7, #4]
 }
 8000f74:	4618      	mov	r0, r3
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <uart_write>:

void uart_write(int ch)
 {
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
	 /* Ensure transmit data register is empty before new data can be loaded */
    while(!(USART2->SR & SR_TXE));
 8000f84:	bf00      	nop
 8000f86:	4b07      	ldr	r3, [pc, #28]	; (8000fa4 <uart_write+0x28>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d0f9      	beq.n	8000f86 <uart_write+0xa>
    USART2->DR = (ch & 0xFF);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a03      	ldr	r2, [pc, #12]	; (8000fa4 <uart_write+0x28>)
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	6053      	str	r3, [r2, #4]
 }
 8000f9a:	bf00      	nop
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bc80      	pop	{r7}
 8000fa2:	4770      	bx	lr
 8000fa4:	40004400 	.word	0x40004400

08000fa8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000fa8:	480d      	ldr	r0, [pc, #52]	; (8000fe0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000faa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fac:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fb0:	480c      	ldr	r0, [pc, #48]	; (8000fe4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fb2:	490d      	ldr	r1, [pc, #52]	; (8000fe8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fb4:	4a0d      	ldr	r2, [pc, #52]	; (8000fec <LoopForever+0xe>)
  movs r3, #0
 8000fb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fb8:	e002      	b.n	8000fc0 <LoopCopyDataInit>

08000fba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fbe:	3304      	adds	r3, #4

08000fc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fc4:	d3f9      	bcc.n	8000fba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fc6:	4a0a      	ldr	r2, [pc, #40]	; (8000ff0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fc8:	4c0a      	ldr	r4, [pc, #40]	; (8000ff4 <LoopForever+0x16>)
  movs r3, #0
 8000fca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fcc:	e001      	b.n	8000fd2 <LoopFillZerobss>

08000fce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fd0:	3204      	adds	r2, #4

08000fd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fd4:	d3fb      	bcc.n	8000fce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000fd6:	f000 f81f 	bl	8001018 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fda:	f7ff fd15 	bl	8000a08 <main>

08000fde <LoopForever>:

LoopForever:
    b LoopForever
 8000fde:	e7fe      	b.n	8000fde <LoopForever>
  ldr   r0, =_estack
 8000fe0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fe4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fe8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000fec:	08002438 	.word	0x08002438
  ldr r2, =_sbss
 8000ff0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000ff4:	200000ac 	.word	0x200000ac

08000ff8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ff8:	e7fe      	b.n	8000ff8 <ADC_IRQHandler>
	...

08000ffc <calloc>:
 8000ffc:	4b02      	ldr	r3, [pc, #8]	; (8001008 <calloc+0xc>)
 8000ffe:	460a      	mov	r2, r1
 8001000:	4601      	mov	r1, r0
 8001002:	6818      	ldr	r0, [r3, #0]
 8001004:	f000 b834 	b.w	8001070 <_calloc_r>
 8001008:	20000004 	.word	0x20000004

0800100c <__errno>:
 800100c:	4b01      	ldr	r3, [pc, #4]	; (8001014 <__errno+0x8>)
 800100e:	6818      	ldr	r0, [r3, #0]
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	20000004 	.word	0x20000004

08001018 <__libc_init_array>:
 8001018:	b570      	push	{r4, r5, r6, lr}
 800101a:	4d0d      	ldr	r5, [pc, #52]	; (8001050 <__libc_init_array+0x38>)
 800101c:	4c0d      	ldr	r4, [pc, #52]	; (8001054 <__libc_init_array+0x3c>)
 800101e:	1b64      	subs	r4, r4, r5
 8001020:	10a4      	asrs	r4, r4, #2
 8001022:	2600      	movs	r6, #0
 8001024:	42a6      	cmp	r6, r4
 8001026:	d109      	bne.n	800103c <__libc_init_array+0x24>
 8001028:	4d0b      	ldr	r5, [pc, #44]	; (8001058 <__libc_init_array+0x40>)
 800102a:	4c0c      	ldr	r4, [pc, #48]	; (800105c <__libc_init_array+0x44>)
 800102c:	f001 f852 	bl	80020d4 <_init>
 8001030:	1b64      	subs	r4, r4, r5
 8001032:	10a4      	asrs	r4, r4, #2
 8001034:	2600      	movs	r6, #0
 8001036:	42a6      	cmp	r6, r4
 8001038:	d105      	bne.n	8001046 <__libc_init_array+0x2e>
 800103a:	bd70      	pop	{r4, r5, r6, pc}
 800103c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001040:	4798      	blx	r3
 8001042:	3601      	adds	r6, #1
 8001044:	e7ee      	b.n	8001024 <__libc_init_array+0xc>
 8001046:	f855 3b04 	ldr.w	r3, [r5], #4
 800104a:	4798      	blx	r3
 800104c:	3601      	adds	r6, #1
 800104e:	e7f2      	b.n	8001036 <__libc_init_array+0x1e>
 8001050:	08002430 	.word	0x08002430
 8001054:	08002430 	.word	0x08002430
 8001058:	08002430 	.word	0x08002430
 800105c:	08002434 	.word	0x08002434

08001060 <memset>:
 8001060:	4402      	add	r2, r0
 8001062:	4603      	mov	r3, r0
 8001064:	4293      	cmp	r3, r2
 8001066:	d100      	bne.n	800106a <memset+0xa>
 8001068:	4770      	bx	lr
 800106a:	f803 1b01 	strb.w	r1, [r3], #1
 800106e:	e7f9      	b.n	8001064 <memset+0x4>

08001070 <_calloc_r>:
 8001070:	b538      	push	{r3, r4, r5, lr}
 8001072:	fb02 f501 	mul.w	r5, r2, r1
 8001076:	4629      	mov	r1, r5
 8001078:	f000 f808 	bl	800108c <_malloc_r>
 800107c:	4604      	mov	r4, r0
 800107e:	b118      	cbz	r0, 8001088 <_calloc_r+0x18>
 8001080:	462a      	mov	r2, r5
 8001082:	2100      	movs	r1, #0
 8001084:	f7ff ffec 	bl	8001060 <memset>
 8001088:	4620      	mov	r0, r4
 800108a:	bd38      	pop	{r3, r4, r5, pc}

0800108c <_malloc_r>:
 800108c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800108e:	1ccd      	adds	r5, r1, #3
 8001090:	f025 0503 	bic.w	r5, r5, #3
 8001094:	3508      	adds	r5, #8
 8001096:	2d0c      	cmp	r5, #12
 8001098:	bf38      	it	cc
 800109a:	250c      	movcc	r5, #12
 800109c:	2d00      	cmp	r5, #0
 800109e:	4606      	mov	r6, r0
 80010a0:	db01      	blt.n	80010a6 <_malloc_r+0x1a>
 80010a2:	42a9      	cmp	r1, r5
 80010a4:	d903      	bls.n	80010ae <_malloc_r+0x22>
 80010a6:	230c      	movs	r3, #12
 80010a8:	6033      	str	r3, [r6, #0]
 80010aa:	2000      	movs	r0, #0
 80010ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80010ae:	f000 fbd7 	bl	8001860 <__malloc_lock>
 80010b2:	4921      	ldr	r1, [pc, #132]	; (8001138 <_malloc_r+0xac>)
 80010b4:	680a      	ldr	r2, [r1, #0]
 80010b6:	4614      	mov	r4, r2
 80010b8:	b99c      	cbnz	r4, 80010e2 <_malloc_r+0x56>
 80010ba:	4f20      	ldr	r7, [pc, #128]	; (800113c <_malloc_r+0xb0>)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	b923      	cbnz	r3, 80010ca <_malloc_r+0x3e>
 80010c0:	4621      	mov	r1, r4
 80010c2:	4630      	mov	r0, r6
 80010c4:	f000 f8de 	bl	8001284 <_sbrk_r>
 80010c8:	6038      	str	r0, [r7, #0]
 80010ca:	4629      	mov	r1, r5
 80010cc:	4630      	mov	r0, r6
 80010ce:	f000 f8d9 	bl	8001284 <_sbrk_r>
 80010d2:	1c43      	adds	r3, r0, #1
 80010d4:	d123      	bne.n	800111e <_malloc_r+0x92>
 80010d6:	230c      	movs	r3, #12
 80010d8:	6033      	str	r3, [r6, #0]
 80010da:	4630      	mov	r0, r6
 80010dc:	f000 fbc6 	bl	800186c <__malloc_unlock>
 80010e0:	e7e3      	b.n	80010aa <_malloc_r+0x1e>
 80010e2:	6823      	ldr	r3, [r4, #0]
 80010e4:	1b5b      	subs	r3, r3, r5
 80010e6:	d417      	bmi.n	8001118 <_malloc_r+0x8c>
 80010e8:	2b0b      	cmp	r3, #11
 80010ea:	d903      	bls.n	80010f4 <_malloc_r+0x68>
 80010ec:	6023      	str	r3, [r4, #0]
 80010ee:	441c      	add	r4, r3
 80010f0:	6025      	str	r5, [r4, #0]
 80010f2:	e004      	b.n	80010fe <_malloc_r+0x72>
 80010f4:	6863      	ldr	r3, [r4, #4]
 80010f6:	42a2      	cmp	r2, r4
 80010f8:	bf0c      	ite	eq
 80010fa:	600b      	streq	r3, [r1, #0]
 80010fc:	6053      	strne	r3, [r2, #4]
 80010fe:	4630      	mov	r0, r6
 8001100:	f000 fbb4 	bl	800186c <__malloc_unlock>
 8001104:	f104 000b 	add.w	r0, r4, #11
 8001108:	1d23      	adds	r3, r4, #4
 800110a:	f020 0007 	bic.w	r0, r0, #7
 800110e:	1ac2      	subs	r2, r0, r3
 8001110:	d0cc      	beq.n	80010ac <_malloc_r+0x20>
 8001112:	1a1b      	subs	r3, r3, r0
 8001114:	50a3      	str	r3, [r4, r2]
 8001116:	e7c9      	b.n	80010ac <_malloc_r+0x20>
 8001118:	4622      	mov	r2, r4
 800111a:	6864      	ldr	r4, [r4, #4]
 800111c:	e7cc      	b.n	80010b8 <_malloc_r+0x2c>
 800111e:	1cc4      	adds	r4, r0, #3
 8001120:	f024 0403 	bic.w	r4, r4, #3
 8001124:	42a0      	cmp	r0, r4
 8001126:	d0e3      	beq.n	80010f0 <_malloc_r+0x64>
 8001128:	1a21      	subs	r1, r4, r0
 800112a:	4630      	mov	r0, r6
 800112c:	f000 f8aa 	bl	8001284 <_sbrk_r>
 8001130:	3001      	adds	r0, #1
 8001132:	d1dd      	bne.n	80010f0 <_malloc_r+0x64>
 8001134:	e7cf      	b.n	80010d6 <_malloc_r+0x4a>
 8001136:	bf00      	nop
 8001138:	2000008c 	.word	0x2000008c
 800113c:	20000090 	.word	0x20000090

08001140 <iprintf>:
 8001140:	b40f      	push	{r0, r1, r2, r3}
 8001142:	4b0a      	ldr	r3, [pc, #40]	; (800116c <iprintf+0x2c>)
 8001144:	b513      	push	{r0, r1, r4, lr}
 8001146:	681c      	ldr	r4, [r3, #0]
 8001148:	b124      	cbz	r4, 8001154 <iprintf+0x14>
 800114a:	69a3      	ldr	r3, [r4, #24]
 800114c:	b913      	cbnz	r3, 8001154 <iprintf+0x14>
 800114e:	4620      	mov	r0, r4
 8001150:	f000 fa82 	bl	8001658 <__sinit>
 8001154:	ab05      	add	r3, sp, #20
 8001156:	9a04      	ldr	r2, [sp, #16]
 8001158:	68a1      	ldr	r1, [r4, #8]
 800115a:	9301      	str	r3, [sp, #4]
 800115c:	4620      	mov	r0, r4
 800115e:	f000 fc01 	bl	8001964 <_vfiprintf_r>
 8001162:	b002      	add	sp, #8
 8001164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001168:	b004      	add	sp, #16
 800116a:	4770      	bx	lr
 800116c:	20000004 	.word	0x20000004

08001170 <putchar>:
 8001170:	b538      	push	{r3, r4, r5, lr}
 8001172:	4b08      	ldr	r3, [pc, #32]	; (8001194 <putchar+0x24>)
 8001174:	681c      	ldr	r4, [r3, #0]
 8001176:	4605      	mov	r5, r0
 8001178:	b124      	cbz	r4, 8001184 <putchar+0x14>
 800117a:	69a3      	ldr	r3, [r4, #24]
 800117c:	b913      	cbnz	r3, 8001184 <putchar+0x14>
 800117e:	4620      	mov	r0, r4
 8001180:	f000 fa6a 	bl	8001658 <__sinit>
 8001184:	68a2      	ldr	r2, [r4, #8]
 8001186:	4629      	mov	r1, r5
 8001188:	4620      	mov	r0, r4
 800118a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800118e:	f000 bead 	b.w	8001eec <_putc_r>
 8001192:	bf00      	nop
 8001194:	20000004 	.word	0x20000004

08001198 <_puts_r>:
 8001198:	b570      	push	{r4, r5, r6, lr}
 800119a:	460e      	mov	r6, r1
 800119c:	4605      	mov	r5, r0
 800119e:	b118      	cbz	r0, 80011a8 <_puts_r+0x10>
 80011a0:	6983      	ldr	r3, [r0, #24]
 80011a2:	b90b      	cbnz	r3, 80011a8 <_puts_r+0x10>
 80011a4:	f000 fa58 	bl	8001658 <__sinit>
 80011a8:	69ab      	ldr	r3, [r5, #24]
 80011aa:	68ac      	ldr	r4, [r5, #8]
 80011ac:	b913      	cbnz	r3, 80011b4 <_puts_r+0x1c>
 80011ae:	4628      	mov	r0, r5
 80011b0:	f000 fa52 	bl	8001658 <__sinit>
 80011b4:	4b2c      	ldr	r3, [pc, #176]	; (8001268 <_puts_r+0xd0>)
 80011b6:	429c      	cmp	r4, r3
 80011b8:	d120      	bne.n	80011fc <_puts_r+0x64>
 80011ba:	686c      	ldr	r4, [r5, #4]
 80011bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80011be:	07db      	lsls	r3, r3, #31
 80011c0:	d405      	bmi.n	80011ce <_puts_r+0x36>
 80011c2:	89a3      	ldrh	r3, [r4, #12]
 80011c4:	0598      	lsls	r0, r3, #22
 80011c6:	d402      	bmi.n	80011ce <_puts_r+0x36>
 80011c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80011ca:	f000 fae3 	bl	8001794 <__retarget_lock_acquire_recursive>
 80011ce:	89a3      	ldrh	r3, [r4, #12]
 80011d0:	0719      	lsls	r1, r3, #28
 80011d2:	d51d      	bpl.n	8001210 <_puts_r+0x78>
 80011d4:	6923      	ldr	r3, [r4, #16]
 80011d6:	b1db      	cbz	r3, 8001210 <_puts_r+0x78>
 80011d8:	3e01      	subs	r6, #1
 80011da:	68a3      	ldr	r3, [r4, #8]
 80011dc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80011e0:	3b01      	subs	r3, #1
 80011e2:	60a3      	str	r3, [r4, #8]
 80011e4:	bb39      	cbnz	r1, 8001236 <_puts_r+0x9e>
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	da38      	bge.n	800125c <_puts_r+0xc4>
 80011ea:	4622      	mov	r2, r4
 80011ec:	210a      	movs	r1, #10
 80011ee:	4628      	mov	r0, r5
 80011f0:	f000 f858 	bl	80012a4 <__swbuf_r>
 80011f4:	3001      	adds	r0, #1
 80011f6:	d011      	beq.n	800121c <_puts_r+0x84>
 80011f8:	250a      	movs	r5, #10
 80011fa:	e011      	b.n	8001220 <_puts_r+0x88>
 80011fc:	4b1b      	ldr	r3, [pc, #108]	; (800126c <_puts_r+0xd4>)
 80011fe:	429c      	cmp	r4, r3
 8001200:	d101      	bne.n	8001206 <_puts_r+0x6e>
 8001202:	68ac      	ldr	r4, [r5, #8]
 8001204:	e7da      	b.n	80011bc <_puts_r+0x24>
 8001206:	4b1a      	ldr	r3, [pc, #104]	; (8001270 <_puts_r+0xd8>)
 8001208:	429c      	cmp	r4, r3
 800120a:	bf08      	it	eq
 800120c:	68ec      	ldreq	r4, [r5, #12]
 800120e:	e7d5      	b.n	80011bc <_puts_r+0x24>
 8001210:	4621      	mov	r1, r4
 8001212:	4628      	mov	r0, r5
 8001214:	f000 f898 	bl	8001348 <__swsetup_r>
 8001218:	2800      	cmp	r0, #0
 800121a:	d0dd      	beq.n	80011d8 <_puts_r+0x40>
 800121c:	f04f 35ff 	mov.w	r5, #4294967295
 8001220:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001222:	07da      	lsls	r2, r3, #31
 8001224:	d405      	bmi.n	8001232 <_puts_r+0x9a>
 8001226:	89a3      	ldrh	r3, [r4, #12]
 8001228:	059b      	lsls	r3, r3, #22
 800122a:	d402      	bmi.n	8001232 <_puts_r+0x9a>
 800122c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800122e:	f000 fab2 	bl	8001796 <__retarget_lock_release_recursive>
 8001232:	4628      	mov	r0, r5
 8001234:	bd70      	pop	{r4, r5, r6, pc}
 8001236:	2b00      	cmp	r3, #0
 8001238:	da04      	bge.n	8001244 <_puts_r+0xac>
 800123a:	69a2      	ldr	r2, [r4, #24]
 800123c:	429a      	cmp	r2, r3
 800123e:	dc06      	bgt.n	800124e <_puts_r+0xb6>
 8001240:	290a      	cmp	r1, #10
 8001242:	d004      	beq.n	800124e <_puts_r+0xb6>
 8001244:	6823      	ldr	r3, [r4, #0]
 8001246:	1c5a      	adds	r2, r3, #1
 8001248:	6022      	str	r2, [r4, #0]
 800124a:	7019      	strb	r1, [r3, #0]
 800124c:	e7c5      	b.n	80011da <_puts_r+0x42>
 800124e:	4622      	mov	r2, r4
 8001250:	4628      	mov	r0, r5
 8001252:	f000 f827 	bl	80012a4 <__swbuf_r>
 8001256:	3001      	adds	r0, #1
 8001258:	d1bf      	bne.n	80011da <_puts_r+0x42>
 800125a:	e7df      	b.n	800121c <_puts_r+0x84>
 800125c:	6823      	ldr	r3, [r4, #0]
 800125e:	250a      	movs	r5, #10
 8001260:	1c5a      	adds	r2, r3, #1
 8001262:	6022      	str	r2, [r4, #0]
 8001264:	701d      	strb	r5, [r3, #0]
 8001266:	e7db      	b.n	8001220 <_puts_r+0x88>
 8001268:	080023bc 	.word	0x080023bc
 800126c:	080023dc 	.word	0x080023dc
 8001270:	0800239c 	.word	0x0800239c

08001274 <puts>:
 8001274:	4b02      	ldr	r3, [pc, #8]	; (8001280 <puts+0xc>)
 8001276:	4601      	mov	r1, r0
 8001278:	6818      	ldr	r0, [r3, #0]
 800127a:	f7ff bf8d 	b.w	8001198 <_puts_r>
 800127e:	bf00      	nop
 8001280:	20000004 	.word	0x20000004

08001284 <_sbrk_r>:
 8001284:	b538      	push	{r3, r4, r5, lr}
 8001286:	4d06      	ldr	r5, [pc, #24]	; (80012a0 <_sbrk_r+0x1c>)
 8001288:	2300      	movs	r3, #0
 800128a:	4604      	mov	r4, r0
 800128c:	4608      	mov	r0, r1
 800128e:	602b      	str	r3, [r5, #0]
 8001290:	f7ff fd88 	bl	8000da4 <_sbrk>
 8001294:	1c43      	adds	r3, r0, #1
 8001296:	d102      	bne.n	800129e <_sbrk_r+0x1a>
 8001298:	682b      	ldr	r3, [r5, #0]
 800129a:	b103      	cbz	r3, 800129e <_sbrk_r+0x1a>
 800129c:	6023      	str	r3, [r4, #0]
 800129e:	bd38      	pop	{r3, r4, r5, pc}
 80012a0:	200000a8 	.word	0x200000a8

080012a4 <__swbuf_r>:
 80012a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012a6:	460e      	mov	r6, r1
 80012a8:	4614      	mov	r4, r2
 80012aa:	4605      	mov	r5, r0
 80012ac:	b118      	cbz	r0, 80012b6 <__swbuf_r+0x12>
 80012ae:	6983      	ldr	r3, [r0, #24]
 80012b0:	b90b      	cbnz	r3, 80012b6 <__swbuf_r+0x12>
 80012b2:	f000 f9d1 	bl	8001658 <__sinit>
 80012b6:	4b21      	ldr	r3, [pc, #132]	; (800133c <__swbuf_r+0x98>)
 80012b8:	429c      	cmp	r4, r3
 80012ba:	d12b      	bne.n	8001314 <__swbuf_r+0x70>
 80012bc:	686c      	ldr	r4, [r5, #4]
 80012be:	69a3      	ldr	r3, [r4, #24]
 80012c0:	60a3      	str	r3, [r4, #8]
 80012c2:	89a3      	ldrh	r3, [r4, #12]
 80012c4:	071a      	lsls	r2, r3, #28
 80012c6:	d52f      	bpl.n	8001328 <__swbuf_r+0x84>
 80012c8:	6923      	ldr	r3, [r4, #16]
 80012ca:	b36b      	cbz	r3, 8001328 <__swbuf_r+0x84>
 80012cc:	6923      	ldr	r3, [r4, #16]
 80012ce:	6820      	ldr	r0, [r4, #0]
 80012d0:	1ac0      	subs	r0, r0, r3
 80012d2:	6963      	ldr	r3, [r4, #20]
 80012d4:	b2f6      	uxtb	r6, r6
 80012d6:	4283      	cmp	r3, r0
 80012d8:	4637      	mov	r7, r6
 80012da:	dc04      	bgt.n	80012e6 <__swbuf_r+0x42>
 80012dc:	4621      	mov	r1, r4
 80012de:	4628      	mov	r0, r5
 80012e0:	f000 f926 	bl	8001530 <_fflush_r>
 80012e4:	bb30      	cbnz	r0, 8001334 <__swbuf_r+0x90>
 80012e6:	68a3      	ldr	r3, [r4, #8]
 80012e8:	3b01      	subs	r3, #1
 80012ea:	60a3      	str	r3, [r4, #8]
 80012ec:	6823      	ldr	r3, [r4, #0]
 80012ee:	1c5a      	adds	r2, r3, #1
 80012f0:	6022      	str	r2, [r4, #0]
 80012f2:	701e      	strb	r6, [r3, #0]
 80012f4:	6963      	ldr	r3, [r4, #20]
 80012f6:	3001      	adds	r0, #1
 80012f8:	4283      	cmp	r3, r0
 80012fa:	d004      	beq.n	8001306 <__swbuf_r+0x62>
 80012fc:	89a3      	ldrh	r3, [r4, #12]
 80012fe:	07db      	lsls	r3, r3, #31
 8001300:	d506      	bpl.n	8001310 <__swbuf_r+0x6c>
 8001302:	2e0a      	cmp	r6, #10
 8001304:	d104      	bne.n	8001310 <__swbuf_r+0x6c>
 8001306:	4621      	mov	r1, r4
 8001308:	4628      	mov	r0, r5
 800130a:	f000 f911 	bl	8001530 <_fflush_r>
 800130e:	b988      	cbnz	r0, 8001334 <__swbuf_r+0x90>
 8001310:	4638      	mov	r0, r7
 8001312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001314:	4b0a      	ldr	r3, [pc, #40]	; (8001340 <__swbuf_r+0x9c>)
 8001316:	429c      	cmp	r4, r3
 8001318:	d101      	bne.n	800131e <__swbuf_r+0x7a>
 800131a:	68ac      	ldr	r4, [r5, #8]
 800131c:	e7cf      	b.n	80012be <__swbuf_r+0x1a>
 800131e:	4b09      	ldr	r3, [pc, #36]	; (8001344 <__swbuf_r+0xa0>)
 8001320:	429c      	cmp	r4, r3
 8001322:	bf08      	it	eq
 8001324:	68ec      	ldreq	r4, [r5, #12]
 8001326:	e7ca      	b.n	80012be <__swbuf_r+0x1a>
 8001328:	4621      	mov	r1, r4
 800132a:	4628      	mov	r0, r5
 800132c:	f000 f80c 	bl	8001348 <__swsetup_r>
 8001330:	2800      	cmp	r0, #0
 8001332:	d0cb      	beq.n	80012cc <__swbuf_r+0x28>
 8001334:	f04f 37ff 	mov.w	r7, #4294967295
 8001338:	e7ea      	b.n	8001310 <__swbuf_r+0x6c>
 800133a:	bf00      	nop
 800133c:	080023bc 	.word	0x080023bc
 8001340:	080023dc 	.word	0x080023dc
 8001344:	0800239c 	.word	0x0800239c

08001348 <__swsetup_r>:
 8001348:	4b32      	ldr	r3, [pc, #200]	; (8001414 <__swsetup_r+0xcc>)
 800134a:	b570      	push	{r4, r5, r6, lr}
 800134c:	681d      	ldr	r5, [r3, #0]
 800134e:	4606      	mov	r6, r0
 8001350:	460c      	mov	r4, r1
 8001352:	b125      	cbz	r5, 800135e <__swsetup_r+0x16>
 8001354:	69ab      	ldr	r3, [r5, #24]
 8001356:	b913      	cbnz	r3, 800135e <__swsetup_r+0x16>
 8001358:	4628      	mov	r0, r5
 800135a:	f000 f97d 	bl	8001658 <__sinit>
 800135e:	4b2e      	ldr	r3, [pc, #184]	; (8001418 <__swsetup_r+0xd0>)
 8001360:	429c      	cmp	r4, r3
 8001362:	d10f      	bne.n	8001384 <__swsetup_r+0x3c>
 8001364:	686c      	ldr	r4, [r5, #4]
 8001366:	89a3      	ldrh	r3, [r4, #12]
 8001368:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800136c:	0719      	lsls	r1, r3, #28
 800136e:	d42c      	bmi.n	80013ca <__swsetup_r+0x82>
 8001370:	06dd      	lsls	r5, r3, #27
 8001372:	d411      	bmi.n	8001398 <__swsetup_r+0x50>
 8001374:	2309      	movs	r3, #9
 8001376:	6033      	str	r3, [r6, #0]
 8001378:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800137c:	81a3      	strh	r3, [r4, #12]
 800137e:	f04f 30ff 	mov.w	r0, #4294967295
 8001382:	e03e      	b.n	8001402 <__swsetup_r+0xba>
 8001384:	4b25      	ldr	r3, [pc, #148]	; (800141c <__swsetup_r+0xd4>)
 8001386:	429c      	cmp	r4, r3
 8001388:	d101      	bne.n	800138e <__swsetup_r+0x46>
 800138a:	68ac      	ldr	r4, [r5, #8]
 800138c:	e7eb      	b.n	8001366 <__swsetup_r+0x1e>
 800138e:	4b24      	ldr	r3, [pc, #144]	; (8001420 <__swsetup_r+0xd8>)
 8001390:	429c      	cmp	r4, r3
 8001392:	bf08      	it	eq
 8001394:	68ec      	ldreq	r4, [r5, #12]
 8001396:	e7e6      	b.n	8001366 <__swsetup_r+0x1e>
 8001398:	0758      	lsls	r0, r3, #29
 800139a:	d512      	bpl.n	80013c2 <__swsetup_r+0x7a>
 800139c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800139e:	b141      	cbz	r1, 80013b2 <__swsetup_r+0x6a>
 80013a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80013a4:	4299      	cmp	r1, r3
 80013a6:	d002      	beq.n	80013ae <__swsetup_r+0x66>
 80013a8:	4630      	mov	r0, r6
 80013aa:	f000 fa65 	bl	8001878 <_free_r>
 80013ae:	2300      	movs	r3, #0
 80013b0:	6363      	str	r3, [r4, #52]	; 0x34
 80013b2:	89a3      	ldrh	r3, [r4, #12]
 80013b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80013b8:	81a3      	strh	r3, [r4, #12]
 80013ba:	2300      	movs	r3, #0
 80013bc:	6063      	str	r3, [r4, #4]
 80013be:	6923      	ldr	r3, [r4, #16]
 80013c0:	6023      	str	r3, [r4, #0]
 80013c2:	89a3      	ldrh	r3, [r4, #12]
 80013c4:	f043 0308 	orr.w	r3, r3, #8
 80013c8:	81a3      	strh	r3, [r4, #12]
 80013ca:	6923      	ldr	r3, [r4, #16]
 80013cc:	b94b      	cbnz	r3, 80013e2 <__swsetup_r+0x9a>
 80013ce:	89a3      	ldrh	r3, [r4, #12]
 80013d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80013d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013d8:	d003      	beq.n	80013e2 <__swsetup_r+0x9a>
 80013da:	4621      	mov	r1, r4
 80013dc:	4630      	mov	r0, r6
 80013de:	f000 f9ff 	bl	80017e0 <__smakebuf_r>
 80013e2:	89a0      	ldrh	r0, [r4, #12]
 80013e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80013e8:	f010 0301 	ands.w	r3, r0, #1
 80013ec:	d00a      	beq.n	8001404 <__swsetup_r+0xbc>
 80013ee:	2300      	movs	r3, #0
 80013f0:	60a3      	str	r3, [r4, #8]
 80013f2:	6963      	ldr	r3, [r4, #20]
 80013f4:	425b      	negs	r3, r3
 80013f6:	61a3      	str	r3, [r4, #24]
 80013f8:	6923      	ldr	r3, [r4, #16]
 80013fa:	b943      	cbnz	r3, 800140e <__swsetup_r+0xc6>
 80013fc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001400:	d1ba      	bne.n	8001378 <__swsetup_r+0x30>
 8001402:	bd70      	pop	{r4, r5, r6, pc}
 8001404:	0781      	lsls	r1, r0, #30
 8001406:	bf58      	it	pl
 8001408:	6963      	ldrpl	r3, [r4, #20]
 800140a:	60a3      	str	r3, [r4, #8]
 800140c:	e7f4      	b.n	80013f8 <__swsetup_r+0xb0>
 800140e:	2000      	movs	r0, #0
 8001410:	e7f7      	b.n	8001402 <__swsetup_r+0xba>
 8001412:	bf00      	nop
 8001414:	20000004 	.word	0x20000004
 8001418:	080023bc 	.word	0x080023bc
 800141c:	080023dc 	.word	0x080023dc
 8001420:	0800239c 	.word	0x0800239c

08001424 <__sflush_r>:
 8001424:	898a      	ldrh	r2, [r1, #12]
 8001426:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800142a:	4605      	mov	r5, r0
 800142c:	0710      	lsls	r0, r2, #28
 800142e:	460c      	mov	r4, r1
 8001430:	d458      	bmi.n	80014e4 <__sflush_r+0xc0>
 8001432:	684b      	ldr	r3, [r1, #4]
 8001434:	2b00      	cmp	r3, #0
 8001436:	dc05      	bgt.n	8001444 <__sflush_r+0x20>
 8001438:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800143a:	2b00      	cmp	r3, #0
 800143c:	dc02      	bgt.n	8001444 <__sflush_r+0x20>
 800143e:	2000      	movs	r0, #0
 8001440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001444:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001446:	2e00      	cmp	r6, #0
 8001448:	d0f9      	beq.n	800143e <__sflush_r+0x1a>
 800144a:	2300      	movs	r3, #0
 800144c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001450:	682f      	ldr	r7, [r5, #0]
 8001452:	602b      	str	r3, [r5, #0]
 8001454:	d032      	beq.n	80014bc <__sflush_r+0x98>
 8001456:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001458:	89a3      	ldrh	r3, [r4, #12]
 800145a:	075a      	lsls	r2, r3, #29
 800145c:	d505      	bpl.n	800146a <__sflush_r+0x46>
 800145e:	6863      	ldr	r3, [r4, #4]
 8001460:	1ac0      	subs	r0, r0, r3
 8001462:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001464:	b10b      	cbz	r3, 800146a <__sflush_r+0x46>
 8001466:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001468:	1ac0      	subs	r0, r0, r3
 800146a:	2300      	movs	r3, #0
 800146c:	4602      	mov	r2, r0
 800146e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001470:	6a21      	ldr	r1, [r4, #32]
 8001472:	4628      	mov	r0, r5
 8001474:	47b0      	blx	r6
 8001476:	1c43      	adds	r3, r0, #1
 8001478:	89a3      	ldrh	r3, [r4, #12]
 800147a:	d106      	bne.n	800148a <__sflush_r+0x66>
 800147c:	6829      	ldr	r1, [r5, #0]
 800147e:	291d      	cmp	r1, #29
 8001480:	d82c      	bhi.n	80014dc <__sflush_r+0xb8>
 8001482:	4a2a      	ldr	r2, [pc, #168]	; (800152c <__sflush_r+0x108>)
 8001484:	40ca      	lsrs	r2, r1
 8001486:	07d6      	lsls	r6, r2, #31
 8001488:	d528      	bpl.n	80014dc <__sflush_r+0xb8>
 800148a:	2200      	movs	r2, #0
 800148c:	6062      	str	r2, [r4, #4]
 800148e:	04d9      	lsls	r1, r3, #19
 8001490:	6922      	ldr	r2, [r4, #16]
 8001492:	6022      	str	r2, [r4, #0]
 8001494:	d504      	bpl.n	80014a0 <__sflush_r+0x7c>
 8001496:	1c42      	adds	r2, r0, #1
 8001498:	d101      	bne.n	800149e <__sflush_r+0x7a>
 800149a:	682b      	ldr	r3, [r5, #0]
 800149c:	b903      	cbnz	r3, 80014a0 <__sflush_r+0x7c>
 800149e:	6560      	str	r0, [r4, #84]	; 0x54
 80014a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80014a2:	602f      	str	r7, [r5, #0]
 80014a4:	2900      	cmp	r1, #0
 80014a6:	d0ca      	beq.n	800143e <__sflush_r+0x1a>
 80014a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80014ac:	4299      	cmp	r1, r3
 80014ae:	d002      	beq.n	80014b6 <__sflush_r+0x92>
 80014b0:	4628      	mov	r0, r5
 80014b2:	f000 f9e1 	bl	8001878 <_free_r>
 80014b6:	2000      	movs	r0, #0
 80014b8:	6360      	str	r0, [r4, #52]	; 0x34
 80014ba:	e7c1      	b.n	8001440 <__sflush_r+0x1c>
 80014bc:	6a21      	ldr	r1, [r4, #32]
 80014be:	2301      	movs	r3, #1
 80014c0:	4628      	mov	r0, r5
 80014c2:	47b0      	blx	r6
 80014c4:	1c41      	adds	r1, r0, #1
 80014c6:	d1c7      	bne.n	8001458 <__sflush_r+0x34>
 80014c8:	682b      	ldr	r3, [r5, #0]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d0c4      	beq.n	8001458 <__sflush_r+0x34>
 80014ce:	2b1d      	cmp	r3, #29
 80014d0:	d001      	beq.n	80014d6 <__sflush_r+0xb2>
 80014d2:	2b16      	cmp	r3, #22
 80014d4:	d101      	bne.n	80014da <__sflush_r+0xb6>
 80014d6:	602f      	str	r7, [r5, #0]
 80014d8:	e7b1      	b.n	800143e <__sflush_r+0x1a>
 80014da:	89a3      	ldrh	r3, [r4, #12]
 80014dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014e0:	81a3      	strh	r3, [r4, #12]
 80014e2:	e7ad      	b.n	8001440 <__sflush_r+0x1c>
 80014e4:	690f      	ldr	r7, [r1, #16]
 80014e6:	2f00      	cmp	r7, #0
 80014e8:	d0a9      	beq.n	800143e <__sflush_r+0x1a>
 80014ea:	0793      	lsls	r3, r2, #30
 80014ec:	680e      	ldr	r6, [r1, #0]
 80014ee:	bf08      	it	eq
 80014f0:	694b      	ldreq	r3, [r1, #20]
 80014f2:	600f      	str	r7, [r1, #0]
 80014f4:	bf18      	it	ne
 80014f6:	2300      	movne	r3, #0
 80014f8:	eba6 0807 	sub.w	r8, r6, r7
 80014fc:	608b      	str	r3, [r1, #8]
 80014fe:	f1b8 0f00 	cmp.w	r8, #0
 8001502:	dd9c      	ble.n	800143e <__sflush_r+0x1a>
 8001504:	6a21      	ldr	r1, [r4, #32]
 8001506:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001508:	4643      	mov	r3, r8
 800150a:	463a      	mov	r2, r7
 800150c:	4628      	mov	r0, r5
 800150e:	47b0      	blx	r6
 8001510:	2800      	cmp	r0, #0
 8001512:	dc06      	bgt.n	8001522 <__sflush_r+0xfe>
 8001514:	89a3      	ldrh	r3, [r4, #12]
 8001516:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800151a:	81a3      	strh	r3, [r4, #12]
 800151c:	f04f 30ff 	mov.w	r0, #4294967295
 8001520:	e78e      	b.n	8001440 <__sflush_r+0x1c>
 8001522:	4407      	add	r7, r0
 8001524:	eba8 0800 	sub.w	r8, r8, r0
 8001528:	e7e9      	b.n	80014fe <__sflush_r+0xda>
 800152a:	bf00      	nop
 800152c:	20400001 	.word	0x20400001

08001530 <_fflush_r>:
 8001530:	b538      	push	{r3, r4, r5, lr}
 8001532:	690b      	ldr	r3, [r1, #16]
 8001534:	4605      	mov	r5, r0
 8001536:	460c      	mov	r4, r1
 8001538:	b913      	cbnz	r3, 8001540 <_fflush_r+0x10>
 800153a:	2500      	movs	r5, #0
 800153c:	4628      	mov	r0, r5
 800153e:	bd38      	pop	{r3, r4, r5, pc}
 8001540:	b118      	cbz	r0, 800154a <_fflush_r+0x1a>
 8001542:	6983      	ldr	r3, [r0, #24]
 8001544:	b90b      	cbnz	r3, 800154a <_fflush_r+0x1a>
 8001546:	f000 f887 	bl	8001658 <__sinit>
 800154a:	4b14      	ldr	r3, [pc, #80]	; (800159c <_fflush_r+0x6c>)
 800154c:	429c      	cmp	r4, r3
 800154e:	d11b      	bne.n	8001588 <_fflush_r+0x58>
 8001550:	686c      	ldr	r4, [r5, #4]
 8001552:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d0ef      	beq.n	800153a <_fflush_r+0xa>
 800155a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800155c:	07d0      	lsls	r0, r2, #31
 800155e:	d404      	bmi.n	800156a <_fflush_r+0x3a>
 8001560:	0599      	lsls	r1, r3, #22
 8001562:	d402      	bmi.n	800156a <_fflush_r+0x3a>
 8001564:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001566:	f000 f915 	bl	8001794 <__retarget_lock_acquire_recursive>
 800156a:	4628      	mov	r0, r5
 800156c:	4621      	mov	r1, r4
 800156e:	f7ff ff59 	bl	8001424 <__sflush_r>
 8001572:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001574:	07da      	lsls	r2, r3, #31
 8001576:	4605      	mov	r5, r0
 8001578:	d4e0      	bmi.n	800153c <_fflush_r+0xc>
 800157a:	89a3      	ldrh	r3, [r4, #12]
 800157c:	059b      	lsls	r3, r3, #22
 800157e:	d4dd      	bmi.n	800153c <_fflush_r+0xc>
 8001580:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001582:	f000 f908 	bl	8001796 <__retarget_lock_release_recursive>
 8001586:	e7d9      	b.n	800153c <_fflush_r+0xc>
 8001588:	4b05      	ldr	r3, [pc, #20]	; (80015a0 <_fflush_r+0x70>)
 800158a:	429c      	cmp	r4, r3
 800158c:	d101      	bne.n	8001592 <_fflush_r+0x62>
 800158e:	68ac      	ldr	r4, [r5, #8]
 8001590:	e7df      	b.n	8001552 <_fflush_r+0x22>
 8001592:	4b04      	ldr	r3, [pc, #16]	; (80015a4 <_fflush_r+0x74>)
 8001594:	429c      	cmp	r4, r3
 8001596:	bf08      	it	eq
 8001598:	68ec      	ldreq	r4, [r5, #12]
 800159a:	e7da      	b.n	8001552 <_fflush_r+0x22>
 800159c:	080023bc 	.word	0x080023bc
 80015a0:	080023dc 	.word	0x080023dc
 80015a4:	0800239c 	.word	0x0800239c

080015a8 <std>:
 80015a8:	2300      	movs	r3, #0
 80015aa:	b510      	push	{r4, lr}
 80015ac:	4604      	mov	r4, r0
 80015ae:	e9c0 3300 	strd	r3, r3, [r0]
 80015b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80015b6:	6083      	str	r3, [r0, #8]
 80015b8:	8181      	strh	r1, [r0, #12]
 80015ba:	6643      	str	r3, [r0, #100]	; 0x64
 80015bc:	81c2      	strh	r2, [r0, #14]
 80015be:	6183      	str	r3, [r0, #24]
 80015c0:	4619      	mov	r1, r3
 80015c2:	2208      	movs	r2, #8
 80015c4:	305c      	adds	r0, #92	; 0x5c
 80015c6:	f7ff fd4b 	bl	8001060 <memset>
 80015ca:	4b05      	ldr	r3, [pc, #20]	; (80015e0 <std+0x38>)
 80015cc:	6263      	str	r3, [r4, #36]	; 0x24
 80015ce:	4b05      	ldr	r3, [pc, #20]	; (80015e4 <std+0x3c>)
 80015d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80015d2:	4b05      	ldr	r3, [pc, #20]	; (80015e8 <std+0x40>)
 80015d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80015d6:	4b05      	ldr	r3, [pc, #20]	; (80015ec <std+0x44>)
 80015d8:	6224      	str	r4, [r4, #32]
 80015da:	6323      	str	r3, [r4, #48]	; 0x30
 80015dc:	bd10      	pop	{r4, pc}
 80015de:	bf00      	nop
 80015e0:	08001f7d 	.word	0x08001f7d
 80015e4:	08001f9f 	.word	0x08001f9f
 80015e8:	08001fd7 	.word	0x08001fd7
 80015ec:	08001ffb 	.word	0x08001ffb

080015f0 <_cleanup_r>:
 80015f0:	4901      	ldr	r1, [pc, #4]	; (80015f8 <_cleanup_r+0x8>)
 80015f2:	f000 b8af 	b.w	8001754 <_fwalk_reent>
 80015f6:	bf00      	nop
 80015f8:	08001531 	.word	0x08001531

080015fc <__sfmoreglue>:
 80015fc:	b570      	push	{r4, r5, r6, lr}
 80015fe:	1e4a      	subs	r2, r1, #1
 8001600:	2568      	movs	r5, #104	; 0x68
 8001602:	4355      	muls	r5, r2
 8001604:	460e      	mov	r6, r1
 8001606:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800160a:	f7ff fd3f 	bl	800108c <_malloc_r>
 800160e:	4604      	mov	r4, r0
 8001610:	b140      	cbz	r0, 8001624 <__sfmoreglue+0x28>
 8001612:	2100      	movs	r1, #0
 8001614:	e9c0 1600 	strd	r1, r6, [r0]
 8001618:	300c      	adds	r0, #12
 800161a:	60a0      	str	r0, [r4, #8]
 800161c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001620:	f7ff fd1e 	bl	8001060 <memset>
 8001624:	4620      	mov	r0, r4
 8001626:	bd70      	pop	{r4, r5, r6, pc}

08001628 <__sfp_lock_acquire>:
 8001628:	4801      	ldr	r0, [pc, #4]	; (8001630 <__sfp_lock_acquire+0x8>)
 800162a:	f000 b8b3 	b.w	8001794 <__retarget_lock_acquire_recursive>
 800162e:	bf00      	nop
 8001630:	200000a4 	.word	0x200000a4

08001634 <__sfp_lock_release>:
 8001634:	4801      	ldr	r0, [pc, #4]	; (800163c <__sfp_lock_release+0x8>)
 8001636:	f000 b8ae 	b.w	8001796 <__retarget_lock_release_recursive>
 800163a:	bf00      	nop
 800163c:	200000a4 	.word	0x200000a4

08001640 <__sinit_lock_acquire>:
 8001640:	4801      	ldr	r0, [pc, #4]	; (8001648 <__sinit_lock_acquire+0x8>)
 8001642:	f000 b8a7 	b.w	8001794 <__retarget_lock_acquire_recursive>
 8001646:	bf00      	nop
 8001648:	2000009f 	.word	0x2000009f

0800164c <__sinit_lock_release>:
 800164c:	4801      	ldr	r0, [pc, #4]	; (8001654 <__sinit_lock_release+0x8>)
 800164e:	f000 b8a2 	b.w	8001796 <__retarget_lock_release_recursive>
 8001652:	bf00      	nop
 8001654:	2000009f 	.word	0x2000009f

08001658 <__sinit>:
 8001658:	b510      	push	{r4, lr}
 800165a:	4604      	mov	r4, r0
 800165c:	f7ff fff0 	bl	8001640 <__sinit_lock_acquire>
 8001660:	69a3      	ldr	r3, [r4, #24]
 8001662:	b11b      	cbz	r3, 800166c <__sinit+0x14>
 8001664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001668:	f7ff bff0 	b.w	800164c <__sinit_lock_release>
 800166c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001670:	6523      	str	r3, [r4, #80]	; 0x50
 8001672:	4b13      	ldr	r3, [pc, #76]	; (80016c0 <__sinit+0x68>)
 8001674:	4a13      	ldr	r2, [pc, #76]	; (80016c4 <__sinit+0x6c>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	62a2      	str	r2, [r4, #40]	; 0x28
 800167a:	42a3      	cmp	r3, r4
 800167c:	bf04      	itt	eq
 800167e:	2301      	moveq	r3, #1
 8001680:	61a3      	streq	r3, [r4, #24]
 8001682:	4620      	mov	r0, r4
 8001684:	f000 f820 	bl	80016c8 <__sfp>
 8001688:	6060      	str	r0, [r4, #4]
 800168a:	4620      	mov	r0, r4
 800168c:	f000 f81c 	bl	80016c8 <__sfp>
 8001690:	60a0      	str	r0, [r4, #8]
 8001692:	4620      	mov	r0, r4
 8001694:	f000 f818 	bl	80016c8 <__sfp>
 8001698:	2200      	movs	r2, #0
 800169a:	60e0      	str	r0, [r4, #12]
 800169c:	2104      	movs	r1, #4
 800169e:	6860      	ldr	r0, [r4, #4]
 80016a0:	f7ff ff82 	bl	80015a8 <std>
 80016a4:	68a0      	ldr	r0, [r4, #8]
 80016a6:	2201      	movs	r2, #1
 80016a8:	2109      	movs	r1, #9
 80016aa:	f7ff ff7d 	bl	80015a8 <std>
 80016ae:	68e0      	ldr	r0, [r4, #12]
 80016b0:	2202      	movs	r2, #2
 80016b2:	2112      	movs	r1, #18
 80016b4:	f7ff ff78 	bl	80015a8 <std>
 80016b8:	2301      	movs	r3, #1
 80016ba:	61a3      	str	r3, [r4, #24]
 80016bc:	e7d2      	b.n	8001664 <__sinit+0xc>
 80016be:	bf00      	nop
 80016c0:	08002398 	.word	0x08002398
 80016c4:	080015f1 	.word	0x080015f1

080016c8 <__sfp>:
 80016c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016ca:	4607      	mov	r7, r0
 80016cc:	f7ff ffac 	bl	8001628 <__sfp_lock_acquire>
 80016d0:	4b1e      	ldr	r3, [pc, #120]	; (800174c <__sfp+0x84>)
 80016d2:	681e      	ldr	r6, [r3, #0]
 80016d4:	69b3      	ldr	r3, [r6, #24]
 80016d6:	b913      	cbnz	r3, 80016de <__sfp+0x16>
 80016d8:	4630      	mov	r0, r6
 80016da:	f7ff ffbd 	bl	8001658 <__sinit>
 80016de:	3648      	adds	r6, #72	; 0x48
 80016e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80016e4:	3b01      	subs	r3, #1
 80016e6:	d503      	bpl.n	80016f0 <__sfp+0x28>
 80016e8:	6833      	ldr	r3, [r6, #0]
 80016ea:	b30b      	cbz	r3, 8001730 <__sfp+0x68>
 80016ec:	6836      	ldr	r6, [r6, #0]
 80016ee:	e7f7      	b.n	80016e0 <__sfp+0x18>
 80016f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80016f4:	b9d5      	cbnz	r5, 800172c <__sfp+0x64>
 80016f6:	4b16      	ldr	r3, [pc, #88]	; (8001750 <__sfp+0x88>)
 80016f8:	60e3      	str	r3, [r4, #12]
 80016fa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80016fe:	6665      	str	r5, [r4, #100]	; 0x64
 8001700:	f000 f847 	bl	8001792 <__retarget_lock_init_recursive>
 8001704:	f7ff ff96 	bl	8001634 <__sfp_lock_release>
 8001708:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800170c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001710:	6025      	str	r5, [r4, #0]
 8001712:	61a5      	str	r5, [r4, #24]
 8001714:	2208      	movs	r2, #8
 8001716:	4629      	mov	r1, r5
 8001718:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800171c:	f7ff fca0 	bl	8001060 <memset>
 8001720:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001724:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001728:	4620      	mov	r0, r4
 800172a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800172c:	3468      	adds	r4, #104	; 0x68
 800172e:	e7d9      	b.n	80016e4 <__sfp+0x1c>
 8001730:	2104      	movs	r1, #4
 8001732:	4638      	mov	r0, r7
 8001734:	f7ff ff62 	bl	80015fc <__sfmoreglue>
 8001738:	4604      	mov	r4, r0
 800173a:	6030      	str	r0, [r6, #0]
 800173c:	2800      	cmp	r0, #0
 800173e:	d1d5      	bne.n	80016ec <__sfp+0x24>
 8001740:	f7ff ff78 	bl	8001634 <__sfp_lock_release>
 8001744:	230c      	movs	r3, #12
 8001746:	603b      	str	r3, [r7, #0]
 8001748:	e7ee      	b.n	8001728 <__sfp+0x60>
 800174a:	bf00      	nop
 800174c:	08002398 	.word	0x08002398
 8001750:	ffff0001 	.word	0xffff0001

08001754 <_fwalk_reent>:
 8001754:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001758:	4606      	mov	r6, r0
 800175a:	4688      	mov	r8, r1
 800175c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001760:	2700      	movs	r7, #0
 8001762:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001766:	f1b9 0901 	subs.w	r9, r9, #1
 800176a:	d505      	bpl.n	8001778 <_fwalk_reent+0x24>
 800176c:	6824      	ldr	r4, [r4, #0]
 800176e:	2c00      	cmp	r4, #0
 8001770:	d1f7      	bne.n	8001762 <_fwalk_reent+0xe>
 8001772:	4638      	mov	r0, r7
 8001774:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001778:	89ab      	ldrh	r3, [r5, #12]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d907      	bls.n	800178e <_fwalk_reent+0x3a>
 800177e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001782:	3301      	adds	r3, #1
 8001784:	d003      	beq.n	800178e <_fwalk_reent+0x3a>
 8001786:	4629      	mov	r1, r5
 8001788:	4630      	mov	r0, r6
 800178a:	47c0      	blx	r8
 800178c:	4307      	orrs	r7, r0
 800178e:	3568      	adds	r5, #104	; 0x68
 8001790:	e7e9      	b.n	8001766 <_fwalk_reent+0x12>

08001792 <__retarget_lock_init_recursive>:
 8001792:	4770      	bx	lr

08001794 <__retarget_lock_acquire_recursive>:
 8001794:	4770      	bx	lr

08001796 <__retarget_lock_release_recursive>:
 8001796:	4770      	bx	lr

08001798 <__swhatbuf_r>:
 8001798:	b570      	push	{r4, r5, r6, lr}
 800179a:	460e      	mov	r6, r1
 800179c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80017a0:	2900      	cmp	r1, #0
 80017a2:	b096      	sub	sp, #88	; 0x58
 80017a4:	4614      	mov	r4, r2
 80017a6:	461d      	mov	r5, r3
 80017a8:	da07      	bge.n	80017ba <__swhatbuf_r+0x22>
 80017aa:	2300      	movs	r3, #0
 80017ac:	602b      	str	r3, [r5, #0]
 80017ae:	89b3      	ldrh	r3, [r6, #12]
 80017b0:	061a      	lsls	r2, r3, #24
 80017b2:	d410      	bmi.n	80017d6 <__swhatbuf_r+0x3e>
 80017b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017b8:	e00e      	b.n	80017d8 <__swhatbuf_r+0x40>
 80017ba:	466a      	mov	r2, sp
 80017bc:	f000 fc44 	bl	8002048 <_fstat_r>
 80017c0:	2800      	cmp	r0, #0
 80017c2:	dbf2      	blt.n	80017aa <__swhatbuf_r+0x12>
 80017c4:	9a01      	ldr	r2, [sp, #4]
 80017c6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80017ca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80017ce:	425a      	negs	r2, r3
 80017d0:	415a      	adcs	r2, r3
 80017d2:	602a      	str	r2, [r5, #0]
 80017d4:	e7ee      	b.n	80017b4 <__swhatbuf_r+0x1c>
 80017d6:	2340      	movs	r3, #64	; 0x40
 80017d8:	2000      	movs	r0, #0
 80017da:	6023      	str	r3, [r4, #0]
 80017dc:	b016      	add	sp, #88	; 0x58
 80017de:	bd70      	pop	{r4, r5, r6, pc}

080017e0 <__smakebuf_r>:
 80017e0:	898b      	ldrh	r3, [r1, #12]
 80017e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80017e4:	079d      	lsls	r5, r3, #30
 80017e6:	4606      	mov	r6, r0
 80017e8:	460c      	mov	r4, r1
 80017ea:	d507      	bpl.n	80017fc <__smakebuf_r+0x1c>
 80017ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80017f0:	6023      	str	r3, [r4, #0]
 80017f2:	6123      	str	r3, [r4, #16]
 80017f4:	2301      	movs	r3, #1
 80017f6:	6163      	str	r3, [r4, #20]
 80017f8:	b002      	add	sp, #8
 80017fa:	bd70      	pop	{r4, r5, r6, pc}
 80017fc:	ab01      	add	r3, sp, #4
 80017fe:	466a      	mov	r2, sp
 8001800:	f7ff ffca 	bl	8001798 <__swhatbuf_r>
 8001804:	9900      	ldr	r1, [sp, #0]
 8001806:	4605      	mov	r5, r0
 8001808:	4630      	mov	r0, r6
 800180a:	f7ff fc3f 	bl	800108c <_malloc_r>
 800180e:	b948      	cbnz	r0, 8001824 <__smakebuf_r+0x44>
 8001810:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001814:	059a      	lsls	r2, r3, #22
 8001816:	d4ef      	bmi.n	80017f8 <__smakebuf_r+0x18>
 8001818:	f023 0303 	bic.w	r3, r3, #3
 800181c:	f043 0302 	orr.w	r3, r3, #2
 8001820:	81a3      	strh	r3, [r4, #12]
 8001822:	e7e3      	b.n	80017ec <__smakebuf_r+0xc>
 8001824:	4b0d      	ldr	r3, [pc, #52]	; (800185c <__smakebuf_r+0x7c>)
 8001826:	62b3      	str	r3, [r6, #40]	; 0x28
 8001828:	89a3      	ldrh	r3, [r4, #12]
 800182a:	6020      	str	r0, [r4, #0]
 800182c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001830:	81a3      	strh	r3, [r4, #12]
 8001832:	9b00      	ldr	r3, [sp, #0]
 8001834:	6163      	str	r3, [r4, #20]
 8001836:	9b01      	ldr	r3, [sp, #4]
 8001838:	6120      	str	r0, [r4, #16]
 800183a:	b15b      	cbz	r3, 8001854 <__smakebuf_r+0x74>
 800183c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001840:	4630      	mov	r0, r6
 8001842:	f000 fc13 	bl	800206c <_isatty_r>
 8001846:	b128      	cbz	r0, 8001854 <__smakebuf_r+0x74>
 8001848:	89a3      	ldrh	r3, [r4, #12]
 800184a:	f023 0303 	bic.w	r3, r3, #3
 800184e:	f043 0301 	orr.w	r3, r3, #1
 8001852:	81a3      	strh	r3, [r4, #12]
 8001854:	89a0      	ldrh	r0, [r4, #12]
 8001856:	4305      	orrs	r5, r0
 8001858:	81a5      	strh	r5, [r4, #12]
 800185a:	e7cd      	b.n	80017f8 <__smakebuf_r+0x18>
 800185c:	080015f1 	.word	0x080015f1

08001860 <__malloc_lock>:
 8001860:	4801      	ldr	r0, [pc, #4]	; (8001868 <__malloc_lock+0x8>)
 8001862:	f7ff bf97 	b.w	8001794 <__retarget_lock_acquire_recursive>
 8001866:	bf00      	nop
 8001868:	200000a0 	.word	0x200000a0

0800186c <__malloc_unlock>:
 800186c:	4801      	ldr	r0, [pc, #4]	; (8001874 <__malloc_unlock+0x8>)
 800186e:	f7ff bf92 	b.w	8001796 <__retarget_lock_release_recursive>
 8001872:	bf00      	nop
 8001874:	200000a0 	.word	0x200000a0

08001878 <_free_r>:
 8001878:	b538      	push	{r3, r4, r5, lr}
 800187a:	4605      	mov	r5, r0
 800187c:	2900      	cmp	r1, #0
 800187e:	d045      	beq.n	800190c <_free_r+0x94>
 8001880:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001884:	1f0c      	subs	r4, r1, #4
 8001886:	2b00      	cmp	r3, #0
 8001888:	bfb8      	it	lt
 800188a:	18e4      	addlt	r4, r4, r3
 800188c:	f7ff ffe8 	bl	8001860 <__malloc_lock>
 8001890:	4a1f      	ldr	r2, [pc, #124]	; (8001910 <_free_r+0x98>)
 8001892:	6813      	ldr	r3, [r2, #0]
 8001894:	4610      	mov	r0, r2
 8001896:	b933      	cbnz	r3, 80018a6 <_free_r+0x2e>
 8001898:	6063      	str	r3, [r4, #4]
 800189a:	6014      	str	r4, [r2, #0]
 800189c:	4628      	mov	r0, r5
 800189e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80018a2:	f7ff bfe3 	b.w	800186c <__malloc_unlock>
 80018a6:	42a3      	cmp	r3, r4
 80018a8:	d90b      	bls.n	80018c2 <_free_r+0x4a>
 80018aa:	6821      	ldr	r1, [r4, #0]
 80018ac:	1862      	adds	r2, r4, r1
 80018ae:	4293      	cmp	r3, r2
 80018b0:	bf04      	itt	eq
 80018b2:	681a      	ldreq	r2, [r3, #0]
 80018b4:	685b      	ldreq	r3, [r3, #4]
 80018b6:	6063      	str	r3, [r4, #4]
 80018b8:	bf04      	itt	eq
 80018ba:	1852      	addeq	r2, r2, r1
 80018bc:	6022      	streq	r2, [r4, #0]
 80018be:	6004      	str	r4, [r0, #0]
 80018c0:	e7ec      	b.n	800189c <_free_r+0x24>
 80018c2:	461a      	mov	r2, r3
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	b10b      	cbz	r3, 80018cc <_free_r+0x54>
 80018c8:	42a3      	cmp	r3, r4
 80018ca:	d9fa      	bls.n	80018c2 <_free_r+0x4a>
 80018cc:	6811      	ldr	r1, [r2, #0]
 80018ce:	1850      	adds	r0, r2, r1
 80018d0:	42a0      	cmp	r0, r4
 80018d2:	d10b      	bne.n	80018ec <_free_r+0x74>
 80018d4:	6820      	ldr	r0, [r4, #0]
 80018d6:	4401      	add	r1, r0
 80018d8:	1850      	adds	r0, r2, r1
 80018da:	4283      	cmp	r3, r0
 80018dc:	6011      	str	r1, [r2, #0]
 80018de:	d1dd      	bne.n	800189c <_free_r+0x24>
 80018e0:	6818      	ldr	r0, [r3, #0]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	6053      	str	r3, [r2, #4]
 80018e6:	4401      	add	r1, r0
 80018e8:	6011      	str	r1, [r2, #0]
 80018ea:	e7d7      	b.n	800189c <_free_r+0x24>
 80018ec:	d902      	bls.n	80018f4 <_free_r+0x7c>
 80018ee:	230c      	movs	r3, #12
 80018f0:	602b      	str	r3, [r5, #0]
 80018f2:	e7d3      	b.n	800189c <_free_r+0x24>
 80018f4:	6820      	ldr	r0, [r4, #0]
 80018f6:	1821      	adds	r1, r4, r0
 80018f8:	428b      	cmp	r3, r1
 80018fa:	bf04      	itt	eq
 80018fc:	6819      	ldreq	r1, [r3, #0]
 80018fe:	685b      	ldreq	r3, [r3, #4]
 8001900:	6063      	str	r3, [r4, #4]
 8001902:	bf04      	itt	eq
 8001904:	1809      	addeq	r1, r1, r0
 8001906:	6021      	streq	r1, [r4, #0]
 8001908:	6054      	str	r4, [r2, #4]
 800190a:	e7c7      	b.n	800189c <_free_r+0x24>
 800190c:	bd38      	pop	{r3, r4, r5, pc}
 800190e:	bf00      	nop
 8001910:	2000008c 	.word	0x2000008c

08001914 <__sfputc_r>:
 8001914:	6893      	ldr	r3, [r2, #8]
 8001916:	3b01      	subs	r3, #1
 8001918:	2b00      	cmp	r3, #0
 800191a:	b410      	push	{r4}
 800191c:	6093      	str	r3, [r2, #8]
 800191e:	da07      	bge.n	8001930 <__sfputc_r+0x1c>
 8001920:	6994      	ldr	r4, [r2, #24]
 8001922:	42a3      	cmp	r3, r4
 8001924:	db01      	blt.n	800192a <__sfputc_r+0x16>
 8001926:	290a      	cmp	r1, #10
 8001928:	d102      	bne.n	8001930 <__sfputc_r+0x1c>
 800192a:	bc10      	pop	{r4}
 800192c:	f7ff bcba 	b.w	80012a4 <__swbuf_r>
 8001930:	6813      	ldr	r3, [r2, #0]
 8001932:	1c58      	adds	r0, r3, #1
 8001934:	6010      	str	r0, [r2, #0]
 8001936:	7019      	strb	r1, [r3, #0]
 8001938:	4608      	mov	r0, r1
 800193a:	bc10      	pop	{r4}
 800193c:	4770      	bx	lr

0800193e <__sfputs_r>:
 800193e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001940:	4606      	mov	r6, r0
 8001942:	460f      	mov	r7, r1
 8001944:	4614      	mov	r4, r2
 8001946:	18d5      	adds	r5, r2, r3
 8001948:	42ac      	cmp	r4, r5
 800194a:	d101      	bne.n	8001950 <__sfputs_r+0x12>
 800194c:	2000      	movs	r0, #0
 800194e:	e007      	b.n	8001960 <__sfputs_r+0x22>
 8001950:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001954:	463a      	mov	r2, r7
 8001956:	4630      	mov	r0, r6
 8001958:	f7ff ffdc 	bl	8001914 <__sfputc_r>
 800195c:	1c43      	adds	r3, r0, #1
 800195e:	d1f3      	bne.n	8001948 <__sfputs_r+0xa>
 8001960:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001964 <_vfiprintf_r>:
 8001964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001968:	460d      	mov	r5, r1
 800196a:	b09d      	sub	sp, #116	; 0x74
 800196c:	4614      	mov	r4, r2
 800196e:	4698      	mov	r8, r3
 8001970:	4606      	mov	r6, r0
 8001972:	b118      	cbz	r0, 800197c <_vfiprintf_r+0x18>
 8001974:	6983      	ldr	r3, [r0, #24]
 8001976:	b90b      	cbnz	r3, 800197c <_vfiprintf_r+0x18>
 8001978:	f7ff fe6e 	bl	8001658 <__sinit>
 800197c:	4b89      	ldr	r3, [pc, #548]	; (8001ba4 <_vfiprintf_r+0x240>)
 800197e:	429d      	cmp	r5, r3
 8001980:	d11b      	bne.n	80019ba <_vfiprintf_r+0x56>
 8001982:	6875      	ldr	r5, [r6, #4]
 8001984:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001986:	07d9      	lsls	r1, r3, #31
 8001988:	d405      	bmi.n	8001996 <_vfiprintf_r+0x32>
 800198a:	89ab      	ldrh	r3, [r5, #12]
 800198c:	059a      	lsls	r2, r3, #22
 800198e:	d402      	bmi.n	8001996 <_vfiprintf_r+0x32>
 8001990:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001992:	f7ff feff 	bl	8001794 <__retarget_lock_acquire_recursive>
 8001996:	89ab      	ldrh	r3, [r5, #12]
 8001998:	071b      	lsls	r3, r3, #28
 800199a:	d501      	bpl.n	80019a0 <_vfiprintf_r+0x3c>
 800199c:	692b      	ldr	r3, [r5, #16]
 800199e:	b9eb      	cbnz	r3, 80019dc <_vfiprintf_r+0x78>
 80019a0:	4629      	mov	r1, r5
 80019a2:	4630      	mov	r0, r6
 80019a4:	f7ff fcd0 	bl	8001348 <__swsetup_r>
 80019a8:	b1c0      	cbz	r0, 80019dc <_vfiprintf_r+0x78>
 80019aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80019ac:	07dc      	lsls	r4, r3, #31
 80019ae:	d50e      	bpl.n	80019ce <_vfiprintf_r+0x6a>
 80019b0:	f04f 30ff 	mov.w	r0, #4294967295
 80019b4:	b01d      	add	sp, #116	; 0x74
 80019b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80019ba:	4b7b      	ldr	r3, [pc, #492]	; (8001ba8 <_vfiprintf_r+0x244>)
 80019bc:	429d      	cmp	r5, r3
 80019be:	d101      	bne.n	80019c4 <_vfiprintf_r+0x60>
 80019c0:	68b5      	ldr	r5, [r6, #8]
 80019c2:	e7df      	b.n	8001984 <_vfiprintf_r+0x20>
 80019c4:	4b79      	ldr	r3, [pc, #484]	; (8001bac <_vfiprintf_r+0x248>)
 80019c6:	429d      	cmp	r5, r3
 80019c8:	bf08      	it	eq
 80019ca:	68f5      	ldreq	r5, [r6, #12]
 80019cc:	e7da      	b.n	8001984 <_vfiprintf_r+0x20>
 80019ce:	89ab      	ldrh	r3, [r5, #12]
 80019d0:	0598      	lsls	r0, r3, #22
 80019d2:	d4ed      	bmi.n	80019b0 <_vfiprintf_r+0x4c>
 80019d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80019d6:	f7ff fede 	bl	8001796 <__retarget_lock_release_recursive>
 80019da:	e7e9      	b.n	80019b0 <_vfiprintf_r+0x4c>
 80019dc:	2300      	movs	r3, #0
 80019de:	9309      	str	r3, [sp, #36]	; 0x24
 80019e0:	2320      	movs	r3, #32
 80019e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80019e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80019ea:	2330      	movs	r3, #48	; 0x30
 80019ec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001bb0 <_vfiprintf_r+0x24c>
 80019f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80019f4:	f04f 0901 	mov.w	r9, #1
 80019f8:	4623      	mov	r3, r4
 80019fa:	469a      	mov	sl, r3
 80019fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001a00:	b10a      	cbz	r2, 8001a06 <_vfiprintf_r+0xa2>
 8001a02:	2a25      	cmp	r2, #37	; 0x25
 8001a04:	d1f9      	bne.n	80019fa <_vfiprintf_r+0x96>
 8001a06:	ebba 0b04 	subs.w	fp, sl, r4
 8001a0a:	d00b      	beq.n	8001a24 <_vfiprintf_r+0xc0>
 8001a0c:	465b      	mov	r3, fp
 8001a0e:	4622      	mov	r2, r4
 8001a10:	4629      	mov	r1, r5
 8001a12:	4630      	mov	r0, r6
 8001a14:	f7ff ff93 	bl	800193e <__sfputs_r>
 8001a18:	3001      	adds	r0, #1
 8001a1a:	f000 80aa 	beq.w	8001b72 <_vfiprintf_r+0x20e>
 8001a1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001a20:	445a      	add	r2, fp
 8001a22:	9209      	str	r2, [sp, #36]	; 0x24
 8001a24:	f89a 3000 	ldrb.w	r3, [sl]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	f000 80a2 	beq.w	8001b72 <_vfiprintf_r+0x20e>
 8001a2e:	2300      	movs	r3, #0
 8001a30:	f04f 32ff 	mov.w	r2, #4294967295
 8001a34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001a38:	f10a 0a01 	add.w	sl, sl, #1
 8001a3c:	9304      	str	r3, [sp, #16]
 8001a3e:	9307      	str	r3, [sp, #28]
 8001a40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001a44:	931a      	str	r3, [sp, #104]	; 0x68
 8001a46:	4654      	mov	r4, sl
 8001a48:	2205      	movs	r2, #5
 8001a4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001a4e:	4858      	ldr	r0, [pc, #352]	; (8001bb0 <_vfiprintf_r+0x24c>)
 8001a50:	f7fe fbe6 	bl	8000220 <memchr>
 8001a54:	9a04      	ldr	r2, [sp, #16]
 8001a56:	b9d8      	cbnz	r0, 8001a90 <_vfiprintf_r+0x12c>
 8001a58:	06d1      	lsls	r1, r2, #27
 8001a5a:	bf44      	itt	mi
 8001a5c:	2320      	movmi	r3, #32
 8001a5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001a62:	0713      	lsls	r3, r2, #28
 8001a64:	bf44      	itt	mi
 8001a66:	232b      	movmi	r3, #43	; 0x2b
 8001a68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001a6c:	f89a 3000 	ldrb.w	r3, [sl]
 8001a70:	2b2a      	cmp	r3, #42	; 0x2a
 8001a72:	d015      	beq.n	8001aa0 <_vfiprintf_r+0x13c>
 8001a74:	9a07      	ldr	r2, [sp, #28]
 8001a76:	4654      	mov	r4, sl
 8001a78:	2000      	movs	r0, #0
 8001a7a:	f04f 0c0a 	mov.w	ip, #10
 8001a7e:	4621      	mov	r1, r4
 8001a80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001a84:	3b30      	subs	r3, #48	; 0x30
 8001a86:	2b09      	cmp	r3, #9
 8001a88:	d94e      	bls.n	8001b28 <_vfiprintf_r+0x1c4>
 8001a8a:	b1b0      	cbz	r0, 8001aba <_vfiprintf_r+0x156>
 8001a8c:	9207      	str	r2, [sp, #28]
 8001a8e:	e014      	b.n	8001aba <_vfiprintf_r+0x156>
 8001a90:	eba0 0308 	sub.w	r3, r0, r8
 8001a94:	fa09 f303 	lsl.w	r3, r9, r3
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	9304      	str	r3, [sp, #16]
 8001a9c:	46a2      	mov	sl, r4
 8001a9e:	e7d2      	b.n	8001a46 <_vfiprintf_r+0xe2>
 8001aa0:	9b03      	ldr	r3, [sp, #12]
 8001aa2:	1d19      	adds	r1, r3, #4
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	9103      	str	r1, [sp, #12]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	bfbb      	ittet	lt
 8001aac:	425b      	neglt	r3, r3
 8001aae:	f042 0202 	orrlt.w	r2, r2, #2
 8001ab2:	9307      	strge	r3, [sp, #28]
 8001ab4:	9307      	strlt	r3, [sp, #28]
 8001ab6:	bfb8      	it	lt
 8001ab8:	9204      	strlt	r2, [sp, #16]
 8001aba:	7823      	ldrb	r3, [r4, #0]
 8001abc:	2b2e      	cmp	r3, #46	; 0x2e
 8001abe:	d10c      	bne.n	8001ada <_vfiprintf_r+0x176>
 8001ac0:	7863      	ldrb	r3, [r4, #1]
 8001ac2:	2b2a      	cmp	r3, #42	; 0x2a
 8001ac4:	d135      	bne.n	8001b32 <_vfiprintf_r+0x1ce>
 8001ac6:	9b03      	ldr	r3, [sp, #12]
 8001ac8:	1d1a      	adds	r2, r3, #4
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	9203      	str	r2, [sp, #12]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	bfb8      	it	lt
 8001ad2:	f04f 33ff 	movlt.w	r3, #4294967295
 8001ad6:	3402      	adds	r4, #2
 8001ad8:	9305      	str	r3, [sp, #20]
 8001ada:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8001bc0 <_vfiprintf_r+0x25c>
 8001ade:	7821      	ldrb	r1, [r4, #0]
 8001ae0:	2203      	movs	r2, #3
 8001ae2:	4650      	mov	r0, sl
 8001ae4:	f7fe fb9c 	bl	8000220 <memchr>
 8001ae8:	b140      	cbz	r0, 8001afc <_vfiprintf_r+0x198>
 8001aea:	2340      	movs	r3, #64	; 0x40
 8001aec:	eba0 000a 	sub.w	r0, r0, sl
 8001af0:	fa03 f000 	lsl.w	r0, r3, r0
 8001af4:	9b04      	ldr	r3, [sp, #16]
 8001af6:	4303      	orrs	r3, r0
 8001af8:	3401      	adds	r4, #1
 8001afa:	9304      	str	r3, [sp, #16]
 8001afc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001b00:	482c      	ldr	r0, [pc, #176]	; (8001bb4 <_vfiprintf_r+0x250>)
 8001b02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001b06:	2206      	movs	r2, #6
 8001b08:	f7fe fb8a 	bl	8000220 <memchr>
 8001b0c:	2800      	cmp	r0, #0
 8001b0e:	d03f      	beq.n	8001b90 <_vfiprintf_r+0x22c>
 8001b10:	4b29      	ldr	r3, [pc, #164]	; (8001bb8 <_vfiprintf_r+0x254>)
 8001b12:	bb1b      	cbnz	r3, 8001b5c <_vfiprintf_r+0x1f8>
 8001b14:	9b03      	ldr	r3, [sp, #12]
 8001b16:	3307      	adds	r3, #7
 8001b18:	f023 0307 	bic.w	r3, r3, #7
 8001b1c:	3308      	adds	r3, #8
 8001b1e:	9303      	str	r3, [sp, #12]
 8001b20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001b22:	443b      	add	r3, r7
 8001b24:	9309      	str	r3, [sp, #36]	; 0x24
 8001b26:	e767      	b.n	80019f8 <_vfiprintf_r+0x94>
 8001b28:	fb0c 3202 	mla	r2, ip, r2, r3
 8001b2c:	460c      	mov	r4, r1
 8001b2e:	2001      	movs	r0, #1
 8001b30:	e7a5      	b.n	8001a7e <_vfiprintf_r+0x11a>
 8001b32:	2300      	movs	r3, #0
 8001b34:	3401      	adds	r4, #1
 8001b36:	9305      	str	r3, [sp, #20]
 8001b38:	4619      	mov	r1, r3
 8001b3a:	f04f 0c0a 	mov.w	ip, #10
 8001b3e:	4620      	mov	r0, r4
 8001b40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001b44:	3a30      	subs	r2, #48	; 0x30
 8001b46:	2a09      	cmp	r2, #9
 8001b48:	d903      	bls.n	8001b52 <_vfiprintf_r+0x1ee>
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d0c5      	beq.n	8001ada <_vfiprintf_r+0x176>
 8001b4e:	9105      	str	r1, [sp, #20]
 8001b50:	e7c3      	b.n	8001ada <_vfiprintf_r+0x176>
 8001b52:	fb0c 2101 	mla	r1, ip, r1, r2
 8001b56:	4604      	mov	r4, r0
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e7f0      	b.n	8001b3e <_vfiprintf_r+0x1da>
 8001b5c:	ab03      	add	r3, sp, #12
 8001b5e:	9300      	str	r3, [sp, #0]
 8001b60:	462a      	mov	r2, r5
 8001b62:	4b16      	ldr	r3, [pc, #88]	; (8001bbc <_vfiprintf_r+0x258>)
 8001b64:	a904      	add	r1, sp, #16
 8001b66:	4630      	mov	r0, r6
 8001b68:	f3af 8000 	nop.w
 8001b6c:	4607      	mov	r7, r0
 8001b6e:	1c78      	adds	r0, r7, #1
 8001b70:	d1d6      	bne.n	8001b20 <_vfiprintf_r+0x1bc>
 8001b72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001b74:	07d9      	lsls	r1, r3, #31
 8001b76:	d405      	bmi.n	8001b84 <_vfiprintf_r+0x220>
 8001b78:	89ab      	ldrh	r3, [r5, #12]
 8001b7a:	059a      	lsls	r2, r3, #22
 8001b7c:	d402      	bmi.n	8001b84 <_vfiprintf_r+0x220>
 8001b7e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001b80:	f7ff fe09 	bl	8001796 <__retarget_lock_release_recursive>
 8001b84:	89ab      	ldrh	r3, [r5, #12]
 8001b86:	065b      	lsls	r3, r3, #25
 8001b88:	f53f af12 	bmi.w	80019b0 <_vfiprintf_r+0x4c>
 8001b8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001b8e:	e711      	b.n	80019b4 <_vfiprintf_r+0x50>
 8001b90:	ab03      	add	r3, sp, #12
 8001b92:	9300      	str	r3, [sp, #0]
 8001b94:	462a      	mov	r2, r5
 8001b96:	4b09      	ldr	r3, [pc, #36]	; (8001bbc <_vfiprintf_r+0x258>)
 8001b98:	a904      	add	r1, sp, #16
 8001b9a:	4630      	mov	r0, r6
 8001b9c:	f000 f880 	bl	8001ca0 <_printf_i>
 8001ba0:	e7e4      	b.n	8001b6c <_vfiprintf_r+0x208>
 8001ba2:	bf00      	nop
 8001ba4:	080023bc 	.word	0x080023bc
 8001ba8:	080023dc 	.word	0x080023dc
 8001bac:	0800239c 	.word	0x0800239c
 8001bb0:	080023fc 	.word	0x080023fc
 8001bb4:	08002406 	.word	0x08002406
 8001bb8:	00000000 	.word	0x00000000
 8001bbc:	0800193f 	.word	0x0800193f
 8001bc0:	08002402 	.word	0x08002402

08001bc4 <_printf_common>:
 8001bc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001bc8:	4616      	mov	r6, r2
 8001bca:	4699      	mov	r9, r3
 8001bcc:	688a      	ldr	r2, [r1, #8]
 8001bce:	690b      	ldr	r3, [r1, #16]
 8001bd0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	bfb8      	it	lt
 8001bd8:	4613      	movlt	r3, r2
 8001bda:	6033      	str	r3, [r6, #0]
 8001bdc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001be0:	4607      	mov	r7, r0
 8001be2:	460c      	mov	r4, r1
 8001be4:	b10a      	cbz	r2, 8001bea <_printf_common+0x26>
 8001be6:	3301      	adds	r3, #1
 8001be8:	6033      	str	r3, [r6, #0]
 8001bea:	6823      	ldr	r3, [r4, #0]
 8001bec:	0699      	lsls	r1, r3, #26
 8001bee:	bf42      	ittt	mi
 8001bf0:	6833      	ldrmi	r3, [r6, #0]
 8001bf2:	3302      	addmi	r3, #2
 8001bf4:	6033      	strmi	r3, [r6, #0]
 8001bf6:	6825      	ldr	r5, [r4, #0]
 8001bf8:	f015 0506 	ands.w	r5, r5, #6
 8001bfc:	d106      	bne.n	8001c0c <_printf_common+0x48>
 8001bfe:	f104 0a19 	add.w	sl, r4, #25
 8001c02:	68e3      	ldr	r3, [r4, #12]
 8001c04:	6832      	ldr	r2, [r6, #0]
 8001c06:	1a9b      	subs	r3, r3, r2
 8001c08:	42ab      	cmp	r3, r5
 8001c0a:	dc26      	bgt.n	8001c5a <_printf_common+0x96>
 8001c0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001c10:	1e13      	subs	r3, r2, #0
 8001c12:	6822      	ldr	r2, [r4, #0]
 8001c14:	bf18      	it	ne
 8001c16:	2301      	movne	r3, #1
 8001c18:	0692      	lsls	r2, r2, #26
 8001c1a:	d42b      	bmi.n	8001c74 <_printf_common+0xb0>
 8001c1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001c20:	4649      	mov	r1, r9
 8001c22:	4638      	mov	r0, r7
 8001c24:	47c0      	blx	r8
 8001c26:	3001      	adds	r0, #1
 8001c28:	d01e      	beq.n	8001c68 <_printf_common+0xa4>
 8001c2a:	6823      	ldr	r3, [r4, #0]
 8001c2c:	68e5      	ldr	r5, [r4, #12]
 8001c2e:	6832      	ldr	r2, [r6, #0]
 8001c30:	f003 0306 	and.w	r3, r3, #6
 8001c34:	2b04      	cmp	r3, #4
 8001c36:	bf08      	it	eq
 8001c38:	1aad      	subeq	r5, r5, r2
 8001c3a:	68a3      	ldr	r3, [r4, #8]
 8001c3c:	6922      	ldr	r2, [r4, #16]
 8001c3e:	bf0c      	ite	eq
 8001c40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001c44:	2500      	movne	r5, #0
 8001c46:	4293      	cmp	r3, r2
 8001c48:	bfc4      	itt	gt
 8001c4a:	1a9b      	subgt	r3, r3, r2
 8001c4c:	18ed      	addgt	r5, r5, r3
 8001c4e:	2600      	movs	r6, #0
 8001c50:	341a      	adds	r4, #26
 8001c52:	42b5      	cmp	r5, r6
 8001c54:	d11a      	bne.n	8001c8c <_printf_common+0xc8>
 8001c56:	2000      	movs	r0, #0
 8001c58:	e008      	b.n	8001c6c <_printf_common+0xa8>
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	4652      	mov	r2, sl
 8001c5e:	4649      	mov	r1, r9
 8001c60:	4638      	mov	r0, r7
 8001c62:	47c0      	blx	r8
 8001c64:	3001      	adds	r0, #1
 8001c66:	d103      	bne.n	8001c70 <_printf_common+0xac>
 8001c68:	f04f 30ff 	mov.w	r0, #4294967295
 8001c6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c70:	3501      	adds	r5, #1
 8001c72:	e7c6      	b.n	8001c02 <_printf_common+0x3e>
 8001c74:	18e1      	adds	r1, r4, r3
 8001c76:	1c5a      	adds	r2, r3, #1
 8001c78:	2030      	movs	r0, #48	; 0x30
 8001c7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001c7e:	4422      	add	r2, r4
 8001c80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001c84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001c88:	3302      	adds	r3, #2
 8001c8a:	e7c7      	b.n	8001c1c <_printf_common+0x58>
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	4622      	mov	r2, r4
 8001c90:	4649      	mov	r1, r9
 8001c92:	4638      	mov	r0, r7
 8001c94:	47c0      	blx	r8
 8001c96:	3001      	adds	r0, #1
 8001c98:	d0e6      	beq.n	8001c68 <_printf_common+0xa4>
 8001c9a:	3601      	adds	r6, #1
 8001c9c:	e7d9      	b.n	8001c52 <_printf_common+0x8e>
	...

08001ca0 <_printf_i>:
 8001ca0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001ca4:	460c      	mov	r4, r1
 8001ca6:	4691      	mov	r9, r2
 8001ca8:	7e27      	ldrb	r7, [r4, #24]
 8001caa:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001cac:	2f78      	cmp	r7, #120	; 0x78
 8001cae:	4680      	mov	r8, r0
 8001cb0:	469a      	mov	sl, r3
 8001cb2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001cb6:	d807      	bhi.n	8001cc8 <_printf_i+0x28>
 8001cb8:	2f62      	cmp	r7, #98	; 0x62
 8001cba:	d80a      	bhi.n	8001cd2 <_printf_i+0x32>
 8001cbc:	2f00      	cmp	r7, #0
 8001cbe:	f000 80d8 	beq.w	8001e72 <_printf_i+0x1d2>
 8001cc2:	2f58      	cmp	r7, #88	; 0x58
 8001cc4:	f000 80a3 	beq.w	8001e0e <_printf_i+0x16e>
 8001cc8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001ccc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001cd0:	e03a      	b.n	8001d48 <_printf_i+0xa8>
 8001cd2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001cd6:	2b15      	cmp	r3, #21
 8001cd8:	d8f6      	bhi.n	8001cc8 <_printf_i+0x28>
 8001cda:	a001      	add	r0, pc, #4	; (adr r0, 8001ce0 <_printf_i+0x40>)
 8001cdc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8001ce0:	08001d39 	.word	0x08001d39
 8001ce4:	08001d4d 	.word	0x08001d4d
 8001ce8:	08001cc9 	.word	0x08001cc9
 8001cec:	08001cc9 	.word	0x08001cc9
 8001cf0:	08001cc9 	.word	0x08001cc9
 8001cf4:	08001cc9 	.word	0x08001cc9
 8001cf8:	08001d4d 	.word	0x08001d4d
 8001cfc:	08001cc9 	.word	0x08001cc9
 8001d00:	08001cc9 	.word	0x08001cc9
 8001d04:	08001cc9 	.word	0x08001cc9
 8001d08:	08001cc9 	.word	0x08001cc9
 8001d0c:	08001e59 	.word	0x08001e59
 8001d10:	08001d7d 	.word	0x08001d7d
 8001d14:	08001e3b 	.word	0x08001e3b
 8001d18:	08001cc9 	.word	0x08001cc9
 8001d1c:	08001cc9 	.word	0x08001cc9
 8001d20:	08001e7b 	.word	0x08001e7b
 8001d24:	08001cc9 	.word	0x08001cc9
 8001d28:	08001d7d 	.word	0x08001d7d
 8001d2c:	08001cc9 	.word	0x08001cc9
 8001d30:	08001cc9 	.word	0x08001cc9
 8001d34:	08001e43 	.word	0x08001e43
 8001d38:	680b      	ldr	r3, [r1, #0]
 8001d3a:	1d1a      	adds	r2, r3, #4
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	600a      	str	r2, [r1, #0]
 8001d40:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001d44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e0a3      	b.n	8001e94 <_printf_i+0x1f4>
 8001d4c:	6825      	ldr	r5, [r4, #0]
 8001d4e:	6808      	ldr	r0, [r1, #0]
 8001d50:	062e      	lsls	r6, r5, #24
 8001d52:	f100 0304 	add.w	r3, r0, #4
 8001d56:	d50a      	bpl.n	8001d6e <_printf_i+0xce>
 8001d58:	6805      	ldr	r5, [r0, #0]
 8001d5a:	600b      	str	r3, [r1, #0]
 8001d5c:	2d00      	cmp	r5, #0
 8001d5e:	da03      	bge.n	8001d68 <_printf_i+0xc8>
 8001d60:	232d      	movs	r3, #45	; 0x2d
 8001d62:	426d      	negs	r5, r5
 8001d64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001d68:	485e      	ldr	r0, [pc, #376]	; (8001ee4 <_printf_i+0x244>)
 8001d6a:	230a      	movs	r3, #10
 8001d6c:	e019      	b.n	8001da2 <_printf_i+0x102>
 8001d6e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8001d72:	6805      	ldr	r5, [r0, #0]
 8001d74:	600b      	str	r3, [r1, #0]
 8001d76:	bf18      	it	ne
 8001d78:	b22d      	sxthne	r5, r5
 8001d7a:	e7ef      	b.n	8001d5c <_printf_i+0xbc>
 8001d7c:	680b      	ldr	r3, [r1, #0]
 8001d7e:	6825      	ldr	r5, [r4, #0]
 8001d80:	1d18      	adds	r0, r3, #4
 8001d82:	6008      	str	r0, [r1, #0]
 8001d84:	0628      	lsls	r0, r5, #24
 8001d86:	d501      	bpl.n	8001d8c <_printf_i+0xec>
 8001d88:	681d      	ldr	r5, [r3, #0]
 8001d8a:	e002      	b.n	8001d92 <_printf_i+0xf2>
 8001d8c:	0669      	lsls	r1, r5, #25
 8001d8e:	d5fb      	bpl.n	8001d88 <_printf_i+0xe8>
 8001d90:	881d      	ldrh	r5, [r3, #0]
 8001d92:	4854      	ldr	r0, [pc, #336]	; (8001ee4 <_printf_i+0x244>)
 8001d94:	2f6f      	cmp	r7, #111	; 0x6f
 8001d96:	bf0c      	ite	eq
 8001d98:	2308      	moveq	r3, #8
 8001d9a:	230a      	movne	r3, #10
 8001d9c:	2100      	movs	r1, #0
 8001d9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001da2:	6866      	ldr	r6, [r4, #4]
 8001da4:	60a6      	str	r6, [r4, #8]
 8001da6:	2e00      	cmp	r6, #0
 8001da8:	bfa2      	ittt	ge
 8001daa:	6821      	ldrge	r1, [r4, #0]
 8001dac:	f021 0104 	bicge.w	r1, r1, #4
 8001db0:	6021      	strge	r1, [r4, #0]
 8001db2:	b90d      	cbnz	r5, 8001db8 <_printf_i+0x118>
 8001db4:	2e00      	cmp	r6, #0
 8001db6:	d04d      	beq.n	8001e54 <_printf_i+0x1b4>
 8001db8:	4616      	mov	r6, r2
 8001dba:	fbb5 f1f3 	udiv	r1, r5, r3
 8001dbe:	fb03 5711 	mls	r7, r3, r1, r5
 8001dc2:	5dc7      	ldrb	r7, [r0, r7]
 8001dc4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001dc8:	462f      	mov	r7, r5
 8001dca:	42bb      	cmp	r3, r7
 8001dcc:	460d      	mov	r5, r1
 8001dce:	d9f4      	bls.n	8001dba <_printf_i+0x11a>
 8001dd0:	2b08      	cmp	r3, #8
 8001dd2:	d10b      	bne.n	8001dec <_printf_i+0x14c>
 8001dd4:	6823      	ldr	r3, [r4, #0]
 8001dd6:	07df      	lsls	r7, r3, #31
 8001dd8:	d508      	bpl.n	8001dec <_printf_i+0x14c>
 8001dda:	6923      	ldr	r3, [r4, #16]
 8001ddc:	6861      	ldr	r1, [r4, #4]
 8001dde:	4299      	cmp	r1, r3
 8001de0:	bfde      	ittt	le
 8001de2:	2330      	movle	r3, #48	; 0x30
 8001de4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001de8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001dec:	1b92      	subs	r2, r2, r6
 8001dee:	6122      	str	r2, [r4, #16]
 8001df0:	f8cd a000 	str.w	sl, [sp]
 8001df4:	464b      	mov	r3, r9
 8001df6:	aa03      	add	r2, sp, #12
 8001df8:	4621      	mov	r1, r4
 8001dfa:	4640      	mov	r0, r8
 8001dfc:	f7ff fee2 	bl	8001bc4 <_printf_common>
 8001e00:	3001      	adds	r0, #1
 8001e02:	d14c      	bne.n	8001e9e <_printf_i+0x1fe>
 8001e04:	f04f 30ff 	mov.w	r0, #4294967295
 8001e08:	b004      	add	sp, #16
 8001e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e0e:	4835      	ldr	r0, [pc, #212]	; (8001ee4 <_printf_i+0x244>)
 8001e10:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001e14:	6823      	ldr	r3, [r4, #0]
 8001e16:	680e      	ldr	r6, [r1, #0]
 8001e18:	061f      	lsls	r7, r3, #24
 8001e1a:	f856 5b04 	ldr.w	r5, [r6], #4
 8001e1e:	600e      	str	r6, [r1, #0]
 8001e20:	d514      	bpl.n	8001e4c <_printf_i+0x1ac>
 8001e22:	07d9      	lsls	r1, r3, #31
 8001e24:	bf44      	itt	mi
 8001e26:	f043 0320 	orrmi.w	r3, r3, #32
 8001e2a:	6023      	strmi	r3, [r4, #0]
 8001e2c:	b91d      	cbnz	r5, 8001e36 <_printf_i+0x196>
 8001e2e:	6823      	ldr	r3, [r4, #0]
 8001e30:	f023 0320 	bic.w	r3, r3, #32
 8001e34:	6023      	str	r3, [r4, #0]
 8001e36:	2310      	movs	r3, #16
 8001e38:	e7b0      	b.n	8001d9c <_printf_i+0xfc>
 8001e3a:	6823      	ldr	r3, [r4, #0]
 8001e3c:	f043 0320 	orr.w	r3, r3, #32
 8001e40:	6023      	str	r3, [r4, #0]
 8001e42:	2378      	movs	r3, #120	; 0x78
 8001e44:	4828      	ldr	r0, [pc, #160]	; (8001ee8 <_printf_i+0x248>)
 8001e46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001e4a:	e7e3      	b.n	8001e14 <_printf_i+0x174>
 8001e4c:	065e      	lsls	r6, r3, #25
 8001e4e:	bf48      	it	mi
 8001e50:	b2ad      	uxthmi	r5, r5
 8001e52:	e7e6      	b.n	8001e22 <_printf_i+0x182>
 8001e54:	4616      	mov	r6, r2
 8001e56:	e7bb      	b.n	8001dd0 <_printf_i+0x130>
 8001e58:	680b      	ldr	r3, [r1, #0]
 8001e5a:	6826      	ldr	r6, [r4, #0]
 8001e5c:	6960      	ldr	r0, [r4, #20]
 8001e5e:	1d1d      	adds	r5, r3, #4
 8001e60:	600d      	str	r5, [r1, #0]
 8001e62:	0635      	lsls	r5, r6, #24
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	d501      	bpl.n	8001e6c <_printf_i+0x1cc>
 8001e68:	6018      	str	r0, [r3, #0]
 8001e6a:	e002      	b.n	8001e72 <_printf_i+0x1d2>
 8001e6c:	0671      	lsls	r1, r6, #25
 8001e6e:	d5fb      	bpl.n	8001e68 <_printf_i+0x1c8>
 8001e70:	8018      	strh	r0, [r3, #0]
 8001e72:	2300      	movs	r3, #0
 8001e74:	6123      	str	r3, [r4, #16]
 8001e76:	4616      	mov	r6, r2
 8001e78:	e7ba      	b.n	8001df0 <_printf_i+0x150>
 8001e7a:	680b      	ldr	r3, [r1, #0]
 8001e7c:	1d1a      	adds	r2, r3, #4
 8001e7e:	600a      	str	r2, [r1, #0]
 8001e80:	681e      	ldr	r6, [r3, #0]
 8001e82:	6862      	ldr	r2, [r4, #4]
 8001e84:	2100      	movs	r1, #0
 8001e86:	4630      	mov	r0, r6
 8001e88:	f7fe f9ca 	bl	8000220 <memchr>
 8001e8c:	b108      	cbz	r0, 8001e92 <_printf_i+0x1f2>
 8001e8e:	1b80      	subs	r0, r0, r6
 8001e90:	6060      	str	r0, [r4, #4]
 8001e92:	6863      	ldr	r3, [r4, #4]
 8001e94:	6123      	str	r3, [r4, #16]
 8001e96:	2300      	movs	r3, #0
 8001e98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001e9c:	e7a8      	b.n	8001df0 <_printf_i+0x150>
 8001e9e:	6923      	ldr	r3, [r4, #16]
 8001ea0:	4632      	mov	r2, r6
 8001ea2:	4649      	mov	r1, r9
 8001ea4:	4640      	mov	r0, r8
 8001ea6:	47d0      	blx	sl
 8001ea8:	3001      	adds	r0, #1
 8001eaa:	d0ab      	beq.n	8001e04 <_printf_i+0x164>
 8001eac:	6823      	ldr	r3, [r4, #0]
 8001eae:	079b      	lsls	r3, r3, #30
 8001eb0:	d413      	bmi.n	8001eda <_printf_i+0x23a>
 8001eb2:	68e0      	ldr	r0, [r4, #12]
 8001eb4:	9b03      	ldr	r3, [sp, #12]
 8001eb6:	4298      	cmp	r0, r3
 8001eb8:	bfb8      	it	lt
 8001eba:	4618      	movlt	r0, r3
 8001ebc:	e7a4      	b.n	8001e08 <_printf_i+0x168>
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	4632      	mov	r2, r6
 8001ec2:	4649      	mov	r1, r9
 8001ec4:	4640      	mov	r0, r8
 8001ec6:	47d0      	blx	sl
 8001ec8:	3001      	adds	r0, #1
 8001eca:	d09b      	beq.n	8001e04 <_printf_i+0x164>
 8001ecc:	3501      	adds	r5, #1
 8001ece:	68e3      	ldr	r3, [r4, #12]
 8001ed0:	9903      	ldr	r1, [sp, #12]
 8001ed2:	1a5b      	subs	r3, r3, r1
 8001ed4:	42ab      	cmp	r3, r5
 8001ed6:	dcf2      	bgt.n	8001ebe <_printf_i+0x21e>
 8001ed8:	e7eb      	b.n	8001eb2 <_printf_i+0x212>
 8001eda:	2500      	movs	r5, #0
 8001edc:	f104 0619 	add.w	r6, r4, #25
 8001ee0:	e7f5      	b.n	8001ece <_printf_i+0x22e>
 8001ee2:	bf00      	nop
 8001ee4:	0800240d 	.word	0x0800240d
 8001ee8:	0800241e 	.word	0x0800241e

08001eec <_putc_r>:
 8001eec:	b570      	push	{r4, r5, r6, lr}
 8001eee:	460d      	mov	r5, r1
 8001ef0:	4614      	mov	r4, r2
 8001ef2:	4606      	mov	r6, r0
 8001ef4:	b118      	cbz	r0, 8001efe <_putc_r+0x12>
 8001ef6:	6983      	ldr	r3, [r0, #24]
 8001ef8:	b90b      	cbnz	r3, 8001efe <_putc_r+0x12>
 8001efa:	f7ff fbad 	bl	8001658 <__sinit>
 8001efe:	4b1c      	ldr	r3, [pc, #112]	; (8001f70 <_putc_r+0x84>)
 8001f00:	429c      	cmp	r4, r3
 8001f02:	d124      	bne.n	8001f4e <_putc_r+0x62>
 8001f04:	6874      	ldr	r4, [r6, #4]
 8001f06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001f08:	07d8      	lsls	r0, r3, #31
 8001f0a:	d405      	bmi.n	8001f18 <_putc_r+0x2c>
 8001f0c:	89a3      	ldrh	r3, [r4, #12]
 8001f0e:	0599      	lsls	r1, r3, #22
 8001f10:	d402      	bmi.n	8001f18 <_putc_r+0x2c>
 8001f12:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001f14:	f7ff fc3e 	bl	8001794 <__retarget_lock_acquire_recursive>
 8001f18:	68a3      	ldr	r3, [r4, #8]
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	60a3      	str	r3, [r4, #8]
 8001f20:	da05      	bge.n	8001f2e <_putc_r+0x42>
 8001f22:	69a2      	ldr	r2, [r4, #24]
 8001f24:	4293      	cmp	r3, r2
 8001f26:	db1c      	blt.n	8001f62 <_putc_r+0x76>
 8001f28:	b2eb      	uxtb	r3, r5
 8001f2a:	2b0a      	cmp	r3, #10
 8001f2c:	d019      	beq.n	8001f62 <_putc_r+0x76>
 8001f2e:	6823      	ldr	r3, [r4, #0]
 8001f30:	1c5a      	adds	r2, r3, #1
 8001f32:	6022      	str	r2, [r4, #0]
 8001f34:	701d      	strb	r5, [r3, #0]
 8001f36:	b2ed      	uxtb	r5, r5
 8001f38:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001f3a:	07da      	lsls	r2, r3, #31
 8001f3c:	d405      	bmi.n	8001f4a <_putc_r+0x5e>
 8001f3e:	89a3      	ldrh	r3, [r4, #12]
 8001f40:	059b      	lsls	r3, r3, #22
 8001f42:	d402      	bmi.n	8001f4a <_putc_r+0x5e>
 8001f44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001f46:	f7ff fc26 	bl	8001796 <__retarget_lock_release_recursive>
 8001f4a:	4628      	mov	r0, r5
 8001f4c:	bd70      	pop	{r4, r5, r6, pc}
 8001f4e:	4b09      	ldr	r3, [pc, #36]	; (8001f74 <_putc_r+0x88>)
 8001f50:	429c      	cmp	r4, r3
 8001f52:	d101      	bne.n	8001f58 <_putc_r+0x6c>
 8001f54:	68b4      	ldr	r4, [r6, #8]
 8001f56:	e7d6      	b.n	8001f06 <_putc_r+0x1a>
 8001f58:	4b07      	ldr	r3, [pc, #28]	; (8001f78 <_putc_r+0x8c>)
 8001f5a:	429c      	cmp	r4, r3
 8001f5c:	bf08      	it	eq
 8001f5e:	68f4      	ldreq	r4, [r6, #12]
 8001f60:	e7d1      	b.n	8001f06 <_putc_r+0x1a>
 8001f62:	4629      	mov	r1, r5
 8001f64:	4622      	mov	r2, r4
 8001f66:	4630      	mov	r0, r6
 8001f68:	f7ff f99c 	bl	80012a4 <__swbuf_r>
 8001f6c:	4605      	mov	r5, r0
 8001f6e:	e7e3      	b.n	8001f38 <_putc_r+0x4c>
 8001f70:	080023bc 	.word	0x080023bc
 8001f74:	080023dc 	.word	0x080023dc
 8001f78:	0800239c 	.word	0x0800239c

08001f7c <__sread>:
 8001f7c:	b510      	push	{r4, lr}
 8001f7e:	460c      	mov	r4, r1
 8001f80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f84:	f000 f894 	bl	80020b0 <_read_r>
 8001f88:	2800      	cmp	r0, #0
 8001f8a:	bfab      	itete	ge
 8001f8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001f8e:	89a3      	ldrhlt	r3, [r4, #12]
 8001f90:	181b      	addge	r3, r3, r0
 8001f92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001f96:	bfac      	ite	ge
 8001f98:	6563      	strge	r3, [r4, #84]	; 0x54
 8001f9a:	81a3      	strhlt	r3, [r4, #12]
 8001f9c:	bd10      	pop	{r4, pc}

08001f9e <__swrite>:
 8001f9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001fa2:	461f      	mov	r7, r3
 8001fa4:	898b      	ldrh	r3, [r1, #12]
 8001fa6:	05db      	lsls	r3, r3, #23
 8001fa8:	4605      	mov	r5, r0
 8001faa:	460c      	mov	r4, r1
 8001fac:	4616      	mov	r6, r2
 8001fae:	d505      	bpl.n	8001fbc <__swrite+0x1e>
 8001fb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f000 f868 	bl	800208c <_lseek_r>
 8001fbc:	89a3      	ldrh	r3, [r4, #12]
 8001fbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001fc2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001fc6:	81a3      	strh	r3, [r4, #12]
 8001fc8:	4632      	mov	r2, r6
 8001fca:	463b      	mov	r3, r7
 8001fcc:	4628      	mov	r0, r5
 8001fce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001fd2:	f000 b817 	b.w	8002004 <_write_r>

08001fd6 <__sseek>:
 8001fd6:	b510      	push	{r4, lr}
 8001fd8:	460c      	mov	r4, r1
 8001fda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001fde:	f000 f855 	bl	800208c <_lseek_r>
 8001fe2:	1c43      	adds	r3, r0, #1
 8001fe4:	89a3      	ldrh	r3, [r4, #12]
 8001fe6:	bf15      	itete	ne
 8001fe8:	6560      	strne	r0, [r4, #84]	; 0x54
 8001fea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001fee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001ff2:	81a3      	strheq	r3, [r4, #12]
 8001ff4:	bf18      	it	ne
 8001ff6:	81a3      	strhne	r3, [r4, #12]
 8001ff8:	bd10      	pop	{r4, pc}

08001ffa <__sclose>:
 8001ffa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ffe:	f000 b813 	b.w	8002028 <_close_r>
	...

08002004 <_write_r>:
 8002004:	b538      	push	{r3, r4, r5, lr}
 8002006:	4d07      	ldr	r5, [pc, #28]	; (8002024 <_write_r+0x20>)
 8002008:	4604      	mov	r4, r0
 800200a:	4608      	mov	r0, r1
 800200c:	4611      	mov	r1, r2
 800200e:	2200      	movs	r2, #0
 8002010:	602a      	str	r2, [r5, #0]
 8002012:	461a      	mov	r2, r3
 8002014:	f7fe fe79 	bl	8000d0a <_write>
 8002018:	1c43      	adds	r3, r0, #1
 800201a:	d102      	bne.n	8002022 <_write_r+0x1e>
 800201c:	682b      	ldr	r3, [r5, #0]
 800201e:	b103      	cbz	r3, 8002022 <_write_r+0x1e>
 8002020:	6023      	str	r3, [r4, #0]
 8002022:	bd38      	pop	{r3, r4, r5, pc}
 8002024:	200000a8 	.word	0x200000a8

08002028 <_close_r>:
 8002028:	b538      	push	{r3, r4, r5, lr}
 800202a:	4d06      	ldr	r5, [pc, #24]	; (8002044 <_close_r+0x1c>)
 800202c:	2300      	movs	r3, #0
 800202e:	4604      	mov	r4, r0
 8002030:	4608      	mov	r0, r1
 8002032:	602b      	str	r3, [r5, #0]
 8002034:	f7fe fe85 	bl	8000d42 <_close>
 8002038:	1c43      	adds	r3, r0, #1
 800203a:	d102      	bne.n	8002042 <_close_r+0x1a>
 800203c:	682b      	ldr	r3, [r5, #0]
 800203e:	b103      	cbz	r3, 8002042 <_close_r+0x1a>
 8002040:	6023      	str	r3, [r4, #0]
 8002042:	bd38      	pop	{r3, r4, r5, pc}
 8002044:	200000a8 	.word	0x200000a8

08002048 <_fstat_r>:
 8002048:	b538      	push	{r3, r4, r5, lr}
 800204a:	4d07      	ldr	r5, [pc, #28]	; (8002068 <_fstat_r+0x20>)
 800204c:	2300      	movs	r3, #0
 800204e:	4604      	mov	r4, r0
 8002050:	4608      	mov	r0, r1
 8002052:	4611      	mov	r1, r2
 8002054:	602b      	str	r3, [r5, #0]
 8002056:	f7fe fe7f 	bl	8000d58 <_fstat>
 800205a:	1c43      	adds	r3, r0, #1
 800205c:	d102      	bne.n	8002064 <_fstat_r+0x1c>
 800205e:	682b      	ldr	r3, [r5, #0]
 8002060:	b103      	cbz	r3, 8002064 <_fstat_r+0x1c>
 8002062:	6023      	str	r3, [r4, #0]
 8002064:	bd38      	pop	{r3, r4, r5, pc}
 8002066:	bf00      	nop
 8002068:	200000a8 	.word	0x200000a8

0800206c <_isatty_r>:
 800206c:	b538      	push	{r3, r4, r5, lr}
 800206e:	4d06      	ldr	r5, [pc, #24]	; (8002088 <_isatty_r+0x1c>)
 8002070:	2300      	movs	r3, #0
 8002072:	4604      	mov	r4, r0
 8002074:	4608      	mov	r0, r1
 8002076:	602b      	str	r3, [r5, #0]
 8002078:	f7fe fe7d 	bl	8000d76 <_isatty>
 800207c:	1c43      	adds	r3, r0, #1
 800207e:	d102      	bne.n	8002086 <_isatty_r+0x1a>
 8002080:	682b      	ldr	r3, [r5, #0]
 8002082:	b103      	cbz	r3, 8002086 <_isatty_r+0x1a>
 8002084:	6023      	str	r3, [r4, #0]
 8002086:	bd38      	pop	{r3, r4, r5, pc}
 8002088:	200000a8 	.word	0x200000a8

0800208c <_lseek_r>:
 800208c:	b538      	push	{r3, r4, r5, lr}
 800208e:	4d07      	ldr	r5, [pc, #28]	; (80020ac <_lseek_r+0x20>)
 8002090:	4604      	mov	r4, r0
 8002092:	4608      	mov	r0, r1
 8002094:	4611      	mov	r1, r2
 8002096:	2200      	movs	r2, #0
 8002098:	602a      	str	r2, [r5, #0]
 800209a:	461a      	mov	r2, r3
 800209c:	f7fe fe75 	bl	8000d8a <_lseek>
 80020a0:	1c43      	adds	r3, r0, #1
 80020a2:	d102      	bne.n	80020aa <_lseek_r+0x1e>
 80020a4:	682b      	ldr	r3, [r5, #0]
 80020a6:	b103      	cbz	r3, 80020aa <_lseek_r+0x1e>
 80020a8:	6023      	str	r3, [r4, #0]
 80020aa:	bd38      	pop	{r3, r4, r5, pc}
 80020ac:	200000a8 	.word	0x200000a8

080020b0 <_read_r>:
 80020b0:	b538      	push	{r3, r4, r5, lr}
 80020b2:	4d07      	ldr	r5, [pc, #28]	; (80020d0 <_read_r+0x20>)
 80020b4:	4604      	mov	r4, r0
 80020b6:	4608      	mov	r0, r1
 80020b8:	4611      	mov	r1, r2
 80020ba:	2200      	movs	r2, #0
 80020bc:	602a      	str	r2, [r5, #0]
 80020be:	461a      	mov	r2, r3
 80020c0:	f7fe fe06 	bl	8000cd0 <_read>
 80020c4:	1c43      	adds	r3, r0, #1
 80020c6:	d102      	bne.n	80020ce <_read_r+0x1e>
 80020c8:	682b      	ldr	r3, [r5, #0]
 80020ca:	b103      	cbz	r3, 80020ce <_read_r+0x1e>
 80020cc:	6023      	str	r3, [r4, #0]
 80020ce:	bd38      	pop	{r3, r4, r5, pc}
 80020d0:	200000a8 	.word	0x200000a8

080020d4 <_init>:
 80020d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020d6:	bf00      	nop
 80020d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020da:	bc08      	pop	{r3}
 80020dc:	469e      	mov	lr, r3
 80020de:	4770      	bx	lr

080020e0 <_fini>:
 80020e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020e2:	bf00      	nop
 80020e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020e6:	bc08      	pop	{r3}
 80020e8:	469e      	mov	lr, r3
 80020ea:	4770      	bx	lr

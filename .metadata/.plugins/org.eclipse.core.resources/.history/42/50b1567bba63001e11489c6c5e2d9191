
5_system_driver-ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000016a8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08001878  08001878  00011878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800193c  0800193c  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  0800193c  0800193c  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800193c  0800193c  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800193c  0800193c  0001193c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001940  08001940  00011940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001944  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000044  20000064  080019a8  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a8  080019a8  000200a8  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000037d8  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000c11  00000000  00000000  00023866  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000220  00000000  00000000  00024478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000198  00000000  00000000  00024698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001adff  00000000  00000000  00024830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003171  00000000  00000000  0003f62f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090e77  00000000  00000000  000427a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d3617  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000e18  00000000  00000000  000d366c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000064 	.word	0x20000064
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08001860 	.word	0x08001860

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000068 	.word	0x20000068
 800020c:	08001860 	.word	0x08001860

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <pa1_adc_init>:
 */

#include "adc.h"

void pa1_adc_init(void)
{
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
    /* Enable Clock TO ADC Channel */
	/* Set Conversion Sequence Start */
	/* Set Conversion Sequence Length */
	/* Enable ADC Length */

	RCC->AHB1ENR |= GPIOAEN;
 80002b4:	4b13      	ldr	r3, [pc, #76]	; (8000304 <pa1_adc_init+0x54>)
 80002b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002b8:	4a12      	ldr	r2, [pc, #72]	; (8000304 <pa1_adc_init+0x54>)
 80002ba:	f043 0301 	orr.w	r3, r3, #1
 80002be:	6313      	str	r3, [r2, #48]	; 0x30
    GPIOA->MODER |= ADC_PIN_2_EN;
 80002c0:	4b11      	ldr	r3, [pc, #68]	; (8000308 <pa1_adc_init+0x58>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a10      	ldr	r2, [pc, #64]	; (8000308 <pa1_adc_init+0x58>)
 80002c6:	f043 0304 	orr.w	r3, r3, #4
 80002ca:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= ADC_PIN_3_EN;
 80002cc:	4b0e      	ldr	r3, [pc, #56]	; (8000308 <pa1_adc_init+0x58>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a0d      	ldr	r2, [pc, #52]	; (8000308 <pa1_adc_init+0x58>)
 80002d2:	f043 0308 	orr.w	r3, r3, #8
 80002d6:	6013      	str	r3, [r2, #0]

    RCC->APB2ENR |= ADC1_EN;
 80002d8:	4b0a      	ldr	r3, [pc, #40]	; (8000304 <pa1_adc_init+0x54>)
 80002da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002dc:	4a09      	ldr	r2, [pc, #36]	; (8000304 <pa1_adc_init+0x54>)
 80002de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002e2:	6453      	str	r3, [r2, #68]	; 0x44

    /* Configure specific channel depending on use-case. Refer to the reference Manual for
     * more information
     * */
    ADC1->SQR3 = ADC_CH1;
 80002e4:	4b09      	ldr	r3, [pc, #36]	; (800030c <pa1_adc_init+0x5c>)
 80002e6:	2201      	movs	r2, #1
 80002e8:	635a      	str	r2, [r3, #52]	; 0x34
    ADC1->SQR1 = ADC_SEQ_LEN_1;
 80002ea:	4b08      	ldr	r3, [pc, #32]	; (800030c <pa1_adc_init+0x5c>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	62da      	str	r2, [r3, #44]	; 0x2c

    ADC1->CR2 |= ADC_CR2_ON;
 80002f0:	4b06      	ldr	r3, [pc, #24]	; (800030c <pa1_adc_init+0x5c>)
 80002f2:	689b      	ldr	r3, [r3, #8]
 80002f4:	4a05      	ldr	r2, [pc, #20]	; (800030c <pa1_adc_init+0x5c>)
 80002f6:	f043 0301 	orr.w	r3, r3, #1
 80002fa:	6093      	str	r3, [r2, #8]
}
 80002fc:	bf00      	nop
 80002fe:	46bd      	mov	sp, r7
 8000300:	bc80      	pop	{r7}
 8000302:	4770      	bx	lr
 8000304:	40023800 	.word	0x40023800
 8000308:	40020000 	.word	0x40020000
 800030c:	40012000 	.word	0x40012000

08000310 <startadc_conversion>:

void startadc_conversion(void)
{
 8000310:	b480      	push	{r7}
 8000312:	af00      	add	r7, sp, #0
	/* Enable Continuous Conversion */
	ADC1->CR2 |= CR2_CONT;
 8000314:	4b07      	ldr	r3, [pc, #28]	; (8000334 <startadc_conversion+0x24>)
 8000316:	689b      	ldr	r3, [r3, #8]
 8000318:	4a06      	ldr	r2, [pc, #24]	; (8000334 <startadc_conversion+0x24>)
 800031a:	f043 0302 	orr.w	r3, r3, #2
 800031e:	6093      	str	r3, [r2, #8]
	/* Start ADC Conversion */
	ADC1->CR2 |= CR2_SWSTART;
 8000320:	4b04      	ldr	r3, [pc, #16]	; (8000334 <startadc_conversion+0x24>)
 8000322:	689b      	ldr	r3, [r3, #8]
 8000324:	4a03      	ldr	r2, [pc, #12]	; (8000334 <startadc_conversion+0x24>)
 8000326:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800032a:	6093      	str	r3, [r2, #8]

}
 800032c:	bf00      	nop
 800032e:	46bd      	mov	sp, r7
 8000330:	bc80      	pop	{r7}
 8000332:	4770      	bx	lr
 8000334:	40012000 	.word	0x40012000

08000338 <adc_read>:

uint32_t adc_read(void)
{
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0
	/* Wait for Conversion to complete */
	while(!(ADC1->SR & SR_EOC));
 800033c:	bf00      	nop
 800033e:	4b06      	ldr	r3, [pc, #24]	; (8000358 <adc_read+0x20>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f003 0302 	and.w	r3, r3, #2
 8000346:	2b00      	cmp	r3, #0
 8000348:	d0f9      	beq.n	800033e <adc_read+0x6>
	/* Read and return the value */
     return (ADC1->DR);
 800034a:	4b03      	ldr	r3, [pc, #12]	; (8000358 <adc_read+0x20>)
 800034c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800034e:	4618      	mov	r0, r3
 8000350:	46bd      	mov	sp, r7
 8000352:	bc80      	pop	{r7}
 8000354:	4770      	bx	lr
 8000356:	bf00      	nop
 8000358:	40012000 	.word	0x40012000

0800035c <led_init>:

#include "bsp.h"


void led_init(void)
{
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0
	/* Provide Clock Access to the respective Peripheral */
	/* GPIO A for stm32f44xx */

	    RCC->AHB1ENR |= GPIOAEN;
 8000360:	4b0a      	ldr	r3, [pc, #40]	; (800038c <led_init+0x30>)
 8000362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000364:	4a09      	ldr	r2, [pc, #36]	; (800038c <led_init+0x30>)
 8000366:	f043 0301 	orr.w	r3, r3, #1
 800036a:	6313      	str	r3, [r2, #48]	; 0x30
	    GPIOA->MODER |= (1U<<10);
 800036c:	4b08      	ldr	r3, [pc, #32]	; (8000390 <led_init+0x34>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	4a07      	ldr	r2, [pc, #28]	; (8000390 <led_init+0x34>)
 8000372:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000376:	6013      	str	r3, [r2, #0]
	    GPIOA->MODER &= ~(1U<<11);
 8000378:	4b05      	ldr	r3, [pc, #20]	; (8000390 <led_init+0x34>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4a04      	ldr	r2, [pc, #16]	; (8000390 <led_init+0x34>)
 800037e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000382:	6013      	str	r3, [r2, #0]
}
 8000384:	bf00      	nop
 8000386:	46bd      	mov	sp, r7
 8000388:	bc80      	pop	{r7}
 800038a:	4770      	bx	lr
 800038c:	40023800 	.word	0x40023800
 8000390:	40020000 	.word	0x40020000

08000394 <led_on>:

void led_on(void)
{
 8000394:	b480      	push	{r7}
 8000396:	af00      	add	r7, sp, #0
	/* Set the Pin High */
	GPIOA->ODR |= GPIO_ENABLE;
 8000398:	4b04      	ldr	r3, [pc, #16]	; (80003ac <led_on+0x18>)
 800039a:	695b      	ldr	r3, [r3, #20]
 800039c:	4a03      	ldr	r2, [pc, #12]	; (80003ac <led_on+0x18>)
 800039e:	f043 0320 	orr.w	r3, r3, #32
 80003a2:	6153      	str	r3, [r2, #20]
}
 80003a4:	bf00      	nop
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bc80      	pop	{r7}
 80003aa:	4770      	bx	lr
 80003ac:	40020000 	.word	0x40020000

080003b0 <led_off>:

void led_off(void)
{
 80003b0:	b480      	push	{r7}
 80003b2:	af00      	add	r7, sp, #0
	/* Set the Pin Low */
	GPIOA->ODR &= (GPIO_DISABLE);
 80003b4:	4b04      	ldr	r3, [pc, #16]	; (80003c8 <led_off+0x18>)
 80003b6:	695b      	ldr	r3, [r3, #20]
 80003b8:	4a03      	ldr	r2, [pc, #12]	; (80003c8 <led_off+0x18>)
 80003ba:	f023 0320 	bic.w	r3, r3, #32
 80003be:	6153      	str	r3, [r2, #20]
}
 80003c0:	bf00      	nop
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bc80      	pop	{r7}
 80003c6:	4770      	bx	lr
 80003c8:	40020000 	.word	0x40020000

080003cc <button_init>:

void button_init(void)
{
 80003cc:	b480      	push	{r7}
 80003ce:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= GPIOCEN;
 80003d0:	4b0a      	ldr	r3, [pc, #40]	; (80003fc <button_init+0x30>)
 80003d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003d4:	4a09      	ldr	r2, [pc, #36]	; (80003fc <button_init+0x30>)
 80003d6:	f043 0304 	orr.w	r3, r3, #4
 80003da:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOC->MODER &=  ~(1<<26);
 80003dc:	4b08      	ldr	r3, [pc, #32]	; (8000400 <button_init+0x34>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	4a07      	ldr	r2, [pc, #28]	; (8000400 <button_init+0x34>)
 80003e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80003e6:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &=  ~(1<<27);
 80003e8:	4b05      	ldr	r3, [pc, #20]	; (8000400 <button_init+0x34>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	4a04      	ldr	r2, [pc, #16]	; (8000400 <button_init+0x34>)
 80003ee:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80003f2:	6013      	str	r3, [r2, #0]
}
 80003f4:	bf00      	nop
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bc80      	pop	{r7}
 80003fa:	4770      	bx	lr
 80003fc:	40023800 	.word	0x40023800
 8000400:	40020800 	.word	0x40020800

08000404 <get_buttonState>:

bool get_buttonState(void)
{
 8000404:	b480      	push	{r7}
 8000406:	af00      	add	r7, sp, #0
     if(GPIOC->IDR & GPIOBTN_PIN)
 8000408:	4b06      	ldr	r3, [pc, #24]	; (8000424 <get_buttonState+0x20>)
 800040a:	691b      	ldr	r3, [r3, #16]
 800040c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000410:	2b00      	cmp	r3, #0
 8000412:	d001      	beq.n	8000418 <get_buttonState+0x14>
    	 return true;
 8000414:	2301      	movs	r3, #1
 8000416:	e000      	b.n	800041a <get_buttonState+0x16>

     return false;
 8000418:	2300      	movs	r3, #0
}
 800041a:	4618      	mov	r0, r3
 800041c:	46bd      	mov	sp, r7
 800041e:	bc80      	pop	{r7}
 8000420:	4770      	bx	lr
 8000422:	bf00      	nop
 8000424:	40020800 	.word	0x40020800

08000428 <fpu_enable>:

#include "fpu.h"


void fpu_enable(void)
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
	/* Enable Floating Point Unit: Enable CP10 and CP11 Full Access! */
	 SCB->CPACR |= (1<<20);
 800042c:	4b11      	ldr	r3, [pc, #68]	; (8000474 <fpu_enable+0x4c>)
 800042e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000432:	4a10      	ldr	r2, [pc, #64]	; (8000474 <fpu_enable+0x4c>)
 8000434:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000438:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	 SCB->CPACR |= (1<<21);
 800043c:	4b0d      	ldr	r3, [pc, #52]	; (8000474 <fpu_enable+0x4c>)
 800043e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000442:	4a0c      	ldr	r2, [pc, #48]	; (8000474 <fpu_enable+0x4c>)
 8000444:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000448:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	 SCB->CPACR |= (1<<22);
 800044c:	4b09      	ldr	r3, [pc, #36]	; (8000474 <fpu_enable+0x4c>)
 800044e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000452:	4a08      	ldr	r2, [pc, #32]	; (8000474 <fpu_enable+0x4c>)
 8000454:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000458:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	 SCB->CPACR |= (1<<23);
 800045c:	4b05      	ldr	r3, [pc, #20]	; (8000474 <fpu_enable+0x4c>)
 800045e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000462:	4a04      	ldr	r2, [pc, #16]	; (8000474 <fpu_enable+0x4c>)
 8000464:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000468:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 800046c:	bf00      	nop
 800046e:	46bd      	mov	sp, r7
 8000470:	bc80      	pop	{r7}
 8000472:	4770      	bx	lr
 8000474:	e000ed00 	.word	0xe000ed00

08000478 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0
	/* Enable FPU */
	fpu_enable();
 800047c:	f7ff ffd4 	bl	8000428 <fpu_enable>
    /* initialize UART */
	uart_init();
 8000480:	f000 f938 	bl	80006f4 <uart_init>
	/* Initialize timer */
	timer_init();
 8000484:	f000 f90a 	bl	800069c <timer_init>
    /* Initialize button and led */
	led_init();
 8000488:	f7ff ff68 	bl	800035c <led_init>
    /* Initialize the button */
	button_init();
 800048c:	f7ff ff9e 	bl	80003cc <button_init>
	/* Initialize the ADC module */
	pa1_adc_init();
 8000490:	f7ff ff0e 	bl	80002b0 <pa1_adc_init>
    /* Start the conversion */
	startadc_conversion();
 8000494:	f7ff ff3c 	bl	8000310 <startadc_conversion>

	printf("Testing the ADC Module!\r\n");
 8000498:	480d      	ldr	r0, [pc, #52]	; (80004d0 <main+0x58>)
 800049a:	f000 fa9f 	bl	80009dc <puts>
	while(1)
	{

		adc_val = adc_read();
 800049e:	f7ff ff4b 	bl	8000338 <adc_read>
 80004a2:	4603      	mov	r3, r0
 80004a4:	4a0b      	ldr	r2, [pc, #44]	; (80004d4 <main+0x5c>)
 80004a6:	6013      	str	r3, [r2, #0]
		printf("ADC_VALUE: %ld\n",adc_val);
 80004a8:	4b0a      	ldr	r3, [pc, #40]	; (80004d4 <main+0x5c>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	4619      	mov	r1, r3
 80004ae:	480a      	ldr	r0, [pc, #40]	; (80004d8 <main+0x60>)
 80004b0:	f000 fa0e 	bl	80008d0 <iprintf>
		delay(1);
 80004b4:	2001      	movs	r0, #1
 80004b6:	f000 f8b1 	bl	800061c <delay>
		if(get_buttonState() == true)
 80004ba:	f7ff ffa3 	bl	8000404 <get_buttonState>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d002      	beq.n	80004ca <main+0x52>
			led_on();
 80004c4:	f7ff ff66 	bl	8000394 <led_on>
 80004c8:	e7e9      	b.n	800049e <main+0x26>
		else
			led_off();
 80004ca:	f7ff ff71 	bl	80003b0 <led_off>
		adc_val = adc_read();
 80004ce:	e7e6      	b.n	800049e <main+0x26>
 80004d0:	08001878 	.word	0x08001878
 80004d4:	20000080 	.word	0x20000080
 80004d8:	08001894 	.word	0x08001894

080004dc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b086      	sub	sp, #24
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	60f8      	str	r0, [r7, #12]
 80004e4:	60b9      	str	r1, [r7, #8]
 80004e6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004e8:	2300      	movs	r3, #0
 80004ea:	617b      	str	r3, [r7, #20]
 80004ec:	e00a      	b.n	8000504 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80004ee:	f3af 8000 	nop.w
 80004f2:	4601      	mov	r1, r0
 80004f4:	68bb      	ldr	r3, [r7, #8]
 80004f6:	1c5a      	adds	r2, r3, #1
 80004f8:	60ba      	str	r2, [r7, #8]
 80004fa:	b2ca      	uxtb	r2, r1
 80004fc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004fe:	697b      	ldr	r3, [r7, #20]
 8000500:	3301      	adds	r3, #1
 8000502:	617b      	str	r3, [r7, #20]
 8000504:	697a      	ldr	r2, [r7, #20]
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	429a      	cmp	r2, r3
 800050a:	dbf0      	blt.n	80004ee <_read+0x12>
	}

return len;
 800050c:	687b      	ldr	r3, [r7, #4]
}
 800050e:	4618      	mov	r0, r3
 8000510:	3718      	adds	r7, #24
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}

08000516 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000516:	b580      	push	{r7, lr}
 8000518:	b086      	sub	sp, #24
 800051a:	af00      	add	r7, sp, #0
 800051c:	60f8      	str	r0, [r7, #12]
 800051e:	60b9      	str	r1, [r7, #8]
 8000520:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000522:	2300      	movs	r3, #0
 8000524:	617b      	str	r3, [r7, #20]
 8000526:	e009      	b.n	800053c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000528:	68bb      	ldr	r3, [r7, #8]
 800052a:	1c5a      	adds	r2, r3, #1
 800052c:	60ba      	str	r2, [r7, #8]
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	4618      	mov	r0, r3
 8000532:	f000 f94f 	bl	80007d4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000536:	697b      	ldr	r3, [r7, #20]
 8000538:	3301      	adds	r3, #1
 800053a:	617b      	str	r3, [r7, #20]
 800053c:	697a      	ldr	r2, [r7, #20]
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	429a      	cmp	r2, r3
 8000542:	dbf1      	blt.n	8000528 <_write+0x12>
	}
	return len;
 8000544:	687b      	ldr	r3, [r7, #4]
}
 8000546:	4618      	mov	r0, r3
 8000548:	3718      	adds	r7, #24
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}

0800054e <_close>:

int _close(int file)
{
 800054e:	b480      	push	{r7}
 8000550:	b083      	sub	sp, #12
 8000552:	af00      	add	r7, sp, #0
 8000554:	6078      	str	r0, [r7, #4]
	return -1;
 8000556:	f04f 33ff 	mov.w	r3, #4294967295
}
 800055a:	4618      	mov	r0, r3
 800055c:	370c      	adds	r7, #12
 800055e:	46bd      	mov	sp, r7
 8000560:	bc80      	pop	{r7}
 8000562:	4770      	bx	lr

08000564 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000564:	b480      	push	{r7}
 8000566:	b083      	sub	sp, #12
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
 800056c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800056e:	683b      	ldr	r3, [r7, #0]
 8000570:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000574:	605a      	str	r2, [r3, #4]
	return 0;
 8000576:	2300      	movs	r3, #0
}
 8000578:	4618      	mov	r0, r3
 800057a:	370c      	adds	r7, #12
 800057c:	46bd      	mov	sp, r7
 800057e:	bc80      	pop	{r7}
 8000580:	4770      	bx	lr

08000582 <_isatty>:

int _isatty(int file)
{
 8000582:	b480      	push	{r7}
 8000584:	b083      	sub	sp, #12
 8000586:	af00      	add	r7, sp, #0
 8000588:	6078      	str	r0, [r7, #4]
	return 1;
 800058a:	2301      	movs	r3, #1
}
 800058c:	4618      	mov	r0, r3
 800058e:	370c      	adds	r7, #12
 8000590:	46bd      	mov	sp, r7
 8000592:	bc80      	pop	{r7}
 8000594:	4770      	bx	lr

08000596 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000596:	b480      	push	{r7}
 8000598:	b085      	sub	sp, #20
 800059a:	af00      	add	r7, sp, #0
 800059c:	60f8      	str	r0, [r7, #12]
 800059e:	60b9      	str	r1, [r7, #8]
 80005a0:	607a      	str	r2, [r7, #4]
	return 0;
 80005a2:	2300      	movs	r3, #0
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	3714      	adds	r7, #20
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bc80      	pop	{r7}
 80005ac:	4770      	bx	lr
	...

080005b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b086      	sub	sp, #24
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005b8:	4a14      	ldr	r2, [pc, #80]	; (800060c <_sbrk+0x5c>)
 80005ba:	4b15      	ldr	r3, [pc, #84]	; (8000610 <_sbrk+0x60>)
 80005bc:	1ad3      	subs	r3, r2, r3
 80005be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005c0:	697b      	ldr	r3, [r7, #20]
 80005c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005c4:	4b13      	ldr	r3, [pc, #76]	; (8000614 <_sbrk+0x64>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d102      	bne.n	80005d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005cc:	4b11      	ldr	r3, [pc, #68]	; (8000614 <_sbrk+0x64>)
 80005ce:	4a12      	ldr	r2, [pc, #72]	; (8000618 <_sbrk+0x68>)
 80005d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005d2:	4b10      	ldr	r3, [pc, #64]	; (8000614 <_sbrk+0x64>)
 80005d4:	681a      	ldr	r2, [r3, #0]
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	4413      	add	r3, r2
 80005da:	693a      	ldr	r2, [r7, #16]
 80005dc:	429a      	cmp	r2, r3
 80005de:	d207      	bcs.n	80005f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005e0:	f000 f944 	bl	800086c <__errno>
 80005e4:	4603      	mov	r3, r0
 80005e6:	220c      	movs	r2, #12
 80005e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005ea:	f04f 33ff 	mov.w	r3, #4294967295
 80005ee:	e009      	b.n	8000604 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005f0:	4b08      	ldr	r3, [pc, #32]	; (8000614 <_sbrk+0x64>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005f6:	4b07      	ldr	r3, [pc, #28]	; (8000614 <_sbrk+0x64>)
 80005f8:	681a      	ldr	r2, [r3, #0]
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	4413      	add	r3, r2
 80005fe:	4a05      	ldr	r2, [pc, #20]	; (8000614 <_sbrk+0x64>)
 8000600:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000602:	68fb      	ldr	r3, [r7, #12]
}
 8000604:	4618      	mov	r0, r3
 8000606:	3718      	adds	r7, #24
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	20020000 	.word	0x20020000
 8000610:	00000400 	.word	0x00000400
 8000614:	20000084 	.word	0x20000084
 8000618:	200000a8 	.word	0x200000a8

0800061c <delay>:
static void tick_increment(void);
uint32_t get_tickCount(void);

/* Generate Delay in Seconds */
void delay(uint32_t delay)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
	uint32_t startTick = get_tickCount();
 8000624:	f000 f818 	bl	8000658 <get_tickCount>
 8000628:	60b8      	str	r0, [r7, #8]
	uint32_t wait = delay;
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	60fb      	str	r3, [r7, #12]

	if(wait<MAX_DELAY)
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000634:	d002      	beq.n	800063c <delay+0x20>
	{
		wait += (uint32_t)TICK_FREQ;
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	3301      	adds	r3, #1
 800063a:	60fb      	str	r3, [r7, #12]
	}

	while((get_tickCount() - startTick) < wait);
 800063c:	bf00      	nop
 800063e:	f000 f80b 	bl	8000658 <get_tickCount>
 8000642:	4602      	mov	r2, r0
 8000644:	68bb      	ldr	r3, [r7, #8]
 8000646:	1ad3      	subs	r3, r2, r3
 8000648:	68fa      	ldr	r2, [r7, #12]
 800064a:	429a      	cmp	r2, r3
 800064c:	d8f7      	bhi.n	800063e <delay+0x22>
}
 800064e:	bf00      	nop
 8000650:	bf00      	nop
 8000652:	3710      	adds	r7, #16
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}

08000658 <get_tickCount>:

uint32_t get_tickCount(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800065c:	b672      	cpsid	i
}
 800065e:	bf00      	nop
	__disable_irq();
	current_tick_p = current_tick;
 8000660:	4b05      	ldr	r3, [pc, #20]	; (8000678 <get_tickCount+0x20>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a05      	ldr	r2, [pc, #20]	; (800067c <get_tickCount+0x24>)
 8000666:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000668:	b662      	cpsie	i
}
 800066a:	bf00      	nop
	__enable_irq();
	return current_tick_p;
 800066c:	4b03      	ldr	r3, [pc, #12]	; (800067c <get_tickCount+0x24>)
 800066e:	681b      	ldr	r3, [r3, #0]
}
 8000670:	4618      	mov	r0, r3
 8000672:	46bd      	mov	sp, r7
 8000674:	bc80      	pop	{r7}
 8000676:	4770      	bx	lr
 8000678:	20000090 	.word	0x20000090
 800067c:	20000094 	.word	0x20000094

08000680 <tick_increment>:

static void tick_increment(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
	current_tick += TICK_FREQ;
 8000684:	4b04      	ldr	r3, [pc, #16]	; (8000698 <tick_increment+0x18>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	3301      	adds	r3, #1
 800068a:	4a03      	ldr	r2, [pc, #12]	; (8000698 <tick_increment+0x18>)
 800068c:	6013      	str	r3, [r2, #0]
}
 800068e:	bf00      	nop
 8000690:	46bd      	mov	sp, r7
 8000692:	bc80      	pop	{r7}
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	20000090 	.word	0x20000090

0800069c <timer_init>:

void timer_init(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80006a0:	b672      	cpsid	i
}
 80006a2:	bf00      	nop
	/* Disable the  global interrupt during the running of this timer service */
	__disable_irq();
	/* Load the timer with number of clock cycles per second ; generate a tick each second */
	SysTick->LOAD = ONE_SEC_LOAD-ONE;
 80006a4:	4b0e      	ldr	r3, [pc, #56]	; (80006e0 <timer_init+0x44>)
 80006a6:	4a0f      	ldr	r2, [pc, #60]	; (80006e4 <timer_init+0x48>)
 80006a8:	605a      	str	r2, [r3, #4]
	/* Clear the systick current value register */
	SysTick->VAL  = 0;
 80006aa:	4b0d      	ldr	r3, [pc, #52]	; (80006e0 <timer_init+0x44>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	609a      	str	r2, [r3, #8]
	/* Select Internal Clock Source */
	SysTick->CTRL |= CTRL_CLKSRC;
 80006b0:	4b0b      	ldr	r3, [pc, #44]	; (80006e0 <timer_init+0x44>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a0a      	ldr	r2, [pc, #40]	; (80006e0 <timer_init+0x44>)
 80006b6:	f043 0304 	orr.w	r3, r3, #4
 80006ba:	6013      	str	r3, [r2, #0]
	/* Enable Interrupt */
	SysTick->CTRL |= CTRL_TICKINIT;
 80006bc:	4b08      	ldr	r3, [pc, #32]	; (80006e0 <timer_init+0x44>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a07      	ldr	r2, [pc, #28]	; (80006e0 <timer_init+0x44>)
 80006c2:	f043 0302 	orr.w	r3, r3, #2
 80006c6:	6013      	str	r3, [r2, #0]
	/* Enable systick */
	SysTick->CTRL |= CTRL_ENABLE;
 80006c8:	4b05      	ldr	r3, [pc, #20]	; (80006e0 <timer_init+0x44>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a04      	ldr	r2, [pc, #16]	; (80006e0 <timer_init+0x44>)
 80006ce:	f043 0301 	orr.w	r3, r3, #1
 80006d2:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80006d4:	b662      	cpsie	i
}
 80006d6:	bf00      	nop
	/* Enable Global Interrupt */
	__enable_irq();
}
 80006d8:	bf00      	nop
 80006da:	46bd      	mov	sp, r7
 80006dc:	bc80      	pop	{r7}
 80006de:	4770      	bx	lr
 80006e0:	e000e010 	.word	0xe000e010
 80006e4:	00f423ff 	.word	0x00f423ff

080006e8 <SysTick_Handler>:


void SysTick_Handler(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
	tick_increment();
 80006ec:	f7ff ffc8 	bl	8000680 <tick_increment>
}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}

080006f4 <uart_init>:
 static uint16_t compute_uart_bd(uint32_t periph_clk, uint32_t baudrate);
 static void uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate);


 void uart_init(void)
 {
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
		  Configure Transfer Direction
		  Enable the UART module
	 */

	 /* Enable Clock Access to GPIOA */
	 RCC->AHB1ENR  |= GPIOA_EN;
 80006f8:	4b1f      	ldr	r3, [pc, #124]	; (8000778 <uart_init+0x84>)
 80006fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fc:	4a1e      	ldr	r2, [pc, #120]	; (8000778 <uart_init+0x84>)
 80006fe:	f043 0301 	orr.w	r3, r3, #1
 8000702:	6313      	str	r3, [r2, #48]	; 0x30
	 /* Set the mode of PA2 to alternate Function mode*/
	 GPIOA->MODER &= ~(GPIOA_AF_PIN4);
 8000704:	4b1d      	ldr	r3, [pc, #116]	; (800077c <uart_init+0x88>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a1c      	ldr	r2, [pc, #112]	; (800077c <uart_init+0x88>)
 800070a:	f023 0310 	bic.w	r3, r3, #16
 800070e:	6013      	str	r3, [r2, #0]
	 GPIOA->MODER |=  GPIOA_AF_PIN5;
 8000710:	4b1a      	ldr	r3, [pc, #104]	; (800077c <uart_init+0x88>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a19      	ldr	r2, [pc, #100]	; (800077c <uart_init+0x88>)
 8000716:	f043 0320 	orr.w	r3, r3, #32
 800071a:	6013      	str	r3, [r2, #0]

	 /* Set the Alternate Function to AF7(Uart2_tx); set it according to the datasheet!  */
	 GPIOA->AFR[0] |= (GPIOA_AFR_PIN8);
 800071c:	4b17      	ldr	r3, [pc, #92]	; (800077c <uart_init+0x88>)
 800071e:	6a1b      	ldr	r3, [r3, #32]
 8000720:	4a16      	ldr	r2, [pc, #88]	; (800077c <uart_init+0x88>)
 8000722:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000726:	6213      	str	r3, [r2, #32]
	 GPIOA->AFR[0] |= (GPIOA_AFR_PIN9);
 8000728:	4b14      	ldr	r3, [pc, #80]	; (800077c <uart_init+0x88>)
 800072a:	6a1b      	ldr	r3, [r3, #32]
 800072c:	4a13      	ldr	r2, [pc, #76]	; (800077c <uart_init+0x88>)
 800072e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000732:	6213      	str	r3, [r2, #32]
	 GPIOA->AFR[0] |= (GPIOA_AFR_PIN10);
 8000734:	4b11      	ldr	r3, [pc, #68]	; (800077c <uart_init+0x88>)
 8000736:	6a1b      	ldr	r3, [r3, #32]
 8000738:	4a10      	ldr	r2, [pc, #64]	; (800077c <uart_init+0x88>)
 800073a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800073e:	6213      	str	r3, [r2, #32]
	 GPIOA->AFR[0] &= ~(GPIOA_AFR_PIN11);
 8000740:	4b0e      	ldr	r3, [pc, #56]	; (800077c <uart_init+0x88>)
 8000742:	6a1b      	ldr	r3, [r3, #32]
 8000744:	4a0d      	ldr	r2, [pc, #52]	; (800077c <uart_init+0x88>)
 8000746:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800074a:	6213      	str	r3, [r2, #32]

	 /* Enable Clock access to UART 2 */
     RCC->APB1ENR |= UART2EN;
 800074c:	4b0a      	ldr	r3, [pc, #40]	; (8000778 <uart_init+0x84>)
 800074e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000750:	4a09      	ldr	r2, [pc, #36]	; (8000778 <uart_init+0x84>)
 8000752:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000756:	6413      	str	r3, [r2, #64]	; 0x40
	 /* Configure Baud Rate */
     uart_set_baudrate(APB1_CLK, UART_BAUDRATE);
 8000758:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800075c:	4808      	ldr	r0, [pc, #32]	; (8000780 <uart_init+0x8c>)
 800075e:	f000 f825 	bl	80007ac <uart_set_baudrate>
     /* Configure Transfer Direction */
     USART2->CR1 = CR1_TE;
 8000762:	4b08      	ldr	r3, [pc, #32]	; (8000784 <uart_init+0x90>)
 8000764:	2208      	movs	r2, #8
 8000766:	60da      	str	r2, [r3, #12]
     /* Enable the UART module */
     USART2->CR1 |= CR1_UE;
 8000768:	4b06      	ldr	r3, [pc, #24]	; (8000784 <uart_init+0x90>)
 800076a:	68db      	ldr	r3, [r3, #12]
 800076c:	4a05      	ldr	r2, [pc, #20]	; (8000784 <uart_init+0x90>)
 800076e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000772:	60d3      	str	r3, [r2, #12]

 }
 8000774:	bf00      	nop
 8000776:	bd80      	pop	{r7, pc}
 8000778:	40023800 	.word	0x40023800
 800077c:	40020000 	.word	0x40020000
 8000780:	00f42400 	.word	0x00f42400
 8000784:	40004400 	.word	0x40004400

08000788 <compute_uart_bd>:

 static uint16_t compute_uart_bd(uint32_t periph_clk, uint32_t baudrate)
 {
 8000788:	b480      	push	{r7}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
 8000790:	6039      	str	r1, [r7, #0]
	 return ((periph_clk + (baudrate/2U))/baudrate);
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	085a      	lsrs	r2, r3, #1
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	441a      	add	r2, r3
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	fbb2 f3f3 	udiv	r3, r2, r3
 80007a0:	b29b      	uxth	r3, r3
 }
 80007a2:	4618      	mov	r0, r3
 80007a4:	370c      	adds	r7, #12
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bc80      	pop	{r7}
 80007aa:	4770      	bx	lr

080007ac <uart_set_baudrate>:

 static void uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate)
 {
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
 80007b4:	6039      	str	r1, [r7, #0]
	 USART2->BRR = compute_uart_bd(periph_clk,baudrate);
 80007b6:	6839      	ldr	r1, [r7, #0]
 80007b8:	6878      	ldr	r0, [r7, #4]
 80007ba:	f7ff ffe5 	bl	8000788 <compute_uart_bd>
 80007be:	4603      	mov	r3, r0
 80007c0:	461a      	mov	r2, r3
 80007c2:	4b03      	ldr	r3, [pc, #12]	; (80007d0 <uart_set_baudrate+0x24>)
 80007c4:	609a      	str	r2, [r3, #8]
 }
 80007c6:	bf00      	nop
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40004400 	.word	0x40004400

080007d4 <__io_putchar>:

 int __io_putchar(int ch)
 {
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
 	uart_write(ch);
 80007dc:	6878      	ldr	r0, [r7, #4]
 80007de:	f000 f805 	bl	80007ec <uart_write>
 	return ch;
 80007e2:	687b      	ldr	r3, [r7, #4]
 }
 80007e4:	4618      	mov	r0, r3
 80007e6:	3708      	adds	r7, #8
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}

080007ec <uart_write>:

void uart_write(int ch)
 {
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
	 /* Ensure transmit data register is empty before new data can be loaded */
    while(!(USART2->SR & SR_TXE));
 80007f4:	bf00      	nop
 80007f6:	4b07      	ldr	r3, [pc, #28]	; (8000814 <uart_write+0x28>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d0f9      	beq.n	80007f6 <uart_write+0xa>
    USART2->DR = (ch & 0xFF);
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	4a03      	ldr	r2, [pc, #12]	; (8000814 <uart_write+0x28>)
 8000806:	b2db      	uxtb	r3, r3
 8000808:	6053      	str	r3, [r2, #4]
 }
 800080a:	bf00      	nop
 800080c:	370c      	adds	r7, #12
 800080e:	46bd      	mov	sp, r7
 8000810:	bc80      	pop	{r7}
 8000812:	4770      	bx	lr
 8000814:	40004400 	.word	0x40004400

08000818 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000818:	480d      	ldr	r0, [pc, #52]	; (8000850 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800081a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800081c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000820:	480c      	ldr	r0, [pc, #48]	; (8000854 <LoopForever+0x6>)
  ldr r1, =_edata
 8000822:	490d      	ldr	r1, [pc, #52]	; (8000858 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000824:	4a0d      	ldr	r2, [pc, #52]	; (800085c <LoopForever+0xe>)
  movs r3, #0
 8000826:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000828:	e002      	b.n	8000830 <LoopCopyDataInit>

0800082a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800082a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800082c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800082e:	3304      	adds	r3, #4

08000830 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000830:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000832:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000834:	d3f9      	bcc.n	800082a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000836:	4a0a      	ldr	r2, [pc, #40]	; (8000860 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000838:	4c0a      	ldr	r4, [pc, #40]	; (8000864 <LoopForever+0x16>)
  movs r3, #0
 800083a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800083c:	e001      	b.n	8000842 <LoopFillZerobss>

0800083e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800083e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000840:	3204      	adds	r2, #4

08000842 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000842:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000844:	d3fb      	bcc.n	800083e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000846:	f000 f817 	bl	8000878 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800084a:	f7ff fe15 	bl	8000478 <main>

0800084e <LoopForever>:

LoopForever:
    b LoopForever
 800084e:	e7fe      	b.n	800084e <LoopForever>
  ldr   r0, =_estack
 8000850:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000854:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000858:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 800085c:	08001944 	.word	0x08001944
  ldr r2, =_sbss
 8000860:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000864:	200000a8 	.word	0x200000a8

08000868 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000868:	e7fe      	b.n	8000868 <ADC_IRQHandler>
	...

0800086c <__errno>:
 800086c:	4b01      	ldr	r3, [pc, #4]	; (8000874 <__errno+0x8>)
 800086e:	6818      	ldr	r0, [r3, #0]
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	20000000 	.word	0x20000000

08000878 <__libc_init_array>:
 8000878:	b570      	push	{r4, r5, r6, lr}
 800087a:	4d0d      	ldr	r5, [pc, #52]	; (80008b0 <__libc_init_array+0x38>)
 800087c:	4c0d      	ldr	r4, [pc, #52]	; (80008b4 <__libc_init_array+0x3c>)
 800087e:	1b64      	subs	r4, r4, r5
 8000880:	10a4      	asrs	r4, r4, #2
 8000882:	2600      	movs	r6, #0
 8000884:	42a6      	cmp	r6, r4
 8000886:	d109      	bne.n	800089c <__libc_init_array+0x24>
 8000888:	4d0b      	ldr	r5, [pc, #44]	; (80008b8 <__libc_init_array+0x40>)
 800088a:	4c0c      	ldr	r4, [pc, #48]	; (80008bc <__libc_init_array+0x44>)
 800088c:	f000 ffe8 	bl	8001860 <_init>
 8000890:	1b64      	subs	r4, r4, r5
 8000892:	10a4      	asrs	r4, r4, #2
 8000894:	2600      	movs	r6, #0
 8000896:	42a6      	cmp	r6, r4
 8000898:	d105      	bne.n	80008a6 <__libc_init_array+0x2e>
 800089a:	bd70      	pop	{r4, r5, r6, pc}
 800089c:	f855 3b04 	ldr.w	r3, [r5], #4
 80008a0:	4798      	blx	r3
 80008a2:	3601      	adds	r6, #1
 80008a4:	e7ee      	b.n	8000884 <__libc_init_array+0xc>
 80008a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80008aa:	4798      	blx	r3
 80008ac:	3601      	adds	r6, #1
 80008ae:	e7f2      	b.n	8000896 <__libc_init_array+0x1e>
 80008b0:	0800193c 	.word	0x0800193c
 80008b4:	0800193c 	.word	0x0800193c
 80008b8:	0800193c 	.word	0x0800193c
 80008bc:	08001940 	.word	0x08001940

080008c0 <memset>:
 80008c0:	4402      	add	r2, r0
 80008c2:	4603      	mov	r3, r0
 80008c4:	4293      	cmp	r3, r2
 80008c6:	d100      	bne.n	80008ca <memset+0xa>
 80008c8:	4770      	bx	lr
 80008ca:	f803 1b01 	strb.w	r1, [r3], #1
 80008ce:	e7f9      	b.n	80008c4 <memset+0x4>

080008d0 <iprintf>:
 80008d0:	b40f      	push	{r0, r1, r2, r3}
 80008d2:	4b0a      	ldr	r3, [pc, #40]	; (80008fc <iprintf+0x2c>)
 80008d4:	b513      	push	{r0, r1, r4, lr}
 80008d6:	681c      	ldr	r4, [r3, #0]
 80008d8:	b124      	cbz	r4, 80008e4 <iprintf+0x14>
 80008da:	69a3      	ldr	r3, [r4, #24]
 80008dc:	b913      	cbnz	r3, 80008e4 <iprintf+0x14>
 80008de:	4620      	mov	r0, r4
 80008e0:	f000 fa5e 	bl	8000da0 <__sinit>
 80008e4:	ab05      	add	r3, sp, #20
 80008e6:	9a04      	ldr	r2, [sp, #16]
 80008e8:	68a1      	ldr	r1, [r4, #8]
 80008ea:	9301      	str	r3, [sp, #4]
 80008ec:	4620      	mov	r0, r4
 80008ee:	f000 fc2b 	bl	8001148 <_vfiprintf_r>
 80008f2:	b002      	add	sp, #8
 80008f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80008f8:	b004      	add	sp, #16
 80008fa:	4770      	bx	lr
 80008fc:	20000000 	.word	0x20000000

08000900 <_puts_r>:
 8000900:	b570      	push	{r4, r5, r6, lr}
 8000902:	460e      	mov	r6, r1
 8000904:	4605      	mov	r5, r0
 8000906:	b118      	cbz	r0, 8000910 <_puts_r+0x10>
 8000908:	6983      	ldr	r3, [r0, #24]
 800090a:	b90b      	cbnz	r3, 8000910 <_puts_r+0x10>
 800090c:	f000 fa48 	bl	8000da0 <__sinit>
 8000910:	69ab      	ldr	r3, [r5, #24]
 8000912:	68ac      	ldr	r4, [r5, #8]
 8000914:	b913      	cbnz	r3, 800091c <_puts_r+0x1c>
 8000916:	4628      	mov	r0, r5
 8000918:	f000 fa42 	bl	8000da0 <__sinit>
 800091c:	4b2c      	ldr	r3, [pc, #176]	; (80009d0 <_puts_r+0xd0>)
 800091e:	429c      	cmp	r4, r3
 8000920:	d120      	bne.n	8000964 <_puts_r+0x64>
 8000922:	686c      	ldr	r4, [r5, #4]
 8000924:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000926:	07db      	lsls	r3, r3, #31
 8000928:	d405      	bmi.n	8000936 <_puts_r+0x36>
 800092a:	89a3      	ldrh	r3, [r4, #12]
 800092c:	0598      	lsls	r0, r3, #22
 800092e:	d402      	bmi.n	8000936 <_puts_r+0x36>
 8000930:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000932:	f000 fad3 	bl	8000edc <__retarget_lock_acquire_recursive>
 8000936:	89a3      	ldrh	r3, [r4, #12]
 8000938:	0719      	lsls	r1, r3, #28
 800093a:	d51d      	bpl.n	8000978 <_puts_r+0x78>
 800093c:	6923      	ldr	r3, [r4, #16]
 800093e:	b1db      	cbz	r3, 8000978 <_puts_r+0x78>
 8000940:	3e01      	subs	r6, #1
 8000942:	68a3      	ldr	r3, [r4, #8]
 8000944:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000948:	3b01      	subs	r3, #1
 800094a:	60a3      	str	r3, [r4, #8]
 800094c:	bb39      	cbnz	r1, 800099e <_puts_r+0x9e>
 800094e:	2b00      	cmp	r3, #0
 8000950:	da38      	bge.n	80009c4 <_puts_r+0xc4>
 8000952:	4622      	mov	r2, r4
 8000954:	210a      	movs	r1, #10
 8000956:	4628      	mov	r0, r5
 8000958:	f000 f848 	bl	80009ec <__swbuf_r>
 800095c:	3001      	adds	r0, #1
 800095e:	d011      	beq.n	8000984 <_puts_r+0x84>
 8000960:	250a      	movs	r5, #10
 8000962:	e011      	b.n	8000988 <_puts_r+0x88>
 8000964:	4b1b      	ldr	r3, [pc, #108]	; (80009d4 <_puts_r+0xd4>)
 8000966:	429c      	cmp	r4, r3
 8000968:	d101      	bne.n	800096e <_puts_r+0x6e>
 800096a:	68ac      	ldr	r4, [r5, #8]
 800096c:	e7da      	b.n	8000924 <_puts_r+0x24>
 800096e:	4b1a      	ldr	r3, [pc, #104]	; (80009d8 <_puts_r+0xd8>)
 8000970:	429c      	cmp	r4, r3
 8000972:	bf08      	it	eq
 8000974:	68ec      	ldreq	r4, [r5, #12]
 8000976:	e7d5      	b.n	8000924 <_puts_r+0x24>
 8000978:	4621      	mov	r1, r4
 800097a:	4628      	mov	r0, r5
 800097c:	f000 f888 	bl	8000a90 <__swsetup_r>
 8000980:	2800      	cmp	r0, #0
 8000982:	d0dd      	beq.n	8000940 <_puts_r+0x40>
 8000984:	f04f 35ff 	mov.w	r5, #4294967295
 8000988:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800098a:	07da      	lsls	r2, r3, #31
 800098c:	d405      	bmi.n	800099a <_puts_r+0x9a>
 800098e:	89a3      	ldrh	r3, [r4, #12]
 8000990:	059b      	lsls	r3, r3, #22
 8000992:	d402      	bmi.n	800099a <_puts_r+0x9a>
 8000994:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000996:	f000 faa2 	bl	8000ede <__retarget_lock_release_recursive>
 800099a:	4628      	mov	r0, r5
 800099c:	bd70      	pop	{r4, r5, r6, pc}
 800099e:	2b00      	cmp	r3, #0
 80009a0:	da04      	bge.n	80009ac <_puts_r+0xac>
 80009a2:	69a2      	ldr	r2, [r4, #24]
 80009a4:	429a      	cmp	r2, r3
 80009a6:	dc06      	bgt.n	80009b6 <_puts_r+0xb6>
 80009a8:	290a      	cmp	r1, #10
 80009aa:	d004      	beq.n	80009b6 <_puts_r+0xb6>
 80009ac:	6823      	ldr	r3, [r4, #0]
 80009ae:	1c5a      	adds	r2, r3, #1
 80009b0:	6022      	str	r2, [r4, #0]
 80009b2:	7019      	strb	r1, [r3, #0]
 80009b4:	e7c5      	b.n	8000942 <_puts_r+0x42>
 80009b6:	4622      	mov	r2, r4
 80009b8:	4628      	mov	r0, r5
 80009ba:	f000 f817 	bl	80009ec <__swbuf_r>
 80009be:	3001      	adds	r0, #1
 80009c0:	d1bf      	bne.n	8000942 <_puts_r+0x42>
 80009c2:	e7df      	b.n	8000984 <_puts_r+0x84>
 80009c4:	6823      	ldr	r3, [r4, #0]
 80009c6:	250a      	movs	r5, #10
 80009c8:	1c5a      	adds	r2, r3, #1
 80009ca:	6022      	str	r2, [r4, #0]
 80009cc:	701d      	strb	r5, [r3, #0]
 80009ce:	e7db      	b.n	8000988 <_puts_r+0x88>
 80009d0:	080018c8 	.word	0x080018c8
 80009d4:	080018e8 	.word	0x080018e8
 80009d8:	080018a8 	.word	0x080018a8

080009dc <puts>:
 80009dc:	4b02      	ldr	r3, [pc, #8]	; (80009e8 <puts+0xc>)
 80009de:	4601      	mov	r1, r0
 80009e0:	6818      	ldr	r0, [r3, #0]
 80009e2:	f7ff bf8d 	b.w	8000900 <_puts_r>
 80009e6:	bf00      	nop
 80009e8:	20000000 	.word	0x20000000

080009ec <__swbuf_r>:
 80009ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009ee:	460e      	mov	r6, r1
 80009f0:	4614      	mov	r4, r2
 80009f2:	4605      	mov	r5, r0
 80009f4:	b118      	cbz	r0, 80009fe <__swbuf_r+0x12>
 80009f6:	6983      	ldr	r3, [r0, #24]
 80009f8:	b90b      	cbnz	r3, 80009fe <__swbuf_r+0x12>
 80009fa:	f000 f9d1 	bl	8000da0 <__sinit>
 80009fe:	4b21      	ldr	r3, [pc, #132]	; (8000a84 <__swbuf_r+0x98>)
 8000a00:	429c      	cmp	r4, r3
 8000a02:	d12b      	bne.n	8000a5c <__swbuf_r+0x70>
 8000a04:	686c      	ldr	r4, [r5, #4]
 8000a06:	69a3      	ldr	r3, [r4, #24]
 8000a08:	60a3      	str	r3, [r4, #8]
 8000a0a:	89a3      	ldrh	r3, [r4, #12]
 8000a0c:	071a      	lsls	r2, r3, #28
 8000a0e:	d52f      	bpl.n	8000a70 <__swbuf_r+0x84>
 8000a10:	6923      	ldr	r3, [r4, #16]
 8000a12:	b36b      	cbz	r3, 8000a70 <__swbuf_r+0x84>
 8000a14:	6923      	ldr	r3, [r4, #16]
 8000a16:	6820      	ldr	r0, [r4, #0]
 8000a18:	1ac0      	subs	r0, r0, r3
 8000a1a:	6963      	ldr	r3, [r4, #20]
 8000a1c:	b2f6      	uxtb	r6, r6
 8000a1e:	4283      	cmp	r3, r0
 8000a20:	4637      	mov	r7, r6
 8000a22:	dc04      	bgt.n	8000a2e <__swbuf_r+0x42>
 8000a24:	4621      	mov	r1, r4
 8000a26:	4628      	mov	r0, r5
 8000a28:	f000 f926 	bl	8000c78 <_fflush_r>
 8000a2c:	bb30      	cbnz	r0, 8000a7c <__swbuf_r+0x90>
 8000a2e:	68a3      	ldr	r3, [r4, #8]
 8000a30:	3b01      	subs	r3, #1
 8000a32:	60a3      	str	r3, [r4, #8]
 8000a34:	6823      	ldr	r3, [r4, #0]
 8000a36:	1c5a      	adds	r2, r3, #1
 8000a38:	6022      	str	r2, [r4, #0]
 8000a3a:	701e      	strb	r6, [r3, #0]
 8000a3c:	6963      	ldr	r3, [r4, #20]
 8000a3e:	3001      	adds	r0, #1
 8000a40:	4283      	cmp	r3, r0
 8000a42:	d004      	beq.n	8000a4e <__swbuf_r+0x62>
 8000a44:	89a3      	ldrh	r3, [r4, #12]
 8000a46:	07db      	lsls	r3, r3, #31
 8000a48:	d506      	bpl.n	8000a58 <__swbuf_r+0x6c>
 8000a4a:	2e0a      	cmp	r6, #10
 8000a4c:	d104      	bne.n	8000a58 <__swbuf_r+0x6c>
 8000a4e:	4621      	mov	r1, r4
 8000a50:	4628      	mov	r0, r5
 8000a52:	f000 f911 	bl	8000c78 <_fflush_r>
 8000a56:	b988      	cbnz	r0, 8000a7c <__swbuf_r+0x90>
 8000a58:	4638      	mov	r0, r7
 8000a5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a5c:	4b0a      	ldr	r3, [pc, #40]	; (8000a88 <__swbuf_r+0x9c>)
 8000a5e:	429c      	cmp	r4, r3
 8000a60:	d101      	bne.n	8000a66 <__swbuf_r+0x7a>
 8000a62:	68ac      	ldr	r4, [r5, #8]
 8000a64:	e7cf      	b.n	8000a06 <__swbuf_r+0x1a>
 8000a66:	4b09      	ldr	r3, [pc, #36]	; (8000a8c <__swbuf_r+0xa0>)
 8000a68:	429c      	cmp	r4, r3
 8000a6a:	bf08      	it	eq
 8000a6c:	68ec      	ldreq	r4, [r5, #12]
 8000a6e:	e7ca      	b.n	8000a06 <__swbuf_r+0x1a>
 8000a70:	4621      	mov	r1, r4
 8000a72:	4628      	mov	r0, r5
 8000a74:	f000 f80c 	bl	8000a90 <__swsetup_r>
 8000a78:	2800      	cmp	r0, #0
 8000a7a:	d0cb      	beq.n	8000a14 <__swbuf_r+0x28>
 8000a7c:	f04f 37ff 	mov.w	r7, #4294967295
 8000a80:	e7ea      	b.n	8000a58 <__swbuf_r+0x6c>
 8000a82:	bf00      	nop
 8000a84:	080018c8 	.word	0x080018c8
 8000a88:	080018e8 	.word	0x080018e8
 8000a8c:	080018a8 	.word	0x080018a8

08000a90 <__swsetup_r>:
 8000a90:	4b32      	ldr	r3, [pc, #200]	; (8000b5c <__swsetup_r+0xcc>)
 8000a92:	b570      	push	{r4, r5, r6, lr}
 8000a94:	681d      	ldr	r5, [r3, #0]
 8000a96:	4606      	mov	r6, r0
 8000a98:	460c      	mov	r4, r1
 8000a9a:	b125      	cbz	r5, 8000aa6 <__swsetup_r+0x16>
 8000a9c:	69ab      	ldr	r3, [r5, #24]
 8000a9e:	b913      	cbnz	r3, 8000aa6 <__swsetup_r+0x16>
 8000aa0:	4628      	mov	r0, r5
 8000aa2:	f000 f97d 	bl	8000da0 <__sinit>
 8000aa6:	4b2e      	ldr	r3, [pc, #184]	; (8000b60 <__swsetup_r+0xd0>)
 8000aa8:	429c      	cmp	r4, r3
 8000aaa:	d10f      	bne.n	8000acc <__swsetup_r+0x3c>
 8000aac:	686c      	ldr	r4, [r5, #4]
 8000aae:	89a3      	ldrh	r3, [r4, #12]
 8000ab0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000ab4:	0719      	lsls	r1, r3, #28
 8000ab6:	d42c      	bmi.n	8000b12 <__swsetup_r+0x82>
 8000ab8:	06dd      	lsls	r5, r3, #27
 8000aba:	d411      	bmi.n	8000ae0 <__swsetup_r+0x50>
 8000abc:	2309      	movs	r3, #9
 8000abe:	6033      	str	r3, [r6, #0]
 8000ac0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000ac4:	81a3      	strh	r3, [r4, #12]
 8000ac6:	f04f 30ff 	mov.w	r0, #4294967295
 8000aca:	e03e      	b.n	8000b4a <__swsetup_r+0xba>
 8000acc:	4b25      	ldr	r3, [pc, #148]	; (8000b64 <__swsetup_r+0xd4>)
 8000ace:	429c      	cmp	r4, r3
 8000ad0:	d101      	bne.n	8000ad6 <__swsetup_r+0x46>
 8000ad2:	68ac      	ldr	r4, [r5, #8]
 8000ad4:	e7eb      	b.n	8000aae <__swsetup_r+0x1e>
 8000ad6:	4b24      	ldr	r3, [pc, #144]	; (8000b68 <__swsetup_r+0xd8>)
 8000ad8:	429c      	cmp	r4, r3
 8000ada:	bf08      	it	eq
 8000adc:	68ec      	ldreq	r4, [r5, #12]
 8000ade:	e7e6      	b.n	8000aae <__swsetup_r+0x1e>
 8000ae0:	0758      	lsls	r0, r3, #29
 8000ae2:	d512      	bpl.n	8000b0a <__swsetup_r+0x7a>
 8000ae4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000ae6:	b141      	cbz	r1, 8000afa <__swsetup_r+0x6a>
 8000ae8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000aec:	4299      	cmp	r1, r3
 8000aee:	d002      	beq.n	8000af6 <__swsetup_r+0x66>
 8000af0:	4630      	mov	r0, r6
 8000af2:	f000 fa59 	bl	8000fa8 <_free_r>
 8000af6:	2300      	movs	r3, #0
 8000af8:	6363      	str	r3, [r4, #52]	; 0x34
 8000afa:	89a3      	ldrh	r3, [r4, #12]
 8000afc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000b00:	81a3      	strh	r3, [r4, #12]
 8000b02:	2300      	movs	r3, #0
 8000b04:	6063      	str	r3, [r4, #4]
 8000b06:	6923      	ldr	r3, [r4, #16]
 8000b08:	6023      	str	r3, [r4, #0]
 8000b0a:	89a3      	ldrh	r3, [r4, #12]
 8000b0c:	f043 0308 	orr.w	r3, r3, #8
 8000b10:	81a3      	strh	r3, [r4, #12]
 8000b12:	6923      	ldr	r3, [r4, #16]
 8000b14:	b94b      	cbnz	r3, 8000b2a <__swsetup_r+0x9a>
 8000b16:	89a3      	ldrh	r3, [r4, #12]
 8000b18:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000b1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b20:	d003      	beq.n	8000b2a <__swsetup_r+0x9a>
 8000b22:	4621      	mov	r1, r4
 8000b24:	4630      	mov	r0, r6
 8000b26:	f000 f9ff 	bl	8000f28 <__smakebuf_r>
 8000b2a:	89a0      	ldrh	r0, [r4, #12]
 8000b2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000b30:	f010 0301 	ands.w	r3, r0, #1
 8000b34:	d00a      	beq.n	8000b4c <__swsetup_r+0xbc>
 8000b36:	2300      	movs	r3, #0
 8000b38:	60a3      	str	r3, [r4, #8]
 8000b3a:	6963      	ldr	r3, [r4, #20]
 8000b3c:	425b      	negs	r3, r3
 8000b3e:	61a3      	str	r3, [r4, #24]
 8000b40:	6923      	ldr	r3, [r4, #16]
 8000b42:	b943      	cbnz	r3, 8000b56 <__swsetup_r+0xc6>
 8000b44:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000b48:	d1ba      	bne.n	8000ac0 <__swsetup_r+0x30>
 8000b4a:	bd70      	pop	{r4, r5, r6, pc}
 8000b4c:	0781      	lsls	r1, r0, #30
 8000b4e:	bf58      	it	pl
 8000b50:	6963      	ldrpl	r3, [r4, #20]
 8000b52:	60a3      	str	r3, [r4, #8]
 8000b54:	e7f4      	b.n	8000b40 <__swsetup_r+0xb0>
 8000b56:	2000      	movs	r0, #0
 8000b58:	e7f7      	b.n	8000b4a <__swsetup_r+0xba>
 8000b5a:	bf00      	nop
 8000b5c:	20000000 	.word	0x20000000
 8000b60:	080018c8 	.word	0x080018c8
 8000b64:	080018e8 	.word	0x080018e8
 8000b68:	080018a8 	.word	0x080018a8

08000b6c <__sflush_r>:
 8000b6c:	898a      	ldrh	r2, [r1, #12]
 8000b6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b72:	4605      	mov	r5, r0
 8000b74:	0710      	lsls	r0, r2, #28
 8000b76:	460c      	mov	r4, r1
 8000b78:	d458      	bmi.n	8000c2c <__sflush_r+0xc0>
 8000b7a:	684b      	ldr	r3, [r1, #4]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	dc05      	bgt.n	8000b8c <__sflush_r+0x20>
 8000b80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	dc02      	bgt.n	8000b8c <__sflush_r+0x20>
 8000b86:	2000      	movs	r0, #0
 8000b88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000b8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000b8e:	2e00      	cmp	r6, #0
 8000b90:	d0f9      	beq.n	8000b86 <__sflush_r+0x1a>
 8000b92:	2300      	movs	r3, #0
 8000b94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000b98:	682f      	ldr	r7, [r5, #0]
 8000b9a:	602b      	str	r3, [r5, #0]
 8000b9c:	d032      	beq.n	8000c04 <__sflush_r+0x98>
 8000b9e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000ba0:	89a3      	ldrh	r3, [r4, #12]
 8000ba2:	075a      	lsls	r2, r3, #29
 8000ba4:	d505      	bpl.n	8000bb2 <__sflush_r+0x46>
 8000ba6:	6863      	ldr	r3, [r4, #4]
 8000ba8:	1ac0      	subs	r0, r0, r3
 8000baa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000bac:	b10b      	cbz	r3, 8000bb2 <__sflush_r+0x46>
 8000bae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000bb0:	1ac0      	subs	r0, r0, r3
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	4602      	mov	r2, r0
 8000bb6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000bb8:	6a21      	ldr	r1, [r4, #32]
 8000bba:	4628      	mov	r0, r5
 8000bbc:	47b0      	blx	r6
 8000bbe:	1c43      	adds	r3, r0, #1
 8000bc0:	89a3      	ldrh	r3, [r4, #12]
 8000bc2:	d106      	bne.n	8000bd2 <__sflush_r+0x66>
 8000bc4:	6829      	ldr	r1, [r5, #0]
 8000bc6:	291d      	cmp	r1, #29
 8000bc8:	d82c      	bhi.n	8000c24 <__sflush_r+0xb8>
 8000bca:	4a2a      	ldr	r2, [pc, #168]	; (8000c74 <__sflush_r+0x108>)
 8000bcc:	40ca      	lsrs	r2, r1
 8000bce:	07d6      	lsls	r6, r2, #31
 8000bd0:	d528      	bpl.n	8000c24 <__sflush_r+0xb8>
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	6062      	str	r2, [r4, #4]
 8000bd6:	04d9      	lsls	r1, r3, #19
 8000bd8:	6922      	ldr	r2, [r4, #16]
 8000bda:	6022      	str	r2, [r4, #0]
 8000bdc:	d504      	bpl.n	8000be8 <__sflush_r+0x7c>
 8000bde:	1c42      	adds	r2, r0, #1
 8000be0:	d101      	bne.n	8000be6 <__sflush_r+0x7a>
 8000be2:	682b      	ldr	r3, [r5, #0]
 8000be4:	b903      	cbnz	r3, 8000be8 <__sflush_r+0x7c>
 8000be6:	6560      	str	r0, [r4, #84]	; 0x54
 8000be8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000bea:	602f      	str	r7, [r5, #0]
 8000bec:	2900      	cmp	r1, #0
 8000bee:	d0ca      	beq.n	8000b86 <__sflush_r+0x1a>
 8000bf0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000bf4:	4299      	cmp	r1, r3
 8000bf6:	d002      	beq.n	8000bfe <__sflush_r+0x92>
 8000bf8:	4628      	mov	r0, r5
 8000bfa:	f000 f9d5 	bl	8000fa8 <_free_r>
 8000bfe:	2000      	movs	r0, #0
 8000c00:	6360      	str	r0, [r4, #52]	; 0x34
 8000c02:	e7c1      	b.n	8000b88 <__sflush_r+0x1c>
 8000c04:	6a21      	ldr	r1, [r4, #32]
 8000c06:	2301      	movs	r3, #1
 8000c08:	4628      	mov	r0, r5
 8000c0a:	47b0      	blx	r6
 8000c0c:	1c41      	adds	r1, r0, #1
 8000c0e:	d1c7      	bne.n	8000ba0 <__sflush_r+0x34>
 8000c10:	682b      	ldr	r3, [r5, #0]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d0c4      	beq.n	8000ba0 <__sflush_r+0x34>
 8000c16:	2b1d      	cmp	r3, #29
 8000c18:	d001      	beq.n	8000c1e <__sflush_r+0xb2>
 8000c1a:	2b16      	cmp	r3, #22
 8000c1c:	d101      	bne.n	8000c22 <__sflush_r+0xb6>
 8000c1e:	602f      	str	r7, [r5, #0]
 8000c20:	e7b1      	b.n	8000b86 <__sflush_r+0x1a>
 8000c22:	89a3      	ldrh	r3, [r4, #12]
 8000c24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c28:	81a3      	strh	r3, [r4, #12]
 8000c2a:	e7ad      	b.n	8000b88 <__sflush_r+0x1c>
 8000c2c:	690f      	ldr	r7, [r1, #16]
 8000c2e:	2f00      	cmp	r7, #0
 8000c30:	d0a9      	beq.n	8000b86 <__sflush_r+0x1a>
 8000c32:	0793      	lsls	r3, r2, #30
 8000c34:	680e      	ldr	r6, [r1, #0]
 8000c36:	bf08      	it	eq
 8000c38:	694b      	ldreq	r3, [r1, #20]
 8000c3a:	600f      	str	r7, [r1, #0]
 8000c3c:	bf18      	it	ne
 8000c3e:	2300      	movne	r3, #0
 8000c40:	eba6 0807 	sub.w	r8, r6, r7
 8000c44:	608b      	str	r3, [r1, #8]
 8000c46:	f1b8 0f00 	cmp.w	r8, #0
 8000c4a:	dd9c      	ble.n	8000b86 <__sflush_r+0x1a>
 8000c4c:	6a21      	ldr	r1, [r4, #32]
 8000c4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000c50:	4643      	mov	r3, r8
 8000c52:	463a      	mov	r2, r7
 8000c54:	4628      	mov	r0, r5
 8000c56:	47b0      	blx	r6
 8000c58:	2800      	cmp	r0, #0
 8000c5a:	dc06      	bgt.n	8000c6a <__sflush_r+0xfe>
 8000c5c:	89a3      	ldrh	r3, [r4, #12]
 8000c5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c62:	81a3      	strh	r3, [r4, #12]
 8000c64:	f04f 30ff 	mov.w	r0, #4294967295
 8000c68:	e78e      	b.n	8000b88 <__sflush_r+0x1c>
 8000c6a:	4407      	add	r7, r0
 8000c6c:	eba8 0800 	sub.w	r8, r8, r0
 8000c70:	e7e9      	b.n	8000c46 <__sflush_r+0xda>
 8000c72:	bf00      	nop
 8000c74:	20400001 	.word	0x20400001

08000c78 <_fflush_r>:
 8000c78:	b538      	push	{r3, r4, r5, lr}
 8000c7a:	690b      	ldr	r3, [r1, #16]
 8000c7c:	4605      	mov	r5, r0
 8000c7e:	460c      	mov	r4, r1
 8000c80:	b913      	cbnz	r3, 8000c88 <_fflush_r+0x10>
 8000c82:	2500      	movs	r5, #0
 8000c84:	4628      	mov	r0, r5
 8000c86:	bd38      	pop	{r3, r4, r5, pc}
 8000c88:	b118      	cbz	r0, 8000c92 <_fflush_r+0x1a>
 8000c8a:	6983      	ldr	r3, [r0, #24]
 8000c8c:	b90b      	cbnz	r3, 8000c92 <_fflush_r+0x1a>
 8000c8e:	f000 f887 	bl	8000da0 <__sinit>
 8000c92:	4b14      	ldr	r3, [pc, #80]	; (8000ce4 <_fflush_r+0x6c>)
 8000c94:	429c      	cmp	r4, r3
 8000c96:	d11b      	bne.n	8000cd0 <_fflush_r+0x58>
 8000c98:	686c      	ldr	r4, [r5, #4]
 8000c9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d0ef      	beq.n	8000c82 <_fflush_r+0xa>
 8000ca2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000ca4:	07d0      	lsls	r0, r2, #31
 8000ca6:	d404      	bmi.n	8000cb2 <_fflush_r+0x3a>
 8000ca8:	0599      	lsls	r1, r3, #22
 8000caa:	d402      	bmi.n	8000cb2 <_fflush_r+0x3a>
 8000cac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000cae:	f000 f915 	bl	8000edc <__retarget_lock_acquire_recursive>
 8000cb2:	4628      	mov	r0, r5
 8000cb4:	4621      	mov	r1, r4
 8000cb6:	f7ff ff59 	bl	8000b6c <__sflush_r>
 8000cba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000cbc:	07da      	lsls	r2, r3, #31
 8000cbe:	4605      	mov	r5, r0
 8000cc0:	d4e0      	bmi.n	8000c84 <_fflush_r+0xc>
 8000cc2:	89a3      	ldrh	r3, [r4, #12]
 8000cc4:	059b      	lsls	r3, r3, #22
 8000cc6:	d4dd      	bmi.n	8000c84 <_fflush_r+0xc>
 8000cc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000cca:	f000 f908 	bl	8000ede <__retarget_lock_release_recursive>
 8000cce:	e7d9      	b.n	8000c84 <_fflush_r+0xc>
 8000cd0:	4b05      	ldr	r3, [pc, #20]	; (8000ce8 <_fflush_r+0x70>)
 8000cd2:	429c      	cmp	r4, r3
 8000cd4:	d101      	bne.n	8000cda <_fflush_r+0x62>
 8000cd6:	68ac      	ldr	r4, [r5, #8]
 8000cd8:	e7df      	b.n	8000c9a <_fflush_r+0x22>
 8000cda:	4b04      	ldr	r3, [pc, #16]	; (8000cec <_fflush_r+0x74>)
 8000cdc:	429c      	cmp	r4, r3
 8000cde:	bf08      	it	eq
 8000ce0:	68ec      	ldreq	r4, [r5, #12]
 8000ce2:	e7da      	b.n	8000c9a <_fflush_r+0x22>
 8000ce4:	080018c8 	.word	0x080018c8
 8000ce8:	080018e8 	.word	0x080018e8
 8000cec:	080018a8 	.word	0x080018a8

08000cf0 <std>:
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	b510      	push	{r4, lr}
 8000cf4:	4604      	mov	r4, r0
 8000cf6:	e9c0 3300 	strd	r3, r3, [r0]
 8000cfa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000cfe:	6083      	str	r3, [r0, #8]
 8000d00:	8181      	strh	r1, [r0, #12]
 8000d02:	6643      	str	r3, [r0, #100]	; 0x64
 8000d04:	81c2      	strh	r2, [r0, #14]
 8000d06:	6183      	str	r3, [r0, #24]
 8000d08:	4619      	mov	r1, r3
 8000d0a:	2208      	movs	r2, #8
 8000d0c:	305c      	adds	r0, #92	; 0x5c
 8000d0e:	f7ff fdd7 	bl	80008c0 <memset>
 8000d12:	4b05      	ldr	r3, [pc, #20]	; (8000d28 <std+0x38>)
 8000d14:	6263      	str	r3, [r4, #36]	; 0x24
 8000d16:	4b05      	ldr	r3, [pc, #20]	; (8000d2c <std+0x3c>)
 8000d18:	62a3      	str	r3, [r4, #40]	; 0x28
 8000d1a:	4b05      	ldr	r3, [pc, #20]	; (8000d30 <std+0x40>)
 8000d1c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000d1e:	4b05      	ldr	r3, [pc, #20]	; (8000d34 <std+0x44>)
 8000d20:	6224      	str	r4, [r4, #32]
 8000d22:	6323      	str	r3, [r4, #48]	; 0x30
 8000d24:	bd10      	pop	{r4, pc}
 8000d26:	bf00      	nop
 8000d28:	080016f1 	.word	0x080016f1
 8000d2c:	08001713 	.word	0x08001713
 8000d30:	0800174b 	.word	0x0800174b
 8000d34:	0800176f 	.word	0x0800176f

08000d38 <_cleanup_r>:
 8000d38:	4901      	ldr	r1, [pc, #4]	; (8000d40 <_cleanup_r+0x8>)
 8000d3a:	f000 b8af 	b.w	8000e9c <_fwalk_reent>
 8000d3e:	bf00      	nop
 8000d40:	08000c79 	.word	0x08000c79

08000d44 <__sfmoreglue>:
 8000d44:	b570      	push	{r4, r5, r6, lr}
 8000d46:	1e4a      	subs	r2, r1, #1
 8000d48:	2568      	movs	r5, #104	; 0x68
 8000d4a:	4355      	muls	r5, r2
 8000d4c:	460e      	mov	r6, r1
 8000d4e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000d52:	f000 f977 	bl	8001044 <_malloc_r>
 8000d56:	4604      	mov	r4, r0
 8000d58:	b140      	cbz	r0, 8000d6c <__sfmoreglue+0x28>
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	e9c0 1600 	strd	r1, r6, [r0]
 8000d60:	300c      	adds	r0, #12
 8000d62:	60a0      	str	r0, [r4, #8]
 8000d64:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000d68:	f7ff fdaa 	bl	80008c0 <memset>
 8000d6c:	4620      	mov	r0, r4
 8000d6e:	bd70      	pop	{r4, r5, r6, pc}

08000d70 <__sfp_lock_acquire>:
 8000d70:	4801      	ldr	r0, [pc, #4]	; (8000d78 <__sfp_lock_acquire+0x8>)
 8000d72:	f000 b8b3 	b.w	8000edc <__retarget_lock_acquire_recursive>
 8000d76:	bf00      	nop
 8000d78:	200000a0 	.word	0x200000a0

08000d7c <__sfp_lock_release>:
 8000d7c:	4801      	ldr	r0, [pc, #4]	; (8000d84 <__sfp_lock_release+0x8>)
 8000d7e:	f000 b8ae 	b.w	8000ede <__retarget_lock_release_recursive>
 8000d82:	bf00      	nop
 8000d84:	200000a0 	.word	0x200000a0

08000d88 <__sinit_lock_acquire>:
 8000d88:	4801      	ldr	r0, [pc, #4]	; (8000d90 <__sinit_lock_acquire+0x8>)
 8000d8a:	f000 b8a7 	b.w	8000edc <__retarget_lock_acquire_recursive>
 8000d8e:	bf00      	nop
 8000d90:	2000009b 	.word	0x2000009b

08000d94 <__sinit_lock_release>:
 8000d94:	4801      	ldr	r0, [pc, #4]	; (8000d9c <__sinit_lock_release+0x8>)
 8000d96:	f000 b8a2 	b.w	8000ede <__retarget_lock_release_recursive>
 8000d9a:	bf00      	nop
 8000d9c:	2000009b 	.word	0x2000009b

08000da0 <__sinit>:
 8000da0:	b510      	push	{r4, lr}
 8000da2:	4604      	mov	r4, r0
 8000da4:	f7ff fff0 	bl	8000d88 <__sinit_lock_acquire>
 8000da8:	69a3      	ldr	r3, [r4, #24]
 8000daa:	b11b      	cbz	r3, 8000db4 <__sinit+0x14>
 8000dac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000db0:	f7ff bff0 	b.w	8000d94 <__sinit_lock_release>
 8000db4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000db8:	6523      	str	r3, [r4, #80]	; 0x50
 8000dba:	4b13      	ldr	r3, [pc, #76]	; (8000e08 <__sinit+0x68>)
 8000dbc:	4a13      	ldr	r2, [pc, #76]	; (8000e0c <__sinit+0x6c>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	62a2      	str	r2, [r4, #40]	; 0x28
 8000dc2:	42a3      	cmp	r3, r4
 8000dc4:	bf04      	itt	eq
 8000dc6:	2301      	moveq	r3, #1
 8000dc8:	61a3      	streq	r3, [r4, #24]
 8000dca:	4620      	mov	r0, r4
 8000dcc:	f000 f820 	bl	8000e10 <__sfp>
 8000dd0:	6060      	str	r0, [r4, #4]
 8000dd2:	4620      	mov	r0, r4
 8000dd4:	f000 f81c 	bl	8000e10 <__sfp>
 8000dd8:	60a0      	str	r0, [r4, #8]
 8000dda:	4620      	mov	r0, r4
 8000ddc:	f000 f818 	bl	8000e10 <__sfp>
 8000de0:	2200      	movs	r2, #0
 8000de2:	60e0      	str	r0, [r4, #12]
 8000de4:	2104      	movs	r1, #4
 8000de6:	6860      	ldr	r0, [r4, #4]
 8000de8:	f7ff ff82 	bl	8000cf0 <std>
 8000dec:	68a0      	ldr	r0, [r4, #8]
 8000dee:	2201      	movs	r2, #1
 8000df0:	2109      	movs	r1, #9
 8000df2:	f7ff ff7d 	bl	8000cf0 <std>
 8000df6:	68e0      	ldr	r0, [r4, #12]
 8000df8:	2202      	movs	r2, #2
 8000dfa:	2112      	movs	r1, #18
 8000dfc:	f7ff ff78 	bl	8000cf0 <std>
 8000e00:	2301      	movs	r3, #1
 8000e02:	61a3      	str	r3, [r4, #24]
 8000e04:	e7d2      	b.n	8000dac <__sinit+0xc>
 8000e06:	bf00      	nop
 8000e08:	080018a4 	.word	0x080018a4
 8000e0c:	08000d39 	.word	0x08000d39

08000e10 <__sfp>:
 8000e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e12:	4607      	mov	r7, r0
 8000e14:	f7ff ffac 	bl	8000d70 <__sfp_lock_acquire>
 8000e18:	4b1e      	ldr	r3, [pc, #120]	; (8000e94 <__sfp+0x84>)
 8000e1a:	681e      	ldr	r6, [r3, #0]
 8000e1c:	69b3      	ldr	r3, [r6, #24]
 8000e1e:	b913      	cbnz	r3, 8000e26 <__sfp+0x16>
 8000e20:	4630      	mov	r0, r6
 8000e22:	f7ff ffbd 	bl	8000da0 <__sinit>
 8000e26:	3648      	adds	r6, #72	; 0x48
 8000e28:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000e2c:	3b01      	subs	r3, #1
 8000e2e:	d503      	bpl.n	8000e38 <__sfp+0x28>
 8000e30:	6833      	ldr	r3, [r6, #0]
 8000e32:	b30b      	cbz	r3, 8000e78 <__sfp+0x68>
 8000e34:	6836      	ldr	r6, [r6, #0]
 8000e36:	e7f7      	b.n	8000e28 <__sfp+0x18>
 8000e38:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000e3c:	b9d5      	cbnz	r5, 8000e74 <__sfp+0x64>
 8000e3e:	4b16      	ldr	r3, [pc, #88]	; (8000e98 <__sfp+0x88>)
 8000e40:	60e3      	str	r3, [r4, #12]
 8000e42:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000e46:	6665      	str	r5, [r4, #100]	; 0x64
 8000e48:	f000 f847 	bl	8000eda <__retarget_lock_init_recursive>
 8000e4c:	f7ff ff96 	bl	8000d7c <__sfp_lock_release>
 8000e50:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000e54:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000e58:	6025      	str	r5, [r4, #0]
 8000e5a:	61a5      	str	r5, [r4, #24]
 8000e5c:	2208      	movs	r2, #8
 8000e5e:	4629      	mov	r1, r5
 8000e60:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000e64:	f7ff fd2c 	bl	80008c0 <memset>
 8000e68:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000e6c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000e70:	4620      	mov	r0, r4
 8000e72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e74:	3468      	adds	r4, #104	; 0x68
 8000e76:	e7d9      	b.n	8000e2c <__sfp+0x1c>
 8000e78:	2104      	movs	r1, #4
 8000e7a:	4638      	mov	r0, r7
 8000e7c:	f7ff ff62 	bl	8000d44 <__sfmoreglue>
 8000e80:	4604      	mov	r4, r0
 8000e82:	6030      	str	r0, [r6, #0]
 8000e84:	2800      	cmp	r0, #0
 8000e86:	d1d5      	bne.n	8000e34 <__sfp+0x24>
 8000e88:	f7ff ff78 	bl	8000d7c <__sfp_lock_release>
 8000e8c:	230c      	movs	r3, #12
 8000e8e:	603b      	str	r3, [r7, #0]
 8000e90:	e7ee      	b.n	8000e70 <__sfp+0x60>
 8000e92:	bf00      	nop
 8000e94:	080018a4 	.word	0x080018a4
 8000e98:	ffff0001 	.word	0xffff0001

08000e9c <_fwalk_reent>:
 8000e9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	4688      	mov	r8, r1
 8000ea4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000ea8:	2700      	movs	r7, #0
 8000eaa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000eae:	f1b9 0901 	subs.w	r9, r9, #1
 8000eb2:	d505      	bpl.n	8000ec0 <_fwalk_reent+0x24>
 8000eb4:	6824      	ldr	r4, [r4, #0]
 8000eb6:	2c00      	cmp	r4, #0
 8000eb8:	d1f7      	bne.n	8000eaa <_fwalk_reent+0xe>
 8000eba:	4638      	mov	r0, r7
 8000ebc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000ec0:	89ab      	ldrh	r3, [r5, #12]
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	d907      	bls.n	8000ed6 <_fwalk_reent+0x3a>
 8000ec6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000eca:	3301      	adds	r3, #1
 8000ecc:	d003      	beq.n	8000ed6 <_fwalk_reent+0x3a>
 8000ece:	4629      	mov	r1, r5
 8000ed0:	4630      	mov	r0, r6
 8000ed2:	47c0      	blx	r8
 8000ed4:	4307      	orrs	r7, r0
 8000ed6:	3568      	adds	r5, #104	; 0x68
 8000ed8:	e7e9      	b.n	8000eae <_fwalk_reent+0x12>

08000eda <__retarget_lock_init_recursive>:
 8000eda:	4770      	bx	lr

08000edc <__retarget_lock_acquire_recursive>:
 8000edc:	4770      	bx	lr

08000ede <__retarget_lock_release_recursive>:
 8000ede:	4770      	bx	lr

08000ee0 <__swhatbuf_r>:
 8000ee0:	b570      	push	{r4, r5, r6, lr}
 8000ee2:	460e      	mov	r6, r1
 8000ee4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ee8:	2900      	cmp	r1, #0
 8000eea:	b096      	sub	sp, #88	; 0x58
 8000eec:	4614      	mov	r4, r2
 8000eee:	461d      	mov	r5, r3
 8000ef0:	da07      	bge.n	8000f02 <__swhatbuf_r+0x22>
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	602b      	str	r3, [r5, #0]
 8000ef6:	89b3      	ldrh	r3, [r6, #12]
 8000ef8:	061a      	lsls	r2, r3, #24
 8000efa:	d410      	bmi.n	8000f1e <__swhatbuf_r+0x3e>
 8000efc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f00:	e00e      	b.n	8000f20 <__swhatbuf_r+0x40>
 8000f02:	466a      	mov	r2, sp
 8000f04:	f000 fc5a 	bl	80017bc <_fstat_r>
 8000f08:	2800      	cmp	r0, #0
 8000f0a:	dbf2      	blt.n	8000ef2 <__swhatbuf_r+0x12>
 8000f0c:	9a01      	ldr	r2, [sp, #4]
 8000f0e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000f12:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000f16:	425a      	negs	r2, r3
 8000f18:	415a      	adcs	r2, r3
 8000f1a:	602a      	str	r2, [r5, #0]
 8000f1c:	e7ee      	b.n	8000efc <__swhatbuf_r+0x1c>
 8000f1e:	2340      	movs	r3, #64	; 0x40
 8000f20:	2000      	movs	r0, #0
 8000f22:	6023      	str	r3, [r4, #0]
 8000f24:	b016      	add	sp, #88	; 0x58
 8000f26:	bd70      	pop	{r4, r5, r6, pc}

08000f28 <__smakebuf_r>:
 8000f28:	898b      	ldrh	r3, [r1, #12]
 8000f2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000f2c:	079d      	lsls	r5, r3, #30
 8000f2e:	4606      	mov	r6, r0
 8000f30:	460c      	mov	r4, r1
 8000f32:	d507      	bpl.n	8000f44 <__smakebuf_r+0x1c>
 8000f34:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000f38:	6023      	str	r3, [r4, #0]
 8000f3a:	6123      	str	r3, [r4, #16]
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	6163      	str	r3, [r4, #20]
 8000f40:	b002      	add	sp, #8
 8000f42:	bd70      	pop	{r4, r5, r6, pc}
 8000f44:	ab01      	add	r3, sp, #4
 8000f46:	466a      	mov	r2, sp
 8000f48:	f7ff ffca 	bl	8000ee0 <__swhatbuf_r>
 8000f4c:	9900      	ldr	r1, [sp, #0]
 8000f4e:	4605      	mov	r5, r0
 8000f50:	4630      	mov	r0, r6
 8000f52:	f000 f877 	bl	8001044 <_malloc_r>
 8000f56:	b948      	cbnz	r0, 8000f6c <__smakebuf_r+0x44>
 8000f58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000f5c:	059a      	lsls	r2, r3, #22
 8000f5e:	d4ef      	bmi.n	8000f40 <__smakebuf_r+0x18>
 8000f60:	f023 0303 	bic.w	r3, r3, #3
 8000f64:	f043 0302 	orr.w	r3, r3, #2
 8000f68:	81a3      	strh	r3, [r4, #12]
 8000f6a:	e7e3      	b.n	8000f34 <__smakebuf_r+0xc>
 8000f6c:	4b0d      	ldr	r3, [pc, #52]	; (8000fa4 <__smakebuf_r+0x7c>)
 8000f6e:	62b3      	str	r3, [r6, #40]	; 0x28
 8000f70:	89a3      	ldrh	r3, [r4, #12]
 8000f72:	6020      	str	r0, [r4, #0]
 8000f74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f78:	81a3      	strh	r3, [r4, #12]
 8000f7a:	9b00      	ldr	r3, [sp, #0]
 8000f7c:	6163      	str	r3, [r4, #20]
 8000f7e:	9b01      	ldr	r3, [sp, #4]
 8000f80:	6120      	str	r0, [r4, #16]
 8000f82:	b15b      	cbz	r3, 8000f9c <__smakebuf_r+0x74>
 8000f84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000f88:	4630      	mov	r0, r6
 8000f8a:	f000 fc29 	bl	80017e0 <_isatty_r>
 8000f8e:	b128      	cbz	r0, 8000f9c <__smakebuf_r+0x74>
 8000f90:	89a3      	ldrh	r3, [r4, #12]
 8000f92:	f023 0303 	bic.w	r3, r3, #3
 8000f96:	f043 0301 	orr.w	r3, r3, #1
 8000f9a:	81a3      	strh	r3, [r4, #12]
 8000f9c:	89a0      	ldrh	r0, [r4, #12]
 8000f9e:	4305      	orrs	r5, r0
 8000fa0:	81a5      	strh	r5, [r4, #12]
 8000fa2:	e7cd      	b.n	8000f40 <__smakebuf_r+0x18>
 8000fa4:	08000d39 	.word	0x08000d39

08000fa8 <_free_r>:
 8000fa8:	b538      	push	{r3, r4, r5, lr}
 8000faa:	4605      	mov	r5, r0
 8000fac:	2900      	cmp	r1, #0
 8000fae:	d045      	beq.n	800103c <_free_r+0x94>
 8000fb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000fb4:	1f0c      	subs	r4, r1, #4
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	bfb8      	it	lt
 8000fba:	18e4      	addlt	r4, r4, r3
 8000fbc:	f000 fc32 	bl	8001824 <__malloc_lock>
 8000fc0:	4a1f      	ldr	r2, [pc, #124]	; (8001040 <_free_r+0x98>)
 8000fc2:	6813      	ldr	r3, [r2, #0]
 8000fc4:	4610      	mov	r0, r2
 8000fc6:	b933      	cbnz	r3, 8000fd6 <_free_r+0x2e>
 8000fc8:	6063      	str	r3, [r4, #4]
 8000fca:	6014      	str	r4, [r2, #0]
 8000fcc:	4628      	mov	r0, r5
 8000fce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000fd2:	f000 bc2d 	b.w	8001830 <__malloc_unlock>
 8000fd6:	42a3      	cmp	r3, r4
 8000fd8:	d90b      	bls.n	8000ff2 <_free_r+0x4a>
 8000fda:	6821      	ldr	r1, [r4, #0]
 8000fdc:	1862      	adds	r2, r4, r1
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	bf04      	itt	eq
 8000fe2:	681a      	ldreq	r2, [r3, #0]
 8000fe4:	685b      	ldreq	r3, [r3, #4]
 8000fe6:	6063      	str	r3, [r4, #4]
 8000fe8:	bf04      	itt	eq
 8000fea:	1852      	addeq	r2, r2, r1
 8000fec:	6022      	streq	r2, [r4, #0]
 8000fee:	6004      	str	r4, [r0, #0]
 8000ff0:	e7ec      	b.n	8000fcc <_free_r+0x24>
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	b10b      	cbz	r3, 8000ffc <_free_r+0x54>
 8000ff8:	42a3      	cmp	r3, r4
 8000ffa:	d9fa      	bls.n	8000ff2 <_free_r+0x4a>
 8000ffc:	6811      	ldr	r1, [r2, #0]
 8000ffe:	1850      	adds	r0, r2, r1
 8001000:	42a0      	cmp	r0, r4
 8001002:	d10b      	bne.n	800101c <_free_r+0x74>
 8001004:	6820      	ldr	r0, [r4, #0]
 8001006:	4401      	add	r1, r0
 8001008:	1850      	adds	r0, r2, r1
 800100a:	4283      	cmp	r3, r0
 800100c:	6011      	str	r1, [r2, #0]
 800100e:	d1dd      	bne.n	8000fcc <_free_r+0x24>
 8001010:	6818      	ldr	r0, [r3, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	6053      	str	r3, [r2, #4]
 8001016:	4401      	add	r1, r0
 8001018:	6011      	str	r1, [r2, #0]
 800101a:	e7d7      	b.n	8000fcc <_free_r+0x24>
 800101c:	d902      	bls.n	8001024 <_free_r+0x7c>
 800101e:	230c      	movs	r3, #12
 8001020:	602b      	str	r3, [r5, #0]
 8001022:	e7d3      	b.n	8000fcc <_free_r+0x24>
 8001024:	6820      	ldr	r0, [r4, #0]
 8001026:	1821      	adds	r1, r4, r0
 8001028:	428b      	cmp	r3, r1
 800102a:	bf04      	itt	eq
 800102c:	6819      	ldreq	r1, [r3, #0]
 800102e:	685b      	ldreq	r3, [r3, #4]
 8001030:	6063      	str	r3, [r4, #4]
 8001032:	bf04      	itt	eq
 8001034:	1809      	addeq	r1, r1, r0
 8001036:	6021      	streq	r1, [r4, #0]
 8001038:	6054      	str	r4, [r2, #4]
 800103a:	e7c7      	b.n	8000fcc <_free_r+0x24>
 800103c:	bd38      	pop	{r3, r4, r5, pc}
 800103e:	bf00      	nop
 8001040:	20000088 	.word	0x20000088

08001044 <_malloc_r>:
 8001044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001046:	1ccd      	adds	r5, r1, #3
 8001048:	f025 0503 	bic.w	r5, r5, #3
 800104c:	3508      	adds	r5, #8
 800104e:	2d0c      	cmp	r5, #12
 8001050:	bf38      	it	cc
 8001052:	250c      	movcc	r5, #12
 8001054:	2d00      	cmp	r5, #0
 8001056:	4606      	mov	r6, r0
 8001058:	db01      	blt.n	800105e <_malloc_r+0x1a>
 800105a:	42a9      	cmp	r1, r5
 800105c:	d903      	bls.n	8001066 <_malloc_r+0x22>
 800105e:	230c      	movs	r3, #12
 8001060:	6033      	str	r3, [r6, #0]
 8001062:	2000      	movs	r0, #0
 8001064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001066:	f000 fbdd 	bl	8001824 <__malloc_lock>
 800106a:	4921      	ldr	r1, [pc, #132]	; (80010f0 <_malloc_r+0xac>)
 800106c:	680a      	ldr	r2, [r1, #0]
 800106e:	4614      	mov	r4, r2
 8001070:	b99c      	cbnz	r4, 800109a <_malloc_r+0x56>
 8001072:	4f20      	ldr	r7, [pc, #128]	; (80010f4 <_malloc_r+0xb0>)
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	b923      	cbnz	r3, 8001082 <_malloc_r+0x3e>
 8001078:	4621      	mov	r1, r4
 800107a:	4630      	mov	r0, r6
 800107c:	f000 fb28 	bl	80016d0 <_sbrk_r>
 8001080:	6038      	str	r0, [r7, #0]
 8001082:	4629      	mov	r1, r5
 8001084:	4630      	mov	r0, r6
 8001086:	f000 fb23 	bl	80016d0 <_sbrk_r>
 800108a:	1c43      	adds	r3, r0, #1
 800108c:	d123      	bne.n	80010d6 <_malloc_r+0x92>
 800108e:	230c      	movs	r3, #12
 8001090:	6033      	str	r3, [r6, #0]
 8001092:	4630      	mov	r0, r6
 8001094:	f000 fbcc 	bl	8001830 <__malloc_unlock>
 8001098:	e7e3      	b.n	8001062 <_malloc_r+0x1e>
 800109a:	6823      	ldr	r3, [r4, #0]
 800109c:	1b5b      	subs	r3, r3, r5
 800109e:	d417      	bmi.n	80010d0 <_malloc_r+0x8c>
 80010a0:	2b0b      	cmp	r3, #11
 80010a2:	d903      	bls.n	80010ac <_malloc_r+0x68>
 80010a4:	6023      	str	r3, [r4, #0]
 80010a6:	441c      	add	r4, r3
 80010a8:	6025      	str	r5, [r4, #0]
 80010aa:	e004      	b.n	80010b6 <_malloc_r+0x72>
 80010ac:	6863      	ldr	r3, [r4, #4]
 80010ae:	42a2      	cmp	r2, r4
 80010b0:	bf0c      	ite	eq
 80010b2:	600b      	streq	r3, [r1, #0]
 80010b4:	6053      	strne	r3, [r2, #4]
 80010b6:	4630      	mov	r0, r6
 80010b8:	f000 fbba 	bl	8001830 <__malloc_unlock>
 80010bc:	f104 000b 	add.w	r0, r4, #11
 80010c0:	1d23      	adds	r3, r4, #4
 80010c2:	f020 0007 	bic.w	r0, r0, #7
 80010c6:	1ac2      	subs	r2, r0, r3
 80010c8:	d0cc      	beq.n	8001064 <_malloc_r+0x20>
 80010ca:	1a1b      	subs	r3, r3, r0
 80010cc:	50a3      	str	r3, [r4, r2]
 80010ce:	e7c9      	b.n	8001064 <_malloc_r+0x20>
 80010d0:	4622      	mov	r2, r4
 80010d2:	6864      	ldr	r4, [r4, #4]
 80010d4:	e7cc      	b.n	8001070 <_malloc_r+0x2c>
 80010d6:	1cc4      	adds	r4, r0, #3
 80010d8:	f024 0403 	bic.w	r4, r4, #3
 80010dc:	42a0      	cmp	r0, r4
 80010de:	d0e3      	beq.n	80010a8 <_malloc_r+0x64>
 80010e0:	1a21      	subs	r1, r4, r0
 80010e2:	4630      	mov	r0, r6
 80010e4:	f000 faf4 	bl	80016d0 <_sbrk_r>
 80010e8:	3001      	adds	r0, #1
 80010ea:	d1dd      	bne.n	80010a8 <_malloc_r+0x64>
 80010ec:	e7cf      	b.n	800108e <_malloc_r+0x4a>
 80010ee:	bf00      	nop
 80010f0:	20000088 	.word	0x20000088
 80010f4:	2000008c 	.word	0x2000008c

080010f8 <__sfputc_r>:
 80010f8:	6893      	ldr	r3, [r2, #8]
 80010fa:	3b01      	subs	r3, #1
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	b410      	push	{r4}
 8001100:	6093      	str	r3, [r2, #8]
 8001102:	da07      	bge.n	8001114 <__sfputc_r+0x1c>
 8001104:	6994      	ldr	r4, [r2, #24]
 8001106:	42a3      	cmp	r3, r4
 8001108:	db01      	blt.n	800110e <__sfputc_r+0x16>
 800110a:	290a      	cmp	r1, #10
 800110c:	d102      	bne.n	8001114 <__sfputc_r+0x1c>
 800110e:	bc10      	pop	{r4}
 8001110:	f7ff bc6c 	b.w	80009ec <__swbuf_r>
 8001114:	6813      	ldr	r3, [r2, #0]
 8001116:	1c58      	adds	r0, r3, #1
 8001118:	6010      	str	r0, [r2, #0]
 800111a:	7019      	strb	r1, [r3, #0]
 800111c:	4608      	mov	r0, r1
 800111e:	bc10      	pop	{r4}
 8001120:	4770      	bx	lr

08001122 <__sfputs_r>:
 8001122:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001124:	4606      	mov	r6, r0
 8001126:	460f      	mov	r7, r1
 8001128:	4614      	mov	r4, r2
 800112a:	18d5      	adds	r5, r2, r3
 800112c:	42ac      	cmp	r4, r5
 800112e:	d101      	bne.n	8001134 <__sfputs_r+0x12>
 8001130:	2000      	movs	r0, #0
 8001132:	e007      	b.n	8001144 <__sfputs_r+0x22>
 8001134:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001138:	463a      	mov	r2, r7
 800113a:	4630      	mov	r0, r6
 800113c:	f7ff ffdc 	bl	80010f8 <__sfputc_r>
 8001140:	1c43      	adds	r3, r0, #1
 8001142:	d1f3      	bne.n	800112c <__sfputs_r+0xa>
 8001144:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001148 <_vfiprintf_r>:
 8001148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800114c:	460d      	mov	r5, r1
 800114e:	b09d      	sub	sp, #116	; 0x74
 8001150:	4614      	mov	r4, r2
 8001152:	4698      	mov	r8, r3
 8001154:	4606      	mov	r6, r0
 8001156:	b118      	cbz	r0, 8001160 <_vfiprintf_r+0x18>
 8001158:	6983      	ldr	r3, [r0, #24]
 800115a:	b90b      	cbnz	r3, 8001160 <_vfiprintf_r+0x18>
 800115c:	f7ff fe20 	bl	8000da0 <__sinit>
 8001160:	4b89      	ldr	r3, [pc, #548]	; (8001388 <_vfiprintf_r+0x240>)
 8001162:	429d      	cmp	r5, r3
 8001164:	d11b      	bne.n	800119e <_vfiprintf_r+0x56>
 8001166:	6875      	ldr	r5, [r6, #4]
 8001168:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800116a:	07d9      	lsls	r1, r3, #31
 800116c:	d405      	bmi.n	800117a <_vfiprintf_r+0x32>
 800116e:	89ab      	ldrh	r3, [r5, #12]
 8001170:	059a      	lsls	r2, r3, #22
 8001172:	d402      	bmi.n	800117a <_vfiprintf_r+0x32>
 8001174:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001176:	f7ff feb1 	bl	8000edc <__retarget_lock_acquire_recursive>
 800117a:	89ab      	ldrh	r3, [r5, #12]
 800117c:	071b      	lsls	r3, r3, #28
 800117e:	d501      	bpl.n	8001184 <_vfiprintf_r+0x3c>
 8001180:	692b      	ldr	r3, [r5, #16]
 8001182:	b9eb      	cbnz	r3, 80011c0 <_vfiprintf_r+0x78>
 8001184:	4629      	mov	r1, r5
 8001186:	4630      	mov	r0, r6
 8001188:	f7ff fc82 	bl	8000a90 <__swsetup_r>
 800118c:	b1c0      	cbz	r0, 80011c0 <_vfiprintf_r+0x78>
 800118e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001190:	07dc      	lsls	r4, r3, #31
 8001192:	d50e      	bpl.n	80011b2 <_vfiprintf_r+0x6a>
 8001194:	f04f 30ff 	mov.w	r0, #4294967295
 8001198:	b01d      	add	sp, #116	; 0x74
 800119a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800119e:	4b7b      	ldr	r3, [pc, #492]	; (800138c <_vfiprintf_r+0x244>)
 80011a0:	429d      	cmp	r5, r3
 80011a2:	d101      	bne.n	80011a8 <_vfiprintf_r+0x60>
 80011a4:	68b5      	ldr	r5, [r6, #8]
 80011a6:	e7df      	b.n	8001168 <_vfiprintf_r+0x20>
 80011a8:	4b79      	ldr	r3, [pc, #484]	; (8001390 <_vfiprintf_r+0x248>)
 80011aa:	429d      	cmp	r5, r3
 80011ac:	bf08      	it	eq
 80011ae:	68f5      	ldreq	r5, [r6, #12]
 80011b0:	e7da      	b.n	8001168 <_vfiprintf_r+0x20>
 80011b2:	89ab      	ldrh	r3, [r5, #12]
 80011b4:	0598      	lsls	r0, r3, #22
 80011b6:	d4ed      	bmi.n	8001194 <_vfiprintf_r+0x4c>
 80011b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80011ba:	f7ff fe90 	bl	8000ede <__retarget_lock_release_recursive>
 80011be:	e7e9      	b.n	8001194 <_vfiprintf_r+0x4c>
 80011c0:	2300      	movs	r3, #0
 80011c2:	9309      	str	r3, [sp, #36]	; 0x24
 80011c4:	2320      	movs	r3, #32
 80011c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80011ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80011ce:	2330      	movs	r3, #48	; 0x30
 80011d0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001394 <_vfiprintf_r+0x24c>
 80011d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80011d8:	f04f 0901 	mov.w	r9, #1
 80011dc:	4623      	mov	r3, r4
 80011de:	469a      	mov	sl, r3
 80011e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80011e4:	b10a      	cbz	r2, 80011ea <_vfiprintf_r+0xa2>
 80011e6:	2a25      	cmp	r2, #37	; 0x25
 80011e8:	d1f9      	bne.n	80011de <_vfiprintf_r+0x96>
 80011ea:	ebba 0b04 	subs.w	fp, sl, r4
 80011ee:	d00b      	beq.n	8001208 <_vfiprintf_r+0xc0>
 80011f0:	465b      	mov	r3, fp
 80011f2:	4622      	mov	r2, r4
 80011f4:	4629      	mov	r1, r5
 80011f6:	4630      	mov	r0, r6
 80011f8:	f7ff ff93 	bl	8001122 <__sfputs_r>
 80011fc:	3001      	adds	r0, #1
 80011fe:	f000 80aa 	beq.w	8001356 <_vfiprintf_r+0x20e>
 8001202:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001204:	445a      	add	r2, fp
 8001206:	9209      	str	r2, [sp, #36]	; 0x24
 8001208:	f89a 3000 	ldrb.w	r3, [sl]
 800120c:	2b00      	cmp	r3, #0
 800120e:	f000 80a2 	beq.w	8001356 <_vfiprintf_r+0x20e>
 8001212:	2300      	movs	r3, #0
 8001214:	f04f 32ff 	mov.w	r2, #4294967295
 8001218:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800121c:	f10a 0a01 	add.w	sl, sl, #1
 8001220:	9304      	str	r3, [sp, #16]
 8001222:	9307      	str	r3, [sp, #28]
 8001224:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001228:	931a      	str	r3, [sp, #104]	; 0x68
 800122a:	4654      	mov	r4, sl
 800122c:	2205      	movs	r2, #5
 800122e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001232:	4858      	ldr	r0, [pc, #352]	; (8001394 <_vfiprintf_r+0x24c>)
 8001234:	f7fe ffec 	bl	8000210 <memchr>
 8001238:	9a04      	ldr	r2, [sp, #16]
 800123a:	b9d8      	cbnz	r0, 8001274 <_vfiprintf_r+0x12c>
 800123c:	06d1      	lsls	r1, r2, #27
 800123e:	bf44      	itt	mi
 8001240:	2320      	movmi	r3, #32
 8001242:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001246:	0713      	lsls	r3, r2, #28
 8001248:	bf44      	itt	mi
 800124a:	232b      	movmi	r3, #43	; 0x2b
 800124c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001250:	f89a 3000 	ldrb.w	r3, [sl]
 8001254:	2b2a      	cmp	r3, #42	; 0x2a
 8001256:	d015      	beq.n	8001284 <_vfiprintf_r+0x13c>
 8001258:	9a07      	ldr	r2, [sp, #28]
 800125a:	4654      	mov	r4, sl
 800125c:	2000      	movs	r0, #0
 800125e:	f04f 0c0a 	mov.w	ip, #10
 8001262:	4621      	mov	r1, r4
 8001264:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001268:	3b30      	subs	r3, #48	; 0x30
 800126a:	2b09      	cmp	r3, #9
 800126c:	d94e      	bls.n	800130c <_vfiprintf_r+0x1c4>
 800126e:	b1b0      	cbz	r0, 800129e <_vfiprintf_r+0x156>
 8001270:	9207      	str	r2, [sp, #28]
 8001272:	e014      	b.n	800129e <_vfiprintf_r+0x156>
 8001274:	eba0 0308 	sub.w	r3, r0, r8
 8001278:	fa09 f303 	lsl.w	r3, r9, r3
 800127c:	4313      	orrs	r3, r2
 800127e:	9304      	str	r3, [sp, #16]
 8001280:	46a2      	mov	sl, r4
 8001282:	e7d2      	b.n	800122a <_vfiprintf_r+0xe2>
 8001284:	9b03      	ldr	r3, [sp, #12]
 8001286:	1d19      	adds	r1, r3, #4
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	9103      	str	r1, [sp, #12]
 800128c:	2b00      	cmp	r3, #0
 800128e:	bfbb      	ittet	lt
 8001290:	425b      	neglt	r3, r3
 8001292:	f042 0202 	orrlt.w	r2, r2, #2
 8001296:	9307      	strge	r3, [sp, #28]
 8001298:	9307      	strlt	r3, [sp, #28]
 800129a:	bfb8      	it	lt
 800129c:	9204      	strlt	r2, [sp, #16]
 800129e:	7823      	ldrb	r3, [r4, #0]
 80012a0:	2b2e      	cmp	r3, #46	; 0x2e
 80012a2:	d10c      	bne.n	80012be <_vfiprintf_r+0x176>
 80012a4:	7863      	ldrb	r3, [r4, #1]
 80012a6:	2b2a      	cmp	r3, #42	; 0x2a
 80012a8:	d135      	bne.n	8001316 <_vfiprintf_r+0x1ce>
 80012aa:	9b03      	ldr	r3, [sp, #12]
 80012ac:	1d1a      	adds	r2, r3, #4
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	9203      	str	r2, [sp, #12]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	bfb8      	it	lt
 80012b6:	f04f 33ff 	movlt.w	r3, #4294967295
 80012ba:	3402      	adds	r4, #2
 80012bc:	9305      	str	r3, [sp, #20]
 80012be:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80013a4 <_vfiprintf_r+0x25c>
 80012c2:	7821      	ldrb	r1, [r4, #0]
 80012c4:	2203      	movs	r2, #3
 80012c6:	4650      	mov	r0, sl
 80012c8:	f7fe ffa2 	bl	8000210 <memchr>
 80012cc:	b140      	cbz	r0, 80012e0 <_vfiprintf_r+0x198>
 80012ce:	2340      	movs	r3, #64	; 0x40
 80012d0:	eba0 000a 	sub.w	r0, r0, sl
 80012d4:	fa03 f000 	lsl.w	r0, r3, r0
 80012d8:	9b04      	ldr	r3, [sp, #16]
 80012da:	4303      	orrs	r3, r0
 80012dc:	3401      	adds	r4, #1
 80012de:	9304      	str	r3, [sp, #16]
 80012e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80012e4:	482c      	ldr	r0, [pc, #176]	; (8001398 <_vfiprintf_r+0x250>)
 80012e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80012ea:	2206      	movs	r2, #6
 80012ec:	f7fe ff90 	bl	8000210 <memchr>
 80012f0:	2800      	cmp	r0, #0
 80012f2:	d03f      	beq.n	8001374 <_vfiprintf_r+0x22c>
 80012f4:	4b29      	ldr	r3, [pc, #164]	; (800139c <_vfiprintf_r+0x254>)
 80012f6:	bb1b      	cbnz	r3, 8001340 <_vfiprintf_r+0x1f8>
 80012f8:	9b03      	ldr	r3, [sp, #12]
 80012fa:	3307      	adds	r3, #7
 80012fc:	f023 0307 	bic.w	r3, r3, #7
 8001300:	3308      	adds	r3, #8
 8001302:	9303      	str	r3, [sp, #12]
 8001304:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001306:	443b      	add	r3, r7
 8001308:	9309      	str	r3, [sp, #36]	; 0x24
 800130a:	e767      	b.n	80011dc <_vfiprintf_r+0x94>
 800130c:	fb0c 3202 	mla	r2, ip, r2, r3
 8001310:	460c      	mov	r4, r1
 8001312:	2001      	movs	r0, #1
 8001314:	e7a5      	b.n	8001262 <_vfiprintf_r+0x11a>
 8001316:	2300      	movs	r3, #0
 8001318:	3401      	adds	r4, #1
 800131a:	9305      	str	r3, [sp, #20]
 800131c:	4619      	mov	r1, r3
 800131e:	f04f 0c0a 	mov.w	ip, #10
 8001322:	4620      	mov	r0, r4
 8001324:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001328:	3a30      	subs	r2, #48	; 0x30
 800132a:	2a09      	cmp	r2, #9
 800132c:	d903      	bls.n	8001336 <_vfiprintf_r+0x1ee>
 800132e:	2b00      	cmp	r3, #0
 8001330:	d0c5      	beq.n	80012be <_vfiprintf_r+0x176>
 8001332:	9105      	str	r1, [sp, #20]
 8001334:	e7c3      	b.n	80012be <_vfiprintf_r+0x176>
 8001336:	fb0c 2101 	mla	r1, ip, r1, r2
 800133a:	4604      	mov	r4, r0
 800133c:	2301      	movs	r3, #1
 800133e:	e7f0      	b.n	8001322 <_vfiprintf_r+0x1da>
 8001340:	ab03      	add	r3, sp, #12
 8001342:	9300      	str	r3, [sp, #0]
 8001344:	462a      	mov	r2, r5
 8001346:	4b16      	ldr	r3, [pc, #88]	; (80013a0 <_vfiprintf_r+0x258>)
 8001348:	a904      	add	r1, sp, #16
 800134a:	4630      	mov	r0, r6
 800134c:	f3af 8000 	nop.w
 8001350:	4607      	mov	r7, r0
 8001352:	1c78      	adds	r0, r7, #1
 8001354:	d1d6      	bne.n	8001304 <_vfiprintf_r+0x1bc>
 8001356:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001358:	07d9      	lsls	r1, r3, #31
 800135a:	d405      	bmi.n	8001368 <_vfiprintf_r+0x220>
 800135c:	89ab      	ldrh	r3, [r5, #12]
 800135e:	059a      	lsls	r2, r3, #22
 8001360:	d402      	bmi.n	8001368 <_vfiprintf_r+0x220>
 8001362:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001364:	f7ff fdbb 	bl	8000ede <__retarget_lock_release_recursive>
 8001368:	89ab      	ldrh	r3, [r5, #12]
 800136a:	065b      	lsls	r3, r3, #25
 800136c:	f53f af12 	bmi.w	8001194 <_vfiprintf_r+0x4c>
 8001370:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001372:	e711      	b.n	8001198 <_vfiprintf_r+0x50>
 8001374:	ab03      	add	r3, sp, #12
 8001376:	9300      	str	r3, [sp, #0]
 8001378:	462a      	mov	r2, r5
 800137a:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <_vfiprintf_r+0x258>)
 800137c:	a904      	add	r1, sp, #16
 800137e:	4630      	mov	r0, r6
 8001380:	f000 f880 	bl	8001484 <_printf_i>
 8001384:	e7e4      	b.n	8001350 <_vfiprintf_r+0x208>
 8001386:	bf00      	nop
 8001388:	080018c8 	.word	0x080018c8
 800138c:	080018e8 	.word	0x080018e8
 8001390:	080018a8 	.word	0x080018a8
 8001394:	08001908 	.word	0x08001908
 8001398:	08001912 	.word	0x08001912
 800139c:	00000000 	.word	0x00000000
 80013a0:	08001123 	.word	0x08001123
 80013a4:	0800190e 	.word	0x0800190e

080013a8 <_printf_common>:
 80013a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80013ac:	4616      	mov	r6, r2
 80013ae:	4699      	mov	r9, r3
 80013b0:	688a      	ldr	r2, [r1, #8]
 80013b2:	690b      	ldr	r3, [r1, #16]
 80013b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80013b8:	4293      	cmp	r3, r2
 80013ba:	bfb8      	it	lt
 80013bc:	4613      	movlt	r3, r2
 80013be:	6033      	str	r3, [r6, #0]
 80013c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80013c4:	4607      	mov	r7, r0
 80013c6:	460c      	mov	r4, r1
 80013c8:	b10a      	cbz	r2, 80013ce <_printf_common+0x26>
 80013ca:	3301      	adds	r3, #1
 80013cc:	6033      	str	r3, [r6, #0]
 80013ce:	6823      	ldr	r3, [r4, #0]
 80013d0:	0699      	lsls	r1, r3, #26
 80013d2:	bf42      	ittt	mi
 80013d4:	6833      	ldrmi	r3, [r6, #0]
 80013d6:	3302      	addmi	r3, #2
 80013d8:	6033      	strmi	r3, [r6, #0]
 80013da:	6825      	ldr	r5, [r4, #0]
 80013dc:	f015 0506 	ands.w	r5, r5, #6
 80013e0:	d106      	bne.n	80013f0 <_printf_common+0x48>
 80013e2:	f104 0a19 	add.w	sl, r4, #25
 80013e6:	68e3      	ldr	r3, [r4, #12]
 80013e8:	6832      	ldr	r2, [r6, #0]
 80013ea:	1a9b      	subs	r3, r3, r2
 80013ec:	42ab      	cmp	r3, r5
 80013ee:	dc26      	bgt.n	800143e <_printf_common+0x96>
 80013f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80013f4:	1e13      	subs	r3, r2, #0
 80013f6:	6822      	ldr	r2, [r4, #0]
 80013f8:	bf18      	it	ne
 80013fa:	2301      	movne	r3, #1
 80013fc:	0692      	lsls	r2, r2, #26
 80013fe:	d42b      	bmi.n	8001458 <_printf_common+0xb0>
 8001400:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001404:	4649      	mov	r1, r9
 8001406:	4638      	mov	r0, r7
 8001408:	47c0      	blx	r8
 800140a:	3001      	adds	r0, #1
 800140c:	d01e      	beq.n	800144c <_printf_common+0xa4>
 800140e:	6823      	ldr	r3, [r4, #0]
 8001410:	68e5      	ldr	r5, [r4, #12]
 8001412:	6832      	ldr	r2, [r6, #0]
 8001414:	f003 0306 	and.w	r3, r3, #6
 8001418:	2b04      	cmp	r3, #4
 800141a:	bf08      	it	eq
 800141c:	1aad      	subeq	r5, r5, r2
 800141e:	68a3      	ldr	r3, [r4, #8]
 8001420:	6922      	ldr	r2, [r4, #16]
 8001422:	bf0c      	ite	eq
 8001424:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001428:	2500      	movne	r5, #0
 800142a:	4293      	cmp	r3, r2
 800142c:	bfc4      	itt	gt
 800142e:	1a9b      	subgt	r3, r3, r2
 8001430:	18ed      	addgt	r5, r5, r3
 8001432:	2600      	movs	r6, #0
 8001434:	341a      	adds	r4, #26
 8001436:	42b5      	cmp	r5, r6
 8001438:	d11a      	bne.n	8001470 <_printf_common+0xc8>
 800143a:	2000      	movs	r0, #0
 800143c:	e008      	b.n	8001450 <_printf_common+0xa8>
 800143e:	2301      	movs	r3, #1
 8001440:	4652      	mov	r2, sl
 8001442:	4649      	mov	r1, r9
 8001444:	4638      	mov	r0, r7
 8001446:	47c0      	blx	r8
 8001448:	3001      	adds	r0, #1
 800144a:	d103      	bne.n	8001454 <_printf_common+0xac>
 800144c:	f04f 30ff 	mov.w	r0, #4294967295
 8001450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001454:	3501      	adds	r5, #1
 8001456:	e7c6      	b.n	80013e6 <_printf_common+0x3e>
 8001458:	18e1      	adds	r1, r4, r3
 800145a:	1c5a      	adds	r2, r3, #1
 800145c:	2030      	movs	r0, #48	; 0x30
 800145e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001462:	4422      	add	r2, r4
 8001464:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001468:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800146c:	3302      	adds	r3, #2
 800146e:	e7c7      	b.n	8001400 <_printf_common+0x58>
 8001470:	2301      	movs	r3, #1
 8001472:	4622      	mov	r2, r4
 8001474:	4649      	mov	r1, r9
 8001476:	4638      	mov	r0, r7
 8001478:	47c0      	blx	r8
 800147a:	3001      	adds	r0, #1
 800147c:	d0e6      	beq.n	800144c <_printf_common+0xa4>
 800147e:	3601      	adds	r6, #1
 8001480:	e7d9      	b.n	8001436 <_printf_common+0x8e>
	...

08001484 <_printf_i>:
 8001484:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001488:	460c      	mov	r4, r1
 800148a:	4691      	mov	r9, r2
 800148c:	7e27      	ldrb	r7, [r4, #24]
 800148e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001490:	2f78      	cmp	r7, #120	; 0x78
 8001492:	4680      	mov	r8, r0
 8001494:	469a      	mov	sl, r3
 8001496:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800149a:	d807      	bhi.n	80014ac <_printf_i+0x28>
 800149c:	2f62      	cmp	r7, #98	; 0x62
 800149e:	d80a      	bhi.n	80014b6 <_printf_i+0x32>
 80014a0:	2f00      	cmp	r7, #0
 80014a2:	f000 80d8 	beq.w	8001656 <_printf_i+0x1d2>
 80014a6:	2f58      	cmp	r7, #88	; 0x58
 80014a8:	f000 80a3 	beq.w	80015f2 <_printf_i+0x16e>
 80014ac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80014b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80014b4:	e03a      	b.n	800152c <_printf_i+0xa8>
 80014b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80014ba:	2b15      	cmp	r3, #21
 80014bc:	d8f6      	bhi.n	80014ac <_printf_i+0x28>
 80014be:	a001      	add	r0, pc, #4	; (adr r0, 80014c4 <_printf_i+0x40>)
 80014c0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80014c4:	0800151d 	.word	0x0800151d
 80014c8:	08001531 	.word	0x08001531
 80014cc:	080014ad 	.word	0x080014ad
 80014d0:	080014ad 	.word	0x080014ad
 80014d4:	080014ad 	.word	0x080014ad
 80014d8:	080014ad 	.word	0x080014ad
 80014dc:	08001531 	.word	0x08001531
 80014e0:	080014ad 	.word	0x080014ad
 80014e4:	080014ad 	.word	0x080014ad
 80014e8:	080014ad 	.word	0x080014ad
 80014ec:	080014ad 	.word	0x080014ad
 80014f0:	0800163d 	.word	0x0800163d
 80014f4:	08001561 	.word	0x08001561
 80014f8:	0800161f 	.word	0x0800161f
 80014fc:	080014ad 	.word	0x080014ad
 8001500:	080014ad 	.word	0x080014ad
 8001504:	0800165f 	.word	0x0800165f
 8001508:	080014ad 	.word	0x080014ad
 800150c:	08001561 	.word	0x08001561
 8001510:	080014ad 	.word	0x080014ad
 8001514:	080014ad 	.word	0x080014ad
 8001518:	08001627 	.word	0x08001627
 800151c:	680b      	ldr	r3, [r1, #0]
 800151e:	1d1a      	adds	r2, r3, #4
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	600a      	str	r2, [r1, #0]
 8001524:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001528:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800152c:	2301      	movs	r3, #1
 800152e:	e0a3      	b.n	8001678 <_printf_i+0x1f4>
 8001530:	6825      	ldr	r5, [r4, #0]
 8001532:	6808      	ldr	r0, [r1, #0]
 8001534:	062e      	lsls	r6, r5, #24
 8001536:	f100 0304 	add.w	r3, r0, #4
 800153a:	d50a      	bpl.n	8001552 <_printf_i+0xce>
 800153c:	6805      	ldr	r5, [r0, #0]
 800153e:	600b      	str	r3, [r1, #0]
 8001540:	2d00      	cmp	r5, #0
 8001542:	da03      	bge.n	800154c <_printf_i+0xc8>
 8001544:	232d      	movs	r3, #45	; 0x2d
 8001546:	426d      	negs	r5, r5
 8001548:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800154c:	485e      	ldr	r0, [pc, #376]	; (80016c8 <_printf_i+0x244>)
 800154e:	230a      	movs	r3, #10
 8001550:	e019      	b.n	8001586 <_printf_i+0x102>
 8001552:	f015 0f40 	tst.w	r5, #64	; 0x40
 8001556:	6805      	ldr	r5, [r0, #0]
 8001558:	600b      	str	r3, [r1, #0]
 800155a:	bf18      	it	ne
 800155c:	b22d      	sxthne	r5, r5
 800155e:	e7ef      	b.n	8001540 <_printf_i+0xbc>
 8001560:	680b      	ldr	r3, [r1, #0]
 8001562:	6825      	ldr	r5, [r4, #0]
 8001564:	1d18      	adds	r0, r3, #4
 8001566:	6008      	str	r0, [r1, #0]
 8001568:	0628      	lsls	r0, r5, #24
 800156a:	d501      	bpl.n	8001570 <_printf_i+0xec>
 800156c:	681d      	ldr	r5, [r3, #0]
 800156e:	e002      	b.n	8001576 <_printf_i+0xf2>
 8001570:	0669      	lsls	r1, r5, #25
 8001572:	d5fb      	bpl.n	800156c <_printf_i+0xe8>
 8001574:	881d      	ldrh	r5, [r3, #0]
 8001576:	4854      	ldr	r0, [pc, #336]	; (80016c8 <_printf_i+0x244>)
 8001578:	2f6f      	cmp	r7, #111	; 0x6f
 800157a:	bf0c      	ite	eq
 800157c:	2308      	moveq	r3, #8
 800157e:	230a      	movne	r3, #10
 8001580:	2100      	movs	r1, #0
 8001582:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001586:	6866      	ldr	r6, [r4, #4]
 8001588:	60a6      	str	r6, [r4, #8]
 800158a:	2e00      	cmp	r6, #0
 800158c:	bfa2      	ittt	ge
 800158e:	6821      	ldrge	r1, [r4, #0]
 8001590:	f021 0104 	bicge.w	r1, r1, #4
 8001594:	6021      	strge	r1, [r4, #0]
 8001596:	b90d      	cbnz	r5, 800159c <_printf_i+0x118>
 8001598:	2e00      	cmp	r6, #0
 800159a:	d04d      	beq.n	8001638 <_printf_i+0x1b4>
 800159c:	4616      	mov	r6, r2
 800159e:	fbb5 f1f3 	udiv	r1, r5, r3
 80015a2:	fb03 5711 	mls	r7, r3, r1, r5
 80015a6:	5dc7      	ldrb	r7, [r0, r7]
 80015a8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80015ac:	462f      	mov	r7, r5
 80015ae:	42bb      	cmp	r3, r7
 80015b0:	460d      	mov	r5, r1
 80015b2:	d9f4      	bls.n	800159e <_printf_i+0x11a>
 80015b4:	2b08      	cmp	r3, #8
 80015b6:	d10b      	bne.n	80015d0 <_printf_i+0x14c>
 80015b8:	6823      	ldr	r3, [r4, #0]
 80015ba:	07df      	lsls	r7, r3, #31
 80015bc:	d508      	bpl.n	80015d0 <_printf_i+0x14c>
 80015be:	6923      	ldr	r3, [r4, #16]
 80015c0:	6861      	ldr	r1, [r4, #4]
 80015c2:	4299      	cmp	r1, r3
 80015c4:	bfde      	ittt	le
 80015c6:	2330      	movle	r3, #48	; 0x30
 80015c8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80015cc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80015d0:	1b92      	subs	r2, r2, r6
 80015d2:	6122      	str	r2, [r4, #16]
 80015d4:	f8cd a000 	str.w	sl, [sp]
 80015d8:	464b      	mov	r3, r9
 80015da:	aa03      	add	r2, sp, #12
 80015dc:	4621      	mov	r1, r4
 80015de:	4640      	mov	r0, r8
 80015e0:	f7ff fee2 	bl	80013a8 <_printf_common>
 80015e4:	3001      	adds	r0, #1
 80015e6:	d14c      	bne.n	8001682 <_printf_i+0x1fe>
 80015e8:	f04f 30ff 	mov.w	r0, #4294967295
 80015ec:	b004      	add	sp, #16
 80015ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80015f2:	4835      	ldr	r0, [pc, #212]	; (80016c8 <_printf_i+0x244>)
 80015f4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80015f8:	6823      	ldr	r3, [r4, #0]
 80015fa:	680e      	ldr	r6, [r1, #0]
 80015fc:	061f      	lsls	r7, r3, #24
 80015fe:	f856 5b04 	ldr.w	r5, [r6], #4
 8001602:	600e      	str	r6, [r1, #0]
 8001604:	d514      	bpl.n	8001630 <_printf_i+0x1ac>
 8001606:	07d9      	lsls	r1, r3, #31
 8001608:	bf44      	itt	mi
 800160a:	f043 0320 	orrmi.w	r3, r3, #32
 800160e:	6023      	strmi	r3, [r4, #0]
 8001610:	b91d      	cbnz	r5, 800161a <_printf_i+0x196>
 8001612:	6823      	ldr	r3, [r4, #0]
 8001614:	f023 0320 	bic.w	r3, r3, #32
 8001618:	6023      	str	r3, [r4, #0]
 800161a:	2310      	movs	r3, #16
 800161c:	e7b0      	b.n	8001580 <_printf_i+0xfc>
 800161e:	6823      	ldr	r3, [r4, #0]
 8001620:	f043 0320 	orr.w	r3, r3, #32
 8001624:	6023      	str	r3, [r4, #0]
 8001626:	2378      	movs	r3, #120	; 0x78
 8001628:	4828      	ldr	r0, [pc, #160]	; (80016cc <_printf_i+0x248>)
 800162a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800162e:	e7e3      	b.n	80015f8 <_printf_i+0x174>
 8001630:	065e      	lsls	r6, r3, #25
 8001632:	bf48      	it	mi
 8001634:	b2ad      	uxthmi	r5, r5
 8001636:	e7e6      	b.n	8001606 <_printf_i+0x182>
 8001638:	4616      	mov	r6, r2
 800163a:	e7bb      	b.n	80015b4 <_printf_i+0x130>
 800163c:	680b      	ldr	r3, [r1, #0]
 800163e:	6826      	ldr	r6, [r4, #0]
 8001640:	6960      	ldr	r0, [r4, #20]
 8001642:	1d1d      	adds	r5, r3, #4
 8001644:	600d      	str	r5, [r1, #0]
 8001646:	0635      	lsls	r5, r6, #24
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	d501      	bpl.n	8001650 <_printf_i+0x1cc>
 800164c:	6018      	str	r0, [r3, #0]
 800164e:	e002      	b.n	8001656 <_printf_i+0x1d2>
 8001650:	0671      	lsls	r1, r6, #25
 8001652:	d5fb      	bpl.n	800164c <_printf_i+0x1c8>
 8001654:	8018      	strh	r0, [r3, #0]
 8001656:	2300      	movs	r3, #0
 8001658:	6123      	str	r3, [r4, #16]
 800165a:	4616      	mov	r6, r2
 800165c:	e7ba      	b.n	80015d4 <_printf_i+0x150>
 800165e:	680b      	ldr	r3, [r1, #0]
 8001660:	1d1a      	adds	r2, r3, #4
 8001662:	600a      	str	r2, [r1, #0]
 8001664:	681e      	ldr	r6, [r3, #0]
 8001666:	6862      	ldr	r2, [r4, #4]
 8001668:	2100      	movs	r1, #0
 800166a:	4630      	mov	r0, r6
 800166c:	f7fe fdd0 	bl	8000210 <memchr>
 8001670:	b108      	cbz	r0, 8001676 <_printf_i+0x1f2>
 8001672:	1b80      	subs	r0, r0, r6
 8001674:	6060      	str	r0, [r4, #4]
 8001676:	6863      	ldr	r3, [r4, #4]
 8001678:	6123      	str	r3, [r4, #16]
 800167a:	2300      	movs	r3, #0
 800167c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001680:	e7a8      	b.n	80015d4 <_printf_i+0x150>
 8001682:	6923      	ldr	r3, [r4, #16]
 8001684:	4632      	mov	r2, r6
 8001686:	4649      	mov	r1, r9
 8001688:	4640      	mov	r0, r8
 800168a:	47d0      	blx	sl
 800168c:	3001      	adds	r0, #1
 800168e:	d0ab      	beq.n	80015e8 <_printf_i+0x164>
 8001690:	6823      	ldr	r3, [r4, #0]
 8001692:	079b      	lsls	r3, r3, #30
 8001694:	d413      	bmi.n	80016be <_printf_i+0x23a>
 8001696:	68e0      	ldr	r0, [r4, #12]
 8001698:	9b03      	ldr	r3, [sp, #12]
 800169a:	4298      	cmp	r0, r3
 800169c:	bfb8      	it	lt
 800169e:	4618      	movlt	r0, r3
 80016a0:	e7a4      	b.n	80015ec <_printf_i+0x168>
 80016a2:	2301      	movs	r3, #1
 80016a4:	4632      	mov	r2, r6
 80016a6:	4649      	mov	r1, r9
 80016a8:	4640      	mov	r0, r8
 80016aa:	47d0      	blx	sl
 80016ac:	3001      	adds	r0, #1
 80016ae:	d09b      	beq.n	80015e8 <_printf_i+0x164>
 80016b0:	3501      	adds	r5, #1
 80016b2:	68e3      	ldr	r3, [r4, #12]
 80016b4:	9903      	ldr	r1, [sp, #12]
 80016b6:	1a5b      	subs	r3, r3, r1
 80016b8:	42ab      	cmp	r3, r5
 80016ba:	dcf2      	bgt.n	80016a2 <_printf_i+0x21e>
 80016bc:	e7eb      	b.n	8001696 <_printf_i+0x212>
 80016be:	2500      	movs	r5, #0
 80016c0:	f104 0619 	add.w	r6, r4, #25
 80016c4:	e7f5      	b.n	80016b2 <_printf_i+0x22e>
 80016c6:	bf00      	nop
 80016c8:	08001919 	.word	0x08001919
 80016cc:	0800192a 	.word	0x0800192a

080016d0 <_sbrk_r>:
 80016d0:	b538      	push	{r3, r4, r5, lr}
 80016d2:	4d06      	ldr	r5, [pc, #24]	; (80016ec <_sbrk_r+0x1c>)
 80016d4:	2300      	movs	r3, #0
 80016d6:	4604      	mov	r4, r0
 80016d8:	4608      	mov	r0, r1
 80016da:	602b      	str	r3, [r5, #0]
 80016dc:	f7fe ff68 	bl	80005b0 <_sbrk>
 80016e0:	1c43      	adds	r3, r0, #1
 80016e2:	d102      	bne.n	80016ea <_sbrk_r+0x1a>
 80016e4:	682b      	ldr	r3, [r5, #0]
 80016e6:	b103      	cbz	r3, 80016ea <_sbrk_r+0x1a>
 80016e8:	6023      	str	r3, [r4, #0]
 80016ea:	bd38      	pop	{r3, r4, r5, pc}
 80016ec:	200000a4 	.word	0x200000a4

080016f0 <__sread>:
 80016f0:	b510      	push	{r4, lr}
 80016f2:	460c      	mov	r4, r1
 80016f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80016f8:	f000 f8a0 	bl	800183c <_read_r>
 80016fc:	2800      	cmp	r0, #0
 80016fe:	bfab      	itete	ge
 8001700:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001702:	89a3      	ldrhlt	r3, [r4, #12]
 8001704:	181b      	addge	r3, r3, r0
 8001706:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800170a:	bfac      	ite	ge
 800170c:	6563      	strge	r3, [r4, #84]	; 0x54
 800170e:	81a3      	strhlt	r3, [r4, #12]
 8001710:	bd10      	pop	{r4, pc}

08001712 <__swrite>:
 8001712:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001716:	461f      	mov	r7, r3
 8001718:	898b      	ldrh	r3, [r1, #12]
 800171a:	05db      	lsls	r3, r3, #23
 800171c:	4605      	mov	r5, r0
 800171e:	460c      	mov	r4, r1
 8001720:	4616      	mov	r6, r2
 8001722:	d505      	bpl.n	8001730 <__swrite+0x1e>
 8001724:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001728:	2302      	movs	r3, #2
 800172a:	2200      	movs	r2, #0
 800172c:	f000 f868 	bl	8001800 <_lseek_r>
 8001730:	89a3      	ldrh	r3, [r4, #12]
 8001732:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001736:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800173a:	81a3      	strh	r3, [r4, #12]
 800173c:	4632      	mov	r2, r6
 800173e:	463b      	mov	r3, r7
 8001740:	4628      	mov	r0, r5
 8001742:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001746:	f000 b817 	b.w	8001778 <_write_r>

0800174a <__sseek>:
 800174a:	b510      	push	{r4, lr}
 800174c:	460c      	mov	r4, r1
 800174e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001752:	f000 f855 	bl	8001800 <_lseek_r>
 8001756:	1c43      	adds	r3, r0, #1
 8001758:	89a3      	ldrh	r3, [r4, #12]
 800175a:	bf15      	itete	ne
 800175c:	6560      	strne	r0, [r4, #84]	; 0x54
 800175e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001762:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001766:	81a3      	strheq	r3, [r4, #12]
 8001768:	bf18      	it	ne
 800176a:	81a3      	strhne	r3, [r4, #12]
 800176c:	bd10      	pop	{r4, pc}

0800176e <__sclose>:
 800176e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001772:	f000 b813 	b.w	800179c <_close_r>
	...

08001778 <_write_r>:
 8001778:	b538      	push	{r3, r4, r5, lr}
 800177a:	4d07      	ldr	r5, [pc, #28]	; (8001798 <_write_r+0x20>)
 800177c:	4604      	mov	r4, r0
 800177e:	4608      	mov	r0, r1
 8001780:	4611      	mov	r1, r2
 8001782:	2200      	movs	r2, #0
 8001784:	602a      	str	r2, [r5, #0]
 8001786:	461a      	mov	r2, r3
 8001788:	f7fe fec5 	bl	8000516 <_write>
 800178c:	1c43      	adds	r3, r0, #1
 800178e:	d102      	bne.n	8001796 <_write_r+0x1e>
 8001790:	682b      	ldr	r3, [r5, #0]
 8001792:	b103      	cbz	r3, 8001796 <_write_r+0x1e>
 8001794:	6023      	str	r3, [r4, #0]
 8001796:	bd38      	pop	{r3, r4, r5, pc}
 8001798:	200000a4 	.word	0x200000a4

0800179c <_close_r>:
 800179c:	b538      	push	{r3, r4, r5, lr}
 800179e:	4d06      	ldr	r5, [pc, #24]	; (80017b8 <_close_r+0x1c>)
 80017a0:	2300      	movs	r3, #0
 80017a2:	4604      	mov	r4, r0
 80017a4:	4608      	mov	r0, r1
 80017a6:	602b      	str	r3, [r5, #0]
 80017a8:	f7fe fed1 	bl	800054e <_close>
 80017ac:	1c43      	adds	r3, r0, #1
 80017ae:	d102      	bne.n	80017b6 <_close_r+0x1a>
 80017b0:	682b      	ldr	r3, [r5, #0]
 80017b2:	b103      	cbz	r3, 80017b6 <_close_r+0x1a>
 80017b4:	6023      	str	r3, [r4, #0]
 80017b6:	bd38      	pop	{r3, r4, r5, pc}
 80017b8:	200000a4 	.word	0x200000a4

080017bc <_fstat_r>:
 80017bc:	b538      	push	{r3, r4, r5, lr}
 80017be:	4d07      	ldr	r5, [pc, #28]	; (80017dc <_fstat_r+0x20>)
 80017c0:	2300      	movs	r3, #0
 80017c2:	4604      	mov	r4, r0
 80017c4:	4608      	mov	r0, r1
 80017c6:	4611      	mov	r1, r2
 80017c8:	602b      	str	r3, [r5, #0]
 80017ca:	f7fe fecb 	bl	8000564 <_fstat>
 80017ce:	1c43      	adds	r3, r0, #1
 80017d0:	d102      	bne.n	80017d8 <_fstat_r+0x1c>
 80017d2:	682b      	ldr	r3, [r5, #0]
 80017d4:	b103      	cbz	r3, 80017d8 <_fstat_r+0x1c>
 80017d6:	6023      	str	r3, [r4, #0]
 80017d8:	bd38      	pop	{r3, r4, r5, pc}
 80017da:	bf00      	nop
 80017dc:	200000a4 	.word	0x200000a4

080017e0 <_isatty_r>:
 80017e0:	b538      	push	{r3, r4, r5, lr}
 80017e2:	4d06      	ldr	r5, [pc, #24]	; (80017fc <_isatty_r+0x1c>)
 80017e4:	2300      	movs	r3, #0
 80017e6:	4604      	mov	r4, r0
 80017e8:	4608      	mov	r0, r1
 80017ea:	602b      	str	r3, [r5, #0]
 80017ec:	f7fe fec9 	bl	8000582 <_isatty>
 80017f0:	1c43      	adds	r3, r0, #1
 80017f2:	d102      	bne.n	80017fa <_isatty_r+0x1a>
 80017f4:	682b      	ldr	r3, [r5, #0]
 80017f6:	b103      	cbz	r3, 80017fa <_isatty_r+0x1a>
 80017f8:	6023      	str	r3, [r4, #0]
 80017fa:	bd38      	pop	{r3, r4, r5, pc}
 80017fc:	200000a4 	.word	0x200000a4

08001800 <_lseek_r>:
 8001800:	b538      	push	{r3, r4, r5, lr}
 8001802:	4d07      	ldr	r5, [pc, #28]	; (8001820 <_lseek_r+0x20>)
 8001804:	4604      	mov	r4, r0
 8001806:	4608      	mov	r0, r1
 8001808:	4611      	mov	r1, r2
 800180a:	2200      	movs	r2, #0
 800180c:	602a      	str	r2, [r5, #0]
 800180e:	461a      	mov	r2, r3
 8001810:	f7fe fec1 	bl	8000596 <_lseek>
 8001814:	1c43      	adds	r3, r0, #1
 8001816:	d102      	bne.n	800181e <_lseek_r+0x1e>
 8001818:	682b      	ldr	r3, [r5, #0]
 800181a:	b103      	cbz	r3, 800181e <_lseek_r+0x1e>
 800181c:	6023      	str	r3, [r4, #0]
 800181e:	bd38      	pop	{r3, r4, r5, pc}
 8001820:	200000a4 	.word	0x200000a4

08001824 <__malloc_lock>:
 8001824:	4801      	ldr	r0, [pc, #4]	; (800182c <__malloc_lock+0x8>)
 8001826:	f7ff bb59 	b.w	8000edc <__retarget_lock_acquire_recursive>
 800182a:	bf00      	nop
 800182c:	2000009c 	.word	0x2000009c

08001830 <__malloc_unlock>:
 8001830:	4801      	ldr	r0, [pc, #4]	; (8001838 <__malloc_unlock+0x8>)
 8001832:	f7ff bb54 	b.w	8000ede <__retarget_lock_release_recursive>
 8001836:	bf00      	nop
 8001838:	2000009c 	.word	0x2000009c

0800183c <_read_r>:
 800183c:	b538      	push	{r3, r4, r5, lr}
 800183e:	4d07      	ldr	r5, [pc, #28]	; (800185c <_read_r+0x20>)
 8001840:	4604      	mov	r4, r0
 8001842:	4608      	mov	r0, r1
 8001844:	4611      	mov	r1, r2
 8001846:	2200      	movs	r2, #0
 8001848:	602a      	str	r2, [r5, #0]
 800184a:	461a      	mov	r2, r3
 800184c:	f7fe fe46 	bl	80004dc <_read>
 8001850:	1c43      	adds	r3, r0, #1
 8001852:	d102      	bne.n	800185a <_read_r+0x1e>
 8001854:	682b      	ldr	r3, [r5, #0]
 8001856:	b103      	cbz	r3, 800185a <_read_r+0x1e>
 8001858:	6023      	str	r3, [r4, #0]
 800185a:	bd38      	pop	{r3, r4, r5, pc}
 800185c:	200000a4 	.word	0x200000a4

08001860 <_init>:
 8001860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001862:	bf00      	nop
 8001864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001866:	bc08      	pop	{r3}
 8001868:	469e      	mov	lr, r3
 800186a:	4770      	bx	lr

0800186c <_fini>:
 800186c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800186e:	bf00      	nop
 8001870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001872:	bc08      	pop	{r3}
 8001874:	469e      	mov	lr, r3
 8001876:	4770      	bx	lr

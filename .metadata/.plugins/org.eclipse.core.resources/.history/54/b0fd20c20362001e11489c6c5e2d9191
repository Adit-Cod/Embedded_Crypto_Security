
4_system_driver-GPIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ec8  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  0800108c  0800108c  0001108c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800110c  0800110c  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  0800110c  0800110c  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800110c  0800110c  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800110c  0800110c  0001110c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001110  08001110  00011110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001114  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  20000064  08001178  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  08001178  000200a4  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000032a4  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000ad7  00000000  00000000  00023332  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001f0  00000000  00000000  00023e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000178  00000000  00000000  00024000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001acbd  00000000  00000000  00024178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002bba  00000000  00000000  0003ee35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090daf  00000000  00000000  000419ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d279e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c28  00000000  00000000  000d27f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000064 	.word	0x20000064
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08001074 	.word	0x08001074

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000068 	.word	0x20000068
 8000200:	08001074 	.word	0x08001074

08000204 <led_init>:

#include "bsp.h"


void led_init(void)
{
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0
	/* Provide Clock Access to the respective Peripheral */
	/* GPIO A for stm32f44xx */

	    RCC->AHB1ENR |= GPIOAEN;
 8000208:	4b0a      	ldr	r3, [pc, #40]	; (8000234 <led_init+0x30>)
 800020a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800020c:	4a09      	ldr	r2, [pc, #36]	; (8000234 <led_init+0x30>)
 800020e:	f043 0301 	orr.w	r3, r3, #1
 8000212:	6313      	str	r3, [r2, #48]	; 0x30
	    GPIOA->MODER |= (1U<<10);
 8000214:	4b08      	ldr	r3, [pc, #32]	; (8000238 <led_init+0x34>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a07      	ldr	r2, [pc, #28]	; (8000238 <led_init+0x34>)
 800021a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800021e:	6013      	str	r3, [r2, #0]
	    GPIOA->MODER &= ~(1U<<11);
 8000220:	4b05      	ldr	r3, [pc, #20]	; (8000238 <led_init+0x34>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a04      	ldr	r2, [pc, #16]	; (8000238 <led_init+0x34>)
 8000226:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800022a:	6013      	str	r3, [r2, #0]
}
 800022c:	bf00      	nop
 800022e:	46bd      	mov	sp, r7
 8000230:	bc80      	pop	{r7}
 8000232:	4770      	bx	lr
 8000234:	40023800 	.word	0x40023800
 8000238:	40020000 	.word	0x40020000

0800023c <led_on>:

void led_on(void)
{
 800023c:	b480      	push	{r7}
 800023e:	af00      	add	r7, sp, #0
	/* Set the Pin High */
	GPIOA->ODR |= GPIO_ENABLE;
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <led_on+0x18>)
 8000242:	695b      	ldr	r3, [r3, #20]
 8000244:	4a03      	ldr	r2, [pc, #12]	; (8000254 <led_on+0x18>)
 8000246:	f043 0320 	orr.w	r3, r3, #32
 800024a:	6153      	str	r3, [r2, #20]
}
 800024c:	bf00      	nop
 800024e:	46bd      	mov	sp, r7
 8000250:	bc80      	pop	{r7}
 8000252:	4770      	bx	lr
 8000254:	40020000 	.word	0x40020000

08000258 <led_off>:

void led_off(void)
{
 8000258:	b480      	push	{r7}
 800025a:	af00      	add	r7, sp, #0
	/* Set the Pin Low */
	GPIOA->ODR |= GPIO_DISABLE;
 800025c:	4b04      	ldr	r3, [pc, #16]	; (8000270 <led_off+0x18>)
 800025e:	695b      	ldr	r3, [r3, #20]
 8000260:	4a03      	ldr	r2, [pc, #12]	; (8000270 <led_off+0x18>)
 8000262:	f063 0320 	orn	r3, r3, #32
 8000266:	6153      	str	r3, [r2, #20]
}
 8000268:	bf00      	nop
 800026a:	46bd      	mov	sp, r7
 800026c:	bc80      	pop	{r7}
 800026e:	4770      	bx	lr
 8000270:	40020000 	.word	0x40020000

08000274 <button_init>:

void button_init(void)
{
 8000274:	b480      	push	{r7}
 8000276:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= GPIOCEN;
 8000278:	4b0a      	ldr	r3, [pc, #40]	; (80002a4 <button_init+0x30>)
 800027a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800027c:	4a09      	ldr	r2, [pc, #36]	; (80002a4 <button_init+0x30>)
 800027e:	f043 0304 	orr.w	r3, r3, #4
 8000282:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOC->MODER &=  ~(1<<26);
 8000284:	4b08      	ldr	r3, [pc, #32]	; (80002a8 <button_init+0x34>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a07      	ldr	r2, [pc, #28]	; (80002a8 <button_init+0x34>)
 800028a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800028e:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &=  ~(1<<27);
 8000290:	4b05      	ldr	r3, [pc, #20]	; (80002a8 <button_init+0x34>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a04      	ldr	r2, [pc, #16]	; (80002a8 <button_init+0x34>)
 8000296:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800029a:	6013      	str	r3, [r2, #0]

}
 800029c:	bf00      	nop
 800029e:	46bd      	mov	sp, r7
 80002a0:	bc80      	pop	{r7}
 80002a2:	4770      	bx	lr
 80002a4:	40023800 	.word	0x40023800
 80002a8:	40020800 	.word	0x40020800

080002ac <get_buttonState>:

bool get_buttonState(void)
{
 80002ac:	b480      	push	{r7}
 80002ae:	af00      	add	r7, sp, #0
     if(GPIOC->IDR & GPIOBTN_PIN)
 80002b0:	4b06      	ldr	r3, [pc, #24]	; (80002cc <get_buttonState+0x20>)
 80002b2:	691b      	ldr	r3, [r3, #16]
 80002b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d001      	beq.n	80002c0 <get_buttonState+0x14>
    	 return false;
 80002bc:	2300      	movs	r3, #0
 80002be:	e000      	b.n	80002c2 <get_buttonState+0x16>

     return true;
 80002c0:	2301      	movs	r3, #1
}
 80002c2:	4618      	mov	r0, r3
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bc80      	pop	{r7}
 80002c8:	4770      	bx	lr
 80002ca:	bf00      	nop
 80002cc:	40020800 	.word	0x40020800

080002d0 <fpu_enable>:

#include "fpu.h"


void fpu_enable(void)
{
 80002d0:	b480      	push	{r7}
 80002d2:	af00      	add	r7, sp, #0
	/* Enable Floating Point Unit: Enable CP10 and CP11 Full Access! */
	 SCB->CPACR |= (1<<20);
 80002d4:	4b11      	ldr	r3, [pc, #68]	; (800031c <fpu_enable+0x4c>)
 80002d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002da:	4a10      	ldr	r2, [pc, #64]	; (800031c <fpu_enable+0x4c>)
 80002dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	 SCB->CPACR |= (1<<21);
 80002e4:	4b0d      	ldr	r3, [pc, #52]	; (800031c <fpu_enable+0x4c>)
 80002e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002ea:	4a0c      	ldr	r2, [pc, #48]	; (800031c <fpu_enable+0x4c>)
 80002ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80002f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	 SCB->CPACR |= (1<<22);
 80002f4:	4b09      	ldr	r3, [pc, #36]	; (800031c <fpu_enable+0x4c>)
 80002f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002fa:	4a08      	ldr	r2, [pc, #32]	; (800031c <fpu_enable+0x4c>)
 80002fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000300:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	 SCB->CPACR |= (1<<23);
 8000304:	4b05      	ldr	r3, [pc, #20]	; (800031c <fpu_enable+0x4c>)
 8000306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800030a:	4a04      	ldr	r2, [pc, #16]	; (800031c <fpu_enable+0x4c>)
 800030c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000310:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8000314:	bf00      	nop
 8000316:	46bd      	mov	sp, r7
 8000318:	bc80      	pop	{r7}
 800031a:	4770      	bx	lr
 800031c:	e000ed00 	.word	0xe000ed00

08000320 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
	/* Enable FPU */
	fpu_enable();
 8000324:	f7ff ffd4 	bl	80002d0 <fpu_enable>
    /* initialize UART */
	uart_init();
 8000328:	f000 f8f2 	bl	8000510 <uart_init>
	/* Initialize timer */
	timer_init();
 800032c:	f000 f8c4 	bl	80004b8 <timer_init>
    /* Initialize button and led */
	led_init();
 8000330:	f7ff ff68 	bl	8000204 <led_init>

	button_init();
 8000334:	f7ff ff9e 	bl	8000274 <button_init>
	led_on();
 8000338:	f7ff ff80 	bl	800023c <led_on>
	printf("Testing the GPIO Module!\r\n");
 800033c:	4806      	ldr	r0, [pc, #24]	; (8000358 <main+0x38>)
 800033e:	f000 fa43 	bl	80007c8 <puts>
	while(1)
	{
		if(get_buttonState() == true)
 8000342:	f7ff ffb3 	bl	80002ac <get_buttonState>
 8000346:	4603      	mov	r3, r0
 8000348:	2b00      	cmp	r3, #0
 800034a:	d002      	beq.n	8000352 <main+0x32>
			led_on();
 800034c:	f7ff ff76 	bl	800023c <led_on>
 8000350:	e7f7      	b.n	8000342 <main+0x22>
		else
			led_off();
 8000352:	f7ff ff81 	bl	8000258 <led_off>
		if(get_buttonState() == true)
 8000356:	e7f4      	b.n	8000342 <main+0x22>
 8000358:	0800108c 	.word	0x0800108c

0800035c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b086      	sub	sp, #24
 8000360:	af00      	add	r7, sp, #0
 8000362:	60f8      	str	r0, [r7, #12]
 8000364:	60b9      	str	r1, [r7, #8]
 8000366:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000368:	2300      	movs	r3, #0
 800036a:	617b      	str	r3, [r7, #20]
 800036c:	e00a      	b.n	8000384 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800036e:	f3af 8000 	nop.w
 8000372:	4601      	mov	r1, r0
 8000374:	68bb      	ldr	r3, [r7, #8]
 8000376:	1c5a      	adds	r2, r3, #1
 8000378:	60ba      	str	r2, [r7, #8]
 800037a:	b2ca      	uxtb	r2, r1
 800037c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800037e:	697b      	ldr	r3, [r7, #20]
 8000380:	3301      	adds	r3, #1
 8000382:	617b      	str	r3, [r7, #20]
 8000384:	697a      	ldr	r2, [r7, #20]
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	429a      	cmp	r2, r3
 800038a:	dbf0      	blt.n	800036e <_read+0x12>
	}

return len;
 800038c:	687b      	ldr	r3, [r7, #4]
}
 800038e:	4618      	mov	r0, r3
 8000390:	3718      	adds	r7, #24
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}

08000396 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000396:	b580      	push	{r7, lr}
 8000398:	b086      	sub	sp, #24
 800039a:	af00      	add	r7, sp, #0
 800039c:	60f8      	str	r0, [r7, #12]
 800039e:	60b9      	str	r1, [r7, #8]
 80003a0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003a2:	2300      	movs	r3, #0
 80003a4:	617b      	str	r3, [r7, #20]
 80003a6:	e009      	b.n	80003bc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80003a8:	68bb      	ldr	r3, [r7, #8]
 80003aa:	1c5a      	adds	r2, r3, #1
 80003ac:	60ba      	str	r2, [r7, #8]
 80003ae:	781b      	ldrb	r3, [r3, #0]
 80003b0:	4618      	mov	r0, r3
 80003b2:	f000 f91d 	bl	80005f0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003b6:	697b      	ldr	r3, [r7, #20]
 80003b8:	3301      	adds	r3, #1
 80003ba:	617b      	str	r3, [r7, #20]
 80003bc:	697a      	ldr	r2, [r7, #20]
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	429a      	cmp	r2, r3
 80003c2:	dbf1      	blt.n	80003a8 <_write+0x12>
	}
	return len;
 80003c4:	687b      	ldr	r3, [r7, #4]
}
 80003c6:	4618      	mov	r0, r3
 80003c8:	3718      	adds	r7, #24
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bd80      	pop	{r7, pc}

080003ce <_close>:

int _close(int file)
{
 80003ce:	b480      	push	{r7}
 80003d0:	b083      	sub	sp, #12
 80003d2:	af00      	add	r7, sp, #0
 80003d4:	6078      	str	r0, [r7, #4]
	return -1;
 80003d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80003da:	4618      	mov	r0, r3
 80003dc:	370c      	adds	r7, #12
 80003de:	46bd      	mov	sp, r7
 80003e0:	bc80      	pop	{r7}
 80003e2:	4770      	bx	lr

080003e4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80003e4:	b480      	push	{r7}
 80003e6:	b083      	sub	sp, #12
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
 80003ec:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80003ee:	683b      	ldr	r3, [r7, #0]
 80003f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80003f4:	605a      	str	r2, [r3, #4]
	return 0;
 80003f6:	2300      	movs	r3, #0
}
 80003f8:	4618      	mov	r0, r3
 80003fa:	370c      	adds	r7, #12
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bc80      	pop	{r7}
 8000400:	4770      	bx	lr

08000402 <_isatty>:

int _isatty(int file)
{
 8000402:	b480      	push	{r7}
 8000404:	b083      	sub	sp, #12
 8000406:	af00      	add	r7, sp, #0
 8000408:	6078      	str	r0, [r7, #4]
	return 1;
 800040a:	2301      	movs	r3, #1
}
 800040c:	4618      	mov	r0, r3
 800040e:	370c      	adds	r7, #12
 8000410:	46bd      	mov	sp, r7
 8000412:	bc80      	pop	{r7}
 8000414:	4770      	bx	lr

08000416 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000416:	b480      	push	{r7}
 8000418:	b085      	sub	sp, #20
 800041a:	af00      	add	r7, sp, #0
 800041c:	60f8      	str	r0, [r7, #12]
 800041e:	60b9      	str	r1, [r7, #8]
 8000420:	607a      	str	r2, [r7, #4]
	return 0;
 8000422:	2300      	movs	r3, #0
}
 8000424:	4618      	mov	r0, r3
 8000426:	3714      	adds	r7, #20
 8000428:	46bd      	mov	sp, r7
 800042a:	bc80      	pop	{r7}
 800042c:	4770      	bx	lr
	...

08000430 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b086      	sub	sp, #24
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000438:	4a14      	ldr	r2, [pc, #80]	; (800048c <_sbrk+0x5c>)
 800043a:	4b15      	ldr	r3, [pc, #84]	; (8000490 <_sbrk+0x60>)
 800043c:	1ad3      	subs	r3, r2, r3
 800043e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000440:	697b      	ldr	r3, [r7, #20]
 8000442:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000444:	4b13      	ldr	r3, [pc, #76]	; (8000494 <_sbrk+0x64>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	2b00      	cmp	r3, #0
 800044a:	d102      	bne.n	8000452 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800044c:	4b11      	ldr	r3, [pc, #68]	; (8000494 <_sbrk+0x64>)
 800044e:	4a12      	ldr	r2, [pc, #72]	; (8000498 <_sbrk+0x68>)
 8000450:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000452:	4b10      	ldr	r3, [pc, #64]	; (8000494 <_sbrk+0x64>)
 8000454:	681a      	ldr	r2, [r3, #0]
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	4413      	add	r3, r2
 800045a:	693a      	ldr	r2, [r7, #16]
 800045c:	429a      	cmp	r2, r3
 800045e:	d207      	bcs.n	8000470 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000460:	f000 f912 	bl	8000688 <__errno>
 8000464:	4603      	mov	r3, r0
 8000466:	220c      	movs	r2, #12
 8000468:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800046a:	f04f 33ff 	mov.w	r3, #4294967295
 800046e:	e009      	b.n	8000484 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000470:	4b08      	ldr	r3, [pc, #32]	; (8000494 <_sbrk+0x64>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000476:	4b07      	ldr	r3, [pc, #28]	; (8000494 <_sbrk+0x64>)
 8000478:	681a      	ldr	r2, [r3, #0]
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	4413      	add	r3, r2
 800047e:	4a05      	ldr	r2, [pc, #20]	; (8000494 <_sbrk+0x64>)
 8000480:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000482:	68fb      	ldr	r3, [r7, #12]
}
 8000484:	4618      	mov	r0, r3
 8000486:	3718      	adds	r7, #24
 8000488:	46bd      	mov	sp, r7
 800048a:	bd80      	pop	{r7, pc}
 800048c:	20020000 	.word	0x20020000
 8000490:	00000400 	.word	0x00000400
 8000494:	20000080 	.word	0x20000080
 8000498:	200000a8 	.word	0x200000a8

0800049c <tick_increment>:
	__enable_irq();
	return current_tick_p;
}

static void tick_increment(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
	current_tick += TICK_FREQ;
 80004a0:	4b04      	ldr	r3, [pc, #16]	; (80004b4 <tick_increment+0x18>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	3301      	adds	r3, #1
 80004a6:	4a03      	ldr	r2, [pc, #12]	; (80004b4 <tick_increment+0x18>)
 80004a8:	6013      	str	r3, [r2, #0]
}
 80004aa:	bf00      	nop
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bc80      	pop	{r7}
 80004b0:	4770      	bx	lr
 80004b2:	bf00      	nop
 80004b4:	2000008c 	.word	0x2000008c

080004b8 <timer_init>:

void timer_init(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004bc:	b672      	cpsid	i
}
 80004be:	bf00      	nop
	/* Disable the  global interrupt during the running of this timer service */
	__disable_irq();
	/* Load the timer with number of clock cycles per second ; generate a tick each second */
	SysTick->LOAD = ONE_SEC_LOAD-ONE;
 80004c0:	4b0e      	ldr	r3, [pc, #56]	; (80004fc <timer_init+0x44>)
 80004c2:	4a0f      	ldr	r2, [pc, #60]	; (8000500 <timer_init+0x48>)
 80004c4:	605a      	str	r2, [r3, #4]
	/* Clear the systick current value register */
	SysTick->VAL  = 0;
 80004c6:	4b0d      	ldr	r3, [pc, #52]	; (80004fc <timer_init+0x44>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	609a      	str	r2, [r3, #8]
	/* Select Internal Clock Source */
	SysTick->CTRL |= CTRL_CLKSRC;
 80004cc:	4b0b      	ldr	r3, [pc, #44]	; (80004fc <timer_init+0x44>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a0a      	ldr	r2, [pc, #40]	; (80004fc <timer_init+0x44>)
 80004d2:	f043 0304 	orr.w	r3, r3, #4
 80004d6:	6013      	str	r3, [r2, #0]
	/* Enable Interrupt */
	SysTick->CTRL |= CTRL_TICKINIT;
 80004d8:	4b08      	ldr	r3, [pc, #32]	; (80004fc <timer_init+0x44>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a07      	ldr	r2, [pc, #28]	; (80004fc <timer_init+0x44>)
 80004de:	f043 0302 	orr.w	r3, r3, #2
 80004e2:	6013      	str	r3, [r2, #0]
	/* Enable systick */
	SysTick->CTRL |= CTRL_ENABLE;
 80004e4:	4b05      	ldr	r3, [pc, #20]	; (80004fc <timer_init+0x44>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a04      	ldr	r2, [pc, #16]	; (80004fc <timer_init+0x44>)
 80004ea:	f043 0301 	orr.w	r3, r3, #1
 80004ee:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80004f0:	b662      	cpsie	i
}
 80004f2:	bf00      	nop
	/* Enable Global Interrupt */
	__enable_irq();
}
 80004f4:	bf00      	nop
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bc80      	pop	{r7}
 80004fa:	4770      	bx	lr
 80004fc:	e000e010 	.word	0xe000e010
 8000500:	00f423ff 	.word	0x00f423ff

08000504 <SysTick_Handler>:


void SysTick_Handler(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
	tick_increment();
 8000508:	f7ff ffc8 	bl	800049c <tick_increment>
}
 800050c:	bf00      	nop
 800050e:	bd80      	pop	{r7, pc}

08000510 <uart_init>:
 static uint16_t compute_uart_bd(uint32_t periph_clk, uint32_t baudrate);
 static void uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate);


 void uart_init(void)
 {
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
		  Configure Transfer Direction
		  Enable the UART module
	 */

	 /* Enable Clock Access to GPIOA */
	 RCC->AHB1ENR  |= GPIOA_EN;
 8000514:	4b1f      	ldr	r3, [pc, #124]	; (8000594 <uart_init+0x84>)
 8000516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000518:	4a1e      	ldr	r2, [pc, #120]	; (8000594 <uart_init+0x84>)
 800051a:	f043 0301 	orr.w	r3, r3, #1
 800051e:	6313      	str	r3, [r2, #48]	; 0x30
	 /* Set the mode of PA2 to alternate Function mode*/
	 GPIOA->MODER &= ~(GPIOA_AF_PIN4);
 8000520:	4b1d      	ldr	r3, [pc, #116]	; (8000598 <uart_init+0x88>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a1c      	ldr	r2, [pc, #112]	; (8000598 <uart_init+0x88>)
 8000526:	f023 0310 	bic.w	r3, r3, #16
 800052a:	6013      	str	r3, [r2, #0]
	 GPIOA->MODER |=  GPIOA_AF_PIN5;
 800052c:	4b1a      	ldr	r3, [pc, #104]	; (8000598 <uart_init+0x88>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a19      	ldr	r2, [pc, #100]	; (8000598 <uart_init+0x88>)
 8000532:	f043 0320 	orr.w	r3, r3, #32
 8000536:	6013      	str	r3, [r2, #0]

	 /* Set the Alternate Function to AF7(Uart2_tx); set it according to the datasheet!  */
	 GPIOA->AFR[0] |= (GPIOA_AFR_PIN8);
 8000538:	4b17      	ldr	r3, [pc, #92]	; (8000598 <uart_init+0x88>)
 800053a:	6a1b      	ldr	r3, [r3, #32]
 800053c:	4a16      	ldr	r2, [pc, #88]	; (8000598 <uart_init+0x88>)
 800053e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000542:	6213      	str	r3, [r2, #32]
	 GPIOA->AFR[0] |= (GPIOA_AFR_PIN9);
 8000544:	4b14      	ldr	r3, [pc, #80]	; (8000598 <uart_init+0x88>)
 8000546:	6a1b      	ldr	r3, [r3, #32]
 8000548:	4a13      	ldr	r2, [pc, #76]	; (8000598 <uart_init+0x88>)
 800054a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800054e:	6213      	str	r3, [r2, #32]
	 GPIOA->AFR[0] |= (GPIOA_AFR_PIN10);
 8000550:	4b11      	ldr	r3, [pc, #68]	; (8000598 <uart_init+0x88>)
 8000552:	6a1b      	ldr	r3, [r3, #32]
 8000554:	4a10      	ldr	r2, [pc, #64]	; (8000598 <uart_init+0x88>)
 8000556:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800055a:	6213      	str	r3, [r2, #32]
	 GPIOA->AFR[0] &= ~(GPIOA_AFR_PIN11);
 800055c:	4b0e      	ldr	r3, [pc, #56]	; (8000598 <uart_init+0x88>)
 800055e:	6a1b      	ldr	r3, [r3, #32]
 8000560:	4a0d      	ldr	r2, [pc, #52]	; (8000598 <uart_init+0x88>)
 8000562:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000566:	6213      	str	r3, [r2, #32]

	 /* Enable Clock access to UART 2 */
     RCC->APB1ENR |= UART2EN;
 8000568:	4b0a      	ldr	r3, [pc, #40]	; (8000594 <uart_init+0x84>)
 800056a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800056c:	4a09      	ldr	r2, [pc, #36]	; (8000594 <uart_init+0x84>)
 800056e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000572:	6413      	str	r3, [r2, #64]	; 0x40
	 /* Configure Baud Rate */
     uart_set_baudrate(APB1_CLK, UART_BAUDRATE);
 8000574:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000578:	4808      	ldr	r0, [pc, #32]	; (800059c <uart_init+0x8c>)
 800057a:	f000 f825 	bl	80005c8 <uart_set_baudrate>
     /* Configure Transfer Direction */
     USART2->CR1 = CR1_TE;
 800057e:	4b08      	ldr	r3, [pc, #32]	; (80005a0 <uart_init+0x90>)
 8000580:	2208      	movs	r2, #8
 8000582:	60da      	str	r2, [r3, #12]
     /* Enable the UART module */
     USART2->CR1 |= CR1_UE;
 8000584:	4b06      	ldr	r3, [pc, #24]	; (80005a0 <uart_init+0x90>)
 8000586:	68db      	ldr	r3, [r3, #12]
 8000588:	4a05      	ldr	r2, [pc, #20]	; (80005a0 <uart_init+0x90>)
 800058a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800058e:	60d3      	str	r3, [r2, #12]

 }
 8000590:	bf00      	nop
 8000592:	bd80      	pop	{r7, pc}
 8000594:	40023800 	.word	0x40023800
 8000598:	40020000 	.word	0x40020000
 800059c:	00f42400 	.word	0x00f42400
 80005a0:	40004400 	.word	0x40004400

080005a4 <compute_uart_bd>:

 static uint16_t compute_uart_bd(uint32_t periph_clk, uint32_t baudrate)
 {
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
 80005ac:	6039      	str	r1, [r7, #0]
	 return ((periph_clk + (baudrate/2U))/baudrate);
 80005ae:	683b      	ldr	r3, [r7, #0]
 80005b0:	085a      	lsrs	r2, r3, #1
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	441a      	add	r2, r3
 80005b6:	683b      	ldr	r3, [r7, #0]
 80005b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80005bc:	b29b      	uxth	r3, r3
 }
 80005be:	4618      	mov	r0, r3
 80005c0:	370c      	adds	r7, #12
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bc80      	pop	{r7}
 80005c6:	4770      	bx	lr

080005c8 <uart_set_baudrate>:

 static void uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate)
 {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
 80005d0:	6039      	str	r1, [r7, #0]
	 USART2->BRR = compute_uart_bd(periph_clk,baudrate);
 80005d2:	6839      	ldr	r1, [r7, #0]
 80005d4:	6878      	ldr	r0, [r7, #4]
 80005d6:	f7ff ffe5 	bl	80005a4 <compute_uart_bd>
 80005da:	4603      	mov	r3, r0
 80005dc:	461a      	mov	r2, r3
 80005de:	4b03      	ldr	r3, [pc, #12]	; (80005ec <uart_set_baudrate+0x24>)
 80005e0:	609a      	str	r2, [r3, #8]
 }
 80005e2:	bf00      	nop
 80005e4:	3708      	adds	r7, #8
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40004400 	.word	0x40004400

080005f0 <__io_putchar>:

 int __io_putchar(int ch)
 {
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
 	uart_write(ch);
 80005f8:	6878      	ldr	r0, [r7, #4]
 80005fa:	f000 f805 	bl	8000608 <uart_write>
 	return ch;
 80005fe:	687b      	ldr	r3, [r7, #4]
 }
 8000600:	4618      	mov	r0, r3
 8000602:	3708      	adds	r7, #8
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}

08000608 <uart_write>:

void uart_write(int ch)
 {
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
	 /* Ensure transmit data register is empty before new data can be loaded */
    while(!(USART2->SR & SR_TXE));
 8000610:	bf00      	nop
 8000612:	4b07      	ldr	r3, [pc, #28]	; (8000630 <uart_write+0x28>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800061a:	2b00      	cmp	r3, #0
 800061c:	d0f9      	beq.n	8000612 <uart_write+0xa>
    USART2->DR = (ch & 0xFF);
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	4a03      	ldr	r2, [pc, #12]	; (8000630 <uart_write+0x28>)
 8000622:	b2db      	uxtb	r3, r3
 8000624:	6053      	str	r3, [r2, #4]
 }
 8000626:	bf00      	nop
 8000628:	370c      	adds	r7, #12
 800062a:	46bd      	mov	sp, r7
 800062c:	bc80      	pop	{r7}
 800062e:	4770      	bx	lr
 8000630:	40004400 	.word	0x40004400

08000634 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000634:	480d      	ldr	r0, [pc, #52]	; (800066c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000636:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000638:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800063c:	480c      	ldr	r0, [pc, #48]	; (8000670 <LoopForever+0x6>)
  ldr r1, =_edata
 800063e:	490d      	ldr	r1, [pc, #52]	; (8000674 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000640:	4a0d      	ldr	r2, [pc, #52]	; (8000678 <LoopForever+0xe>)
  movs r3, #0
 8000642:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000644:	e002      	b.n	800064c <LoopCopyDataInit>

08000646 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000646:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000648:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800064a:	3304      	adds	r3, #4

0800064c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800064c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800064e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000650:	d3f9      	bcc.n	8000646 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000652:	4a0a      	ldr	r2, [pc, #40]	; (800067c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000654:	4c0a      	ldr	r4, [pc, #40]	; (8000680 <LoopForever+0x16>)
  movs r3, #0
 8000656:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000658:	e001      	b.n	800065e <LoopFillZerobss>

0800065a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800065a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800065c:	3204      	adds	r2, #4

0800065e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800065e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000660:	d3fb      	bcc.n	800065a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000662:	f000 f817 	bl	8000694 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000666:	f7ff fe5b 	bl	8000320 <main>

0800066a <LoopForever>:

LoopForever:
    b LoopForever
 800066a:	e7fe      	b.n	800066a <LoopForever>
  ldr   r0, =_estack
 800066c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000670:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000674:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000678:	08001114 	.word	0x08001114
  ldr r2, =_sbss
 800067c:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000680:	200000a4 	.word	0x200000a4

08000684 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000684:	e7fe      	b.n	8000684 <ADC_IRQHandler>
	...

08000688 <__errno>:
 8000688:	4b01      	ldr	r3, [pc, #4]	; (8000690 <__errno+0x8>)
 800068a:	6818      	ldr	r0, [r3, #0]
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	20000000 	.word	0x20000000

08000694 <__libc_init_array>:
 8000694:	b570      	push	{r4, r5, r6, lr}
 8000696:	4d0d      	ldr	r5, [pc, #52]	; (80006cc <__libc_init_array+0x38>)
 8000698:	4c0d      	ldr	r4, [pc, #52]	; (80006d0 <__libc_init_array+0x3c>)
 800069a:	1b64      	subs	r4, r4, r5
 800069c:	10a4      	asrs	r4, r4, #2
 800069e:	2600      	movs	r6, #0
 80006a0:	42a6      	cmp	r6, r4
 80006a2:	d109      	bne.n	80006b8 <__libc_init_array+0x24>
 80006a4:	4d0b      	ldr	r5, [pc, #44]	; (80006d4 <__libc_init_array+0x40>)
 80006a6:	4c0c      	ldr	r4, [pc, #48]	; (80006d8 <__libc_init_array+0x44>)
 80006a8:	f000 fce4 	bl	8001074 <_init>
 80006ac:	1b64      	subs	r4, r4, r5
 80006ae:	10a4      	asrs	r4, r4, #2
 80006b0:	2600      	movs	r6, #0
 80006b2:	42a6      	cmp	r6, r4
 80006b4:	d105      	bne.n	80006c2 <__libc_init_array+0x2e>
 80006b6:	bd70      	pop	{r4, r5, r6, pc}
 80006b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80006bc:	4798      	blx	r3
 80006be:	3601      	adds	r6, #1
 80006c0:	e7ee      	b.n	80006a0 <__libc_init_array+0xc>
 80006c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80006c6:	4798      	blx	r3
 80006c8:	3601      	adds	r6, #1
 80006ca:	e7f2      	b.n	80006b2 <__libc_init_array+0x1e>
 80006cc:	0800110c 	.word	0x0800110c
 80006d0:	0800110c 	.word	0x0800110c
 80006d4:	0800110c 	.word	0x0800110c
 80006d8:	08001110 	.word	0x08001110

080006dc <memset>:
 80006dc:	4402      	add	r2, r0
 80006de:	4603      	mov	r3, r0
 80006e0:	4293      	cmp	r3, r2
 80006e2:	d100      	bne.n	80006e6 <memset+0xa>
 80006e4:	4770      	bx	lr
 80006e6:	f803 1b01 	strb.w	r1, [r3], #1
 80006ea:	e7f9      	b.n	80006e0 <memset+0x4>

080006ec <_puts_r>:
 80006ec:	b570      	push	{r4, r5, r6, lr}
 80006ee:	460e      	mov	r6, r1
 80006f0:	4605      	mov	r5, r0
 80006f2:	b118      	cbz	r0, 80006fc <_puts_r+0x10>
 80006f4:	6983      	ldr	r3, [r0, #24]
 80006f6:	b90b      	cbnz	r3, 80006fc <_puts_r+0x10>
 80006f8:	f000 fa48 	bl	8000b8c <__sinit>
 80006fc:	69ab      	ldr	r3, [r5, #24]
 80006fe:	68ac      	ldr	r4, [r5, #8]
 8000700:	b913      	cbnz	r3, 8000708 <_puts_r+0x1c>
 8000702:	4628      	mov	r0, r5
 8000704:	f000 fa42 	bl	8000b8c <__sinit>
 8000708:	4b2c      	ldr	r3, [pc, #176]	; (80007bc <_puts_r+0xd0>)
 800070a:	429c      	cmp	r4, r3
 800070c:	d120      	bne.n	8000750 <_puts_r+0x64>
 800070e:	686c      	ldr	r4, [r5, #4]
 8000710:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000712:	07db      	lsls	r3, r3, #31
 8000714:	d405      	bmi.n	8000722 <_puts_r+0x36>
 8000716:	89a3      	ldrh	r3, [r4, #12]
 8000718:	0598      	lsls	r0, r3, #22
 800071a:	d402      	bmi.n	8000722 <_puts_r+0x36>
 800071c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800071e:	f000 fad3 	bl	8000cc8 <__retarget_lock_acquire_recursive>
 8000722:	89a3      	ldrh	r3, [r4, #12]
 8000724:	0719      	lsls	r1, r3, #28
 8000726:	d51d      	bpl.n	8000764 <_puts_r+0x78>
 8000728:	6923      	ldr	r3, [r4, #16]
 800072a:	b1db      	cbz	r3, 8000764 <_puts_r+0x78>
 800072c:	3e01      	subs	r6, #1
 800072e:	68a3      	ldr	r3, [r4, #8]
 8000730:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000734:	3b01      	subs	r3, #1
 8000736:	60a3      	str	r3, [r4, #8]
 8000738:	bb39      	cbnz	r1, 800078a <_puts_r+0x9e>
 800073a:	2b00      	cmp	r3, #0
 800073c:	da38      	bge.n	80007b0 <_puts_r+0xc4>
 800073e:	4622      	mov	r2, r4
 8000740:	210a      	movs	r1, #10
 8000742:	4628      	mov	r0, r5
 8000744:	f000 f848 	bl	80007d8 <__swbuf_r>
 8000748:	3001      	adds	r0, #1
 800074a:	d011      	beq.n	8000770 <_puts_r+0x84>
 800074c:	250a      	movs	r5, #10
 800074e:	e011      	b.n	8000774 <_puts_r+0x88>
 8000750:	4b1b      	ldr	r3, [pc, #108]	; (80007c0 <_puts_r+0xd4>)
 8000752:	429c      	cmp	r4, r3
 8000754:	d101      	bne.n	800075a <_puts_r+0x6e>
 8000756:	68ac      	ldr	r4, [r5, #8]
 8000758:	e7da      	b.n	8000710 <_puts_r+0x24>
 800075a:	4b1a      	ldr	r3, [pc, #104]	; (80007c4 <_puts_r+0xd8>)
 800075c:	429c      	cmp	r4, r3
 800075e:	bf08      	it	eq
 8000760:	68ec      	ldreq	r4, [r5, #12]
 8000762:	e7d5      	b.n	8000710 <_puts_r+0x24>
 8000764:	4621      	mov	r1, r4
 8000766:	4628      	mov	r0, r5
 8000768:	f000 f888 	bl	800087c <__swsetup_r>
 800076c:	2800      	cmp	r0, #0
 800076e:	d0dd      	beq.n	800072c <_puts_r+0x40>
 8000770:	f04f 35ff 	mov.w	r5, #4294967295
 8000774:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000776:	07da      	lsls	r2, r3, #31
 8000778:	d405      	bmi.n	8000786 <_puts_r+0x9a>
 800077a:	89a3      	ldrh	r3, [r4, #12]
 800077c:	059b      	lsls	r3, r3, #22
 800077e:	d402      	bmi.n	8000786 <_puts_r+0x9a>
 8000780:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000782:	f000 faa2 	bl	8000cca <__retarget_lock_release_recursive>
 8000786:	4628      	mov	r0, r5
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	2b00      	cmp	r3, #0
 800078c:	da04      	bge.n	8000798 <_puts_r+0xac>
 800078e:	69a2      	ldr	r2, [r4, #24]
 8000790:	429a      	cmp	r2, r3
 8000792:	dc06      	bgt.n	80007a2 <_puts_r+0xb6>
 8000794:	290a      	cmp	r1, #10
 8000796:	d004      	beq.n	80007a2 <_puts_r+0xb6>
 8000798:	6823      	ldr	r3, [r4, #0]
 800079a:	1c5a      	adds	r2, r3, #1
 800079c:	6022      	str	r2, [r4, #0]
 800079e:	7019      	strb	r1, [r3, #0]
 80007a0:	e7c5      	b.n	800072e <_puts_r+0x42>
 80007a2:	4622      	mov	r2, r4
 80007a4:	4628      	mov	r0, r5
 80007a6:	f000 f817 	bl	80007d8 <__swbuf_r>
 80007aa:	3001      	adds	r0, #1
 80007ac:	d1bf      	bne.n	800072e <_puts_r+0x42>
 80007ae:	e7df      	b.n	8000770 <_puts_r+0x84>
 80007b0:	6823      	ldr	r3, [r4, #0]
 80007b2:	250a      	movs	r5, #10
 80007b4:	1c5a      	adds	r2, r3, #1
 80007b6:	6022      	str	r2, [r4, #0]
 80007b8:	701d      	strb	r5, [r3, #0]
 80007ba:	e7db      	b.n	8000774 <_puts_r+0x88>
 80007bc:	080010cc 	.word	0x080010cc
 80007c0:	080010ec 	.word	0x080010ec
 80007c4:	080010ac 	.word	0x080010ac

080007c8 <puts>:
 80007c8:	4b02      	ldr	r3, [pc, #8]	; (80007d4 <puts+0xc>)
 80007ca:	4601      	mov	r1, r0
 80007cc:	6818      	ldr	r0, [r3, #0]
 80007ce:	f7ff bf8d 	b.w	80006ec <_puts_r>
 80007d2:	bf00      	nop
 80007d4:	20000000 	.word	0x20000000

080007d8 <__swbuf_r>:
 80007d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007da:	460e      	mov	r6, r1
 80007dc:	4614      	mov	r4, r2
 80007de:	4605      	mov	r5, r0
 80007e0:	b118      	cbz	r0, 80007ea <__swbuf_r+0x12>
 80007e2:	6983      	ldr	r3, [r0, #24]
 80007e4:	b90b      	cbnz	r3, 80007ea <__swbuf_r+0x12>
 80007e6:	f000 f9d1 	bl	8000b8c <__sinit>
 80007ea:	4b21      	ldr	r3, [pc, #132]	; (8000870 <__swbuf_r+0x98>)
 80007ec:	429c      	cmp	r4, r3
 80007ee:	d12b      	bne.n	8000848 <__swbuf_r+0x70>
 80007f0:	686c      	ldr	r4, [r5, #4]
 80007f2:	69a3      	ldr	r3, [r4, #24]
 80007f4:	60a3      	str	r3, [r4, #8]
 80007f6:	89a3      	ldrh	r3, [r4, #12]
 80007f8:	071a      	lsls	r2, r3, #28
 80007fa:	d52f      	bpl.n	800085c <__swbuf_r+0x84>
 80007fc:	6923      	ldr	r3, [r4, #16]
 80007fe:	b36b      	cbz	r3, 800085c <__swbuf_r+0x84>
 8000800:	6923      	ldr	r3, [r4, #16]
 8000802:	6820      	ldr	r0, [r4, #0]
 8000804:	1ac0      	subs	r0, r0, r3
 8000806:	6963      	ldr	r3, [r4, #20]
 8000808:	b2f6      	uxtb	r6, r6
 800080a:	4283      	cmp	r3, r0
 800080c:	4637      	mov	r7, r6
 800080e:	dc04      	bgt.n	800081a <__swbuf_r+0x42>
 8000810:	4621      	mov	r1, r4
 8000812:	4628      	mov	r0, r5
 8000814:	f000 f926 	bl	8000a64 <_fflush_r>
 8000818:	bb30      	cbnz	r0, 8000868 <__swbuf_r+0x90>
 800081a:	68a3      	ldr	r3, [r4, #8]
 800081c:	3b01      	subs	r3, #1
 800081e:	60a3      	str	r3, [r4, #8]
 8000820:	6823      	ldr	r3, [r4, #0]
 8000822:	1c5a      	adds	r2, r3, #1
 8000824:	6022      	str	r2, [r4, #0]
 8000826:	701e      	strb	r6, [r3, #0]
 8000828:	6963      	ldr	r3, [r4, #20]
 800082a:	3001      	adds	r0, #1
 800082c:	4283      	cmp	r3, r0
 800082e:	d004      	beq.n	800083a <__swbuf_r+0x62>
 8000830:	89a3      	ldrh	r3, [r4, #12]
 8000832:	07db      	lsls	r3, r3, #31
 8000834:	d506      	bpl.n	8000844 <__swbuf_r+0x6c>
 8000836:	2e0a      	cmp	r6, #10
 8000838:	d104      	bne.n	8000844 <__swbuf_r+0x6c>
 800083a:	4621      	mov	r1, r4
 800083c:	4628      	mov	r0, r5
 800083e:	f000 f911 	bl	8000a64 <_fflush_r>
 8000842:	b988      	cbnz	r0, 8000868 <__swbuf_r+0x90>
 8000844:	4638      	mov	r0, r7
 8000846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000848:	4b0a      	ldr	r3, [pc, #40]	; (8000874 <__swbuf_r+0x9c>)
 800084a:	429c      	cmp	r4, r3
 800084c:	d101      	bne.n	8000852 <__swbuf_r+0x7a>
 800084e:	68ac      	ldr	r4, [r5, #8]
 8000850:	e7cf      	b.n	80007f2 <__swbuf_r+0x1a>
 8000852:	4b09      	ldr	r3, [pc, #36]	; (8000878 <__swbuf_r+0xa0>)
 8000854:	429c      	cmp	r4, r3
 8000856:	bf08      	it	eq
 8000858:	68ec      	ldreq	r4, [r5, #12]
 800085a:	e7ca      	b.n	80007f2 <__swbuf_r+0x1a>
 800085c:	4621      	mov	r1, r4
 800085e:	4628      	mov	r0, r5
 8000860:	f000 f80c 	bl	800087c <__swsetup_r>
 8000864:	2800      	cmp	r0, #0
 8000866:	d0cb      	beq.n	8000800 <__swbuf_r+0x28>
 8000868:	f04f 37ff 	mov.w	r7, #4294967295
 800086c:	e7ea      	b.n	8000844 <__swbuf_r+0x6c>
 800086e:	bf00      	nop
 8000870:	080010cc 	.word	0x080010cc
 8000874:	080010ec 	.word	0x080010ec
 8000878:	080010ac 	.word	0x080010ac

0800087c <__swsetup_r>:
 800087c:	4b32      	ldr	r3, [pc, #200]	; (8000948 <__swsetup_r+0xcc>)
 800087e:	b570      	push	{r4, r5, r6, lr}
 8000880:	681d      	ldr	r5, [r3, #0]
 8000882:	4606      	mov	r6, r0
 8000884:	460c      	mov	r4, r1
 8000886:	b125      	cbz	r5, 8000892 <__swsetup_r+0x16>
 8000888:	69ab      	ldr	r3, [r5, #24]
 800088a:	b913      	cbnz	r3, 8000892 <__swsetup_r+0x16>
 800088c:	4628      	mov	r0, r5
 800088e:	f000 f97d 	bl	8000b8c <__sinit>
 8000892:	4b2e      	ldr	r3, [pc, #184]	; (800094c <__swsetup_r+0xd0>)
 8000894:	429c      	cmp	r4, r3
 8000896:	d10f      	bne.n	80008b8 <__swsetup_r+0x3c>
 8000898:	686c      	ldr	r4, [r5, #4]
 800089a:	89a3      	ldrh	r3, [r4, #12]
 800089c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80008a0:	0719      	lsls	r1, r3, #28
 80008a2:	d42c      	bmi.n	80008fe <__swsetup_r+0x82>
 80008a4:	06dd      	lsls	r5, r3, #27
 80008a6:	d411      	bmi.n	80008cc <__swsetup_r+0x50>
 80008a8:	2309      	movs	r3, #9
 80008aa:	6033      	str	r3, [r6, #0]
 80008ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80008b0:	81a3      	strh	r3, [r4, #12]
 80008b2:	f04f 30ff 	mov.w	r0, #4294967295
 80008b6:	e03e      	b.n	8000936 <__swsetup_r+0xba>
 80008b8:	4b25      	ldr	r3, [pc, #148]	; (8000950 <__swsetup_r+0xd4>)
 80008ba:	429c      	cmp	r4, r3
 80008bc:	d101      	bne.n	80008c2 <__swsetup_r+0x46>
 80008be:	68ac      	ldr	r4, [r5, #8]
 80008c0:	e7eb      	b.n	800089a <__swsetup_r+0x1e>
 80008c2:	4b24      	ldr	r3, [pc, #144]	; (8000954 <__swsetup_r+0xd8>)
 80008c4:	429c      	cmp	r4, r3
 80008c6:	bf08      	it	eq
 80008c8:	68ec      	ldreq	r4, [r5, #12]
 80008ca:	e7e6      	b.n	800089a <__swsetup_r+0x1e>
 80008cc:	0758      	lsls	r0, r3, #29
 80008ce:	d512      	bpl.n	80008f6 <__swsetup_r+0x7a>
 80008d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80008d2:	b141      	cbz	r1, 80008e6 <__swsetup_r+0x6a>
 80008d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80008d8:	4299      	cmp	r1, r3
 80008da:	d002      	beq.n	80008e2 <__swsetup_r+0x66>
 80008dc:	4630      	mov	r0, r6
 80008de:	f000 fa59 	bl	8000d94 <_free_r>
 80008e2:	2300      	movs	r3, #0
 80008e4:	6363      	str	r3, [r4, #52]	; 0x34
 80008e6:	89a3      	ldrh	r3, [r4, #12]
 80008e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80008ec:	81a3      	strh	r3, [r4, #12]
 80008ee:	2300      	movs	r3, #0
 80008f0:	6063      	str	r3, [r4, #4]
 80008f2:	6923      	ldr	r3, [r4, #16]
 80008f4:	6023      	str	r3, [r4, #0]
 80008f6:	89a3      	ldrh	r3, [r4, #12]
 80008f8:	f043 0308 	orr.w	r3, r3, #8
 80008fc:	81a3      	strh	r3, [r4, #12]
 80008fe:	6923      	ldr	r3, [r4, #16]
 8000900:	b94b      	cbnz	r3, 8000916 <__swsetup_r+0x9a>
 8000902:	89a3      	ldrh	r3, [r4, #12]
 8000904:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000908:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800090c:	d003      	beq.n	8000916 <__swsetup_r+0x9a>
 800090e:	4621      	mov	r1, r4
 8000910:	4630      	mov	r0, r6
 8000912:	f000 f9ff 	bl	8000d14 <__smakebuf_r>
 8000916:	89a0      	ldrh	r0, [r4, #12]
 8000918:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800091c:	f010 0301 	ands.w	r3, r0, #1
 8000920:	d00a      	beq.n	8000938 <__swsetup_r+0xbc>
 8000922:	2300      	movs	r3, #0
 8000924:	60a3      	str	r3, [r4, #8]
 8000926:	6963      	ldr	r3, [r4, #20]
 8000928:	425b      	negs	r3, r3
 800092a:	61a3      	str	r3, [r4, #24]
 800092c:	6923      	ldr	r3, [r4, #16]
 800092e:	b943      	cbnz	r3, 8000942 <__swsetup_r+0xc6>
 8000930:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000934:	d1ba      	bne.n	80008ac <__swsetup_r+0x30>
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	0781      	lsls	r1, r0, #30
 800093a:	bf58      	it	pl
 800093c:	6963      	ldrpl	r3, [r4, #20]
 800093e:	60a3      	str	r3, [r4, #8]
 8000940:	e7f4      	b.n	800092c <__swsetup_r+0xb0>
 8000942:	2000      	movs	r0, #0
 8000944:	e7f7      	b.n	8000936 <__swsetup_r+0xba>
 8000946:	bf00      	nop
 8000948:	20000000 	.word	0x20000000
 800094c:	080010cc 	.word	0x080010cc
 8000950:	080010ec 	.word	0x080010ec
 8000954:	080010ac 	.word	0x080010ac

08000958 <__sflush_r>:
 8000958:	898a      	ldrh	r2, [r1, #12]
 800095a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800095e:	4605      	mov	r5, r0
 8000960:	0710      	lsls	r0, r2, #28
 8000962:	460c      	mov	r4, r1
 8000964:	d458      	bmi.n	8000a18 <__sflush_r+0xc0>
 8000966:	684b      	ldr	r3, [r1, #4]
 8000968:	2b00      	cmp	r3, #0
 800096a:	dc05      	bgt.n	8000978 <__sflush_r+0x20>
 800096c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800096e:	2b00      	cmp	r3, #0
 8000970:	dc02      	bgt.n	8000978 <__sflush_r+0x20>
 8000972:	2000      	movs	r0, #0
 8000974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000978:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800097a:	2e00      	cmp	r6, #0
 800097c:	d0f9      	beq.n	8000972 <__sflush_r+0x1a>
 800097e:	2300      	movs	r3, #0
 8000980:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000984:	682f      	ldr	r7, [r5, #0]
 8000986:	602b      	str	r3, [r5, #0]
 8000988:	d032      	beq.n	80009f0 <__sflush_r+0x98>
 800098a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800098c:	89a3      	ldrh	r3, [r4, #12]
 800098e:	075a      	lsls	r2, r3, #29
 8000990:	d505      	bpl.n	800099e <__sflush_r+0x46>
 8000992:	6863      	ldr	r3, [r4, #4]
 8000994:	1ac0      	subs	r0, r0, r3
 8000996:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000998:	b10b      	cbz	r3, 800099e <__sflush_r+0x46>
 800099a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800099c:	1ac0      	subs	r0, r0, r3
 800099e:	2300      	movs	r3, #0
 80009a0:	4602      	mov	r2, r0
 80009a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80009a4:	6a21      	ldr	r1, [r4, #32]
 80009a6:	4628      	mov	r0, r5
 80009a8:	47b0      	blx	r6
 80009aa:	1c43      	adds	r3, r0, #1
 80009ac:	89a3      	ldrh	r3, [r4, #12]
 80009ae:	d106      	bne.n	80009be <__sflush_r+0x66>
 80009b0:	6829      	ldr	r1, [r5, #0]
 80009b2:	291d      	cmp	r1, #29
 80009b4:	d82c      	bhi.n	8000a10 <__sflush_r+0xb8>
 80009b6:	4a2a      	ldr	r2, [pc, #168]	; (8000a60 <__sflush_r+0x108>)
 80009b8:	40ca      	lsrs	r2, r1
 80009ba:	07d6      	lsls	r6, r2, #31
 80009bc:	d528      	bpl.n	8000a10 <__sflush_r+0xb8>
 80009be:	2200      	movs	r2, #0
 80009c0:	6062      	str	r2, [r4, #4]
 80009c2:	04d9      	lsls	r1, r3, #19
 80009c4:	6922      	ldr	r2, [r4, #16]
 80009c6:	6022      	str	r2, [r4, #0]
 80009c8:	d504      	bpl.n	80009d4 <__sflush_r+0x7c>
 80009ca:	1c42      	adds	r2, r0, #1
 80009cc:	d101      	bne.n	80009d2 <__sflush_r+0x7a>
 80009ce:	682b      	ldr	r3, [r5, #0]
 80009d0:	b903      	cbnz	r3, 80009d4 <__sflush_r+0x7c>
 80009d2:	6560      	str	r0, [r4, #84]	; 0x54
 80009d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80009d6:	602f      	str	r7, [r5, #0]
 80009d8:	2900      	cmp	r1, #0
 80009da:	d0ca      	beq.n	8000972 <__sflush_r+0x1a>
 80009dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80009e0:	4299      	cmp	r1, r3
 80009e2:	d002      	beq.n	80009ea <__sflush_r+0x92>
 80009e4:	4628      	mov	r0, r5
 80009e6:	f000 f9d5 	bl	8000d94 <_free_r>
 80009ea:	2000      	movs	r0, #0
 80009ec:	6360      	str	r0, [r4, #52]	; 0x34
 80009ee:	e7c1      	b.n	8000974 <__sflush_r+0x1c>
 80009f0:	6a21      	ldr	r1, [r4, #32]
 80009f2:	2301      	movs	r3, #1
 80009f4:	4628      	mov	r0, r5
 80009f6:	47b0      	blx	r6
 80009f8:	1c41      	adds	r1, r0, #1
 80009fa:	d1c7      	bne.n	800098c <__sflush_r+0x34>
 80009fc:	682b      	ldr	r3, [r5, #0]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d0c4      	beq.n	800098c <__sflush_r+0x34>
 8000a02:	2b1d      	cmp	r3, #29
 8000a04:	d001      	beq.n	8000a0a <__sflush_r+0xb2>
 8000a06:	2b16      	cmp	r3, #22
 8000a08:	d101      	bne.n	8000a0e <__sflush_r+0xb6>
 8000a0a:	602f      	str	r7, [r5, #0]
 8000a0c:	e7b1      	b.n	8000972 <__sflush_r+0x1a>
 8000a0e:	89a3      	ldrh	r3, [r4, #12]
 8000a10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a14:	81a3      	strh	r3, [r4, #12]
 8000a16:	e7ad      	b.n	8000974 <__sflush_r+0x1c>
 8000a18:	690f      	ldr	r7, [r1, #16]
 8000a1a:	2f00      	cmp	r7, #0
 8000a1c:	d0a9      	beq.n	8000972 <__sflush_r+0x1a>
 8000a1e:	0793      	lsls	r3, r2, #30
 8000a20:	680e      	ldr	r6, [r1, #0]
 8000a22:	bf08      	it	eq
 8000a24:	694b      	ldreq	r3, [r1, #20]
 8000a26:	600f      	str	r7, [r1, #0]
 8000a28:	bf18      	it	ne
 8000a2a:	2300      	movne	r3, #0
 8000a2c:	eba6 0807 	sub.w	r8, r6, r7
 8000a30:	608b      	str	r3, [r1, #8]
 8000a32:	f1b8 0f00 	cmp.w	r8, #0
 8000a36:	dd9c      	ble.n	8000972 <__sflush_r+0x1a>
 8000a38:	6a21      	ldr	r1, [r4, #32]
 8000a3a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000a3c:	4643      	mov	r3, r8
 8000a3e:	463a      	mov	r2, r7
 8000a40:	4628      	mov	r0, r5
 8000a42:	47b0      	blx	r6
 8000a44:	2800      	cmp	r0, #0
 8000a46:	dc06      	bgt.n	8000a56 <__sflush_r+0xfe>
 8000a48:	89a3      	ldrh	r3, [r4, #12]
 8000a4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a4e:	81a3      	strh	r3, [r4, #12]
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	e78e      	b.n	8000974 <__sflush_r+0x1c>
 8000a56:	4407      	add	r7, r0
 8000a58:	eba8 0800 	sub.w	r8, r8, r0
 8000a5c:	e7e9      	b.n	8000a32 <__sflush_r+0xda>
 8000a5e:	bf00      	nop
 8000a60:	20400001 	.word	0x20400001

08000a64 <_fflush_r>:
 8000a64:	b538      	push	{r3, r4, r5, lr}
 8000a66:	690b      	ldr	r3, [r1, #16]
 8000a68:	4605      	mov	r5, r0
 8000a6a:	460c      	mov	r4, r1
 8000a6c:	b913      	cbnz	r3, 8000a74 <_fflush_r+0x10>
 8000a6e:	2500      	movs	r5, #0
 8000a70:	4628      	mov	r0, r5
 8000a72:	bd38      	pop	{r3, r4, r5, pc}
 8000a74:	b118      	cbz	r0, 8000a7e <_fflush_r+0x1a>
 8000a76:	6983      	ldr	r3, [r0, #24]
 8000a78:	b90b      	cbnz	r3, 8000a7e <_fflush_r+0x1a>
 8000a7a:	f000 f887 	bl	8000b8c <__sinit>
 8000a7e:	4b14      	ldr	r3, [pc, #80]	; (8000ad0 <_fflush_r+0x6c>)
 8000a80:	429c      	cmp	r4, r3
 8000a82:	d11b      	bne.n	8000abc <_fflush_r+0x58>
 8000a84:	686c      	ldr	r4, [r5, #4]
 8000a86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d0ef      	beq.n	8000a6e <_fflush_r+0xa>
 8000a8e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000a90:	07d0      	lsls	r0, r2, #31
 8000a92:	d404      	bmi.n	8000a9e <_fflush_r+0x3a>
 8000a94:	0599      	lsls	r1, r3, #22
 8000a96:	d402      	bmi.n	8000a9e <_fflush_r+0x3a>
 8000a98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000a9a:	f000 f915 	bl	8000cc8 <__retarget_lock_acquire_recursive>
 8000a9e:	4628      	mov	r0, r5
 8000aa0:	4621      	mov	r1, r4
 8000aa2:	f7ff ff59 	bl	8000958 <__sflush_r>
 8000aa6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000aa8:	07da      	lsls	r2, r3, #31
 8000aaa:	4605      	mov	r5, r0
 8000aac:	d4e0      	bmi.n	8000a70 <_fflush_r+0xc>
 8000aae:	89a3      	ldrh	r3, [r4, #12]
 8000ab0:	059b      	lsls	r3, r3, #22
 8000ab2:	d4dd      	bmi.n	8000a70 <_fflush_r+0xc>
 8000ab4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000ab6:	f000 f908 	bl	8000cca <__retarget_lock_release_recursive>
 8000aba:	e7d9      	b.n	8000a70 <_fflush_r+0xc>
 8000abc:	4b05      	ldr	r3, [pc, #20]	; (8000ad4 <_fflush_r+0x70>)
 8000abe:	429c      	cmp	r4, r3
 8000ac0:	d101      	bne.n	8000ac6 <_fflush_r+0x62>
 8000ac2:	68ac      	ldr	r4, [r5, #8]
 8000ac4:	e7df      	b.n	8000a86 <_fflush_r+0x22>
 8000ac6:	4b04      	ldr	r3, [pc, #16]	; (8000ad8 <_fflush_r+0x74>)
 8000ac8:	429c      	cmp	r4, r3
 8000aca:	bf08      	it	eq
 8000acc:	68ec      	ldreq	r4, [r5, #12]
 8000ace:	e7da      	b.n	8000a86 <_fflush_r+0x22>
 8000ad0:	080010cc 	.word	0x080010cc
 8000ad4:	080010ec 	.word	0x080010ec
 8000ad8:	080010ac 	.word	0x080010ac

08000adc <std>:
 8000adc:	2300      	movs	r3, #0
 8000ade:	b510      	push	{r4, lr}
 8000ae0:	4604      	mov	r4, r0
 8000ae2:	e9c0 3300 	strd	r3, r3, [r0]
 8000ae6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000aea:	6083      	str	r3, [r0, #8]
 8000aec:	8181      	strh	r1, [r0, #12]
 8000aee:	6643      	str	r3, [r0, #100]	; 0x64
 8000af0:	81c2      	strh	r2, [r0, #14]
 8000af2:	6183      	str	r3, [r0, #24]
 8000af4:	4619      	mov	r1, r3
 8000af6:	2208      	movs	r2, #8
 8000af8:	305c      	adds	r0, #92	; 0x5c
 8000afa:	f7ff fdef 	bl	80006dc <memset>
 8000afe:	4b05      	ldr	r3, [pc, #20]	; (8000b14 <std+0x38>)
 8000b00:	6263      	str	r3, [r4, #36]	; 0x24
 8000b02:	4b05      	ldr	r3, [pc, #20]	; (8000b18 <std+0x3c>)
 8000b04:	62a3      	str	r3, [r4, #40]	; 0x28
 8000b06:	4b05      	ldr	r3, [pc, #20]	; (8000b1c <std+0x40>)
 8000b08:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000b0a:	4b05      	ldr	r3, [pc, #20]	; (8000b20 <std+0x44>)
 8000b0c:	6224      	str	r4, [r4, #32]
 8000b0e:	6323      	str	r3, [r4, #48]	; 0x30
 8000b10:	bd10      	pop	{r4, pc}
 8000b12:	bf00      	nop
 8000b14:	08000f05 	.word	0x08000f05
 8000b18:	08000f27 	.word	0x08000f27
 8000b1c:	08000f5f 	.word	0x08000f5f
 8000b20:	08000f83 	.word	0x08000f83

08000b24 <_cleanup_r>:
 8000b24:	4901      	ldr	r1, [pc, #4]	; (8000b2c <_cleanup_r+0x8>)
 8000b26:	f000 b8af 	b.w	8000c88 <_fwalk_reent>
 8000b2a:	bf00      	nop
 8000b2c:	08000a65 	.word	0x08000a65

08000b30 <__sfmoreglue>:
 8000b30:	b570      	push	{r4, r5, r6, lr}
 8000b32:	1e4a      	subs	r2, r1, #1
 8000b34:	2568      	movs	r5, #104	; 0x68
 8000b36:	4355      	muls	r5, r2
 8000b38:	460e      	mov	r6, r1
 8000b3a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000b3e:	f000 f977 	bl	8000e30 <_malloc_r>
 8000b42:	4604      	mov	r4, r0
 8000b44:	b140      	cbz	r0, 8000b58 <__sfmoreglue+0x28>
 8000b46:	2100      	movs	r1, #0
 8000b48:	e9c0 1600 	strd	r1, r6, [r0]
 8000b4c:	300c      	adds	r0, #12
 8000b4e:	60a0      	str	r0, [r4, #8]
 8000b50:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000b54:	f7ff fdc2 	bl	80006dc <memset>
 8000b58:	4620      	mov	r0, r4
 8000b5a:	bd70      	pop	{r4, r5, r6, pc}

08000b5c <__sfp_lock_acquire>:
 8000b5c:	4801      	ldr	r0, [pc, #4]	; (8000b64 <__sfp_lock_acquire+0x8>)
 8000b5e:	f000 b8b3 	b.w	8000cc8 <__retarget_lock_acquire_recursive>
 8000b62:	bf00      	nop
 8000b64:	2000009c 	.word	0x2000009c

08000b68 <__sfp_lock_release>:
 8000b68:	4801      	ldr	r0, [pc, #4]	; (8000b70 <__sfp_lock_release+0x8>)
 8000b6a:	f000 b8ae 	b.w	8000cca <__retarget_lock_release_recursive>
 8000b6e:	bf00      	nop
 8000b70:	2000009c 	.word	0x2000009c

08000b74 <__sinit_lock_acquire>:
 8000b74:	4801      	ldr	r0, [pc, #4]	; (8000b7c <__sinit_lock_acquire+0x8>)
 8000b76:	f000 b8a7 	b.w	8000cc8 <__retarget_lock_acquire_recursive>
 8000b7a:	bf00      	nop
 8000b7c:	20000097 	.word	0x20000097

08000b80 <__sinit_lock_release>:
 8000b80:	4801      	ldr	r0, [pc, #4]	; (8000b88 <__sinit_lock_release+0x8>)
 8000b82:	f000 b8a2 	b.w	8000cca <__retarget_lock_release_recursive>
 8000b86:	bf00      	nop
 8000b88:	20000097 	.word	0x20000097

08000b8c <__sinit>:
 8000b8c:	b510      	push	{r4, lr}
 8000b8e:	4604      	mov	r4, r0
 8000b90:	f7ff fff0 	bl	8000b74 <__sinit_lock_acquire>
 8000b94:	69a3      	ldr	r3, [r4, #24]
 8000b96:	b11b      	cbz	r3, 8000ba0 <__sinit+0x14>
 8000b98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000b9c:	f7ff bff0 	b.w	8000b80 <__sinit_lock_release>
 8000ba0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000ba4:	6523      	str	r3, [r4, #80]	; 0x50
 8000ba6:	4b13      	ldr	r3, [pc, #76]	; (8000bf4 <__sinit+0x68>)
 8000ba8:	4a13      	ldr	r2, [pc, #76]	; (8000bf8 <__sinit+0x6c>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	62a2      	str	r2, [r4, #40]	; 0x28
 8000bae:	42a3      	cmp	r3, r4
 8000bb0:	bf04      	itt	eq
 8000bb2:	2301      	moveq	r3, #1
 8000bb4:	61a3      	streq	r3, [r4, #24]
 8000bb6:	4620      	mov	r0, r4
 8000bb8:	f000 f820 	bl	8000bfc <__sfp>
 8000bbc:	6060      	str	r0, [r4, #4]
 8000bbe:	4620      	mov	r0, r4
 8000bc0:	f000 f81c 	bl	8000bfc <__sfp>
 8000bc4:	60a0      	str	r0, [r4, #8]
 8000bc6:	4620      	mov	r0, r4
 8000bc8:	f000 f818 	bl	8000bfc <__sfp>
 8000bcc:	2200      	movs	r2, #0
 8000bce:	60e0      	str	r0, [r4, #12]
 8000bd0:	2104      	movs	r1, #4
 8000bd2:	6860      	ldr	r0, [r4, #4]
 8000bd4:	f7ff ff82 	bl	8000adc <std>
 8000bd8:	68a0      	ldr	r0, [r4, #8]
 8000bda:	2201      	movs	r2, #1
 8000bdc:	2109      	movs	r1, #9
 8000bde:	f7ff ff7d 	bl	8000adc <std>
 8000be2:	68e0      	ldr	r0, [r4, #12]
 8000be4:	2202      	movs	r2, #2
 8000be6:	2112      	movs	r1, #18
 8000be8:	f7ff ff78 	bl	8000adc <std>
 8000bec:	2301      	movs	r3, #1
 8000bee:	61a3      	str	r3, [r4, #24]
 8000bf0:	e7d2      	b.n	8000b98 <__sinit+0xc>
 8000bf2:	bf00      	nop
 8000bf4:	080010a8 	.word	0x080010a8
 8000bf8:	08000b25 	.word	0x08000b25

08000bfc <__sfp>:
 8000bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bfe:	4607      	mov	r7, r0
 8000c00:	f7ff ffac 	bl	8000b5c <__sfp_lock_acquire>
 8000c04:	4b1e      	ldr	r3, [pc, #120]	; (8000c80 <__sfp+0x84>)
 8000c06:	681e      	ldr	r6, [r3, #0]
 8000c08:	69b3      	ldr	r3, [r6, #24]
 8000c0a:	b913      	cbnz	r3, 8000c12 <__sfp+0x16>
 8000c0c:	4630      	mov	r0, r6
 8000c0e:	f7ff ffbd 	bl	8000b8c <__sinit>
 8000c12:	3648      	adds	r6, #72	; 0x48
 8000c14:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000c18:	3b01      	subs	r3, #1
 8000c1a:	d503      	bpl.n	8000c24 <__sfp+0x28>
 8000c1c:	6833      	ldr	r3, [r6, #0]
 8000c1e:	b30b      	cbz	r3, 8000c64 <__sfp+0x68>
 8000c20:	6836      	ldr	r6, [r6, #0]
 8000c22:	e7f7      	b.n	8000c14 <__sfp+0x18>
 8000c24:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000c28:	b9d5      	cbnz	r5, 8000c60 <__sfp+0x64>
 8000c2a:	4b16      	ldr	r3, [pc, #88]	; (8000c84 <__sfp+0x88>)
 8000c2c:	60e3      	str	r3, [r4, #12]
 8000c2e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000c32:	6665      	str	r5, [r4, #100]	; 0x64
 8000c34:	f000 f847 	bl	8000cc6 <__retarget_lock_init_recursive>
 8000c38:	f7ff ff96 	bl	8000b68 <__sfp_lock_release>
 8000c3c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000c40:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000c44:	6025      	str	r5, [r4, #0]
 8000c46:	61a5      	str	r5, [r4, #24]
 8000c48:	2208      	movs	r2, #8
 8000c4a:	4629      	mov	r1, r5
 8000c4c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000c50:	f7ff fd44 	bl	80006dc <memset>
 8000c54:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000c58:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000c5c:	4620      	mov	r0, r4
 8000c5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c60:	3468      	adds	r4, #104	; 0x68
 8000c62:	e7d9      	b.n	8000c18 <__sfp+0x1c>
 8000c64:	2104      	movs	r1, #4
 8000c66:	4638      	mov	r0, r7
 8000c68:	f7ff ff62 	bl	8000b30 <__sfmoreglue>
 8000c6c:	4604      	mov	r4, r0
 8000c6e:	6030      	str	r0, [r6, #0]
 8000c70:	2800      	cmp	r0, #0
 8000c72:	d1d5      	bne.n	8000c20 <__sfp+0x24>
 8000c74:	f7ff ff78 	bl	8000b68 <__sfp_lock_release>
 8000c78:	230c      	movs	r3, #12
 8000c7a:	603b      	str	r3, [r7, #0]
 8000c7c:	e7ee      	b.n	8000c5c <__sfp+0x60>
 8000c7e:	bf00      	nop
 8000c80:	080010a8 	.word	0x080010a8
 8000c84:	ffff0001 	.word	0xffff0001

08000c88 <_fwalk_reent>:
 8000c88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c8c:	4606      	mov	r6, r0
 8000c8e:	4688      	mov	r8, r1
 8000c90:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000c94:	2700      	movs	r7, #0
 8000c96:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000c9a:	f1b9 0901 	subs.w	r9, r9, #1
 8000c9e:	d505      	bpl.n	8000cac <_fwalk_reent+0x24>
 8000ca0:	6824      	ldr	r4, [r4, #0]
 8000ca2:	2c00      	cmp	r4, #0
 8000ca4:	d1f7      	bne.n	8000c96 <_fwalk_reent+0xe>
 8000ca6:	4638      	mov	r0, r7
 8000ca8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000cac:	89ab      	ldrh	r3, [r5, #12]
 8000cae:	2b01      	cmp	r3, #1
 8000cb0:	d907      	bls.n	8000cc2 <_fwalk_reent+0x3a>
 8000cb2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	d003      	beq.n	8000cc2 <_fwalk_reent+0x3a>
 8000cba:	4629      	mov	r1, r5
 8000cbc:	4630      	mov	r0, r6
 8000cbe:	47c0      	blx	r8
 8000cc0:	4307      	orrs	r7, r0
 8000cc2:	3568      	adds	r5, #104	; 0x68
 8000cc4:	e7e9      	b.n	8000c9a <_fwalk_reent+0x12>

08000cc6 <__retarget_lock_init_recursive>:
 8000cc6:	4770      	bx	lr

08000cc8 <__retarget_lock_acquire_recursive>:
 8000cc8:	4770      	bx	lr

08000cca <__retarget_lock_release_recursive>:
 8000cca:	4770      	bx	lr

08000ccc <__swhatbuf_r>:
 8000ccc:	b570      	push	{r4, r5, r6, lr}
 8000cce:	460e      	mov	r6, r1
 8000cd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000cd4:	2900      	cmp	r1, #0
 8000cd6:	b096      	sub	sp, #88	; 0x58
 8000cd8:	4614      	mov	r4, r2
 8000cda:	461d      	mov	r5, r3
 8000cdc:	da07      	bge.n	8000cee <__swhatbuf_r+0x22>
 8000cde:	2300      	movs	r3, #0
 8000ce0:	602b      	str	r3, [r5, #0]
 8000ce2:	89b3      	ldrh	r3, [r6, #12]
 8000ce4:	061a      	lsls	r2, r3, #24
 8000ce6:	d410      	bmi.n	8000d0a <__swhatbuf_r+0x3e>
 8000ce8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cec:	e00e      	b.n	8000d0c <__swhatbuf_r+0x40>
 8000cee:	466a      	mov	r2, sp
 8000cf0:	f000 f96e 	bl	8000fd0 <_fstat_r>
 8000cf4:	2800      	cmp	r0, #0
 8000cf6:	dbf2      	blt.n	8000cde <__swhatbuf_r+0x12>
 8000cf8:	9a01      	ldr	r2, [sp, #4]
 8000cfa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000cfe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000d02:	425a      	negs	r2, r3
 8000d04:	415a      	adcs	r2, r3
 8000d06:	602a      	str	r2, [r5, #0]
 8000d08:	e7ee      	b.n	8000ce8 <__swhatbuf_r+0x1c>
 8000d0a:	2340      	movs	r3, #64	; 0x40
 8000d0c:	2000      	movs	r0, #0
 8000d0e:	6023      	str	r3, [r4, #0]
 8000d10:	b016      	add	sp, #88	; 0x58
 8000d12:	bd70      	pop	{r4, r5, r6, pc}

08000d14 <__smakebuf_r>:
 8000d14:	898b      	ldrh	r3, [r1, #12]
 8000d16:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000d18:	079d      	lsls	r5, r3, #30
 8000d1a:	4606      	mov	r6, r0
 8000d1c:	460c      	mov	r4, r1
 8000d1e:	d507      	bpl.n	8000d30 <__smakebuf_r+0x1c>
 8000d20:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000d24:	6023      	str	r3, [r4, #0]
 8000d26:	6123      	str	r3, [r4, #16]
 8000d28:	2301      	movs	r3, #1
 8000d2a:	6163      	str	r3, [r4, #20]
 8000d2c:	b002      	add	sp, #8
 8000d2e:	bd70      	pop	{r4, r5, r6, pc}
 8000d30:	ab01      	add	r3, sp, #4
 8000d32:	466a      	mov	r2, sp
 8000d34:	f7ff ffca 	bl	8000ccc <__swhatbuf_r>
 8000d38:	9900      	ldr	r1, [sp, #0]
 8000d3a:	4605      	mov	r5, r0
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	f000 f877 	bl	8000e30 <_malloc_r>
 8000d42:	b948      	cbnz	r0, 8000d58 <__smakebuf_r+0x44>
 8000d44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000d48:	059a      	lsls	r2, r3, #22
 8000d4a:	d4ef      	bmi.n	8000d2c <__smakebuf_r+0x18>
 8000d4c:	f023 0303 	bic.w	r3, r3, #3
 8000d50:	f043 0302 	orr.w	r3, r3, #2
 8000d54:	81a3      	strh	r3, [r4, #12]
 8000d56:	e7e3      	b.n	8000d20 <__smakebuf_r+0xc>
 8000d58:	4b0d      	ldr	r3, [pc, #52]	; (8000d90 <__smakebuf_r+0x7c>)
 8000d5a:	62b3      	str	r3, [r6, #40]	; 0x28
 8000d5c:	89a3      	ldrh	r3, [r4, #12]
 8000d5e:	6020      	str	r0, [r4, #0]
 8000d60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d64:	81a3      	strh	r3, [r4, #12]
 8000d66:	9b00      	ldr	r3, [sp, #0]
 8000d68:	6163      	str	r3, [r4, #20]
 8000d6a:	9b01      	ldr	r3, [sp, #4]
 8000d6c:	6120      	str	r0, [r4, #16]
 8000d6e:	b15b      	cbz	r3, 8000d88 <__smakebuf_r+0x74>
 8000d70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000d74:	4630      	mov	r0, r6
 8000d76:	f000 f93d 	bl	8000ff4 <_isatty_r>
 8000d7a:	b128      	cbz	r0, 8000d88 <__smakebuf_r+0x74>
 8000d7c:	89a3      	ldrh	r3, [r4, #12]
 8000d7e:	f023 0303 	bic.w	r3, r3, #3
 8000d82:	f043 0301 	orr.w	r3, r3, #1
 8000d86:	81a3      	strh	r3, [r4, #12]
 8000d88:	89a0      	ldrh	r0, [r4, #12]
 8000d8a:	4305      	orrs	r5, r0
 8000d8c:	81a5      	strh	r5, [r4, #12]
 8000d8e:	e7cd      	b.n	8000d2c <__smakebuf_r+0x18>
 8000d90:	08000b25 	.word	0x08000b25

08000d94 <_free_r>:
 8000d94:	b538      	push	{r3, r4, r5, lr}
 8000d96:	4605      	mov	r5, r0
 8000d98:	2900      	cmp	r1, #0
 8000d9a:	d045      	beq.n	8000e28 <_free_r+0x94>
 8000d9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000da0:	1f0c      	subs	r4, r1, #4
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	bfb8      	it	lt
 8000da6:	18e4      	addlt	r4, r4, r3
 8000da8:	f000 f946 	bl	8001038 <__malloc_lock>
 8000dac:	4a1f      	ldr	r2, [pc, #124]	; (8000e2c <_free_r+0x98>)
 8000dae:	6813      	ldr	r3, [r2, #0]
 8000db0:	4610      	mov	r0, r2
 8000db2:	b933      	cbnz	r3, 8000dc2 <_free_r+0x2e>
 8000db4:	6063      	str	r3, [r4, #4]
 8000db6:	6014      	str	r4, [r2, #0]
 8000db8:	4628      	mov	r0, r5
 8000dba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000dbe:	f000 b941 	b.w	8001044 <__malloc_unlock>
 8000dc2:	42a3      	cmp	r3, r4
 8000dc4:	d90b      	bls.n	8000dde <_free_r+0x4a>
 8000dc6:	6821      	ldr	r1, [r4, #0]
 8000dc8:	1862      	adds	r2, r4, r1
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	bf04      	itt	eq
 8000dce:	681a      	ldreq	r2, [r3, #0]
 8000dd0:	685b      	ldreq	r3, [r3, #4]
 8000dd2:	6063      	str	r3, [r4, #4]
 8000dd4:	bf04      	itt	eq
 8000dd6:	1852      	addeq	r2, r2, r1
 8000dd8:	6022      	streq	r2, [r4, #0]
 8000dda:	6004      	str	r4, [r0, #0]
 8000ddc:	e7ec      	b.n	8000db8 <_free_r+0x24>
 8000dde:	461a      	mov	r2, r3
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	b10b      	cbz	r3, 8000de8 <_free_r+0x54>
 8000de4:	42a3      	cmp	r3, r4
 8000de6:	d9fa      	bls.n	8000dde <_free_r+0x4a>
 8000de8:	6811      	ldr	r1, [r2, #0]
 8000dea:	1850      	adds	r0, r2, r1
 8000dec:	42a0      	cmp	r0, r4
 8000dee:	d10b      	bne.n	8000e08 <_free_r+0x74>
 8000df0:	6820      	ldr	r0, [r4, #0]
 8000df2:	4401      	add	r1, r0
 8000df4:	1850      	adds	r0, r2, r1
 8000df6:	4283      	cmp	r3, r0
 8000df8:	6011      	str	r1, [r2, #0]
 8000dfa:	d1dd      	bne.n	8000db8 <_free_r+0x24>
 8000dfc:	6818      	ldr	r0, [r3, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	6053      	str	r3, [r2, #4]
 8000e02:	4401      	add	r1, r0
 8000e04:	6011      	str	r1, [r2, #0]
 8000e06:	e7d7      	b.n	8000db8 <_free_r+0x24>
 8000e08:	d902      	bls.n	8000e10 <_free_r+0x7c>
 8000e0a:	230c      	movs	r3, #12
 8000e0c:	602b      	str	r3, [r5, #0]
 8000e0e:	e7d3      	b.n	8000db8 <_free_r+0x24>
 8000e10:	6820      	ldr	r0, [r4, #0]
 8000e12:	1821      	adds	r1, r4, r0
 8000e14:	428b      	cmp	r3, r1
 8000e16:	bf04      	itt	eq
 8000e18:	6819      	ldreq	r1, [r3, #0]
 8000e1a:	685b      	ldreq	r3, [r3, #4]
 8000e1c:	6063      	str	r3, [r4, #4]
 8000e1e:	bf04      	itt	eq
 8000e20:	1809      	addeq	r1, r1, r0
 8000e22:	6021      	streq	r1, [r4, #0]
 8000e24:	6054      	str	r4, [r2, #4]
 8000e26:	e7c7      	b.n	8000db8 <_free_r+0x24>
 8000e28:	bd38      	pop	{r3, r4, r5, pc}
 8000e2a:	bf00      	nop
 8000e2c:	20000084 	.word	0x20000084

08000e30 <_malloc_r>:
 8000e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e32:	1ccd      	adds	r5, r1, #3
 8000e34:	f025 0503 	bic.w	r5, r5, #3
 8000e38:	3508      	adds	r5, #8
 8000e3a:	2d0c      	cmp	r5, #12
 8000e3c:	bf38      	it	cc
 8000e3e:	250c      	movcc	r5, #12
 8000e40:	2d00      	cmp	r5, #0
 8000e42:	4606      	mov	r6, r0
 8000e44:	db01      	blt.n	8000e4a <_malloc_r+0x1a>
 8000e46:	42a9      	cmp	r1, r5
 8000e48:	d903      	bls.n	8000e52 <_malloc_r+0x22>
 8000e4a:	230c      	movs	r3, #12
 8000e4c:	6033      	str	r3, [r6, #0]
 8000e4e:	2000      	movs	r0, #0
 8000e50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e52:	f000 f8f1 	bl	8001038 <__malloc_lock>
 8000e56:	4921      	ldr	r1, [pc, #132]	; (8000edc <_malloc_r+0xac>)
 8000e58:	680a      	ldr	r2, [r1, #0]
 8000e5a:	4614      	mov	r4, r2
 8000e5c:	b99c      	cbnz	r4, 8000e86 <_malloc_r+0x56>
 8000e5e:	4f20      	ldr	r7, [pc, #128]	; (8000ee0 <_malloc_r+0xb0>)
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	b923      	cbnz	r3, 8000e6e <_malloc_r+0x3e>
 8000e64:	4621      	mov	r1, r4
 8000e66:	4630      	mov	r0, r6
 8000e68:	f000 f83c 	bl	8000ee4 <_sbrk_r>
 8000e6c:	6038      	str	r0, [r7, #0]
 8000e6e:	4629      	mov	r1, r5
 8000e70:	4630      	mov	r0, r6
 8000e72:	f000 f837 	bl	8000ee4 <_sbrk_r>
 8000e76:	1c43      	adds	r3, r0, #1
 8000e78:	d123      	bne.n	8000ec2 <_malloc_r+0x92>
 8000e7a:	230c      	movs	r3, #12
 8000e7c:	6033      	str	r3, [r6, #0]
 8000e7e:	4630      	mov	r0, r6
 8000e80:	f000 f8e0 	bl	8001044 <__malloc_unlock>
 8000e84:	e7e3      	b.n	8000e4e <_malloc_r+0x1e>
 8000e86:	6823      	ldr	r3, [r4, #0]
 8000e88:	1b5b      	subs	r3, r3, r5
 8000e8a:	d417      	bmi.n	8000ebc <_malloc_r+0x8c>
 8000e8c:	2b0b      	cmp	r3, #11
 8000e8e:	d903      	bls.n	8000e98 <_malloc_r+0x68>
 8000e90:	6023      	str	r3, [r4, #0]
 8000e92:	441c      	add	r4, r3
 8000e94:	6025      	str	r5, [r4, #0]
 8000e96:	e004      	b.n	8000ea2 <_malloc_r+0x72>
 8000e98:	6863      	ldr	r3, [r4, #4]
 8000e9a:	42a2      	cmp	r2, r4
 8000e9c:	bf0c      	ite	eq
 8000e9e:	600b      	streq	r3, [r1, #0]
 8000ea0:	6053      	strne	r3, [r2, #4]
 8000ea2:	4630      	mov	r0, r6
 8000ea4:	f000 f8ce 	bl	8001044 <__malloc_unlock>
 8000ea8:	f104 000b 	add.w	r0, r4, #11
 8000eac:	1d23      	adds	r3, r4, #4
 8000eae:	f020 0007 	bic.w	r0, r0, #7
 8000eb2:	1ac2      	subs	r2, r0, r3
 8000eb4:	d0cc      	beq.n	8000e50 <_malloc_r+0x20>
 8000eb6:	1a1b      	subs	r3, r3, r0
 8000eb8:	50a3      	str	r3, [r4, r2]
 8000eba:	e7c9      	b.n	8000e50 <_malloc_r+0x20>
 8000ebc:	4622      	mov	r2, r4
 8000ebe:	6864      	ldr	r4, [r4, #4]
 8000ec0:	e7cc      	b.n	8000e5c <_malloc_r+0x2c>
 8000ec2:	1cc4      	adds	r4, r0, #3
 8000ec4:	f024 0403 	bic.w	r4, r4, #3
 8000ec8:	42a0      	cmp	r0, r4
 8000eca:	d0e3      	beq.n	8000e94 <_malloc_r+0x64>
 8000ecc:	1a21      	subs	r1, r4, r0
 8000ece:	4630      	mov	r0, r6
 8000ed0:	f000 f808 	bl	8000ee4 <_sbrk_r>
 8000ed4:	3001      	adds	r0, #1
 8000ed6:	d1dd      	bne.n	8000e94 <_malloc_r+0x64>
 8000ed8:	e7cf      	b.n	8000e7a <_malloc_r+0x4a>
 8000eda:	bf00      	nop
 8000edc:	20000084 	.word	0x20000084
 8000ee0:	20000088 	.word	0x20000088

08000ee4 <_sbrk_r>:
 8000ee4:	b538      	push	{r3, r4, r5, lr}
 8000ee6:	4d06      	ldr	r5, [pc, #24]	; (8000f00 <_sbrk_r+0x1c>)
 8000ee8:	2300      	movs	r3, #0
 8000eea:	4604      	mov	r4, r0
 8000eec:	4608      	mov	r0, r1
 8000eee:	602b      	str	r3, [r5, #0]
 8000ef0:	f7ff fa9e 	bl	8000430 <_sbrk>
 8000ef4:	1c43      	adds	r3, r0, #1
 8000ef6:	d102      	bne.n	8000efe <_sbrk_r+0x1a>
 8000ef8:	682b      	ldr	r3, [r5, #0]
 8000efa:	b103      	cbz	r3, 8000efe <_sbrk_r+0x1a>
 8000efc:	6023      	str	r3, [r4, #0]
 8000efe:	bd38      	pop	{r3, r4, r5, pc}
 8000f00:	200000a0 	.word	0x200000a0

08000f04 <__sread>:
 8000f04:	b510      	push	{r4, lr}
 8000f06:	460c      	mov	r4, r1
 8000f08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f0c:	f000 f8a0 	bl	8001050 <_read_r>
 8000f10:	2800      	cmp	r0, #0
 8000f12:	bfab      	itete	ge
 8000f14:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000f16:	89a3      	ldrhlt	r3, [r4, #12]
 8000f18:	181b      	addge	r3, r3, r0
 8000f1a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000f1e:	bfac      	ite	ge
 8000f20:	6563      	strge	r3, [r4, #84]	; 0x54
 8000f22:	81a3      	strhlt	r3, [r4, #12]
 8000f24:	bd10      	pop	{r4, pc}

08000f26 <__swrite>:
 8000f26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f2a:	461f      	mov	r7, r3
 8000f2c:	898b      	ldrh	r3, [r1, #12]
 8000f2e:	05db      	lsls	r3, r3, #23
 8000f30:	4605      	mov	r5, r0
 8000f32:	460c      	mov	r4, r1
 8000f34:	4616      	mov	r6, r2
 8000f36:	d505      	bpl.n	8000f44 <__swrite+0x1e>
 8000f38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	2200      	movs	r2, #0
 8000f40:	f000 f868 	bl	8001014 <_lseek_r>
 8000f44:	89a3      	ldrh	r3, [r4, #12]
 8000f46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000f4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000f4e:	81a3      	strh	r3, [r4, #12]
 8000f50:	4632      	mov	r2, r6
 8000f52:	463b      	mov	r3, r7
 8000f54:	4628      	mov	r0, r5
 8000f56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000f5a:	f000 b817 	b.w	8000f8c <_write_r>

08000f5e <__sseek>:
 8000f5e:	b510      	push	{r4, lr}
 8000f60:	460c      	mov	r4, r1
 8000f62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f66:	f000 f855 	bl	8001014 <_lseek_r>
 8000f6a:	1c43      	adds	r3, r0, #1
 8000f6c:	89a3      	ldrh	r3, [r4, #12]
 8000f6e:	bf15      	itete	ne
 8000f70:	6560      	strne	r0, [r4, #84]	; 0x54
 8000f72:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000f76:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000f7a:	81a3      	strheq	r3, [r4, #12]
 8000f7c:	bf18      	it	ne
 8000f7e:	81a3      	strhne	r3, [r4, #12]
 8000f80:	bd10      	pop	{r4, pc}

08000f82 <__sclose>:
 8000f82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f86:	f000 b813 	b.w	8000fb0 <_close_r>
	...

08000f8c <_write_r>:
 8000f8c:	b538      	push	{r3, r4, r5, lr}
 8000f8e:	4d07      	ldr	r5, [pc, #28]	; (8000fac <_write_r+0x20>)
 8000f90:	4604      	mov	r4, r0
 8000f92:	4608      	mov	r0, r1
 8000f94:	4611      	mov	r1, r2
 8000f96:	2200      	movs	r2, #0
 8000f98:	602a      	str	r2, [r5, #0]
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	f7ff f9fb 	bl	8000396 <_write>
 8000fa0:	1c43      	adds	r3, r0, #1
 8000fa2:	d102      	bne.n	8000faa <_write_r+0x1e>
 8000fa4:	682b      	ldr	r3, [r5, #0]
 8000fa6:	b103      	cbz	r3, 8000faa <_write_r+0x1e>
 8000fa8:	6023      	str	r3, [r4, #0]
 8000faa:	bd38      	pop	{r3, r4, r5, pc}
 8000fac:	200000a0 	.word	0x200000a0

08000fb0 <_close_r>:
 8000fb0:	b538      	push	{r3, r4, r5, lr}
 8000fb2:	4d06      	ldr	r5, [pc, #24]	; (8000fcc <_close_r+0x1c>)
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	4604      	mov	r4, r0
 8000fb8:	4608      	mov	r0, r1
 8000fba:	602b      	str	r3, [r5, #0]
 8000fbc:	f7ff fa07 	bl	80003ce <_close>
 8000fc0:	1c43      	adds	r3, r0, #1
 8000fc2:	d102      	bne.n	8000fca <_close_r+0x1a>
 8000fc4:	682b      	ldr	r3, [r5, #0]
 8000fc6:	b103      	cbz	r3, 8000fca <_close_r+0x1a>
 8000fc8:	6023      	str	r3, [r4, #0]
 8000fca:	bd38      	pop	{r3, r4, r5, pc}
 8000fcc:	200000a0 	.word	0x200000a0

08000fd0 <_fstat_r>:
 8000fd0:	b538      	push	{r3, r4, r5, lr}
 8000fd2:	4d07      	ldr	r5, [pc, #28]	; (8000ff0 <_fstat_r+0x20>)
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	4604      	mov	r4, r0
 8000fd8:	4608      	mov	r0, r1
 8000fda:	4611      	mov	r1, r2
 8000fdc:	602b      	str	r3, [r5, #0]
 8000fde:	f7ff fa01 	bl	80003e4 <_fstat>
 8000fe2:	1c43      	adds	r3, r0, #1
 8000fe4:	d102      	bne.n	8000fec <_fstat_r+0x1c>
 8000fe6:	682b      	ldr	r3, [r5, #0]
 8000fe8:	b103      	cbz	r3, 8000fec <_fstat_r+0x1c>
 8000fea:	6023      	str	r3, [r4, #0]
 8000fec:	bd38      	pop	{r3, r4, r5, pc}
 8000fee:	bf00      	nop
 8000ff0:	200000a0 	.word	0x200000a0

08000ff4 <_isatty_r>:
 8000ff4:	b538      	push	{r3, r4, r5, lr}
 8000ff6:	4d06      	ldr	r5, [pc, #24]	; (8001010 <_isatty_r+0x1c>)
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	4604      	mov	r4, r0
 8000ffc:	4608      	mov	r0, r1
 8000ffe:	602b      	str	r3, [r5, #0]
 8001000:	f7ff f9ff 	bl	8000402 <_isatty>
 8001004:	1c43      	adds	r3, r0, #1
 8001006:	d102      	bne.n	800100e <_isatty_r+0x1a>
 8001008:	682b      	ldr	r3, [r5, #0]
 800100a:	b103      	cbz	r3, 800100e <_isatty_r+0x1a>
 800100c:	6023      	str	r3, [r4, #0]
 800100e:	bd38      	pop	{r3, r4, r5, pc}
 8001010:	200000a0 	.word	0x200000a0

08001014 <_lseek_r>:
 8001014:	b538      	push	{r3, r4, r5, lr}
 8001016:	4d07      	ldr	r5, [pc, #28]	; (8001034 <_lseek_r+0x20>)
 8001018:	4604      	mov	r4, r0
 800101a:	4608      	mov	r0, r1
 800101c:	4611      	mov	r1, r2
 800101e:	2200      	movs	r2, #0
 8001020:	602a      	str	r2, [r5, #0]
 8001022:	461a      	mov	r2, r3
 8001024:	f7ff f9f7 	bl	8000416 <_lseek>
 8001028:	1c43      	adds	r3, r0, #1
 800102a:	d102      	bne.n	8001032 <_lseek_r+0x1e>
 800102c:	682b      	ldr	r3, [r5, #0]
 800102e:	b103      	cbz	r3, 8001032 <_lseek_r+0x1e>
 8001030:	6023      	str	r3, [r4, #0]
 8001032:	bd38      	pop	{r3, r4, r5, pc}
 8001034:	200000a0 	.word	0x200000a0

08001038 <__malloc_lock>:
 8001038:	4801      	ldr	r0, [pc, #4]	; (8001040 <__malloc_lock+0x8>)
 800103a:	f7ff be45 	b.w	8000cc8 <__retarget_lock_acquire_recursive>
 800103e:	bf00      	nop
 8001040:	20000098 	.word	0x20000098

08001044 <__malloc_unlock>:
 8001044:	4801      	ldr	r0, [pc, #4]	; (800104c <__malloc_unlock+0x8>)
 8001046:	f7ff be40 	b.w	8000cca <__retarget_lock_release_recursive>
 800104a:	bf00      	nop
 800104c:	20000098 	.word	0x20000098

08001050 <_read_r>:
 8001050:	b538      	push	{r3, r4, r5, lr}
 8001052:	4d07      	ldr	r5, [pc, #28]	; (8001070 <_read_r+0x20>)
 8001054:	4604      	mov	r4, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4611      	mov	r1, r2
 800105a:	2200      	movs	r2, #0
 800105c:	602a      	str	r2, [r5, #0]
 800105e:	461a      	mov	r2, r3
 8001060:	f7ff f97c 	bl	800035c <_read>
 8001064:	1c43      	adds	r3, r0, #1
 8001066:	d102      	bne.n	800106e <_read_r+0x1e>
 8001068:	682b      	ldr	r3, [r5, #0]
 800106a:	b103      	cbz	r3, 800106e <_read_r+0x1e>
 800106c:	6023      	str	r3, [r4, #0]
 800106e:	bd38      	pop	{r3, r4, r5, pc}
 8001070:	200000a0 	.word	0x200000a0

08001074 <_init>:
 8001074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001076:	bf00      	nop
 8001078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800107a:	bc08      	pop	{r3}
 800107c:	469e      	mov	lr, r3
 800107e:	4770      	bx	lr

08001080 <_fini>:
 8001080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001082:	bf00      	nop
 8001084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001086:	bc08      	pop	{r3}
 8001088:	469e      	mov	lr, r3
 800108a:	4770      	bx	lr

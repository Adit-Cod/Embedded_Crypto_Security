
8_crypto_driver-PolyAlphabetic_Cipher.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000213c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b4  0800230c  0800230c  0001230c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027c0  080027c0  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  080027c0  080027c0  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080027c0  080027c0  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027c0  080027c0  000127c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080027c4  080027c4  000127c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080027c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000044  20000068  08002830  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  08002830  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000541a  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000011d9  00000000  00000000  000254ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002c8  00000000  00000000  00026688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000240  00000000  00000000  00026950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b55d  00000000  00000000  00026b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004f9a  00000000  00000000  000420ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091ad1  00000000  00000000  00047087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d8b58  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000010f0  00000000  00000000  000d8bac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080022f4 	.word	0x080022f4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	080022f4 	.word	0x080022f4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <encrypt_monoalphabetic>:
#include<string.h>
#include"MonoAlphabetic_Cipher.h"

/* Encrypt using monoalphabetic engine */
void encrypt_monoalphabetic(char* plain_text, char* key, char* encryptedtext)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b086      	sub	sp, #24
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	60f8      	str	r0, [r7, #12]
 80002c8:	60b9      	str	r1, [r7, #8]
 80002ca:	607a      	str	r2, [r7, #4]
	char plaintext_l ;
    for(int i = 0; i < strlen(plain_text); i++)
 80002cc:	2300      	movs	r3, #0
 80002ce:	617b      	str	r3, [r7, #20]
 80002d0:	e02c      	b.n	800032c <encrypt_monoalphabetic+0x6c>
    {
    	plaintext_l = plain_text[i];
 80002d2:	697b      	ldr	r3, [r7, #20]
 80002d4:	68fa      	ldr	r2, [r7, #12]
 80002d6:	4413      	add	r3, r2
 80002d8:	781b      	ldrb	r3, [r3, #0]
 80002da:	74fb      	strb	r3, [r7, #19]

    	if(plaintext_l >= 'a' && plaintext_l <= 'z')
 80002dc:	7cfb      	ldrb	r3, [r7, #19]
 80002de:	2b60      	cmp	r3, #96	; 0x60
 80002e0:	d90c      	bls.n	80002fc <encrypt_monoalphabetic+0x3c>
 80002e2:	7cfb      	ldrb	r3, [r7, #19]
 80002e4:	2b7a      	cmp	r3, #122	; 0x7a
 80002e6:	d809      	bhi.n	80002fc <encrypt_monoalphabetic+0x3c>
    	{
    		encryptedtext[i] = key[plaintext_l - 'a'];
 80002e8:	7cfb      	ldrb	r3, [r7, #19]
 80002ea:	3b61      	subs	r3, #97	; 0x61
 80002ec:	68ba      	ldr	r2, [r7, #8]
 80002ee:	441a      	add	r2, r3
 80002f0:	697b      	ldr	r3, [r7, #20]
 80002f2:	6879      	ldr	r1, [r7, #4]
 80002f4:	440b      	add	r3, r1
 80002f6:	7812      	ldrb	r2, [r2, #0]
 80002f8:	701a      	strb	r2, [r3, #0]
 80002fa:	e014      	b.n	8000326 <encrypt_monoalphabetic+0x66>
    	}
    	else if(plaintext_l >= 'A' && plaintext_l <= 'Z')
 80002fc:	7cfb      	ldrb	r3, [r7, #19]
 80002fe:	2b40      	cmp	r3, #64	; 0x40
 8000300:	d90c      	bls.n	800031c <encrypt_monoalphabetic+0x5c>
 8000302:	7cfb      	ldrb	r3, [r7, #19]
 8000304:	2b5a      	cmp	r3, #90	; 0x5a
 8000306:	d809      	bhi.n	800031c <encrypt_monoalphabetic+0x5c>
    	{
    		encryptedtext[i] = key[plaintext_l - 'A'];
 8000308:	7cfb      	ldrb	r3, [r7, #19]
 800030a:	3b41      	subs	r3, #65	; 0x41
 800030c:	68ba      	ldr	r2, [r7, #8]
 800030e:	441a      	add	r2, r3
 8000310:	697b      	ldr	r3, [r7, #20]
 8000312:	6879      	ldr	r1, [r7, #4]
 8000314:	440b      	add	r3, r1
 8000316:	7812      	ldrb	r2, [r2, #0]
 8000318:	701a      	strb	r2, [r3, #0]
 800031a:	e004      	b.n	8000326 <encrypt_monoalphabetic+0x66>
    	}
    	else
    	{
    		encryptedtext[i] = plaintext_l;
 800031c:	697b      	ldr	r3, [r7, #20]
 800031e:	687a      	ldr	r2, [r7, #4]
 8000320:	4413      	add	r3, r2
 8000322:	7cfa      	ldrb	r2, [r7, #19]
 8000324:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < strlen(plain_text); i++)
 8000326:	697b      	ldr	r3, [r7, #20]
 8000328:	3301      	adds	r3, #1
 800032a:	617b      	str	r3, [r7, #20]
 800032c:	68f8      	ldr	r0, [r7, #12]
 800032e:	f7ff ff6f 	bl	8000210 <strlen>
 8000332:	4602      	mov	r2, r0
 8000334:	697b      	ldr	r3, [r7, #20]
 8000336:	429a      	cmp	r2, r3
 8000338:	d8cb      	bhi.n	80002d2 <encrypt_monoalphabetic+0x12>
    	}
    }
    encryptedtext[strlen(plain_text)] = '\0';
 800033a:	68f8      	ldr	r0, [r7, #12]
 800033c:	f7ff ff68 	bl	8000210 <strlen>
 8000340:	4602      	mov	r2, r0
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	4413      	add	r3, r2
 8000346:	2200      	movs	r2, #0
 8000348:	701a      	strb	r2, [r3, #0]
}
 800034a:	bf00      	nop
 800034c:	3718      	adds	r7, #24
 800034e:	46bd      	mov	sp, r7
 8000350:	bd80      	pop	{r7, pc}

08000352 <decrypt_monoalphabetic>:


void decrypt_monoalphabetic(char* encrypted_text, char* key, char* decryptedtext)
{
 8000352:	b580      	push	{r7, lr}
 8000354:	b088      	sub	sp, #32
 8000356:	af00      	add	r7, sp, #0
 8000358:	60f8      	str	r0, [r7, #12]
 800035a:	60b9      	str	r1, [r7, #8]
 800035c:	607a      	str	r2, [r7, #4]

	char encryptor;
	for(int i = 0 ; i< strlen(encrypted_text); i++)
 800035e:	2300      	movs	r3, #0
 8000360:	61fb      	str	r3, [r7, #28]
 8000362:	e04e      	b.n	8000402 <decrypt_monoalphabetic+0xb0>
	{
		encryptor = encrypted_text[i];
 8000364:	69fb      	ldr	r3, [r7, #28]
 8000366:	68fa      	ldr	r2, [r7, #12]
 8000368:	4413      	add	r3, r2
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	74fb      	strb	r3, [r7, #19]
		if(encryptor >= 'a' && encryptor <= 'z')
 800036e:	7cfb      	ldrb	r3, [r7, #19]
 8000370:	2b60      	cmp	r3, #96	; 0x60
 8000372:	d91d      	bls.n	80003b0 <decrypt_monoalphabetic+0x5e>
 8000374:	7cfb      	ldrb	r3, [r7, #19]
 8000376:	2b7a      	cmp	r3, #122	; 0x7a
 8000378:	d81a      	bhi.n	80003b0 <decrypt_monoalphabetic+0x5e>
		{
			for(int i = 0 ; i < 26 ; i++)
 800037a:	2300      	movs	r3, #0
 800037c:	61bb      	str	r3, [r7, #24]
 800037e:	e013      	b.n	80003a8 <decrypt_monoalphabetic+0x56>
			{
				if(encryptor == key[i])
 8000380:	69bb      	ldr	r3, [r7, #24]
 8000382:	68ba      	ldr	r2, [r7, #8]
 8000384:	4413      	add	r3, r2
 8000386:	781b      	ldrb	r3, [r3, #0]
 8000388:	7cfa      	ldrb	r2, [r7, #19]
 800038a:	429a      	cmp	r2, r3
 800038c:	d109      	bne.n	80003a2 <decrypt_monoalphabetic+0x50>
				{
					decryptedtext[i] = i + 'a';
 800038e:	69bb      	ldr	r3, [r7, #24]
 8000390:	b2da      	uxtb	r2, r3
 8000392:	69bb      	ldr	r3, [r7, #24]
 8000394:	6879      	ldr	r1, [r7, #4]
 8000396:	440b      	add	r3, r1
 8000398:	3261      	adds	r2, #97	; 0x61
 800039a:	b2d2      	uxtb	r2, r2
 800039c:	701a      	strb	r2, [r3, #0]
					break;
 800039e:	bf00      	nop
			for(int i = 0 ; i < 26 ; i++)
 80003a0:	e02c      	b.n	80003fc <decrypt_monoalphabetic+0xaa>
 80003a2:	69bb      	ldr	r3, [r7, #24]
 80003a4:	3301      	adds	r3, #1
 80003a6:	61bb      	str	r3, [r7, #24]
 80003a8:	69bb      	ldr	r3, [r7, #24]
 80003aa:	2b19      	cmp	r3, #25
 80003ac:	dde8      	ble.n	8000380 <decrypt_monoalphabetic+0x2e>
 80003ae:	e025      	b.n	80003fc <decrypt_monoalphabetic+0xaa>
				}
			}
		}
		else if(encryptor >= 'A' && encryptor <= 'Z')
 80003b0:	7cfb      	ldrb	r3, [r7, #19]
 80003b2:	2b40      	cmp	r3, #64	; 0x40
 80003b4:	d91d      	bls.n	80003f2 <decrypt_monoalphabetic+0xa0>
 80003b6:	7cfb      	ldrb	r3, [r7, #19]
 80003b8:	2b5a      	cmp	r3, #90	; 0x5a
 80003ba:	d81a      	bhi.n	80003f2 <decrypt_monoalphabetic+0xa0>
		{
			for(int i = 0 ; i < 26 ; i++)
 80003bc:	2300      	movs	r3, #0
 80003be:	617b      	str	r3, [r7, #20]
 80003c0:	e013      	b.n	80003ea <decrypt_monoalphabetic+0x98>
			{
				if(encryptor == key[i])
 80003c2:	697b      	ldr	r3, [r7, #20]
 80003c4:	68ba      	ldr	r2, [r7, #8]
 80003c6:	4413      	add	r3, r2
 80003c8:	781b      	ldrb	r3, [r3, #0]
 80003ca:	7cfa      	ldrb	r2, [r7, #19]
 80003cc:	429a      	cmp	r2, r3
 80003ce:	d109      	bne.n	80003e4 <decrypt_monoalphabetic+0x92>
			    {
					decryptedtext[i] = i + 'A';
 80003d0:	697b      	ldr	r3, [r7, #20]
 80003d2:	b2da      	uxtb	r2, r3
 80003d4:	697b      	ldr	r3, [r7, #20]
 80003d6:	6879      	ldr	r1, [r7, #4]
 80003d8:	440b      	add	r3, r1
 80003da:	3241      	adds	r2, #65	; 0x41
 80003dc:	b2d2      	uxtb	r2, r2
 80003de:	701a      	strb	r2, [r3, #0]
					break;
 80003e0:	bf00      	nop
			for(int i = 0 ; i < 26 ; i++)
 80003e2:	e00b      	b.n	80003fc <decrypt_monoalphabetic+0xaa>
 80003e4:	697b      	ldr	r3, [r7, #20]
 80003e6:	3301      	adds	r3, #1
 80003e8:	617b      	str	r3, [r7, #20]
 80003ea:	697b      	ldr	r3, [r7, #20]
 80003ec:	2b19      	cmp	r3, #25
 80003ee:	dde8      	ble.n	80003c2 <decrypt_monoalphabetic+0x70>
 80003f0:	e004      	b.n	80003fc <decrypt_monoalphabetic+0xaa>
				}
			}
		}
		else
			decryptedtext[i] = encryptor;
 80003f2:	69fb      	ldr	r3, [r7, #28]
 80003f4:	687a      	ldr	r2, [r7, #4]
 80003f6:	4413      	add	r3, r2
 80003f8:	7cfa      	ldrb	r2, [r7, #19]
 80003fa:	701a      	strb	r2, [r3, #0]
	for(int i = 0 ; i< strlen(encrypted_text); i++)
 80003fc:	69fb      	ldr	r3, [r7, #28]
 80003fe:	3301      	adds	r3, #1
 8000400:	61fb      	str	r3, [r7, #28]
 8000402:	68f8      	ldr	r0, [r7, #12]
 8000404:	f7ff ff04 	bl	8000210 <strlen>
 8000408:	4602      	mov	r2, r0
 800040a:	69fb      	ldr	r3, [r7, #28]
 800040c:	429a      	cmp	r2, r3
 800040e:	d8a9      	bhi.n	8000364 <decrypt_monoalphabetic+0x12>
	}
	decryptedtext[strlen(encrypted_text)] = '\0';
 8000410:	68f8      	ldr	r0, [r7, #12]
 8000412:	f7ff fefd 	bl	8000210 <strlen>
 8000416:	4602      	mov	r2, r0
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	4413      	add	r3, r2
 800041c:	2200      	movs	r2, #0
 800041e:	701a      	strb	r2, [r3, #0]
}
 8000420:	bf00      	nop
 8000422:	3720      	adds	r7, #32
 8000424:	46bd      	mov	sp, r7
 8000426:	bd80      	pop	{r7, pc}

08000428 <encrypt_Vigenere>:
 */

#include "PolyAlphabetic_Cipher.h"

void encrypt_Vigenere(char* plain_text, char* key, char* encrypted_text)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b088      	sub	sp, #32
 800042c:	af00      	add	r7, sp, #0
 800042e:	60f8      	str	r0, [r7, #12]
 8000430:	60b9      	str	r1, [r7, #8]
 8000432:	607a      	str	r2, [r7, #4]
	printf("\r\n Vigenere Engine is now starting... \r\n");
 8000434:	483c      	ldr	r0, [pc, #240]	; (8000528 <encrypt_Vigenere+0x100>)
 8000436:	f001 f82d 	bl	8001494 <puts>
    char encryptor;
    int keyword_length = strlen(key);
 800043a:	68b8      	ldr	r0, [r7, #8]
 800043c:	f7ff fee8 	bl	8000210 <strlen>
 8000440:	4603      	mov	r3, r0
 8000442:	617b      	str	r3, [r7, #20]
    int looper = 0 ;
 8000444:	2300      	movs	r3, #0
 8000446:	61fb      	str	r3, [r7, #28]
    for(int i = 0 ; i < strlen(plain_text); i ++)
 8000448:	2300      	movs	r3, #0
 800044a:	61bb      	str	r3, [r7, #24]
 800044c:	e058      	b.n	8000500 <encrypt_Vigenere+0xd8>
    {
    	encryptor = plain_text[i];
 800044e:	69bb      	ldr	r3, [r7, #24]
 8000450:	68fa      	ldr	r2, [r7, #12]
 8000452:	4413      	add	r3, r2
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	74fb      	strb	r3, [r7, #19]

    	if(looper == keyword_length)
 8000458:	69fa      	ldr	r2, [r7, #28]
 800045a:	697b      	ldr	r3, [r7, #20]
 800045c:	429a      	cmp	r2, r3
 800045e:	d101      	bne.n	8000464 <encrypt_Vigenere+0x3c>
    		looper = 0;
 8000460:	2300      	movs	r3, #0
 8000462:	61fb      	str	r3, [r7, #28]
    	if(encryptor >= 'a' && encryptor <= 'z')
 8000464:	7cfb      	ldrb	r3, [r7, #19]
 8000466:	2b60      	cmp	r3, #96	; 0x60
 8000468:	d91f      	bls.n	80004aa <encrypt_Vigenere+0x82>
 800046a:	7cfb      	ldrb	r3, [r7, #19]
 800046c:	2b7a      	cmp	r3, #122	; 0x7a
 800046e:	d81c      	bhi.n	80004aa <encrypt_Vigenere+0x82>
    	{
    		encrypted_text[i] = (( encryptor - 'a' + (key[looper++] - 'a'))%MAX_ALPHABET_LENGTH) + 'a';
 8000470:	7cfb      	ldrb	r3, [r7, #19]
 8000472:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8000476:	69fb      	ldr	r3, [r7, #28]
 8000478:	1c59      	adds	r1, r3, #1
 800047a:	61f9      	str	r1, [r7, #28]
 800047c:	4619      	mov	r1, r3
 800047e:	68bb      	ldr	r3, [r7, #8]
 8000480:	440b      	add	r3, r1
 8000482:	781b      	ldrb	r3, [r3, #0]
 8000484:	3b61      	subs	r3, #97	; 0x61
 8000486:	4413      	add	r3, r2
 8000488:	461a      	mov	r2, r3
 800048a:	4b28      	ldr	r3, [pc, #160]	; (800052c <encrypt_Vigenere+0x104>)
 800048c:	fba3 1302 	umull	r1, r3, r3, r2
 8000490:	08db      	lsrs	r3, r3, #3
 8000492:	211a      	movs	r1, #26
 8000494:	fb01 f303 	mul.w	r3, r1, r3
 8000498:	1ad3      	subs	r3, r2, r3
 800049a:	b2da      	uxtb	r2, r3
 800049c:	69bb      	ldr	r3, [r7, #24]
 800049e:	6879      	ldr	r1, [r7, #4]
 80004a0:	440b      	add	r3, r1
 80004a2:	3261      	adds	r2, #97	; 0x61
 80004a4:	b2d2      	uxtb	r2, r2
 80004a6:	701a      	strb	r2, [r3, #0]
 80004a8:	e027      	b.n	80004fa <encrypt_Vigenere+0xd2>
    	}
    	else if(encryptor >= 'A' && encryptor <= 'Z')
 80004aa:	7cfb      	ldrb	r3, [r7, #19]
 80004ac:	2b40      	cmp	r3, #64	; 0x40
 80004ae:	d91f      	bls.n	80004f0 <encrypt_Vigenere+0xc8>
 80004b0:	7cfb      	ldrb	r3, [r7, #19]
 80004b2:	2b5a      	cmp	r3, #90	; 0x5a
 80004b4:	d81c      	bhi.n	80004f0 <encrypt_Vigenere+0xc8>
    	{
    		encrypted_text[i] = (( encryptor - 'A' + (key[looper++] - 'A'))%MAX_ALPHABET_LENGTH) + 'A';
 80004b6:	7cfb      	ldrb	r3, [r7, #19]
 80004b8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80004bc:	69fb      	ldr	r3, [r7, #28]
 80004be:	1c59      	adds	r1, r3, #1
 80004c0:	61f9      	str	r1, [r7, #28]
 80004c2:	4619      	mov	r1, r3
 80004c4:	68bb      	ldr	r3, [r7, #8]
 80004c6:	440b      	add	r3, r1
 80004c8:	781b      	ldrb	r3, [r3, #0]
 80004ca:	3b41      	subs	r3, #65	; 0x41
 80004cc:	4413      	add	r3, r2
 80004ce:	461a      	mov	r2, r3
 80004d0:	4b16      	ldr	r3, [pc, #88]	; (800052c <encrypt_Vigenere+0x104>)
 80004d2:	fba3 1302 	umull	r1, r3, r3, r2
 80004d6:	08db      	lsrs	r3, r3, #3
 80004d8:	211a      	movs	r1, #26
 80004da:	fb01 f303 	mul.w	r3, r1, r3
 80004de:	1ad3      	subs	r3, r2, r3
 80004e0:	b2da      	uxtb	r2, r3
 80004e2:	69bb      	ldr	r3, [r7, #24]
 80004e4:	6879      	ldr	r1, [r7, #4]
 80004e6:	440b      	add	r3, r1
 80004e8:	3241      	adds	r2, #65	; 0x41
 80004ea:	b2d2      	uxtb	r2, r2
 80004ec:	701a      	strb	r2, [r3, #0]
 80004ee:	e004      	b.n	80004fa <encrypt_Vigenere+0xd2>
    	}
    	else
    		encrypted_text[i] = encryptor;
 80004f0:	69bb      	ldr	r3, [r7, #24]
 80004f2:	687a      	ldr	r2, [r7, #4]
 80004f4:	4413      	add	r3, r2
 80004f6:	7cfa      	ldrb	r2, [r7, #19]
 80004f8:	701a      	strb	r2, [r3, #0]
    for(int i = 0 ; i < strlen(plain_text); i ++)
 80004fa:	69bb      	ldr	r3, [r7, #24]
 80004fc:	3301      	adds	r3, #1
 80004fe:	61bb      	str	r3, [r7, #24]
 8000500:	68f8      	ldr	r0, [r7, #12]
 8000502:	f7ff fe85 	bl	8000210 <strlen>
 8000506:	4602      	mov	r2, r0
 8000508:	69bb      	ldr	r3, [r7, #24]
 800050a:	429a      	cmp	r2, r3
 800050c:	d89f      	bhi.n	800044e <encrypt_Vigenere+0x26>
    }
    encrypted_text[strlen(plain_text)] = '\0';
 800050e:	68f8      	ldr	r0, [r7, #12]
 8000510:	f7ff fe7e 	bl	8000210 <strlen>
 8000514:	4602      	mov	r2, r0
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	4413      	add	r3, r2
 800051a:	2200      	movs	r2, #0
 800051c:	701a      	strb	r2, [r3, #0]
}
 800051e:	bf00      	nop
 8000520:	3720      	adds	r7, #32
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	0800230c 	.word	0x0800230c
 800052c:	4ec4ec4f 	.word	0x4ec4ec4f

08000530 <decrypt_Vigenere>:

void decrypt_Vigenere(char* encrypted_text, char* key, char* decrypted_text)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b088      	sub	sp, #32
 8000534:	af00      	add	r7, sp, #0
 8000536:	60f8      	str	r0, [r7, #12]
 8000538:	60b9      	str	r1, [r7, #8]
 800053a:	607a      	str	r2, [r7, #4]
	    printf("\r\n Vigenere Engine is now Decrypting ... \r\n");
 800053c:	483d      	ldr	r0, [pc, #244]	; (8000634 <decrypt_Vigenere+0x104>)
 800053e:	f000 ffa9 	bl	8001494 <puts>
	    char decryptor;
	    int keyword_length = strlen(key);
 8000542:	68b8      	ldr	r0, [r7, #8]
 8000544:	f7ff fe64 	bl	8000210 <strlen>
 8000548:	4603      	mov	r3, r0
 800054a:	617b      	str	r3, [r7, #20]
	    int looper = 0 ;
 800054c:	2300      	movs	r3, #0
 800054e:	61fb      	str	r3, [r7, #28]
	    for(int i = 0 ; i < strlen(encrypted_text); i ++)
 8000550:	2300      	movs	r3, #0
 8000552:	61bb      	str	r3, [r7, #24]
 8000554:	e05a      	b.n	800060c <decrypt_Vigenere+0xdc>
	    {
	    	decryptor = encrypted_text[i];
 8000556:	69bb      	ldr	r3, [r7, #24]
 8000558:	68fa      	ldr	r2, [r7, #12]
 800055a:	4413      	add	r3, r2
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	74fb      	strb	r3, [r7, #19]
	    	if(looper == keyword_length)
 8000560:	69fa      	ldr	r2, [r7, #28]
 8000562:	697b      	ldr	r3, [r7, #20]
 8000564:	429a      	cmp	r2, r3
 8000566:	d101      	bne.n	800056c <decrypt_Vigenere+0x3c>
	    	looper = 0;
 8000568:	2300      	movs	r3, #0
 800056a:	61fb      	str	r3, [r7, #28]
	    	if(decryptor >= 'a' && decryptor <= 'z')
 800056c:	7cfb      	ldrb	r3, [r7, #19]
 800056e:	2b60      	cmp	r3, #96	; 0x60
 8000570:	d920      	bls.n	80005b4 <decrypt_Vigenere+0x84>
 8000572:	7cfb      	ldrb	r3, [r7, #19]
 8000574:	2b7a      	cmp	r3, #122	; 0x7a
 8000576:	d81d      	bhi.n	80005b4 <decrypt_Vigenere+0x84>
	    	{
	    		decrypted_text[i] = (( decryptor - 'a' + (key[looper++] - 'a')+ MAX_ALPHABET_LENGTH )%MAX_ALPHABET_LENGTH) + 'a';
 8000578:	7cfb      	ldrb	r3, [r7, #19]
 800057a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800057e:	69fb      	ldr	r3, [r7, #28]
 8000580:	1c59      	adds	r1, r3, #1
 8000582:	61f9      	str	r1, [r7, #28]
 8000584:	4619      	mov	r1, r3
 8000586:	68bb      	ldr	r3, [r7, #8]
 8000588:	440b      	add	r3, r1
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	3b61      	subs	r3, #97	; 0x61
 800058e:	4413      	add	r3, r2
 8000590:	f103 021a 	add.w	r2, r3, #26
 8000594:	4b28      	ldr	r3, [pc, #160]	; (8000638 <decrypt_Vigenere+0x108>)
 8000596:	fba3 1302 	umull	r1, r3, r3, r2
 800059a:	08db      	lsrs	r3, r3, #3
 800059c:	211a      	movs	r1, #26
 800059e:	fb01 f303 	mul.w	r3, r1, r3
 80005a2:	1ad3      	subs	r3, r2, r3
 80005a4:	b2da      	uxtb	r2, r3
 80005a6:	69bb      	ldr	r3, [r7, #24]
 80005a8:	6879      	ldr	r1, [r7, #4]
 80005aa:	440b      	add	r3, r1
 80005ac:	3261      	adds	r2, #97	; 0x61
 80005ae:	b2d2      	uxtb	r2, r2
 80005b0:	701a      	strb	r2, [r3, #0]
 80005b2:	e028      	b.n	8000606 <decrypt_Vigenere+0xd6>
	    	}
	    	else if(decryptor >= 'A' && decryptor <= 'Z')
 80005b4:	7cfb      	ldrb	r3, [r7, #19]
 80005b6:	2b40      	cmp	r3, #64	; 0x40
 80005b8:	d920      	bls.n	80005fc <decrypt_Vigenere+0xcc>
 80005ba:	7cfb      	ldrb	r3, [r7, #19]
 80005bc:	2b5a      	cmp	r3, #90	; 0x5a
 80005be:	d81d      	bhi.n	80005fc <decrypt_Vigenere+0xcc>
	    	{
	    		decrypted_text[i] = (( decryptor - 'A' + (key[looper++] - 'A') + MAX_ALPHABET_LENGTH)%MAX_ALPHABET_LENGTH) + 'A';
 80005c0:	7cfb      	ldrb	r3, [r7, #19]
 80005c2:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80005c6:	69fb      	ldr	r3, [r7, #28]
 80005c8:	1c59      	adds	r1, r3, #1
 80005ca:	61f9      	str	r1, [r7, #28]
 80005cc:	4619      	mov	r1, r3
 80005ce:	68bb      	ldr	r3, [r7, #8]
 80005d0:	440b      	add	r3, r1
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	3b41      	subs	r3, #65	; 0x41
 80005d6:	4413      	add	r3, r2
 80005d8:	f103 021a 	add.w	r2, r3, #26
 80005dc:	4b16      	ldr	r3, [pc, #88]	; (8000638 <decrypt_Vigenere+0x108>)
 80005de:	fba3 1302 	umull	r1, r3, r3, r2
 80005e2:	08db      	lsrs	r3, r3, #3
 80005e4:	211a      	movs	r1, #26
 80005e6:	fb01 f303 	mul.w	r3, r1, r3
 80005ea:	1ad3      	subs	r3, r2, r3
 80005ec:	b2da      	uxtb	r2, r3
 80005ee:	69bb      	ldr	r3, [r7, #24]
 80005f0:	6879      	ldr	r1, [r7, #4]
 80005f2:	440b      	add	r3, r1
 80005f4:	3241      	adds	r2, #65	; 0x41
 80005f6:	b2d2      	uxtb	r2, r2
 80005f8:	701a      	strb	r2, [r3, #0]
 80005fa:	e004      	b.n	8000606 <decrypt_Vigenere+0xd6>
	    	}
	    	else
	    		decrypted_text[i] = decryptor;
 80005fc:	69bb      	ldr	r3, [r7, #24]
 80005fe:	687a      	ldr	r2, [r7, #4]
 8000600:	4413      	add	r3, r2
 8000602:	7cfa      	ldrb	r2, [r7, #19]
 8000604:	701a      	strb	r2, [r3, #0]
	    for(int i = 0 ; i < strlen(encrypted_text); i ++)
 8000606:	69bb      	ldr	r3, [r7, #24]
 8000608:	3301      	adds	r3, #1
 800060a:	61bb      	str	r3, [r7, #24]
 800060c:	68f8      	ldr	r0, [r7, #12]
 800060e:	f7ff fdff 	bl	8000210 <strlen>
 8000612:	4602      	mov	r2, r0
 8000614:	69bb      	ldr	r3, [r7, #24]
 8000616:	429a      	cmp	r2, r3
 8000618:	d89d      	bhi.n	8000556 <decrypt_Vigenere+0x26>
	    }
	    decrypted_text[strlen(encrypted_text)] = '\0';
 800061a:	68f8      	ldr	r0, [r7, #12]
 800061c:	f7ff fdf8 	bl	8000210 <strlen>
 8000620:	4602      	mov	r2, r0
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	4413      	add	r3, r2
 8000626:	2200      	movs	r2, #0
 8000628:	701a      	strb	r2, [r3, #0]
}
 800062a:	bf00      	nop
 800062c:	3720      	adds	r7, #32
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	08002334 	.word	0x08002334
 8000638:	4ec4ec4f 	.word	0x4ec4ec4f

0800063c <PolyAlphabetic_KeyNormalize>:

void PolyAlphabetic_KeyNormalize(char* key)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b084      	sub	sp, #16
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
   char key_norm;
   for(int i = 0 ; i < strlen(key); i++)
 8000644:	2300      	movs	r3, #0
 8000646:	60fb      	str	r3, [r7, #12]
 8000648:	e019      	b.n	800067e <PolyAlphabetic_KeyNormalize+0x42>
   {
		   key[i] = toupper(key[i]);
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	687a      	ldr	r2, [r7, #4]
 800064e:	4413      	add	r3, r2
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	72fb      	strb	r3, [r7, #11]
 8000654:	7afb      	ldrb	r3, [r7, #11]
 8000656:	3301      	adds	r3, #1
 8000658:	4a0f      	ldr	r2, [pc, #60]	; (8000698 <PolyAlphabetic_KeyNormalize+0x5c>)
 800065a:	4413      	add	r3, r2
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	f003 0303 	and.w	r3, r3, #3
 8000662:	2b02      	cmp	r3, #2
 8000664:	d102      	bne.n	800066c <PolyAlphabetic_KeyNormalize+0x30>
 8000666:	7afb      	ldrb	r3, [r7, #11]
 8000668:	3b20      	subs	r3, #32
 800066a:	e000      	b.n	800066e <PolyAlphabetic_KeyNormalize+0x32>
 800066c:	7afb      	ldrb	r3, [r7, #11]
 800066e:	68fa      	ldr	r2, [r7, #12]
 8000670:	6879      	ldr	r1, [r7, #4]
 8000672:	440a      	add	r2, r1
 8000674:	b2db      	uxtb	r3, r3
 8000676:	7013      	strb	r3, [r2, #0]
   for(int i = 0 ; i < strlen(key); i++)
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	3301      	adds	r3, #1
 800067c:	60fb      	str	r3, [r7, #12]
 800067e:	6878      	ldr	r0, [r7, #4]
 8000680:	f7ff fdc6 	bl	8000210 <strlen>
 8000684:	4602      	mov	r2, r0
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	429a      	cmp	r2, r3
 800068a:	d8de      	bhi.n	800064a <PolyAlphabetic_KeyNormalize+0xe>
	}
}
 800068c:	bf00      	nop
 800068e:	bf00      	nop
 8000690:	3710      	adds	r7, #16
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	08002624 	.word	0x08002624

0800069c <encrypt_NormalizeVigenere>:

void encrypt_NormalizeVigenere(char* plain_text, char* key, char* encrypted_text)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b088      	sub	sp, #32
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	60f8      	str	r0, [r7, #12]
 80006a4:	60b9      	str	r1, [r7, #8]
 80006a6:	607a      	str	r2, [r7, #4]
	printf("\r\n Normalized Vigenere Engine is now starting... \r\n");
 80006a8:	482d      	ldr	r0, [pc, #180]	; (8000760 <encrypt_NormalizeVigenere+0xc4>)
 80006aa:	f000 fef3 	bl	8001494 <puts>
    char encryptor;
    int keyword_length = strlen(key);
 80006ae:	68b8      	ldr	r0, [r7, #8]
 80006b0:	f7ff fdae 	bl	8000210 <strlen>
 80006b4:	4603      	mov	r3, r0
 80006b6:	617b      	str	r3, [r7, #20]
    int looper = 0 ;
 80006b8:	2300      	movs	r3, #0
 80006ba:	61fb      	str	r3, [r7, #28]
    PolyAlphabetic_KeyNormalize(key);
 80006bc:	68b8      	ldr	r0, [r7, #8]
 80006be:	f7ff ffbd 	bl	800063c <PolyAlphabetic_KeyNormalize>
    PolyAlphabetic_KeyNormalize(plain_text);
 80006c2:	68f8      	ldr	r0, [r7, #12]
 80006c4:	f7ff ffba 	bl	800063c <PolyAlphabetic_KeyNormalize>
    for(int i = 0 ; i < strlen(plain_text); i ++)
 80006c8:	2300      	movs	r3, #0
 80006ca:	61bb      	str	r3, [r7, #24]
 80006cc:	e035      	b.n	800073a <encrypt_NormalizeVigenere+0x9e>
    {
    	encryptor = plain_text[i];
 80006ce:	69bb      	ldr	r3, [r7, #24]
 80006d0:	68fa      	ldr	r2, [r7, #12]
 80006d2:	4413      	add	r3, r2
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	74fb      	strb	r3, [r7, #19]

    	if(looper == keyword_length)
 80006d8:	69fa      	ldr	r2, [r7, #28]
 80006da:	697b      	ldr	r3, [r7, #20]
 80006dc:	429a      	cmp	r2, r3
 80006de:	d101      	bne.n	80006e4 <encrypt_NormalizeVigenere+0x48>
    		looper = 0;
 80006e0:	2300      	movs	r3, #0
 80006e2:	61fb      	str	r3, [r7, #28]

    	if(encryptor >= 'A' && encryptor <= 'Z')
 80006e4:	7cfb      	ldrb	r3, [r7, #19]
 80006e6:	2b40      	cmp	r3, #64	; 0x40
 80006e8:	d91f      	bls.n	800072a <encrypt_NormalizeVigenere+0x8e>
 80006ea:	7cfb      	ldrb	r3, [r7, #19]
 80006ec:	2b5a      	cmp	r3, #90	; 0x5a
 80006ee:	d81c      	bhi.n	800072a <encrypt_NormalizeVigenere+0x8e>
    	{
    		encrypted_text[i] = (( encryptor - 'A' + (key[looper++] - 'A'))%MAX_ALPHABET_LENGTH) + 'A';
 80006f0:	7cfb      	ldrb	r3, [r7, #19]
 80006f2:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80006f6:	69fb      	ldr	r3, [r7, #28]
 80006f8:	1c59      	adds	r1, r3, #1
 80006fa:	61f9      	str	r1, [r7, #28]
 80006fc:	4619      	mov	r1, r3
 80006fe:	68bb      	ldr	r3, [r7, #8]
 8000700:	440b      	add	r3, r1
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	3b41      	subs	r3, #65	; 0x41
 8000706:	4413      	add	r3, r2
 8000708:	461a      	mov	r2, r3
 800070a:	4b16      	ldr	r3, [pc, #88]	; (8000764 <encrypt_NormalizeVigenere+0xc8>)
 800070c:	fba3 1302 	umull	r1, r3, r3, r2
 8000710:	08db      	lsrs	r3, r3, #3
 8000712:	211a      	movs	r1, #26
 8000714:	fb01 f303 	mul.w	r3, r1, r3
 8000718:	1ad3      	subs	r3, r2, r3
 800071a:	b2da      	uxtb	r2, r3
 800071c:	69bb      	ldr	r3, [r7, #24]
 800071e:	6879      	ldr	r1, [r7, #4]
 8000720:	440b      	add	r3, r1
 8000722:	3241      	adds	r2, #65	; 0x41
 8000724:	b2d2      	uxtb	r2, r2
 8000726:	701a      	strb	r2, [r3, #0]
 8000728:	e004      	b.n	8000734 <encrypt_NormalizeVigenere+0x98>
    	}
    	else
    		encrypted_text[i] = encryptor;
 800072a:	69bb      	ldr	r3, [r7, #24]
 800072c:	687a      	ldr	r2, [r7, #4]
 800072e:	4413      	add	r3, r2
 8000730:	7cfa      	ldrb	r2, [r7, #19]
 8000732:	701a      	strb	r2, [r3, #0]
    for(int i = 0 ; i < strlen(plain_text); i ++)
 8000734:	69bb      	ldr	r3, [r7, #24]
 8000736:	3301      	adds	r3, #1
 8000738:	61bb      	str	r3, [r7, #24]
 800073a:	68f8      	ldr	r0, [r7, #12]
 800073c:	f7ff fd68 	bl	8000210 <strlen>
 8000740:	4602      	mov	r2, r0
 8000742:	69bb      	ldr	r3, [r7, #24]
 8000744:	429a      	cmp	r2, r3
 8000746:	d8c2      	bhi.n	80006ce <encrypt_NormalizeVigenere+0x32>
    }
    encrypted_text[strlen(plain_text)] = '\0';
 8000748:	68f8      	ldr	r0, [r7, #12]
 800074a:	f7ff fd61 	bl	8000210 <strlen>
 800074e:	4602      	mov	r2, r0
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	4413      	add	r3, r2
 8000754:	2200      	movs	r2, #0
 8000756:	701a      	strb	r2, [r3, #0]
}
 8000758:	bf00      	nop
 800075a:	3720      	adds	r7, #32
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	08002360 	.word	0x08002360
 8000764:	4ec4ec4f 	.word	0x4ec4ec4f

08000768 <decrypt_NormalizeVigenere>:

void decrypt_NormalizeVigenere(char* encrypted_text, char* key, char* decrypted_text)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b088      	sub	sp, #32
 800076c:	af00      	add	r7, sp, #0
 800076e:	60f8      	str	r0, [r7, #12]
 8000770:	60b9      	str	r1, [r7, #8]
 8000772:	607a      	str	r2, [r7, #4]
	    printf("\r\n Normalized Vigenere Engine is now Decrypting ... \r\n");
 8000774:	482e      	ldr	r0, [pc, #184]	; (8000830 <decrypt_NormalizeVigenere+0xc8>)
 8000776:	f000 fe8d 	bl	8001494 <puts>
	    char decryptor;
	    int keyword_length = strlen(key);
 800077a:	68b8      	ldr	r0, [r7, #8]
 800077c:	f7ff fd48 	bl	8000210 <strlen>
 8000780:	4603      	mov	r3, r0
 8000782:	617b      	str	r3, [r7, #20]
	    int looper = 0 ;
 8000784:	2300      	movs	r3, #0
 8000786:	61fb      	str	r3, [r7, #28]
	    PolyAlphabetic_KeyNormalize(key);
 8000788:	68b8      	ldr	r0, [r7, #8]
 800078a:	f7ff ff57 	bl	800063c <PolyAlphabetic_KeyNormalize>
	    PolyAlphabetic_KeyNormalize(encrypted_text);
 800078e:	68f8      	ldr	r0, [r7, #12]
 8000790:	f7ff ff54 	bl	800063c <PolyAlphabetic_KeyNormalize>

	    for(int i = 0 ; i < strlen(encrypted_text); i ++)
 8000794:	2300      	movs	r3, #0
 8000796:	61bb      	str	r3, [r7, #24]
 8000798:	e036      	b.n	8000808 <decrypt_NormalizeVigenere+0xa0>
	    {
	    	decryptor = encrypted_text[i];
 800079a:	69bb      	ldr	r3, [r7, #24]
 800079c:	68fa      	ldr	r2, [r7, #12]
 800079e:	4413      	add	r3, r2
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	74fb      	strb	r3, [r7, #19]
	    	if(looper == keyword_length)
 80007a4:	69fa      	ldr	r2, [r7, #28]
 80007a6:	697b      	ldr	r3, [r7, #20]
 80007a8:	429a      	cmp	r2, r3
 80007aa:	d101      	bne.n	80007b0 <decrypt_NormalizeVigenere+0x48>
	    	looper = 0;
 80007ac:	2300      	movs	r3, #0
 80007ae:	61fb      	str	r3, [r7, #28]
	    	if(decryptor >= 'A' && decryptor <= 'Z')
 80007b0:	7cfb      	ldrb	r3, [r7, #19]
 80007b2:	2b40      	cmp	r3, #64	; 0x40
 80007b4:	d920      	bls.n	80007f8 <decrypt_NormalizeVigenere+0x90>
 80007b6:	7cfb      	ldrb	r3, [r7, #19]
 80007b8:	2b5a      	cmp	r3, #90	; 0x5a
 80007ba:	d81d      	bhi.n	80007f8 <decrypt_NormalizeVigenere+0x90>
	    	{
	    		decrypted_text[i] = (( decryptor - 'A' + (key[looper++] - 'A') + MAX_ALPHABET_LENGTH)%MAX_ALPHABET_LENGTH) + 'A';
 80007bc:	7cfb      	ldrb	r3, [r7, #19]
 80007be:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80007c2:	69fb      	ldr	r3, [r7, #28]
 80007c4:	1c59      	adds	r1, r3, #1
 80007c6:	61f9      	str	r1, [r7, #28]
 80007c8:	4619      	mov	r1, r3
 80007ca:	68bb      	ldr	r3, [r7, #8]
 80007cc:	440b      	add	r3, r1
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	3b41      	subs	r3, #65	; 0x41
 80007d2:	4413      	add	r3, r2
 80007d4:	f103 021a 	add.w	r2, r3, #26
 80007d8:	4b16      	ldr	r3, [pc, #88]	; (8000834 <decrypt_NormalizeVigenere+0xcc>)
 80007da:	fba3 1302 	umull	r1, r3, r3, r2
 80007de:	08db      	lsrs	r3, r3, #3
 80007e0:	211a      	movs	r1, #26
 80007e2:	fb01 f303 	mul.w	r3, r1, r3
 80007e6:	1ad3      	subs	r3, r2, r3
 80007e8:	b2da      	uxtb	r2, r3
 80007ea:	69bb      	ldr	r3, [r7, #24]
 80007ec:	6879      	ldr	r1, [r7, #4]
 80007ee:	440b      	add	r3, r1
 80007f0:	3241      	adds	r2, #65	; 0x41
 80007f2:	b2d2      	uxtb	r2, r2
 80007f4:	701a      	strb	r2, [r3, #0]
 80007f6:	e004      	b.n	8000802 <decrypt_NormalizeVigenere+0x9a>
	    	}
	    	else
	    		decrypted_text[i] = decryptor;
 80007f8:	69bb      	ldr	r3, [r7, #24]
 80007fa:	687a      	ldr	r2, [r7, #4]
 80007fc:	4413      	add	r3, r2
 80007fe:	7cfa      	ldrb	r2, [r7, #19]
 8000800:	701a      	strb	r2, [r3, #0]
	    for(int i = 0 ; i < strlen(encrypted_text); i ++)
 8000802:	69bb      	ldr	r3, [r7, #24]
 8000804:	3301      	adds	r3, #1
 8000806:	61bb      	str	r3, [r7, #24]
 8000808:	68f8      	ldr	r0, [r7, #12]
 800080a:	f7ff fd01 	bl	8000210 <strlen>
 800080e:	4602      	mov	r2, r0
 8000810:	69bb      	ldr	r3, [r7, #24]
 8000812:	429a      	cmp	r2, r3
 8000814:	d8c1      	bhi.n	800079a <decrypt_NormalizeVigenere+0x32>
	    }
	    decrypted_text[strlen(encrypted_text)] = '\0';
 8000816:	68f8      	ldr	r0, [r7, #12]
 8000818:	f7ff fcfa 	bl	8000210 <strlen>
 800081c:	4602      	mov	r2, r0
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	4413      	add	r3, r2
 8000822:	2200      	movs	r2, #0
 8000824:	701a      	strb	r2, [r3, #0]
}
 8000826:	bf00      	nop
 8000828:	3720      	adds	r7, #32
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	08002394 	.word	0x08002394
 8000834:	4ec4ec4f 	.word	0x4ec4ec4f

08000838 <ceasar_encrypt>:

#include "ceasars_cipher.h"


void ceasar_encrypt(char* plain_text, uint8_t key, char* encrypted_data, uint32_t length)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b086      	sub	sp, #24
 800083c:	af00      	add	r7, sp, #0
 800083e:	60f8      	str	r0, [r7, #12]
 8000840:	607a      	str	r2, [r7, #4]
 8000842:	603b      	str	r3, [r7, #0]
 8000844:	460b      	mov	r3, r1
 8000846:	72fb      	strb	r3, [r7, #11]
	/* Store Plaintext_data*/
    uint8_t plaintext_data;

    printf("\r\nCrypto Engine Starting!\r\n");
 8000848:	4827      	ldr	r0, [pc, #156]	; (80008e8 <ceasar_encrypt+0xb0>)
 800084a:	f000 fe23 	bl	8001494 <puts>
    for(uint32_t index = 0; index < length; index++)
 800084e:	2300      	movs	r3, #0
 8000850:	613b      	str	r3, [r7, #16]
 8000852:	e03c      	b.n	80008ce <ceasar_encrypt+0x96>
    {
    	plaintext_data = plain_text[index];
 8000854:	68fa      	ldr	r2, [r7, #12]
 8000856:	693b      	ldr	r3, [r7, #16]
 8000858:	4413      	add	r3, r2
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	75fb      	strb	r3, [r7, #23]

    	if(plaintext_data >= 'a' && plaintext_data <= 'z')
 800085e:	7dfb      	ldrb	r3, [r7, #23]
 8000860:	2b60      	cmp	r3, #96	; 0x60
 8000862:	d915      	bls.n	8000890 <ceasar_encrypt+0x58>
 8000864:	7dfb      	ldrb	r3, [r7, #23]
 8000866:	2b7a      	cmp	r3, #122	; 0x7a
 8000868:	d812      	bhi.n	8000890 <ceasar_encrypt+0x58>
    	{
    		plaintext_data = (plaintext_data - 'a' + key)%26 + 'a';
 800086a:	7dfb      	ldrb	r3, [r7, #23]
 800086c:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8000870:	7afb      	ldrb	r3, [r7, #11]
 8000872:	4413      	add	r3, r2
 8000874:	4a1d      	ldr	r2, [pc, #116]	; (80008ec <ceasar_encrypt+0xb4>)
 8000876:	fb82 1203 	smull	r1, r2, r2, r3
 800087a:	10d1      	asrs	r1, r2, #3
 800087c:	17da      	asrs	r2, r3, #31
 800087e:	1a8a      	subs	r2, r1, r2
 8000880:	211a      	movs	r1, #26
 8000882:	fb01 f202 	mul.w	r2, r1, r2
 8000886:	1a9a      	subs	r2, r3, r2
 8000888:	b2d3      	uxtb	r3, r2
 800088a:	3361      	adds	r3, #97	; 0x61
 800088c:	75fb      	strb	r3, [r7, #23]
 800088e:	e016      	b.n	80008be <ceasar_encrypt+0x86>
    	}
    	else if(plaintext_data >= 'A' && plaintext_data <= 'Z')
 8000890:	7dfb      	ldrb	r3, [r7, #23]
 8000892:	2b40      	cmp	r3, #64	; 0x40
 8000894:	d913      	bls.n	80008be <ceasar_encrypt+0x86>
 8000896:	7dfb      	ldrb	r3, [r7, #23]
 8000898:	2b5a      	cmp	r3, #90	; 0x5a
 800089a:	d810      	bhi.n	80008be <ceasar_encrypt+0x86>
    	{
    		plaintext_data = (plaintext_data - 'A' + key)% MAX_NO_OF_ENGLISH_ALPHABETS + 'A';
 800089c:	7dfb      	ldrb	r3, [r7, #23]
 800089e:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80008a2:	7afb      	ldrb	r3, [r7, #11]
 80008a4:	4413      	add	r3, r2
 80008a6:	461a      	mov	r2, r3
 80008a8:	4b10      	ldr	r3, [pc, #64]	; (80008ec <ceasar_encrypt+0xb4>)
 80008aa:	fba3 1302 	umull	r1, r3, r3, r2
 80008ae:	08db      	lsrs	r3, r3, #3
 80008b0:	211a      	movs	r1, #26
 80008b2:	fb01 f303 	mul.w	r3, r1, r3
 80008b6:	1ad3      	subs	r3, r2, r3
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	3341      	adds	r3, #65	; 0x41
 80008bc:	75fb      	strb	r3, [r7, #23]
    	}

    	encrypted_data[index] = plaintext_data;
 80008be:	687a      	ldr	r2, [r7, #4]
 80008c0:	693b      	ldr	r3, [r7, #16]
 80008c2:	4413      	add	r3, r2
 80008c4:	7dfa      	ldrb	r2, [r7, #23]
 80008c6:	701a      	strb	r2, [r3, #0]
    for(uint32_t index = 0; index < length; index++)
 80008c8:	693b      	ldr	r3, [r7, #16]
 80008ca:	3301      	adds	r3, #1
 80008cc:	613b      	str	r3, [r7, #16]
 80008ce:	693a      	ldr	r2, [r7, #16]
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	429a      	cmp	r2, r3
 80008d4:	d3be      	bcc.n	8000854 <ceasar_encrypt+0x1c>
    }
    encrypted_data[length] = '\0';
 80008d6:	687a      	ldr	r2, [r7, #4]
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	4413      	add	r3, r2
 80008dc:	2200      	movs	r2, #0
 80008de:	701a      	strb	r2, [r3, #0]
}
 80008e0:	bf00      	nop
 80008e2:	3718      	adds	r7, #24
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	080023cc 	.word	0x080023cc
 80008ec:	4ec4ec4f 	.word	0x4ec4ec4f

080008f0 <ceasar_decrypt>:

void ceasar_decrypt(char* encrypted_text, uint8_t key, char* decrypted_text, uint32_t length)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b086      	sub	sp, #24
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	60f8      	str	r0, [r7, #12]
 80008f8:	607a      	str	r2, [r7, #4]
 80008fa:	603b      	str	r3, [r7, #0]
 80008fc:	460b      	mov	r3, r1
 80008fe:	72fb      	strb	r3, [r7, #11]
	printf("\r\n Starting Decryption Engine \r\n");
 8000900:	4828      	ldr	r0, [pc, #160]	; (80009a4 <ceasar_decrypt+0xb4>)
 8000902:	f000 fdc7 	bl	8001494 <puts>
    uint8_t encrypted_Data;
    for(int index = 0 ; index < length ; index ++)
 8000906:	2300      	movs	r3, #0
 8000908:	613b      	str	r3, [r7, #16]
 800090a:	e03d      	b.n	8000988 <ceasar_decrypt+0x98>
    {
    	encrypted_Data = encrypted_text[index];
 800090c:	693b      	ldr	r3, [r7, #16]
 800090e:	68fa      	ldr	r2, [r7, #12]
 8000910:	4413      	add	r3, r2
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	75fb      	strb	r3, [r7, #23]

        if(encrypted_Data >= 'a' && encrypted_Data <= 'z')
 8000916:	7dfb      	ldrb	r3, [r7, #23]
 8000918:	2b60      	cmp	r3, #96	; 0x60
 800091a:	d915      	bls.n	8000948 <ceasar_decrypt+0x58>
 800091c:	7dfb      	ldrb	r3, [r7, #23]
 800091e:	2b7a      	cmp	r3, #122	; 0x7a
 8000920:	d812      	bhi.n	8000948 <ceasar_decrypt+0x58>
        {
        	encrypted_Data = (encrypted_Data - 'a' - key + MAX_NO_OF_ENGLISH_ALPHABETS ) % MAX_NO_OF_ENGLISH_ALPHABETS + 'a';
 8000922:	7dfb      	ldrb	r3, [r7, #23]
 8000924:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8000928:	7afb      	ldrb	r3, [r7, #11]
 800092a:	1ad3      	subs	r3, r2, r3
 800092c:	f103 021a 	add.w	r2, r3, #26
 8000930:	4b1d      	ldr	r3, [pc, #116]	; (80009a8 <ceasar_decrypt+0xb8>)
 8000932:	fba3 1302 	umull	r1, r3, r3, r2
 8000936:	08db      	lsrs	r3, r3, #3
 8000938:	211a      	movs	r1, #26
 800093a:	fb01 f303 	mul.w	r3, r1, r3
 800093e:	1ad3      	subs	r3, r2, r3
 8000940:	b2db      	uxtb	r3, r3
 8000942:	3361      	adds	r3, #97	; 0x61
 8000944:	75fb      	strb	r3, [r7, #23]
 8000946:	e017      	b.n	8000978 <ceasar_decrypt+0x88>
        }
        else if(encrypted_Data >= 'A' && encrypted_Data <= 'Z')
 8000948:	7dfb      	ldrb	r3, [r7, #23]
 800094a:	2b40      	cmp	r3, #64	; 0x40
 800094c:	d914      	bls.n	8000978 <ceasar_decrypt+0x88>
 800094e:	7dfb      	ldrb	r3, [r7, #23]
 8000950:	2b5a      	cmp	r3, #90	; 0x5a
 8000952:	d811      	bhi.n	8000978 <ceasar_decrypt+0x88>
        {
            encrypted_Data = (encrypted_Data - 'A' - key + MAX_NO_OF_ENGLISH_ALPHABETS ) % MAX_NO_OF_ENGLISH_ALPHABETS + 'A';
 8000954:	7dfb      	ldrb	r3, [r7, #23]
 8000956:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800095a:	7afb      	ldrb	r3, [r7, #11]
 800095c:	1ad3      	subs	r3, r2, r3
 800095e:	f103 021a 	add.w	r2, r3, #26
 8000962:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <ceasar_decrypt+0xb8>)
 8000964:	fba3 1302 	umull	r1, r3, r3, r2
 8000968:	08db      	lsrs	r3, r3, #3
 800096a:	211a      	movs	r1, #26
 800096c:	fb01 f303 	mul.w	r3, r1, r3
 8000970:	1ad3      	subs	r3, r2, r3
 8000972:	b2db      	uxtb	r3, r3
 8000974:	3341      	adds	r3, #65	; 0x41
 8000976:	75fb      	strb	r3, [r7, #23]
        }
        decrypted_text[index] = encrypted_Data;
 8000978:	693b      	ldr	r3, [r7, #16]
 800097a:	687a      	ldr	r2, [r7, #4]
 800097c:	4413      	add	r3, r2
 800097e:	7dfa      	ldrb	r2, [r7, #23]
 8000980:	701a      	strb	r2, [r3, #0]
    for(int index = 0 ; index < length ; index ++)
 8000982:	693b      	ldr	r3, [r7, #16]
 8000984:	3301      	adds	r3, #1
 8000986:	613b      	str	r3, [r7, #16]
 8000988:	693b      	ldr	r3, [r7, #16]
 800098a:	683a      	ldr	r2, [r7, #0]
 800098c:	429a      	cmp	r2, r3
 800098e:	d8bd      	bhi.n	800090c <ceasar_decrypt+0x1c>
    }
    decrypted_text[length] = '\0';
 8000990:	687a      	ldr	r2, [r7, #4]
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	4413      	add	r3, r2
 8000996:	2200      	movs	r2, #0
 8000998:	701a      	strb	r2, [r3, #0]
}
 800099a:	bf00      	nop
 800099c:	3718      	adds	r7, #24
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	080023e8 	.word	0x080023e8
 80009a8:	4ec4ec4f 	.word	0x4ec4ec4f

080009ac <encrypt_Ceasar_cipher>:

uint16_t encrypt_Ceasar_cipher(uint16_t value, uint16_t key)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	4603      	mov	r3, r0
 80009b4:	460a      	mov	r2, r1
 80009b6:	80fb      	strh	r3, [r7, #6]
 80009b8:	4613      	mov	r3, r2
 80009ba:	80bb      	strh	r3, [r7, #4]
	return (uint16_t)((value + key ) & 0xFFFF);
 80009bc:	88fa      	ldrh	r2, [r7, #6]
 80009be:	88bb      	ldrh	r3, [r7, #4]
 80009c0:	4413      	add	r3, r2
 80009c2:	b29b      	uxth	r3, r3
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	370c      	adds	r7, #12
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bc80      	pop	{r7}
 80009cc:	4770      	bx	lr

080009ce <decrypt_Ceasar_cipher>:

uint16_t decrypt_Ceasar_cipher(uint16_t encrypted_value, uint16_t key)
{
 80009ce:	b480      	push	{r7}
 80009d0:	b083      	sub	sp, #12
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	4603      	mov	r3, r0
 80009d6:	460a      	mov	r2, r1
 80009d8:	80fb      	strh	r3, [r7, #6]
 80009da:	4613      	mov	r3, r2
 80009dc:	80bb      	strh	r3, [r7, #4]
	return (uint16_t)((encrypted_value - key ) & 0xFFFF);
 80009de:	88fa      	ldrh	r2, [r7, #6]
 80009e0:	88bb      	ldrh	r3, [r7, #4]
 80009e2:	1ad3      	subs	r3, r2, r3
 80009e4:	b29b      	uxth	r3, r3
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	370c      	adds	r7, #12
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bc80      	pop	{r7}
 80009ee:	4770      	bx	lr

080009f0 <ceasar_decrypt_hack>:

void ceasar_decrypt_hack(char* encrypted_text, uint8_t key)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
 80009f8:	460b      	mov	r3, r1
 80009fa:	70fb      	strb	r3, [r7, #3]
	printf("\r\n Starting Decryption Hack Engine \r\n");
 80009fc:	482c      	ldr	r0, [pc, #176]	; (8000ab0 <ceasar_decrypt_hack+0xc0>)
 80009fe:	f000 fd49 	bl	8001494 <puts>
    uint8_t encrypted_Data;

    for(int index = 0 ; encrypted_text[index] != '\0'; index ++)
 8000a02:	2300      	movs	r3, #0
 8000a04:	60fb      	str	r3, [r7, #12]
 8000a06:	e045      	b.n	8000a94 <ceasar_decrypt_hack+0xa4>
    {
    	encrypted_Data = encrypted_text[index];
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	687a      	ldr	r2, [r7, #4]
 8000a0c:	4413      	add	r3, r2
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	72fb      	strb	r3, [r7, #11]

        if(encrypted_Data >= 'a' && encrypted_Data <= 'z')
 8000a12:	7afb      	ldrb	r3, [r7, #11]
 8000a14:	2b60      	cmp	r3, #96	; 0x60
 8000a16:	d919      	bls.n	8000a4c <ceasar_decrypt_hack+0x5c>
 8000a18:	7afb      	ldrb	r3, [r7, #11]
 8000a1a:	2b7a      	cmp	r3, #122	; 0x7a
 8000a1c:	d816      	bhi.n	8000a4c <ceasar_decrypt_hack+0x5c>
        {
        	encrypted_Data = (encrypted_Data - 'a' - key + MAX_NO_OF_ENGLISH_ALPHABETS ) % MAX_NO_OF_ENGLISH_ALPHABETS + 'a';
 8000a1e:	7afb      	ldrb	r3, [r7, #11]
 8000a20:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8000a24:	78fb      	ldrb	r3, [r7, #3]
 8000a26:	1ad3      	subs	r3, r2, r3
 8000a28:	f103 021a 	add.w	r2, r3, #26
 8000a2c:	4b21      	ldr	r3, [pc, #132]	; (8000ab4 <ceasar_decrypt_hack+0xc4>)
 8000a2e:	fba3 1302 	umull	r1, r3, r3, r2
 8000a32:	08db      	lsrs	r3, r3, #3
 8000a34:	211a      	movs	r1, #26
 8000a36:	fb01 f303 	mul.w	r3, r1, r3
 8000a3a:	1ad3      	subs	r3, r2, r3
 8000a3c:	b2db      	uxtb	r3, r3
 8000a3e:	3361      	adds	r3, #97	; 0x61
 8000a40:	72fb      	strb	r3, [r7, #11]
        	printf("%c",encrypted_Data);
 8000a42:	7afb      	ldrb	r3, [r7, #11]
 8000a44:	4618      	mov	r0, r3
 8000a46:	f000 fca3 	bl	8001390 <putchar>
 8000a4a:	e020      	b.n	8000a8e <ceasar_decrypt_hack+0x9e>
        }
        else if(encrypted_Data >= 'A' && encrypted_Data <= 'Z')
 8000a4c:	7afb      	ldrb	r3, [r7, #11]
 8000a4e:	2b40      	cmp	r3, #64	; 0x40
 8000a50:	d919      	bls.n	8000a86 <ceasar_decrypt_hack+0x96>
 8000a52:	7afb      	ldrb	r3, [r7, #11]
 8000a54:	2b5a      	cmp	r3, #90	; 0x5a
 8000a56:	d816      	bhi.n	8000a86 <ceasar_decrypt_hack+0x96>
        {
            encrypted_Data = (encrypted_Data - 'A' - key + MAX_NO_OF_ENGLISH_ALPHABETS ) % MAX_NO_OF_ENGLISH_ALPHABETS + 'A';
 8000a58:	7afb      	ldrb	r3, [r7, #11]
 8000a5a:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8000a5e:	78fb      	ldrb	r3, [r7, #3]
 8000a60:	1ad3      	subs	r3, r2, r3
 8000a62:	f103 021a 	add.w	r2, r3, #26
 8000a66:	4b13      	ldr	r3, [pc, #76]	; (8000ab4 <ceasar_decrypt_hack+0xc4>)
 8000a68:	fba3 1302 	umull	r1, r3, r3, r2
 8000a6c:	08db      	lsrs	r3, r3, #3
 8000a6e:	211a      	movs	r1, #26
 8000a70:	fb01 f303 	mul.w	r3, r1, r3
 8000a74:	1ad3      	subs	r3, r2, r3
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	3341      	adds	r3, #65	; 0x41
 8000a7a:	72fb      	strb	r3, [r7, #11]
            printf("%c",encrypted_Data);
 8000a7c:	7afb      	ldrb	r3, [r7, #11]
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f000 fc86 	bl	8001390 <putchar>
 8000a84:	e003      	b.n	8000a8e <ceasar_decrypt_hack+0x9e>
        }
        else
        	printf("%c",encrypted_Data);
 8000a86:	7afb      	ldrb	r3, [r7, #11]
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f000 fc81 	bl	8001390 <putchar>
    for(int index = 0 ; encrypted_text[index] != '\0'; index ++)
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	3301      	adds	r3, #1
 8000a92:	60fb      	str	r3, [r7, #12]
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	687a      	ldr	r2, [r7, #4]
 8000a98:	4413      	add	r3, r2
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d1b3      	bne.n	8000a08 <ceasar_decrypt_hack+0x18>
    }
    printf("\r\n");
 8000aa0:	4805      	ldr	r0, [pc, #20]	; (8000ab8 <ceasar_decrypt_hack+0xc8>)
 8000aa2:	f000 fcf7 	bl	8001494 <puts>

}
 8000aa6:	bf00      	nop
 8000aa8:	3710      	adds	r7, #16
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	08002408 	.word	0x08002408
 8000ab4:	4ec4ec4f 	.word	0x4ec4ec4f
 8000ab8:	08002430 	.word	0x08002430

08000abc <pa1_adc_init>:
 */

#include "adc.h"

void pa1_adc_init(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
    /* Enable Clock TO ADC Channel */
	/* Set Conversion Sequence Start */
	/* Set Conversion Sequence Length */
	/* Enable ADC Length */

	RCC->AHB1ENR |= GPIOAEN;
 8000ac0:	4b13      	ldr	r3, [pc, #76]	; (8000b10 <pa1_adc_init+0x54>)
 8000ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac4:	4a12      	ldr	r2, [pc, #72]	; (8000b10 <pa1_adc_init+0x54>)
 8000ac6:	f043 0301 	orr.w	r3, r3, #1
 8000aca:	6313      	str	r3, [r2, #48]	; 0x30
    GPIOA->MODER |= ADC_PIN_2_EN;
 8000acc:	4b11      	ldr	r3, [pc, #68]	; (8000b14 <pa1_adc_init+0x58>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a10      	ldr	r2, [pc, #64]	; (8000b14 <pa1_adc_init+0x58>)
 8000ad2:	f043 0304 	orr.w	r3, r3, #4
 8000ad6:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= ADC_PIN_3_EN;
 8000ad8:	4b0e      	ldr	r3, [pc, #56]	; (8000b14 <pa1_adc_init+0x58>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a0d      	ldr	r2, [pc, #52]	; (8000b14 <pa1_adc_init+0x58>)
 8000ade:	f043 0308 	orr.w	r3, r3, #8
 8000ae2:	6013      	str	r3, [r2, #0]

    RCC->APB2ENR |= ADC1_EN;
 8000ae4:	4b0a      	ldr	r3, [pc, #40]	; (8000b10 <pa1_adc_init+0x54>)
 8000ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae8:	4a09      	ldr	r2, [pc, #36]	; (8000b10 <pa1_adc_init+0x54>)
 8000aea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aee:	6453      	str	r3, [r2, #68]	; 0x44

    /* Configure specific channel depending on use-case. Refer to the reference Manual for
     * more information
     * */
    ADC1->SQR3 = ADC_CH1;
 8000af0:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <pa1_adc_init+0x5c>)
 8000af2:	2201      	movs	r2, #1
 8000af4:	635a      	str	r2, [r3, #52]	; 0x34
    ADC1->SQR1 = ADC_SEQ_LEN_1;
 8000af6:	4b08      	ldr	r3, [pc, #32]	; (8000b18 <pa1_adc_init+0x5c>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	62da      	str	r2, [r3, #44]	; 0x2c

    ADC1->CR2 |= ADC_CR2_ON;
 8000afc:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <pa1_adc_init+0x5c>)
 8000afe:	689b      	ldr	r3, [r3, #8]
 8000b00:	4a05      	ldr	r2, [pc, #20]	; (8000b18 <pa1_adc_init+0x5c>)
 8000b02:	f043 0301 	orr.w	r3, r3, #1
 8000b06:	6093      	str	r3, [r2, #8]
}
 8000b08:	bf00      	nop
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bc80      	pop	{r7}
 8000b0e:	4770      	bx	lr
 8000b10:	40023800 	.word	0x40023800
 8000b14:	40020000 	.word	0x40020000
 8000b18:	40012000 	.word	0x40012000

08000b1c <startadc_conversion>:

void startadc_conversion(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
	/* Enable Continuous Conversion */
	ADC1->CR2 |= CR2_CONT;
 8000b20:	4b07      	ldr	r3, [pc, #28]	; (8000b40 <startadc_conversion+0x24>)
 8000b22:	689b      	ldr	r3, [r3, #8]
 8000b24:	4a06      	ldr	r2, [pc, #24]	; (8000b40 <startadc_conversion+0x24>)
 8000b26:	f043 0302 	orr.w	r3, r3, #2
 8000b2a:	6093      	str	r3, [r2, #8]
	/* Start ADC Conversion */
	ADC1->CR2 |= CR2_SWSTART;
 8000b2c:	4b04      	ldr	r3, [pc, #16]	; (8000b40 <startadc_conversion+0x24>)
 8000b2e:	689b      	ldr	r3, [r3, #8]
 8000b30:	4a03      	ldr	r2, [pc, #12]	; (8000b40 <startadc_conversion+0x24>)
 8000b32:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000b36:	6093      	str	r3, [r2, #8]

}
 8000b38:	bf00      	nop
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bc80      	pop	{r7}
 8000b3e:	4770      	bx	lr
 8000b40:	40012000 	.word	0x40012000

08000b44 <led_init>:

#include "bsp.h"


void led_init(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
	/* Provide Clock Access to the respective Peripheral */
	/* GPIO A for stm32f44xx */

	    RCC->AHB1ENR |= GPIOAEN;
 8000b48:	4b0a      	ldr	r3, [pc, #40]	; (8000b74 <led_init+0x30>)
 8000b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4c:	4a09      	ldr	r2, [pc, #36]	; (8000b74 <led_init+0x30>)
 8000b4e:	f043 0301 	orr.w	r3, r3, #1
 8000b52:	6313      	str	r3, [r2, #48]	; 0x30
	    GPIOA->MODER |= (1U<<10);
 8000b54:	4b08      	ldr	r3, [pc, #32]	; (8000b78 <led_init+0x34>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a07      	ldr	r2, [pc, #28]	; (8000b78 <led_init+0x34>)
 8000b5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b5e:	6013      	str	r3, [r2, #0]
	    GPIOA->MODER &= ~(1U<<11);
 8000b60:	4b05      	ldr	r3, [pc, #20]	; (8000b78 <led_init+0x34>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a04      	ldr	r2, [pc, #16]	; (8000b78 <led_init+0x34>)
 8000b66:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000b6a:	6013      	str	r3, [r2, #0]
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bc80      	pop	{r7}
 8000b72:	4770      	bx	lr
 8000b74:	40023800 	.word	0x40023800
 8000b78:	40020000 	.word	0x40020000

08000b7c <button_init>:
	/* Set the Pin Low */
	GPIOA->ODR &= (GPIO_DISABLE);
}

void button_init(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= GPIOCEN;
 8000b80:	4b0a      	ldr	r3, [pc, #40]	; (8000bac <button_init+0x30>)
 8000b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b84:	4a09      	ldr	r2, [pc, #36]	; (8000bac <button_init+0x30>)
 8000b86:	f043 0304 	orr.w	r3, r3, #4
 8000b8a:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOC->MODER &=  ~(1<<26);
 8000b8c:	4b08      	ldr	r3, [pc, #32]	; (8000bb0 <button_init+0x34>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a07      	ldr	r2, [pc, #28]	; (8000bb0 <button_init+0x34>)
 8000b92:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8000b96:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &=  ~(1<<27);
 8000b98:	4b05      	ldr	r3, [pc, #20]	; (8000bb0 <button_init+0x34>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a04      	ldr	r2, [pc, #16]	; (8000bb0 <button_init+0x34>)
 8000b9e:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8000ba2:	6013      	str	r3, [r2, #0]
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bc80      	pop	{r7}
 8000baa:	4770      	bx	lr
 8000bac:	40023800 	.word	0x40023800
 8000bb0:	40020800 	.word	0x40020800

08000bb4 <fpu_enable>:

#include "fpu.h"


void fpu_enable(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
	/* Enable Floating Point Unit: Enable CP10 and CP11 Full Access! */
	 SCB->CPACR |= (1<<20);
 8000bb8:	4b11      	ldr	r3, [pc, #68]	; (8000c00 <fpu_enable+0x4c>)
 8000bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bbe:	4a10      	ldr	r2, [pc, #64]	; (8000c00 <fpu_enable+0x4c>)
 8000bc0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000bc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	 SCB->CPACR |= (1<<21);
 8000bc8:	4b0d      	ldr	r3, [pc, #52]	; (8000c00 <fpu_enable+0x4c>)
 8000bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bce:	4a0c      	ldr	r2, [pc, #48]	; (8000c00 <fpu_enable+0x4c>)
 8000bd0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	 SCB->CPACR |= (1<<22);
 8000bd8:	4b09      	ldr	r3, [pc, #36]	; (8000c00 <fpu_enable+0x4c>)
 8000bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bde:	4a08      	ldr	r2, [pc, #32]	; (8000c00 <fpu_enable+0x4c>)
 8000be0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000be4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	 SCB->CPACR |= (1<<23);
 8000be8:	4b05      	ldr	r3, [pc, #20]	; (8000c00 <fpu_enable+0x4c>)
 8000bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bee:	4a04      	ldr	r2, [pc, #16]	; (8000c00 <fpu_enable+0x4c>)
 8000bf0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000bf4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bc80      	pop	{r7}
 8000bfe:	4770      	bx	lr
 8000c00:	e000ed00 	.word	0xe000ed00

08000c04 <main>:
static uint16_t decrypted_sensor;
static uint16_t sensor_val = 2726;
uint16_t Key = 100;

int main(void)
{
 8000c04:	b5b0      	push	{r4, r5, r7, lr}
 8000c06:	b09e      	sub	sp, #120	; 0x78
 8000c08:	af00      	add	r7, sp, #0
	/* Enable FPU */
	fpu_enable();
 8000c0a:	f7ff ffd3 	bl	8000bb4 <fpu_enable>
    /* initialize UART */
	uart_init();
 8000c0e:	f000 fa49 	bl	80010a4 <uart_init>
	/* Initialize timer */
	timer_init();
 8000c12:	f000 fa1b 	bl	800104c <timer_init>
    /* Initialize button and led */
	led_init();
 8000c16:	f7ff ff95 	bl	8000b44 <led_init>
    /* Initialize the button */
	button_init();
 8000c1a:	f7ff ffaf 	bl	8000b7c <button_init>
	/* Initialize the ADC module */
	pa1_adc_init();
 8000c1e:	f7ff ff4d 	bl	8000abc <pa1_adc_init>
    /* Start the conversion */
	startadc_conversion();
 8000c22:	f7ff ff7b 	bl	8000b1c <startadc_conversion>

	printf("Testing the Ceasar's Module!\r\n");
 8000c26:	489b      	ldr	r0, [pc, #620]	; (8000e94 <main+0x290>)
 8000c28:	f000 fc34 	bl	8001494 <puts>
	char plain_text[] = "HELLO";
 8000c2c:	4a9a      	ldr	r2, [pc, #616]	; (8000e98 <main+0x294>)
 8000c2e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000c32:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c36:	6018      	str	r0, [r3, #0]
 8000c38:	3304      	adds	r3, #4
 8000c3a:	8019      	strh	r1, [r3, #0]
	char encrypted_testtext[] = "KHOOR";
 8000c3c:	4a97      	ldr	r2, [pc, #604]	; (8000e9c <main+0x298>)
 8000c3e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c42:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c46:	6018      	str	r0, [r3, #0]
 8000c48:	3304      	adds	r3, #4
 8000c4a:	8019      	strh	r1, [r3, #0]
	char plain_text_mono[] = "MONO HELLO!";
 8000c4c:	4a94      	ldr	r2, [pc, #592]	; (8000ea0 <main+0x29c>)
 8000c4e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c52:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c54:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	char key_mono[] = "DFGHIJKLMNOPQRSTUVWXYZABCETSMN";
 8000c58:	4b92      	ldr	r3, [pc, #584]	; (8000ea4 <main+0x2a0>)
 8000c5a:	f107 0414 	add.w	r4, r7, #20
 8000c5e:	461d      	mov	r5, r3
 8000c60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c64:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000c68:	c407      	stmia	r4!, {r0, r1, r2}
 8000c6a:	8023      	strh	r3, [r4, #0]
 8000c6c:	3402      	adds	r4, #2
 8000c6e:	0c1b      	lsrs	r3, r3, #16
 8000c70:	7023      	strb	r3, [r4, #0]
	char key_poly[] = "KEY";
 8000c72:	4b8d      	ldr	r3, [pc, #564]	; (8000ea8 <main+0x2a4>)
 8000c74:	613b      	str	r3, [r7, #16]
	char plain_text_poly[] = "POLY HELLO!";
 8000c76:	4a8d      	ldr	r2, [pc, #564]	; (8000eac <main+0x2a8>)
 8000c78:	1d3b      	adds	r3, r7, #4
 8000c7a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c7c:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	uint8_t key = 3;
 8000c80:	2303      	movs	r3, #3
 8000c82:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	uint32_t length = (uint32_t)strlen(plain_text);
 8000c86:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f7ff fac0 	bl	8000210 <strlen>
 8000c90:	66b8      	str	r0, [r7, #104]	; 0x68
	char* encrypted_data = (char *)calloc(length+1,sizeof(char));
 8000c92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000c94:	3301      	adds	r3, #1
 8000c96:	2101      	movs	r1, #1
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f000 fabf 	bl	800121c <calloc>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	667b      	str	r3, [r7, #100]	; 0x64
    char* decrypted_Data = (char *)calloc(length+1,sizeof(char));
 8000ca2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	2101      	movs	r1, #1
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f000 fab7 	bl	800121c <calloc>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	663b      	str	r3, [r7, #96]	; 0x60
    char* encryptedtext_mono = (char*)calloc(strlen(plain_text_mono)+1, sizeof(char));
 8000cb2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f7ff faaa 	bl	8000210 <strlen>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	2101      	movs	r1, #1
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f000 faaa 	bl	800121c <calloc>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	65fb      	str	r3, [r7, #92]	; 0x5c
    char* decryptedtext_mono = (char*)calloc(strlen(plain_text_mono)+1, sizeof(char));
 8000ccc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff fa9d 	bl	8000210 <strlen>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	3301      	adds	r3, #1
 8000cda:	2101      	movs	r1, #1
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f000 fa9d 	bl	800121c <calloc>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	65bb      	str	r3, [r7, #88]	; 0x58
    char* encrypted_text_poly = (char*)calloc(strlen(plain_text_poly)+1, sizeof(char));
 8000ce6:	1d3b      	adds	r3, r7, #4
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff fa91 	bl	8000210 <strlen>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f000 fa91 	bl	800121c <calloc>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	657b      	str	r3, [r7, #84]	; 0x54
    char* decrypted_text_poly = (char*)calloc(strlen(plain_text_poly)+1, sizeof(char));
 8000cfe:	1d3b      	adds	r3, r7, #4
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff fa85 	bl	8000210 <strlen>
 8000d06:	4603      	mov	r3, r0
 8000d08:	3301      	adds	r3, #1
 8000d0a:	2101      	movs	r1, #1
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f000 fa85 	bl	800121c <calloc>
 8000d12:	4603      	mov	r3, r0
 8000d14:	653b      	str	r3, [r7, #80]	; 0x50

	printf("The length of the plain_text = %lu \r\n",length);
 8000d16:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8000d18:	4865      	ldr	r0, [pc, #404]	; (8000eb0 <main+0x2ac>)
 8000d1a:	f000 fb21 	bl	8001360 <iprintf>

	for(int i = 0 ; i < length; i++)
 8000d1e:	2300      	movs	r3, #0
 8000d20:	677b      	str	r3, [r7, #116]	; 0x74
 8000d22:	e00a      	b.n	8000d3a <main+0x136>
	{
		printf("%c",plain_text[i]);
 8000d24:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000d28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000d2a:	4413      	add	r3, r2
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f000 fb2e 	bl	8001390 <putchar>
	for(int i = 0 ; i < length; i++)
 8000d34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000d36:	3301      	adds	r3, #1
 8000d38:	677b      	str	r3, [r7, #116]	; 0x74
 8000d3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000d3c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	d8f0      	bhi.n	8000d24 <main+0x120>
	}

	ceasar_encrypt(plain_text, key, encrypted_data, length);
 8000d42:	f897 106f 	ldrb.w	r1, [r7, #111]	; 0x6f
 8000d46:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8000d4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000d4c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000d4e:	f7ff fd73 	bl	8000838 <ceasar_encrypt>

	printf("\r\n Encrypted Data is:\r\n");
 8000d52:	4858      	ldr	r0, [pc, #352]	; (8000eb4 <main+0x2b0>)
 8000d54:	f000 fb9e 	bl	8001494 <puts>
	puts(encrypted_data);
 8000d58:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000d5a:	f000 fb9b 	bl	8001494 <puts>
    printf("Decrypting now\r\n");
 8000d5e:	4856      	ldr	r0, [pc, #344]	; (8000eb8 <main+0x2b4>)
 8000d60:	f000 fb98 	bl	8001494 <puts>
    ceasar_decrypt(encrypted_data,key,decrypted_Data,length);
 8000d64:	f897 106f 	ldrb.w	r1, [r7, #111]	; 0x6f
 8000d68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000d6a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000d6c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000d6e:	f7ff fdbf 	bl	80008f0 <ceasar_decrypt>
    printf("\r\n Decrypted Data is:\r\n");
 8000d72:	4852      	ldr	r0, [pc, #328]	; (8000ebc <main+0x2b8>)
 8000d74:	f000 fb8e 	bl	8001494 <puts>
    puts(decrypted_Data);
 8000d78:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8000d7a:	f000 fb8b 	bl	8001494 <puts>

    encrypted_sensor = encrypt_Ceasar_cipher(sensor_val,Key);
 8000d7e:	4b50      	ldr	r3, [pc, #320]	; (8000ec0 <main+0x2bc>)
 8000d80:	881b      	ldrh	r3, [r3, #0]
 8000d82:	4a50      	ldr	r2, [pc, #320]	; (8000ec4 <main+0x2c0>)
 8000d84:	8812      	ldrh	r2, [r2, #0]
 8000d86:	4611      	mov	r1, r2
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff fe0f 	bl	80009ac <encrypt_Ceasar_cipher>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	461a      	mov	r2, r3
 8000d92:	4b4d      	ldr	r3, [pc, #308]	; (8000ec8 <main+0x2c4>)
 8000d94:	801a      	strh	r2, [r3, #0]
    printf("\r\n Encrypted Value of Sensor %u \r\n",encrypted_sensor);
 8000d96:	4b4c      	ldr	r3, [pc, #304]	; (8000ec8 <main+0x2c4>)
 8000d98:	881b      	ldrh	r3, [r3, #0]
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	484b      	ldr	r0, [pc, #300]	; (8000ecc <main+0x2c8>)
 8000d9e:	f000 fadf 	bl	8001360 <iprintf>
    decrypted_sensor = decrypt_Ceasar_cipher(encrypted_sensor, Key);
 8000da2:	4b49      	ldr	r3, [pc, #292]	; (8000ec8 <main+0x2c4>)
 8000da4:	881b      	ldrh	r3, [r3, #0]
 8000da6:	4a47      	ldr	r2, [pc, #284]	; (8000ec4 <main+0x2c0>)
 8000da8:	8812      	ldrh	r2, [r2, #0]
 8000daa:	4611      	mov	r1, r2
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff fe0e 	bl	80009ce <decrypt_Ceasar_cipher>
 8000db2:	4603      	mov	r3, r0
 8000db4:	461a      	mov	r2, r3
 8000db6:	4b46      	ldr	r3, [pc, #280]	; (8000ed0 <main+0x2cc>)
 8000db8:	801a      	strh	r2, [r3, #0]
    printf("\r\n Decrypted Value of Sensor %u \r\n",decrypted_sensor);
 8000dba:	4b45      	ldr	r3, [pc, #276]	; (8000ed0 <main+0x2cc>)
 8000dbc:	881b      	ldrh	r3, [r3, #0]
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4844      	ldr	r0, [pc, #272]	; (8000ed4 <main+0x2d0>)
 8000dc2:	f000 facd 	bl	8001360 <iprintf>

    printf("HACKING THE CEASARS TEXT!\r\n");
 8000dc6:	4844      	ldr	r0, [pc, #272]	; (8000ed8 <main+0x2d4>)
 8000dc8:	f000 fb64 	bl	8001494 <puts>
    for(int i = 0 ; i <= 25 ; i++)
 8000dcc:	2300      	movs	r3, #0
 8000dce:	673b      	str	r3, [r7, #112]	; 0x70
 8000dd0:	e00e      	b.n	8000df0 <main+0x1ec>
    {
    	printf("Key Value: %d \r\n",i);
 8000dd2:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8000dd4:	4841      	ldr	r0, [pc, #260]	; (8000edc <main+0x2d8>)
 8000dd6:	f000 fac3 	bl	8001360 <iprintf>
    	ceasar_decrypt_hack(encrypted_testtext,i);
 8000dda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000ddc:	b2da      	uxtb	r2, r3
 8000dde:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000de2:	4611      	mov	r1, r2
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff fe03 	bl	80009f0 <ceasar_decrypt_hack>
    for(int i = 0 ; i <= 25 ; i++)
 8000dea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000dec:	3301      	adds	r3, #1
 8000dee:	673b      	str	r3, [r7, #112]	; 0x70
 8000df0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000df2:	2b19      	cmp	r3, #25
 8000df4:	dded      	ble.n	8000dd2 <main+0x1ce>
    }

    printf("\r\n Now Start with Mono-alphabetic Encryption\r\n");
 8000df6:	483a      	ldr	r0, [pc, #232]	; (8000ee0 <main+0x2dc>)
 8000df8:	f000 fb4c 	bl	8001494 <puts>
    puts(plain_text_mono);
 8000dfc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e00:	4618      	mov	r0, r3
 8000e02:	f000 fb47 	bl	8001494 <puts>
    encrypt_monoalphabetic(plain_text_mono, key_mono, encryptedtext_mono);
 8000e06:	f107 0114 	add.w	r1, r7, #20
 8000e0a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e0e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff fa55 	bl	80002c0 <encrypt_monoalphabetic>
    printf("\r\n Decryption Starts..\r\n");
 8000e16:	4833      	ldr	r0, [pc, #204]	; (8000ee4 <main+0x2e0>)
 8000e18:	f000 fb3c 	bl	8001494 <puts>
    decrypt_monoalphabetic(encryptedtext_mono,key_mono, decryptedtext_mono);
 8000e1c:	f107 0314 	add.w	r3, r7, #20
 8000e20:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000e22:	4619      	mov	r1, r3
 8000e24:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000e26:	f7ff fa94 	bl	8000352 <decrypt_monoalphabetic>
    puts(decryptedtext_mono);
 8000e2a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8000e2c:	f000 fb32 	bl	8001494 <puts>

    printf("\r\n Now Start with Poly-alphabetic Encryption\r\n");
 8000e30:	482d      	ldr	r0, [pc, #180]	; (8000ee8 <main+0x2e4>)
 8000e32:	f000 fb2f 	bl	8001494 <puts>
    puts(plain_text_poly);
 8000e36:	1d3b      	adds	r3, r7, #4
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f000 fb2b 	bl	8001494 <puts>
    encrypt_Vigenere(plain_text_poly, key_poly, encrypted_text_poly);
 8000e3e:	f107 0110 	add.w	r1, r7, #16
 8000e42:	1d3b      	adds	r3, r7, #4
 8000e44:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff faee 	bl	8000428 <encrypt_Vigenere>
    printf("Decryption of poly_alphabetic starts now.. \r\n");
 8000e4c:	4827      	ldr	r0, [pc, #156]	; (8000eec <main+0x2e8>)
 8000e4e:	f000 fb21 	bl	8001494 <puts>
    decrypt_Vigenere(encrypted_text_poly,key_poly,decrypted_text_poly);
 8000e52:	f107 0310 	add.w	r3, r7, #16
 8000e56:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000e58:	4619      	mov	r1, r3
 8000e5a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8000e5c:	f7ff fb68 	bl	8000530 <decrypt_Vigenere>
    puts(decrypted_text_poly);
 8000e60:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8000e62:	f000 fb17 	bl	8001494 <puts>

    encrypt_NormalizeVigenere(plain_text_poly,key_poly, encrypted_text_poly);
 8000e66:	f107 0110 	add.w	r1, r7, #16
 8000e6a:	1d3b      	adds	r3, r7, #4
 8000e6c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f7ff fc14 	bl	800069c <encrypt_NormalizeVigenere>
    decrypt_NormalizeVigenere(encrypted_text_poly,key_poly,decrypted_text_poly);
 8000e74:	f107 0310 	add.w	r3, r7, #16
 8000e78:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8000e7e:	f7ff fc73 	bl	8000768 <decrypt_NormalizeVigenere>
    puts(decrypted_text_poly);
 8000e82:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8000e84:	f000 fb06 	bl	8001494 <puts>
 8000e88:	2300      	movs	r3, #0
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3778      	adds	r7, #120	; 0x78
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bdb0      	pop	{r4, r5, r7, pc}
 8000e92:	bf00      	nop
 8000e94:	08002434 	.word	0x08002434
 8000e98:	080025dc 	.word	0x080025dc
 8000e9c:	080025e4 	.word	0x080025e4
 8000ea0:	080025ec 	.word	0x080025ec
 8000ea4:	080025f8 	.word	0x080025f8
 8000ea8:	0059454b 	.word	0x0059454b
 8000eac:	08002618 	.word	0x08002618
 8000eb0:	08002454 	.word	0x08002454
 8000eb4:	0800247c 	.word	0x0800247c
 8000eb8:	08002494 	.word	0x08002494
 8000ebc:	080024a4 	.word	0x080024a4
 8000ec0:	20000000 	.word	0x20000000
 8000ec4:	20000002 	.word	0x20000002
 8000ec8:	20000084 	.word	0x20000084
 8000ecc:	080024bc 	.word	0x080024bc
 8000ed0:	20000086 	.word	0x20000086
 8000ed4:	080024e0 	.word	0x080024e0
 8000ed8:	08002504 	.word	0x08002504
 8000edc:	08002520 	.word	0x08002520
 8000ee0:	08002534 	.word	0x08002534
 8000ee4:	08002564 	.word	0x08002564
 8000ee8:	0800257c 	.word	0x0800257c
 8000eec:	080025ac 	.word	0x080025ac

08000ef0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b086      	sub	sp, #24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000efc:	2300      	movs	r3, #0
 8000efe:	617b      	str	r3, [r7, #20]
 8000f00:	e00a      	b.n	8000f18 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f02:	f3af 8000 	nop.w
 8000f06:	4601      	mov	r1, r0
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	1c5a      	adds	r2, r3, #1
 8000f0c:	60ba      	str	r2, [r7, #8]
 8000f0e:	b2ca      	uxtb	r2, r1
 8000f10:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	3301      	adds	r3, #1
 8000f16:	617b      	str	r3, [r7, #20]
 8000f18:	697a      	ldr	r2, [r7, #20]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	dbf0      	blt.n	8000f02 <_read+0x12>
	}

return len;
 8000f20:	687b      	ldr	r3, [r7, #4]
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3718      	adds	r7, #24
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b086      	sub	sp, #24
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	60f8      	str	r0, [r7, #12]
 8000f32:	60b9      	str	r1, [r7, #8]
 8000f34:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f36:	2300      	movs	r3, #0
 8000f38:	617b      	str	r3, [r7, #20]
 8000f3a:	e009      	b.n	8000f50 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	1c5a      	adds	r2, r3, #1
 8000f40:	60ba      	str	r2, [r7, #8]
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	4618      	mov	r0, r3
 8000f46:	f000 f91d 	bl	8001184 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	617b      	str	r3, [r7, #20]
 8000f50:	697a      	ldr	r2, [r7, #20]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	dbf1      	blt.n	8000f3c <_write+0x12>
	}
	return len;
 8000f58:	687b      	ldr	r3, [r7, #4]
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3718      	adds	r7, #24
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <_close>:

int _close(int file)
{
 8000f62:	b480      	push	{r7}
 8000f64:	b083      	sub	sp, #12
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
	return -1;
 8000f6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bc80      	pop	{r7}
 8000f76:	4770      	bx	lr

08000f78 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f88:	605a      	str	r2, [r3, #4]
	return 0;
 8000f8a:	2300      	movs	r3, #0
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bc80      	pop	{r7}
 8000f94:	4770      	bx	lr

08000f96 <_isatty>:

int _isatty(int file)
{
 8000f96:	b480      	push	{r7}
 8000f98:	b083      	sub	sp, #12
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
	return 1;
 8000f9e:	2301      	movs	r3, #1
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bc80      	pop	{r7}
 8000fa8:	4770      	bx	lr

08000faa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000faa:	b480      	push	{r7}
 8000fac:	b085      	sub	sp, #20
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	60f8      	str	r0, [r7, #12]
 8000fb2:	60b9      	str	r1, [r7, #8]
 8000fb4:	607a      	str	r2, [r7, #4]
	return 0;
 8000fb6:	2300      	movs	r3, #0
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3714      	adds	r7, #20
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bc80      	pop	{r7}
 8000fc0:	4770      	bx	lr
	...

08000fc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fcc:	4a14      	ldr	r2, [pc, #80]	; (8001020 <_sbrk+0x5c>)
 8000fce:	4b15      	ldr	r3, [pc, #84]	; (8001024 <_sbrk+0x60>)
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fd8:	4b13      	ldr	r3, [pc, #76]	; (8001028 <_sbrk+0x64>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d102      	bne.n	8000fe6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fe0:	4b11      	ldr	r3, [pc, #68]	; (8001028 <_sbrk+0x64>)
 8000fe2:	4a12      	ldr	r2, [pc, #72]	; (800102c <_sbrk+0x68>)
 8000fe4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fe6:	4b10      	ldr	r3, [pc, #64]	; (8001028 <_sbrk+0x64>)
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4413      	add	r3, r2
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d207      	bcs.n	8001004 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ff4:	f000 f91a 	bl	800122c <__errno>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	220c      	movs	r2, #12
 8000ffc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8001002:	e009      	b.n	8001018 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001004:	4b08      	ldr	r3, [pc, #32]	; (8001028 <_sbrk+0x64>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800100a:	4b07      	ldr	r3, [pc, #28]	; (8001028 <_sbrk+0x64>)
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4413      	add	r3, r2
 8001012:	4a05      	ldr	r2, [pc, #20]	; (8001028 <_sbrk+0x64>)
 8001014:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001016:	68fb      	ldr	r3, [r7, #12]
}
 8001018:	4618      	mov	r0, r3
 800101a:	3718      	adds	r7, #24
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	20020000 	.word	0x20020000
 8001024:	00000400 	.word	0x00000400
 8001028:	20000088 	.word	0x20000088
 800102c:	200000b0 	.word	0x200000b0

08001030 <tick_increment>:
	__enable_irq();
	return current_tick_p;
}

static void tick_increment(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
	current_tick += TICK_FREQ;
 8001034:	4b04      	ldr	r3, [pc, #16]	; (8001048 <tick_increment+0x18>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	3301      	adds	r3, #1
 800103a:	4a03      	ldr	r2, [pc, #12]	; (8001048 <tick_increment+0x18>)
 800103c:	6013      	str	r3, [r2, #0]
}
 800103e:	bf00      	nop
 8001040:	46bd      	mov	sp, r7
 8001042:	bc80      	pop	{r7}
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	20000094 	.word	0x20000094

0800104c <timer_init>:

void timer_init(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001050:	b672      	cpsid	i
}
 8001052:	bf00      	nop
	/* Disable the  global interrupt during the running of this timer service */
	__disable_irq();
	/* Load the timer with number of clock cycles per second ; generate a tick each second */
	SysTick->LOAD = ONE_SEC_LOAD-ONE;
 8001054:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <timer_init+0x44>)
 8001056:	4a0f      	ldr	r2, [pc, #60]	; (8001094 <timer_init+0x48>)
 8001058:	605a      	str	r2, [r3, #4]
	/* Clear the systick current value register */
	SysTick->VAL  = 0;
 800105a:	4b0d      	ldr	r3, [pc, #52]	; (8001090 <timer_init+0x44>)
 800105c:	2200      	movs	r2, #0
 800105e:	609a      	str	r2, [r3, #8]
	/* Select Internal Clock Source */
	SysTick->CTRL |= CTRL_CLKSRC;
 8001060:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <timer_init+0x44>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a0a      	ldr	r2, [pc, #40]	; (8001090 <timer_init+0x44>)
 8001066:	f043 0304 	orr.w	r3, r3, #4
 800106a:	6013      	str	r3, [r2, #0]
	/* Enable Interrupt */
	SysTick->CTRL |= CTRL_TICKINIT;
 800106c:	4b08      	ldr	r3, [pc, #32]	; (8001090 <timer_init+0x44>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a07      	ldr	r2, [pc, #28]	; (8001090 <timer_init+0x44>)
 8001072:	f043 0302 	orr.w	r3, r3, #2
 8001076:	6013      	str	r3, [r2, #0]
	/* Enable systick */
	SysTick->CTRL |= CTRL_ENABLE;
 8001078:	4b05      	ldr	r3, [pc, #20]	; (8001090 <timer_init+0x44>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a04      	ldr	r2, [pc, #16]	; (8001090 <timer_init+0x44>)
 800107e:	f043 0301 	orr.w	r3, r3, #1
 8001082:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001084:	b662      	cpsie	i
}
 8001086:	bf00      	nop
	/* Enable Global Interrupt */
	__enable_irq();
}
 8001088:	bf00      	nop
 800108a:	46bd      	mov	sp, r7
 800108c:	bc80      	pop	{r7}
 800108e:	4770      	bx	lr
 8001090:	e000e010 	.word	0xe000e010
 8001094:	00f423ff 	.word	0x00f423ff

08001098 <SysTick_Handler>:


void SysTick_Handler(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
	tick_increment();
 800109c:	f7ff ffc8 	bl	8001030 <tick_increment>
}
 80010a0:	bf00      	nop
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <uart_init>:
 static uint16_t compute_uart_bd(uint32_t periph_clk, uint32_t baudrate);
 static void uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate);


 void uart_init(void)
 {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
		  Configure Transfer Direction
		  Enable the UART module
	 */

	 /* Enable Clock Access to GPIOA */
	 RCC->AHB1ENR  |= GPIOA_EN;
 80010a8:	4b1f      	ldr	r3, [pc, #124]	; (8001128 <uart_init+0x84>)
 80010aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ac:	4a1e      	ldr	r2, [pc, #120]	; (8001128 <uart_init+0x84>)
 80010ae:	f043 0301 	orr.w	r3, r3, #1
 80010b2:	6313      	str	r3, [r2, #48]	; 0x30
	 /* Set the mode of PA2 to alternate Function mode*/
	 GPIOA->MODER &= ~(GPIOA_AF_PIN4);
 80010b4:	4b1d      	ldr	r3, [pc, #116]	; (800112c <uart_init+0x88>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a1c      	ldr	r2, [pc, #112]	; (800112c <uart_init+0x88>)
 80010ba:	f023 0310 	bic.w	r3, r3, #16
 80010be:	6013      	str	r3, [r2, #0]
	 GPIOA->MODER |=  GPIOA_AF_PIN5;
 80010c0:	4b1a      	ldr	r3, [pc, #104]	; (800112c <uart_init+0x88>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a19      	ldr	r2, [pc, #100]	; (800112c <uart_init+0x88>)
 80010c6:	f043 0320 	orr.w	r3, r3, #32
 80010ca:	6013      	str	r3, [r2, #0]

	 /* Set the Alternate Function to AF7(Uart2_tx); set it according to the datasheet!  */
	 GPIOA->AFR[0] |= (GPIOA_AFR_PIN8);
 80010cc:	4b17      	ldr	r3, [pc, #92]	; (800112c <uart_init+0x88>)
 80010ce:	6a1b      	ldr	r3, [r3, #32]
 80010d0:	4a16      	ldr	r2, [pc, #88]	; (800112c <uart_init+0x88>)
 80010d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010d6:	6213      	str	r3, [r2, #32]
	 GPIOA->AFR[0] |= (GPIOA_AFR_PIN9);
 80010d8:	4b14      	ldr	r3, [pc, #80]	; (800112c <uart_init+0x88>)
 80010da:	6a1b      	ldr	r3, [r3, #32]
 80010dc:	4a13      	ldr	r2, [pc, #76]	; (800112c <uart_init+0x88>)
 80010de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010e2:	6213      	str	r3, [r2, #32]
	 GPIOA->AFR[0] |= (GPIOA_AFR_PIN10);
 80010e4:	4b11      	ldr	r3, [pc, #68]	; (800112c <uart_init+0x88>)
 80010e6:	6a1b      	ldr	r3, [r3, #32]
 80010e8:	4a10      	ldr	r2, [pc, #64]	; (800112c <uart_init+0x88>)
 80010ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010ee:	6213      	str	r3, [r2, #32]
	 GPIOA->AFR[0] &= ~(GPIOA_AFR_PIN11);
 80010f0:	4b0e      	ldr	r3, [pc, #56]	; (800112c <uart_init+0x88>)
 80010f2:	6a1b      	ldr	r3, [r3, #32]
 80010f4:	4a0d      	ldr	r2, [pc, #52]	; (800112c <uart_init+0x88>)
 80010f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80010fa:	6213      	str	r3, [r2, #32]

	 /* Enable Clock access to UART 2 */
     RCC->APB1ENR |= UART2EN;
 80010fc:	4b0a      	ldr	r3, [pc, #40]	; (8001128 <uart_init+0x84>)
 80010fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001100:	4a09      	ldr	r2, [pc, #36]	; (8001128 <uart_init+0x84>)
 8001102:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001106:	6413      	str	r3, [r2, #64]	; 0x40
	 /* Configure Baud Rate */
     uart_set_baudrate(APB1_CLK, UART_BAUDRATE);
 8001108:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800110c:	4808      	ldr	r0, [pc, #32]	; (8001130 <uart_init+0x8c>)
 800110e:	f000 f825 	bl	800115c <uart_set_baudrate>
     /* Configure Transfer Direction */
     USART2->CR1 = CR1_TE;
 8001112:	4b08      	ldr	r3, [pc, #32]	; (8001134 <uart_init+0x90>)
 8001114:	2208      	movs	r2, #8
 8001116:	60da      	str	r2, [r3, #12]
     /* Enable the UART module */
     USART2->CR1 |= CR1_UE;
 8001118:	4b06      	ldr	r3, [pc, #24]	; (8001134 <uart_init+0x90>)
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	4a05      	ldr	r2, [pc, #20]	; (8001134 <uart_init+0x90>)
 800111e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001122:	60d3      	str	r3, [r2, #12]

 }
 8001124:	bf00      	nop
 8001126:	bd80      	pop	{r7, pc}
 8001128:	40023800 	.word	0x40023800
 800112c:	40020000 	.word	0x40020000
 8001130:	00f42400 	.word	0x00f42400
 8001134:	40004400 	.word	0x40004400

08001138 <compute_uart_bd>:

 static uint16_t compute_uart_bd(uint32_t periph_clk, uint32_t baudrate)
 {
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	6039      	str	r1, [r7, #0]
	 return ((periph_clk + (baudrate/2U))/baudrate);
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	085a      	lsrs	r2, r3, #1
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	441a      	add	r2, r3
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001150:	b29b      	uxth	r3, r3
 }
 8001152:	4618      	mov	r0, r3
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	bc80      	pop	{r7}
 800115a:	4770      	bx	lr

0800115c <uart_set_baudrate>:

 static void uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate)
 {
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
	 USART2->BRR = compute_uart_bd(periph_clk,baudrate);
 8001166:	6839      	ldr	r1, [r7, #0]
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f7ff ffe5 	bl	8001138 <compute_uart_bd>
 800116e:	4603      	mov	r3, r0
 8001170:	461a      	mov	r2, r3
 8001172:	4b03      	ldr	r3, [pc, #12]	; (8001180 <uart_set_baudrate+0x24>)
 8001174:	609a      	str	r2, [r3, #8]
 }
 8001176:	bf00      	nop
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40004400 	.word	0x40004400

08001184 <__io_putchar>:

 int __io_putchar(int ch)
 {
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 	uart_write(ch);
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f000 f805 	bl	800119c <uart_write>
 	return ch;
 8001192:	687b      	ldr	r3, [r7, #4]
 }
 8001194:	4618      	mov	r0, r3
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}

0800119c <uart_write>:

void uart_write(int ch)
 {
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
	 /* Ensure transmit data register is empty before new data can be loaded */
    while(!(USART2->SR & SR_TXE));
 80011a4:	bf00      	nop
 80011a6:	4b07      	ldr	r3, [pc, #28]	; (80011c4 <uart_write+0x28>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d0f9      	beq.n	80011a6 <uart_write+0xa>
    USART2->DR = (ch & 0xFF);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a03      	ldr	r2, [pc, #12]	; (80011c4 <uart_write+0x28>)
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	6053      	str	r3, [r2, #4]
 }
 80011ba:	bf00      	nop
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	bc80      	pop	{r7}
 80011c2:	4770      	bx	lr
 80011c4:	40004400 	.word	0x40004400

080011c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80011c8:	480d      	ldr	r0, [pc, #52]	; (8001200 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80011ca:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80011cc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011d0:	480c      	ldr	r0, [pc, #48]	; (8001204 <LoopForever+0x6>)
  ldr r1, =_edata
 80011d2:	490d      	ldr	r1, [pc, #52]	; (8001208 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011d4:	4a0d      	ldr	r2, [pc, #52]	; (800120c <LoopForever+0xe>)
  movs r3, #0
 80011d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011d8:	e002      	b.n	80011e0 <LoopCopyDataInit>

080011da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011de:	3304      	adds	r3, #4

080011e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011e4:	d3f9      	bcc.n	80011da <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011e6:	4a0a      	ldr	r2, [pc, #40]	; (8001210 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011e8:	4c0a      	ldr	r4, [pc, #40]	; (8001214 <LoopForever+0x16>)
  movs r3, #0
 80011ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011ec:	e001      	b.n	80011f2 <LoopFillZerobss>

080011ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011f0:	3204      	adds	r2, #4

080011f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011f4:	d3fb      	bcc.n	80011ee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80011f6:	f000 f81f 	bl	8001238 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011fa:	f7ff fd03 	bl	8000c04 <main>

080011fe <LoopForever>:

LoopForever:
    b LoopForever
 80011fe:	e7fe      	b.n	80011fe <LoopForever>
  ldr   r0, =_estack
 8001200:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001204:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001208:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800120c:	080027c8 	.word	0x080027c8
  ldr r2, =_sbss
 8001210:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001214:	200000ac 	.word	0x200000ac

08001218 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001218:	e7fe      	b.n	8001218 <ADC_IRQHandler>
	...

0800121c <calloc>:
 800121c:	4b02      	ldr	r3, [pc, #8]	; (8001228 <calloc+0xc>)
 800121e:	460a      	mov	r2, r1
 8001220:	4601      	mov	r1, r0
 8001222:	6818      	ldr	r0, [r3, #0]
 8001224:	f000 b834 	b.w	8001290 <_calloc_r>
 8001228:	20000004 	.word	0x20000004

0800122c <__errno>:
 800122c:	4b01      	ldr	r3, [pc, #4]	; (8001234 <__errno+0x8>)
 800122e:	6818      	ldr	r0, [r3, #0]
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	20000004 	.word	0x20000004

08001238 <__libc_init_array>:
 8001238:	b570      	push	{r4, r5, r6, lr}
 800123a:	4d0d      	ldr	r5, [pc, #52]	; (8001270 <__libc_init_array+0x38>)
 800123c:	4c0d      	ldr	r4, [pc, #52]	; (8001274 <__libc_init_array+0x3c>)
 800123e:	1b64      	subs	r4, r4, r5
 8001240:	10a4      	asrs	r4, r4, #2
 8001242:	2600      	movs	r6, #0
 8001244:	42a6      	cmp	r6, r4
 8001246:	d109      	bne.n	800125c <__libc_init_array+0x24>
 8001248:	4d0b      	ldr	r5, [pc, #44]	; (8001278 <__libc_init_array+0x40>)
 800124a:	4c0c      	ldr	r4, [pc, #48]	; (800127c <__libc_init_array+0x44>)
 800124c:	f001 f852 	bl	80022f4 <_init>
 8001250:	1b64      	subs	r4, r4, r5
 8001252:	10a4      	asrs	r4, r4, #2
 8001254:	2600      	movs	r6, #0
 8001256:	42a6      	cmp	r6, r4
 8001258:	d105      	bne.n	8001266 <__libc_init_array+0x2e>
 800125a:	bd70      	pop	{r4, r5, r6, pc}
 800125c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001260:	4798      	blx	r3
 8001262:	3601      	adds	r6, #1
 8001264:	e7ee      	b.n	8001244 <__libc_init_array+0xc>
 8001266:	f855 3b04 	ldr.w	r3, [r5], #4
 800126a:	4798      	blx	r3
 800126c:	3601      	adds	r6, #1
 800126e:	e7f2      	b.n	8001256 <__libc_init_array+0x1e>
 8001270:	080027c0 	.word	0x080027c0
 8001274:	080027c0 	.word	0x080027c0
 8001278:	080027c0 	.word	0x080027c0
 800127c:	080027c4 	.word	0x080027c4

08001280 <memset>:
 8001280:	4402      	add	r2, r0
 8001282:	4603      	mov	r3, r0
 8001284:	4293      	cmp	r3, r2
 8001286:	d100      	bne.n	800128a <memset+0xa>
 8001288:	4770      	bx	lr
 800128a:	f803 1b01 	strb.w	r1, [r3], #1
 800128e:	e7f9      	b.n	8001284 <memset+0x4>

08001290 <_calloc_r>:
 8001290:	b538      	push	{r3, r4, r5, lr}
 8001292:	fb02 f501 	mul.w	r5, r2, r1
 8001296:	4629      	mov	r1, r5
 8001298:	f000 f808 	bl	80012ac <_malloc_r>
 800129c:	4604      	mov	r4, r0
 800129e:	b118      	cbz	r0, 80012a8 <_calloc_r+0x18>
 80012a0:	462a      	mov	r2, r5
 80012a2:	2100      	movs	r1, #0
 80012a4:	f7ff ffec 	bl	8001280 <memset>
 80012a8:	4620      	mov	r0, r4
 80012aa:	bd38      	pop	{r3, r4, r5, pc}

080012ac <_malloc_r>:
 80012ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012ae:	1ccd      	adds	r5, r1, #3
 80012b0:	f025 0503 	bic.w	r5, r5, #3
 80012b4:	3508      	adds	r5, #8
 80012b6:	2d0c      	cmp	r5, #12
 80012b8:	bf38      	it	cc
 80012ba:	250c      	movcc	r5, #12
 80012bc:	2d00      	cmp	r5, #0
 80012be:	4606      	mov	r6, r0
 80012c0:	db01      	blt.n	80012c6 <_malloc_r+0x1a>
 80012c2:	42a9      	cmp	r1, r5
 80012c4:	d903      	bls.n	80012ce <_malloc_r+0x22>
 80012c6:	230c      	movs	r3, #12
 80012c8:	6033      	str	r3, [r6, #0]
 80012ca:	2000      	movs	r0, #0
 80012cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012ce:	f000 fbd7 	bl	8001a80 <__malloc_lock>
 80012d2:	4921      	ldr	r1, [pc, #132]	; (8001358 <_malloc_r+0xac>)
 80012d4:	680a      	ldr	r2, [r1, #0]
 80012d6:	4614      	mov	r4, r2
 80012d8:	b99c      	cbnz	r4, 8001302 <_malloc_r+0x56>
 80012da:	4f20      	ldr	r7, [pc, #128]	; (800135c <_malloc_r+0xb0>)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	b923      	cbnz	r3, 80012ea <_malloc_r+0x3e>
 80012e0:	4621      	mov	r1, r4
 80012e2:	4630      	mov	r0, r6
 80012e4:	f000 f8de 	bl	80014a4 <_sbrk_r>
 80012e8:	6038      	str	r0, [r7, #0]
 80012ea:	4629      	mov	r1, r5
 80012ec:	4630      	mov	r0, r6
 80012ee:	f000 f8d9 	bl	80014a4 <_sbrk_r>
 80012f2:	1c43      	adds	r3, r0, #1
 80012f4:	d123      	bne.n	800133e <_malloc_r+0x92>
 80012f6:	230c      	movs	r3, #12
 80012f8:	6033      	str	r3, [r6, #0]
 80012fa:	4630      	mov	r0, r6
 80012fc:	f000 fbc6 	bl	8001a8c <__malloc_unlock>
 8001300:	e7e3      	b.n	80012ca <_malloc_r+0x1e>
 8001302:	6823      	ldr	r3, [r4, #0]
 8001304:	1b5b      	subs	r3, r3, r5
 8001306:	d417      	bmi.n	8001338 <_malloc_r+0x8c>
 8001308:	2b0b      	cmp	r3, #11
 800130a:	d903      	bls.n	8001314 <_malloc_r+0x68>
 800130c:	6023      	str	r3, [r4, #0]
 800130e:	441c      	add	r4, r3
 8001310:	6025      	str	r5, [r4, #0]
 8001312:	e004      	b.n	800131e <_malloc_r+0x72>
 8001314:	6863      	ldr	r3, [r4, #4]
 8001316:	42a2      	cmp	r2, r4
 8001318:	bf0c      	ite	eq
 800131a:	600b      	streq	r3, [r1, #0]
 800131c:	6053      	strne	r3, [r2, #4]
 800131e:	4630      	mov	r0, r6
 8001320:	f000 fbb4 	bl	8001a8c <__malloc_unlock>
 8001324:	f104 000b 	add.w	r0, r4, #11
 8001328:	1d23      	adds	r3, r4, #4
 800132a:	f020 0007 	bic.w	r0, r0, #7
 800132e:	1ac2      	subs	r2, r0, r3
 8001330:	d0cc      	beq.n	80012cc <_malloc_r+0x20>
 8001332:	1a1b      	subs	r3, r3, r0
 8001334:	50a3      	str	r3, [r4, r2]
 8001336:	e7c9      	b.n	80012cc <_malloc_r+0x20>
 8001338:	4622      	mov	r2, r4
 800133a:	6864      	ldr	r4, [r4, #4]
 800133c:	e7cc      	b.n	80012d8 <_malloc_r+0x2c>
 800133e:	1cc4      	adds	r4, r0, #3
 8001340:	f024 0403 	bic.w	r4, r4, #3
 8001344:	42a0      	cmp	r0, r4
 8001346:	d0e3      	beq.n	8001310 <_malloc_r+0x64>
 8001348:	1a21      	subs	r1, r4, r0
 800134a:	4630      	mov	r0, r6
 800134c:	f000 f8aa 	bl	80014a4 <_sbrk_r>
 8001350:	3001      	adds	r0, #1
 8001352:	d1dd      	bne.n	8001310 <_malloc_r+0x64>
 8001354:	e7cf      	b.n	80012f6 <_malloc_r+0x4a>
 8001356:	bf00      	nop
 8001358:	2000008c 	.word	0x2000008c
 800135c:	20000090 	.word	0x20000090

08001360 <iprintf>:
 8001360:	b40f      	push	{r0, r1, r2, r3}
 8001362:	4b0a      	ldr	r3, [pc, #40]	; (800138c <iprintf+0x2c>)
 8001364:	b513      	push	{r0, r1, r4, lr}
 8001366:	681c      	ldr	r4, [r3, #0]
 8001368:	b124      	cbz	r4, 8001374 <iprintf+0x14>
 800136a:	69a3      	ldr	r3, [r4, #24]
 800136c:	b913      	cbnz	r3, 8001374 <iprintf+0x14>
 800136e:	4620      	mov	r0, r4
 8001370:	f000 fa82 	bl	8001878 <__sinit>
 8001374:	ab05      	add	r3, sp, #20
 8001376:	9a04      	ldr	r2, [sp, #16]
 8001378:	68a1      	ldr	r1, [r4, #8]
 800137a:	9301      	str	r3, [sp, #4]
 800137c:	4620      	mov	r0, r4
 800137e:	f000 fc01 	bl	8001b84 <_vfiprintf_r>
 8001382:	b002      	add	sp, #8
 8001384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001388:	b004      	add	sp, #16
 800138a:	4770      	bx	lr
 800138c:	20000004 	.word	0x20000004

08001390 <putchar>:
 8001390:	b538      	push	{r3, r4, r5, lr}
 8001392:	4b08      	ldr	r3, [pc, #32]	; (80013b4 <putchar+0x24>)
 8001394:	681c      	ldr	r4, [r3, #0]
 8001396:	4605      	mov	r5, r0
 8001398:	b124      	cbz	r4, 80013a4 <putchar+0x14>
 800139a:	69a3      	ldr	r3, [r4, #24]
 800139c:	b913      	cbnz	r3, 80013a4 <putchar+0x14>
 800139e:	4620      	mov	r0, r4
 80013a0:	f000 fa6a 	bl	8001878 <__sinit>
 80013a4:	68a2      	ldr	r2, [r4, #8]
 80013a6:	4629      	mov	r1, r5
 80013a8:	4620      	mov	r0, r4
 80013aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80013ae:	f000 bead 	b.w	800210c <_putc_r>
 80013b2:	bf00      	nop
 80013b4:	20000004 	.word	0x20000004

080013b8 <_puts_r>:
 80013b8:	b570      	push	{r4, r5, r6, lr}
 80013ba:	460e      	mov	r6, r1
 80013bc:	4605      	mov	r5, r0
 80013be:	b118      	cbz	r0, 80013c8 <_puts_r+0x10>
 80013c0:	6983      	ldr	r3, [r0, #24]
 80013c2:	b90b      	cbnz	r3, 80013c8 <_puts_r+0x10>
 80013c4:	f000 fa58 	bl	8001878 <__sinit>
 80013c8:	69ab      	ldr	r3, [r5, #24]
 80013ca:	68ac      	ldr	r4, [r5, #8]
 80013cc:	b913      	cbnz	r3, 80013d4 <_puts_r+0x1c>
 80013ce:	4628      	mov	r0, r5
 80013d0:	f000 fa52 	bl	8001878 <__sinit>
 80013d4:	4b2c      	ldr	r3, [pc, #176]	; (8001488 <_puts_r+0xd0>)
 80013d6:	429c      	cmp	r4, r3
 80013d8:	d120      	bne.n	800141c <_puts_r+0x64>
 80013da:	686c      	ldr	r4, [r5, #4]
 80013dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80013de:	07db      	lsls	r3, r3, #31
 80013e0:	d405      	bmi.n	80013ee <_puts_r+0x36>
 80013e2:	89a3      	ldrh	r3, [r4, #12]
 80013e4:	0598      	lsls	r0, r3, #22
 80013e6:	d402      	bmi.n	80013ee <_puts_r+0x36>
 80013e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80013ea:	f000 fae3 	bl	80019b4 <__retarget_lock_acquire_recursive>
 80013ee:	89a3      	ldrh	r3, [r4, #12]
 80013f0:	0719      	lsls	r1, r3, #28
 80013f2:	d51d      	bpl.n	8001430 <_puts_r+0x78>
 80013f4:	6923      	ldr	r3, [r4, #16]
 80013f6:	b1db      	cbz	r3, 8001430 <_puts_r+0x78>
 80013f8:	3e01      	subs	r6, #1
 80013fa:	68a3      	ldr	r3, [r4, #8]
 80013fc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001400:	3b01      	subs	r3, #1
 8001402:	60a3      	str	r3, [r4, #8]
 8001404:	bb39      	cbnz	r1, 8001456 <_puts_r+0x9e>
 8001406:	2b00      	cmp	r3, #0
 8001408:	da38      	bge.n	800147c <_puts_r+0xc4>
 800140a:	4622      	mov	r2, r4
 800140c:	210a      	movs	r1, #10
 800140e:	4628      	mov	r0, r5
 8001410:	f000 f858 	bl	80014c4 <__swbuf_r>
 8001414:	3001      	adds	r0, #1
 8001416:	d011      	beq.n	800143c <_puts_r+0x84>
 8001418:	250a      	movs	r5, #10
 800141a:	e011      	b.n	8001440 <_puts_r+0x88>
 800141c:	4b1b      	ldr	r3, [pc, #108]	; (800148c <_puts_r+0xd4>)
 800141e:	429c      	cmp	r4, r3
 8001420:	d101      	bne.n	8001426 <_puts_r+0x6e>
 8001422:	68ac      	ldr	r4, [r5, #8]
 8001424:	e7da      	b.n	80013dc <_puts_r+0x24>
 8001426:	4b1a      	ldr	r3, [pc, #104]	; (8001490 <_puts_r+0xd8>)
 8001428:	429c      	cmp	r4, r3
 800142a:	bf08      	it	eq
 800142c:	68ec      	ldreq	r4, [r5, #12]
 800142e:	e7d5      	b.n	80013dc <_puts_r+0x24>
 8001430:	4621      	mov	r1, r4
 8001432:	4628      	mov	r0, r5
 8001434:	f000 f898 	bl	8001568 <__swsetup_r>
 8001438:	2800      	cmp	r0, #0
 800143a:	d0dd      	beq.n	80013f8 <_puts_r+0x40>
 800143c:	f04f 35ff 	mov.w	r5, #4294967295
 8001440:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001442:	07da      	lsls	r2, r3, #31
 8001444:	d405      	bmi.n	8001452 <_puts_r+0x9a>
 8001446:	89a3      	ldrh	r3, [r4, #12]
 8001448:	059b      	lsls	r3, r3, #22
 800144a:	d402      	bmi.n	8001452 <_puts_r+0x9a>
 800144c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800144e:	f000 fab2 	bl	80019b6 <__retarget_lock_release_recursive>
 8001452:	4628      	mov	r0, r5
 8001454:	bd70      	pop	{r4, r5, r6, pc}
 8001456:	2b00      	cmp	r3, #0
 8001458:	da04      	bge.n	8001464 <_puts_r+0xac>
 800145a:	69a2      	ldr	r2, [r4, #24]
 800145c:	429a      	cmp	r2, r3
 800145e:	dc06      	bgt.n	800146e <_puts_r+0xb6>
 8001460:	290a      	cmp	r1, #10
 8001462:	d004      	beq.n	800146e <_puts_r+0xb6>
 8001464:	6823      	ldr	r3, [r4, #0]
 8001466:	1c5a      	adds	r2, r3, #1
 8001468:	6022      	str	r2, [r4, #0]
 800146a:	7019      	strb	r1, [r3, #0]
 800146c:	e7c5      	b.n	80013fa <_puts_r+0x42>
 800146e:	4622      	mov	r2, r4
 8001470:	4628      	mov	r0, r5
 8001472:	f000 f827 	bl	80014c4 <__swbuf_r>
 8001476:	3001      	adds	r0, #1
 8001478:	d1bf      	bne.n	80013fa <_puts_r+0x42>
 800147a:	e7df      	b.n	800143c <_puts_r+0x84>
 800147c:	6823      	ldr	r3, [r4, #0]
 800147e:	250a      	movs	r5, #10
 8001480:	1c5a      	adds	r2, r3, #1
 8001482:	6022      	str	r2, [r4, #0]
 8001484:	701d      	strb	r5, [r3, #0]
 8001486:	e7db      	b.n	8001440 <_puts_r+0x88>
 8001488:	0800274c 	.word	0x0800274c
 800148c:	0800276c 	.word	0x0800276c
 8001490:	0800272c 	.word	0x0800272c

08001494 <puts>:
 8001494:	4b02      	ldr	r3, [pc, #8]	; (80014a0 <puts+0xc>)
 8001496:	4601      	mov	r1, r0
 8001498:	6818      	ldr	r0, [r3, #0]
 800149a:	f7ff bf8d 	b.w	80013b8 <_puts_r>
 800149e:	bf00      	nop
 80014a0:	20000004 	.word	0x20000004

080014a4 <_sbrk_r>:
 80014a4:	b538      	push	{r3, r4, r5, lr}
 80014a6:	4d06      	ldr	r5, [pc, #24]	; (80014c0 <_sbrk_r+0x1c>)
 80014a8:	2300      	movs	r3, #0
 80014aa:	4604      	mov	r4, r0
 80014ac:	4608      	mov	r0, r1
 80014ae:	602b      	str	r3, [r5, #0]
 80014b0:	f7ff fd88 	bl	8000fc4 <_sbrk>
 80014b4:	1c43      	adds	r3, r0, #1
 80014b6:	d102      	bne.n	80014be <_sbrk_r+0x1a>
 80014b8:	682b      	ldr	r3, [r5, #0]
 80014ba:	b103      	cbz	r3, 80014be <_sbrk_r+0x1a>
 80014bc:	6023      	str	r3, [r4, #0]
 80014be:	bd38      	pop	{r3, r4, r5, pc}
 80014c0:	200000a8 	.word	0x200000a8

080014c4 <__swbuf_r>:
 80014c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014c6:	460e      	mov	r6, r1
 80014c8:	4614      	mov	r4, r2
 80014ca:	4605      	mov	r5, r0
 80014cc:	b118      	cbz	r0, 80014d6 <__swbuf_r+0x12>
 80014ce:	6983      	ldr	r3, [r0, #24]
 80014d0:	b90b      	cbnz	r3, 80014d6 <__swbuf_r+0x12>
 80014d2:	f000 f9d1 	bl	8001878 <__sinit>
 80014d6:	4b21      	ldr	r3, [pc, #132]	; (800155c <__swbuf_r+0x98>)
 80014d8:	429c      	cmp	r4, r3
 80014da:	d12b      	bne.n	8001534 <__swbuf_r+0x70>
 80014dc:	686c      	ldr	r4, [r5, #4]
 80014de:	69a3      	ldr	r3, [r4, #24]
 80014e0:	60a3      	str	r3, [r4, #8]
 80014e2:	89a3      	ldrh	r3, [r4, #12]
 80014e4:	071a      	lsls	r2, r3, #28
 80014e6:	d52f      	bpl.n	8001548 <__swbuf_r+0x84>
 80014e8:	6923      	ldr	r3, [r4, #16]
 80014ea:	b36b      	cbz	r3, 8001548 <__swbuf_r+0x84>
 80014ec:	6923      	ldr	r3, [r4, #16]
 80014ee:	6820      	ldr	r0, [r4, #0]
 80014f0:	1ac0      	subs	r0, r0, r3
 80014f2:	6963      	ldr	r3, [r4, #20]
 80014f4:	b2f6      	uxtb	r6, r6
 80014f6:	4283      	cmp	r3, r0
 80014f8:	4637      	mov	r7, r6
 80014fa:	dc04      	bgt.n	8001506 <__swbuf_r+0x42>
 80014fc:	4621      	mov	r1, r4
 80014fe:	4628      	mov	r0, r5
 8001500:	f000 f926 	bl	8001750 <_fflush_r>
 8001504:	bb30      	cbnz	r0, 8001554 <__swbuf_r+0x90>
 8001506:	68a3      	ldr	r3, [r4, #8]
 8001508:	3b01      	subs	r3, #1
 800150a:	60a3      	str	r3, [r4, #8]
 800150c:	6823      	ldr	r3, [r4, #0]
 800150e:	1c5a      	adds	r2, r3, #1
 8001510:	6022      	str	r2, [r4, #0]
 8001512:	701e      	strb	r6, [r3, #0]
 8001514:	6963      	ldr	r3, [r4, #20]
 8001516:	3001      	adds	r0, #1
 8001518:	4283      	cmp	r3, r0
 800151a:	d004      	beq.n	8001526 <__swbuf_r+0x62>
 800151c:	89a3      	ldrh	r3, [r4, #12]
 800151e:	07db      	lsls	r3, r3, #31
 8001520:	d506      	bpl.n	8001530 <__swbuf_r+0x6c>
 8001522:	2e0a      	cmp	r6, #10
 8001524:	d104      	bne.n	8001530 <__swbuf_r+0x6c>
 8001526:	4621      	mov	r1, r4
 8001528:	4628      	mov	r0, r5
 800152a:	f000 f911 	bl	8001750 <_fflush_r>
 800152e:	b988      	cbnz	r0, 8001554 <__swbuf_r+0x90>
 8001530:	4638      	mov	r0, r7
 8001532:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001534:	4b0a      	ldr	r3, [pc, #40]	; (8001560 <__swbuf_r+0x9c>)
 8001536:	429c      	cmp	r4, r3
 8001538:	d101      	bne.n	800153e <__swbuf_r+0x7a>
 800153a:	68ac      	ldr	r4, [r5, #8]
 800153c:	e7cf      	b.n	80014de <__swbuf_r+0x1a>
 800153e:	4b09      	ldr	r3, [pc, #36]	; (8001564 <__swbuf_r+0xa0>)
 8001540:	429c      	cmp	r4, r3
 8001542:	bf08      	it	eq
 8001544:	68ec      	ldreq	r4, [r5, #12]
 8001546:	e7ca      	b.n	80014de <__swbuf_r+0x1a>
 8001548:	4621      	mov	r1, r4
 800154a:	4628      	mov	r0, r5
 800154c:	f000 f80c 	bl	8001568 <__swsetup_r>
 8001550:	2800      	cmp	r0, #0
 8001552:	d0cb      	beq.n	80014ec <__swbuf_r+0x28>
 8001554:	f04f 37ff 	mov.w	r7, #4294967295
 8001558:	e7ea      	b.n	8001530 <__swbuf_r+0x6c>
 800155a:	bf00      	nop
 800155c:	0800274c 	.word	0x0800274c
 8001560:	0800276c 	.word	0x0800276c
 8001564:	0800272c 	.word	0x0800272c

08001568 <__swsetup_r>:
 8001568:	4b32      	ldr	r3, [pc, #200]	; (8001634 <__swsetup_r+0xcc>)
 800156a:	b570      	push	{r4, r5, r6, lr}
 800156c:	681d      	ldr	r5, [r3, #0]
 800156e:	4606      	mov	r6, r0
 8001570:	460c      	mov	r4, r1
 8001572:	b125      	cbz	r5, 800157e <__swsetup_r+0x16>
 8001574:	69ab      	ldr	r3, [r5, #24]
 8001576:	b913      	cbnz	r3, 800157e <__swsetup_r+0x16>
 8001578:	4628      	mov	r0, r5
 800157a:	f000 f97d 	bl	8001878 <__sinit>
 800157e:	4b2e      	ldr	r3, [pc, #184]	; (8001638 <__swsetup_r+0xd0>)
 8001580:	429c      	cmp	r4, r3
 8001582:	d10f      	bne.n	80015a4 <__swsetup_r+0x3c>
 8001584:	686c      	ldr	r4, [r5, #4]
 8001586:	89a3      	ldrh	r3, [r4, #12]
 8001588:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800158c:	0719      	lsls	r1, r3, #28
 800158e:	d42c      	bmi.n	80015ea <__swsetup_r+0x82>
 8001590:	06dd      	lsls	r5, r3, #27
 8001592:	d411      	bmi.n	80015b8 <__swsetup_r+0x50>
 8001594:	2309      	movs	r3, #9
 8001596:	6033      	str	r3, [r6, #0]
 8001598:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800159c:	81a3      	strh	r3, [r4, #12]
 800159e:	f04f 30ff 	mov.w	r0, #4294967295
 80015a2:	e03e      	b.n	8001622 <__swsetup_r+0xba>
 80015a4:	4b25      	ldr	r3, [pc, #148]	; (800163c <__swsetup_r+0xd4>)
 80015a6:	429c      	cmp	r4, r3
 80015a8:	d101      	bne.n	80015ae <__swsetup_r+0x46>
 80015aa:	68ac      	ldr	r4, [r5, #8]
 80015ac:	e7eb      	b.n	8001586 <__swsetup_r+0x1e>
 80015ae:	4b24      	ldr	r3, [pc, #144]	; (8001640 <__swsetup_r+0xd8>)
 80015b0:	429c      	cmp	r4, r3
 80015b2:	bf08      	it	eq
 80015b4:	68ec      	ldreq	r4, [r5, #12]
 80015b6:	e7e6      	b.n	8001586 <__swsetup_r+0x1e>
 80015b8:	0758      	lsls	r0, r3, #29
 80015ba:	d512      	bpl.n	80015e2 <__swsetup_r+0x7a>
 80015bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80015be:	b141      	cbz	r1, 80015d2 <__swsetup_r+0x6a>
 80015c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80015c4:	4299      	cmp	r1, r3
 80015c6:	d002      	beq.n	80015ce <__swsetup_r+0x66>
 80015c8:	4630      	mov	r0, r6
 80015ca:	f000 fa65 	bl	8001a98 <_free_r>
 80015ce:	2300      	movs	r3, #0
 80015d0:	6363      	str	r3, [r4, #52]	; 0x34
 80015d2:	89a3      	ldrh	r3, [r4, #12]
 80015d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80015d8:	81a3      	strh	r3, [r4, #12]
 80015da:	2300      	movs	r3, #0
 80015dc:	6063      	str	r3, [r4, #4]
 80015de:	6923      	ldr	r3, [r4, #16]
 80015e0:	6023      	str	r3, [r4, #0]
 80015e2:	89a3      	ldrh	r3, [r4, #12]
 80015e4:	f043 0308 	orr.w	r3, r3, #8
 80015e8:	81a3      	strh	r3, [r4, #12]
 80015ea:	6923      	ldr	r3, [r4, #16]
 80015ec:	b94b      	cbnz	r3, 8001602 <__swsetup_r+0x9a>
 80015ee:	89a3      	ldrh	r3, [r4, #12]
 80015f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80015f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015f8:	d003      	beq.n	8001602 <__swsetup_r+0x9a>
 80015fa:	4621      	mov	r1, r4
 80015fc:	4630      	mov	r0, r6
 80015fe:	f000 f9ff 	bl	8001a00 <__smakebuf_r>
 8001602:	89a0      	ldrh	r0, [r4, #12]
 8001604:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001608:	f010 0301 	ands.w	r3, r0, #1
 800160c:	d00a      	beq.n	8001624 <__swsetup_r+0xbc>
 800160e:	2300      	movs	r3, #0
 8001610:	60a3      	str	r3, [r4, #8]
 8001612:	6963      	ldr	r3, [r4, #20]
 8001614:	425b      	negs	r3, r3
 8001616:	61a3      	str	r3, [r4, #24]
 8001618:	6923      	ldr	r3, [r4, #16]
 800161a:	b943      	cbnz	r3, 800162e <__swsetup_r+0xc6>
 800161c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001620:	d1ba      	bne.n	8001598 <__swsetup_r+0x30>
 8001622:	bd70      	pop	{r4, r5, r6, pc}
 8001624:	0781      	lsls	r1, r0, #30
 8001626:	bf58      	it	pl
 8001628:	6963      	ldrpl	r3, [r4, #20]
 800162a:	60a3      	str	r3, [r4, #8]
 800162c:	e7f4      	b.n	8001618 <__swsetup_r+0xb0>
 800162e:	2000      	movs	r0, #0
 8001630:	e7f7      	b.n	8001622 <__swsetup_r+0xba>
 8001632:	bf00      	nop
 8001634:	20000004 	.word	0x20000004
 8001638:	0800274c 	.word	0x0800274c
 800163c:	0800276c 	.word	0x0800276c
 8001640:	0800272c 	.word	0x0800272c

08001644 <__sflush_r>:
 8001644:	898a      	ldrh	r2, [r1, #12]
 8001646:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800164a:	4605      	mov	r5, r0
 800164c:	0710      	lsls	r0, r2, #28
 800164e:	460c      	mov	r4, r1
 8001650:	d458      	bmi.n	8001704 <__sflush_r+0xc0>
 8001652:	684b      	ldr	r3, [r1, #4]
 8001654:	2b00      	cmp	r3, #0
 8001656:	dc05      	bgt.n	8001664 <__sflush_r+0x20>
 8001658:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800165a:	2b00      	cmp	r3, #0
 800165c:	dc02      	bgt.n	8001664 <__sflush_r+0x20>
 800165e:	2000      	movs	r0, #0
 8001660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001664:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001666:	2e00      	cmp	r6, #0
 8001668:	d0f9      	beq.n	800165e <__sflush_r+0x1a>
 800166a:	2300      	movs	r3, #0
 800166c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001670:	682f      	ldr	r7, [r5, #0]
 8001672:	602b      	str	r3, [r5, #0]
 8001674:	d032      	beq.n	80016dc <__sflush_r+0x98>
 8001676:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001678:	89a3      	ldrh	r3, [r4, #12]
 800167a:	075a      	lsls	r2, r3, #29
 800167c:	d505      	bpl.n	800168a <__sflush_r+0x46>
 800167e:	6863      	ldr	r3, [r4, #4]
 8001680:	1ac0      	subs	r0, r0, r3
 8001682:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001684:	b10b      	cbz	r3, 800168a <__sflush_r+0x46>
 8001686:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001688:	1ac0      	subs	r0, r0, r3
 800168a:	2300      	movs	r3, #0
 800168c:	4602      	mov	r2, r0
 800168e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001690:	6a21      	ldr	r1, [r4, #32]
 8001692:	4628      	mov	r0, r5
 8001694:	47b0      	blx	r6
 8001696:	1c43      	adds	r3, r0, #1
 8001698:	89a3      	ldrh	r3, [r4, #12]
 800169a:	d106      	bne.n	80016aa <__sflush_r+0x66>
 800169c:	6829      	ldr	r1, [r5, #0]
 800169e:	291d      	cmp	r1, #29
 80016a0:	d82c      	bhi.n	80016fc <__sflush_r+0xb8>
 80016a2:	4a2a      	ldr	r2, [pc, #168]	; (800174c <__sflush_r+0x108>)
 80016a4:	40ca      	lsrs	r2, r1
 80016a6:	07d6      	lsls	r6, r2, #31
 80016a8:	d528      	bpl.n	80016fc <__sflush_r+0xb8>
 80016aa:	2200      	movs	r2, #0
 80016ac:	6062      	str	r2, [r4, #4]
 80016ae:	04d9      	lsls	r1, r3, #19
 80016b0:	6922      	ldr	r2, [r4, #16]
 80016b2:	6022      	str	r2, [r4, #0]
 80016b4:	d504      	bpl.n	80016c0 <__sflush_r+0x7c>
 80016b6:	1c42      	adds	r2, r0, #1
 80016b8:	d101      	bne.n	80016be <__sflush_r+0x7a>
 80016ba:	682b      	ldr	r3, [r5, #0]
 80016bc:	b903      	cbnz	r3, 80016c0 <__sflush_r+0x7c>
 80016be:	6560      	str	r0, [r4, #84]	; 0x54
 80016c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80016c2:	602f      	str	r7, [r5, #0]
 80016c4:	2900      	cmp	r1, #0
 80016c6:	d0ca      	beq.n	800165e <__sflush_r+0x1a>
 80016c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80016cc:	4299      	cmp	r1, r3
 80016ce:	d002      	beq.n	80016d6 <__sflush_r+0x92>
 80016d0:	4628      	mov	r0, r5
 80016d2:	f000 f9e1 	bl	8001a98 <_free_r>
 80016d6:	2000      	movs	r0, #0
 80016d8:	6360      	str	r0, [r4, #52]	; 0x34
 80016da:	e7c1      	b.n	8001660 <__sflush_r+0x1c>
 80016dc:	6a21      	ldr	r1, [r4, #32]
 80016de:	2301      	movs	r3, #1
 80016e0:	4628      	mov	r0, r5
 80016e2:	47b0      	blx	r6
 80016e4:	1c41      	adds	r1, r0, #1
 80016e6:	d1c7      	bne.n	8001678 <__sflush_r+0x34>
 80016e8:	682b      	ldr	r3, [r5, #0]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d0c4      	beq.n	8001678 <__sflush_r+0x34>
 80016ee:	2b1d      	cmp	r3, #29
 80016f0:	d001      	beq.n	80016f6 <__sflush_r+0xb2>
 80016f2:	2b16      	cmp	r3, #22
 80016f4:	d101      	bne.n	80016fa <__sflush_r+0xb6>
 80016f6:	602f      	str	r7, [r5, #0]
 80016f8:	e7b1      	b.n	800165e <__sflush_r+0x1a>
 80016fa:	89a3      	ldrh	r3, [r4, #12]
 80016fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001700:	81a3      	strh	r3, [r4, #12]
 8001702:	e7ad      	b.n	8001660 <__sflush_r+0x1c>
 8001704:	690f      	ldr	r7, [r1, #16]
 8001706:	2f00      	cmp	r7, #0
 8001708:	d0a9      	beq.n	800165e <__sflush_r+0x1a>
 800170a:	0793      	lsls	r3, r2, #30
 800170c:	680e      	ldr	r6, [r1, #0]
 800170e:	bf08      	it	eq
 8001710:	694b      	ldreq	r3, [r1, #20]
 8001712:	600f      	str	r7, [r1, #0]
 8001714:	bf18      	it	ne
 8001716:	2300      	movne	r3, #0
 8001718:	eba6 0807 	sub.w	r8, r6, r7
 800171c:	608b      	str	r3, [r1, #8]
 800171e:	f1b8 0f00 	cmp.w	r8, #0
 8001722:	dd9c      	ble.n	800165e <__sflush_r+0x1a>
 8001724:	6a21      	ldr	r1, [r4, #32]
 8001726:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001728:	4643      	mov	r3, r8
 800172a:	463a      	mov	r2, r7
 800172c:	4628      	mov	r0, r5
 800172e:	47b0      	blx	r6
 8001730:	2800      	cmp	r0, #0
 8001732:	dc06      	bgt.n	8001742 <__sflush_r+0xfe>
 8001734:	89a3      	ldrh	r3, [r4, #12]
 8001736:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800173a:	81a3      	strh	r3, [r4, #12]
 800173c:	f04f 30ff 	mov.w	r0, #4294967295
 8001740:	e78e      	b.n	8001660 <__sflush_r+0x1c>
 8001742:	4407      	add	r7, r0
 8001744:	eba8 0800 	sub.w	r8, r8, r0
 8001748:	e7e9      	b.n	800171e <__sflush_r+0xda>
 800174a:	bf00      	nop
 800174c:	20400001 	.word	0x20400001

08001750 <_fflush_r>:
 8001750:	b538      	push	{r3, r4, r5, lr}
 8001752:	690b      	ldr	r3, [r1, #16]
 8001754:	4605      	mov	r5, r0
 8001756:	460c      	mov	r4, r1
 8001758:	b913      	cbnz	r3, 8001760 <_fflush_r+0x10>
 800175a:	2500      	movs	r5, #0
 800175c:	4628      	mov	r0, r5
 800175e:	bd38      	pop	{r3, r4, r5, pc}
 8001760:	b118      	cbz	r0, 800176a <_fflush_r+0x1a>
 8001762:	6983      	ldr	r3, [r0, #24]
 8001764:	b90b      	cbnz	r3, 800176a <_fflush_r+0x1a>
 8001766:	f000 f887 	bl	8001878 <__sinit>
 800176a:	4b14      	ldr	r3, [pc, #80]	; (80017bc <_fflush_r+0x6c>)
 800176c:	429c      	cmp	r4, r3
 800176e:	d11b      	bne.n	80017a8 <_fflush_r+0x58>
 8001770:	686c      	ldr	r4, [r5, #4]
 8001772:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d0ef      	beq.n	800175a <_fflush_r+0xa>
 800177a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800177c:	07d0      	lsls	r0, r2, #31
 800177e:	d404      	bmi.n	800178a <_fflush_r+0x3a>
 8001780:	0599      	lsls	r1, r3, #22
 8001782:	d402      	bmi.n	800178a <_fflush_r+0x3a>
 8001784:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001786:	f000 f915 	bl	80019b4 <__retarget_lock_acquire_recursive>
 800178a:	4628      	mov	r0, r5
 800178c:	4621      	mov	r1, r4
 800178e:	f7ff ff59 	bl	8001644 <__sflush_r>
 8001792:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001794:	07da      	lsls	r2, r3, #31
 8001796:	4605      	mov	r5, r0
 8001798:	d4e0      	bmi.n	800175c <_fflush_r+0xc>
 800179a:	89a3      	ldrh	r3, [r4, #12]
 800179c:	059b      	lsls	r3, r3, #22
 800179e:	d4dd      	bmi.n	800175c <_fflush_r+0xc>
 80017a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80017a2:	f000 f908 	bl	80019b6 <__retarget_lock_release_recursive>
 80017a6:	e7d9      	b.n	800175c <_fflush_r+0xc>
 80017a8:	4b05      	ldr	r3, [pc, #20]	; (80017c0 <_fflush_r+0x70>)
 80017aa:	429c      	cmp	r4, r3
 80017ac:	d101      	bne.n	80017b2 <_fflush_r+0x62>
 80017ae:	68ac      	ldr	r4, [r5, #8]
 80017b0:	e7df      	b.n	8001772 <_fflush_r+0x22>
 80017b2:	4b04      	ldr	r3, [pc, #16]	; (80017c4 <_fflush_r+0x74>)
 80017b4:	429c      	cmp	r4, r3
 80017b6:	bf08      	it	eq
 80017b8:	68ec      	ldreq	r4, [r5, #12]
 80017ba:	e7da      	b.n	8001772 <_fflush_r+0x22>
 80017bc:	0800274c 	.word	0x0800274c
 80017c0:	0800276c 	.word	0x0800276c
 80017c4:	0800272c 	.word	0x0800272c

080017c8 <std>:
 80017c8:	2300      	movs	r3, #0
 80017ca:	b510      	push	{r4, lr}
 80017cc:	4604      	mov	r4, r0
 80017ce:	e9c0 3300 	strd	r3, r3, [r0]
 80017d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80017d6:	6083      	str	r3, [r0, #8]
 80017d8:	8181      	strh	r1, [r0, #12]
 80017da:	6643      	str	r3, [r0, #100]	; 0x64
 80017dc:	81c2      	strh	r2, [r0, #14]
 80017de:	6183      	str	r3, [r0, #24]
 80017e0:	4619      	mov	r1, r3
 80017e2:	2208      	movs	r2, #8
 80017e4:	305c      	adds	r0, #92	; 0x5c
 80017e6:	f7ff fd4b 	bl	8001280 <memset>
 80017ea:	4b05      	ldr	r3, [pc, #20]	; (8001800 <std+0x38>)
 80017ec:	6263      	str	r3, [r4, #36]	; 0x24
 80017ee:	4b05      	ldr	r3, [pc, #20]	; (8001804 <std+0x3c>)
 80017f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80017f2:	4b05      	ldr	r3, [pc, #20]	; (8001808 <std+0x40>)
 80017f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80017f6:	4b05      	ldr	r3, [pc, #20]	; (800180c <std+0x44>)
 80017f8:	6224      	str	r4, [r4, #32]
 80017fa:	6323      	str	r3, [r4, #48]	; 0x30
 80017fc:	bd10      	pop	{r4, pc}
 80017fe:	bf00      	nop
 8001800:	0800219d 	.word	0x0800219d
 8001804:	080021bf 	.word	0x080021bf
 8001808:	080021f7 	.word	0x080021f7
 800180c:	0800221b 	.word	0x0800221b

08001810 <_cleanup_r>:
 8001810:	4901      	ldr	r1, [pc, #4]	; (8001818 <_cleanup_r+0x8>)
 8001812:	f000 b8af 	b.w	8001974 <_fwalk_reent>
 8001816:	bf00      	nop
 8001818:	08001751 	.word	0x08001751

0800181c <__sfmoreglue>:
 800181c:	b570      	push	{r4, r5, r6, lr}
 800181e:	1e4a      	subs	r2, r1, #1
 8001820:	2568      	movs	r5, #104	; 0x68
 8001822:	4355      	muls	r5, r2
 8001824:	460e      	mov	r6, r1
 8001826:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800182a:	f7ff fd3f 	bl	80012ac <_malloc_r>
 800182e:	4604      	mov	r4, r0
 8001830:	b140      	cbz	r0, 8001844 <__sfmoreglue+0x28>
 8001832:	2100      	movs	r1, #0
 8001834:	e9c0 1600 	strd	r1, r6, [r0]
 8001838:	300c      	adds	r0, #12
 800183a:	60a0      	str	r0, [r4, #8]
 800183c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001840:	f7ff fd1e 	bl	8001280 <memset>
 8001844:	4620      	mov	r0, r4
 8001846:	bd70      	pop	{r4, r5, r6, pc}

08001848 <__sfp_lock_acquire>:
 8001848:	4801      	ldr	r0, [pc, #4]	; (8001850 <__sfp_lock_acquire+0x8>)
 800184a:	f000 b8b3 	b.w	80019b4 <__retarget_lock_acquire_recursive>
 800184e:	bf00      	nop
 8001850:	200000a4 	.word	0x200000a4

08001854 <__sfp_lock_release>:
 8001854:	4801      	ldr	r0, [pc, #4]	; (800185c <__sfp_lock_release+0x8>)
 8001856:	f000 b8ae 	b.w	80019b6 <__retarget_lock_release_recursive>
 800185a:	bf00      	nop
 800185c:	200000a4 	.word	0x200000a4

08001860 <__sinit_lock_acquire>:
 8001860:	4801      	ldr	r0, [pc, #4]	; (8001868 <__sinit_lock_acquire+0x8>)
 8001862:	f000 b8a7 	b.w	80019b4 <__retarget_lock_acquire_recursive>
 8001866:	bf00      	nop
 8001868:	2000009f 	.word	0x2000009f

0800186c <__sinit_lock_release>:
 800186c:	4801      	ldr	r0, [pc, #4]	; (8001874 <__sinit_lock_release+0x8>)
 800186e:	f000 b8a2 	b.w	80019b6 <__retarget_lock_release_recursive>
 8001872:	bf00      	nop
 8001874:	2000009f 	.word	0x2000009f

08001878 <__sinit>:
 8001878:	b510      	push	{r4, lr}
 800187a:	4604      	mov	r4, r0
 800187c:	f7ff fff0 	bl	8001860 <__sinit_lock_acquire>
 8001880:	69a3      	ldr	r3, [r4, #24]
 8001882:	b11b      	cbz	r3, 800188c <__sinit+0x14>
 8001884:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001888:	f7ff bff0 	b.w	800186c <__sinit_lock_release>
 800188c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001890:	6523      	str	r3, [r4, #80]	; 0x50
 8001892:	4b13      	ldr	r3, [pc, #76]	; (80018e0 <__sinit+0x68>)
 8001894:	4a13      	ldr	r2, [pc, #76]	; (80018e4 <__sinit+0x6c>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	62a2      	str	r2, [r4, #40]	; 0x28
 800189a:	42a3      	cmp	r3, r4
 800189c:	bf04      	itt	eq
 800189e:	2301      	moveq	r3, #1
 80018a0:	61a3      	streq	r3, [r4, #24]
 80018a2:	4620      	mov	r0, r4
 80018a4:	f000 f820 	bl	80018e8 <__sfp>
 80018a8:	6060      	str	r0, [r4, #4]
 80018aa:	4620      	mov	r0, r4
 80018ac:	f000 f81c 	bl	80018e8 <__sfp>
 80018b0:	60a0      	str	r0, [r4, #8]
 80018b2:	4620      	mov	r0, r4
 80018b4:	f000 f818 	bl	80018e8 <__sfp>
 80018b8:	2200      	movs	r2, #0
 80018ba:	60e0      	str	r0, [r4, #12]
 80018bc:	2104      	movs	r1, #4
 80018be:	6860      	ldr	r0, [r4, #4]
 80018c0:	f7ff ff82 	bl	80017c8 <std>
 80018c4:	68a0      	ldr	r0, [r4, #8]
 80018c6:	2201      	movs	r2, #1
 80018c8:	2109      	movs	r1, #9
 80018ca:	f7ff ff7d 	bl	80017c8 <std>
 80018ce:	68e0      	ldr	r0, [r4, #12]
 80018d0:	2202      	movs	r2, #2
 80018d2:	2112      	movs	r1, #18
 80018d4:	f7ff ff78 	bl	80017c8 <std>
 80018d8:	2301      	movs	r3, #1
 80018da:	61a3      	str	r3, [r4, #24]
 80018dc:	e7d2      	b.n	8001884 <__sinit+0xc>
 80018de:	bf00      	nop
 80018e0:	08002728 	.word	0x08002728
 80018e4:	08001811 	.word	0x08001811

080018e8 <__sfp>:
 80018e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018ea:	4607      	mov	r7, r0
 80018ec:	f7ff ffac 	bl	8001848 <__sfp_lock_acquire>
 80018f0:	4b1e      	ldr	r3, [pc, #120]	; (800196c <__sfp+0x84>)
 80018f2:	681e      	ldr	r6, [r3, #0]
 80018f4:	69b3      	ldr	r3, [r6, #24]
 80018f6:	b913      	cbnz	r3, 80018fe <__sfp+0x16>
 80018f8:	4630      	mov	r0, r6
 80018fa:	f7ff ffbd 	bl	8001878 <__sinit>
 80018fe:	3648      	adds	r6, #72	; 0x48
 8001900:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001904:	3b01      	subs	r3, #1
 8001906:	d503      	bpl.n	8001910 <__sfp+0x28>
 8001908:	6833      	ldr	r3, [r6, #0]
 800190a:	b30b      	cbz	r3, 8001950 <__sfp+0x68>
 800190c:	6836      	ldr	r6, [r6, #0]
 800190e:	e7f7      	b.n	8001900 <__sfp+0x18>
 8001910:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001914:	b9d5      	cbnz	r5, 800194c <__sfp+0x64>
 8001916:	4b16      	ldr	r3, [pc, #88]	; (8001970 <__sfp+0x88>)
 8001918:	60e3      	str	r3, [r4, #12]
 800191a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800191e:	6665      	str	r5, [r4, #100]	; 0x64
 8001920:	f000 f847 	bl	80019b2 <__retarget_lock_init_recursive>
 8001924:	f7ff ff96 	bl	8001854 <__sfp_lock_release>
 8001928:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800192c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001930:	6025      	str	r5, [r4, #0]
 8001932:	61a5      	str	r5, [r4, #24]
 8001934:	2208      	movs	r2, #8
 8001936:	4629      	mov	r1, r5
 8001938:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800193c:	f7ff fca0 	bl	8001280 <memset>
 8001940:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001944:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001948:	4620      	mov	r0, r4
 800194a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800194c:	3468      	adds	r4, #104	; 0x68
 800194e:	e7d9      	b.n	8001904 <__sfp+0x1c>
 8001950:	2104      	movs	r1, #4
 8001952:	4638      	mov	r0, r7
 8001954:	f7ff ff62 	bl	800181c <__sfmoreglue>
 8001958:	4604      	mov	r4, r0
 800195a:	6030      	str	r0, [r6, #0]
 800195c:	2800      	cmp	r0, #0
 800195e:	d1d5      	bne.n	800190c <__sfp+0x24>
 8001960:	f7ff ff78 	bl	8001854 <__sfp_lock_release>
 8001964:	230c      	movs	r3, #12
 8001966:	603b      	str	r3, [r7, #0]
 8001968:	e7ee      	b.n	8001948 <__sfp+0x60>
 800196a:	bf00      	nop
 800196c:	08002728 	.word	0x08002728
 8001970:	ffff0001 	.word	0xffff0001

08001974 <_fwalk_reent>:
 8001974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001978:	4606      	mov	r6, r0
 800197a:	4688      	mov	r8, r1
 800197c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001980:	2700      	movs	r7, #0
 8001982:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001986:	f1b9 0901 	subs.w	r9, r9, #1
 800198a:	d505      	bpl.n	8001998 <_fwalk_reent+0x24>
 800198c:	6824      	ldr	r4, [r4, #0]
 800198e:	2c00      	cmp	r4, #0
 8001990:	d1f7      	bne.n	8001982 <_fwalk_reent+0xe>
 8001992:	4638      	mov	r0, r7
 8001994:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001998:	89ab      	ldrh	r3, [r5, #12]
 800199a:	2b01      	cmp	r3, #1
 800199c:	d907      	bls.n	80019ae <_fwalk_reent+0x3a>
 800199e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80019a2:	3301      	adds	r3, #1
 80019a4:	d003      	beq.n	80019ae <_fwalk_reent+0x3a>
 80019a6:	4629      	mov	r1, r5
 80019a8:	4630      	mov	r0, r6
 80019aa:	47c0      	blx	r8
 80019ac:	4307      	orrs	r7, r0
 80019ae:	3568      	adds	r5, #104	; 0x68
 80019b0:	e7e9      	b.n	8001986 <_fwalk_reent+0x12>

080019b2 <__retarget_lock_init_recursive>:
 80019b2:	4770      	bx	lr

080019b4 <__retarget_lock_acquire_recursive>:
 80019b4:	4770      	bx	lr

080019b6 <__retarget_lock_release_recursive>:
 80019b6:	4770      	bx	lr

080019b8 <__swhatbuf_r>:
 80019b8:	b570      	push	{r4, r5, r6, lr}
 80019ba:	460e      	mov	r6, r1
 80019bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80019c0:	2900      	cmp	r1, #0
 80019c2:	b096      	sub	sp, #88	; 0x58
 80019c4:	4614      	mov	r4, r2
 80019c6:	461d      	mov	r5, r3
 80019c8:	da07      	bge.n	80019da <__swhatbuf_r+0x22>
 80019ca:	2300      	movs	r3, #0
 80019cc:	602b      	str	r3, [r5, #0]
 80019ce:	89b3      	ldrh	r3, [r6, #12]
 80019d0:	061a      	lsls	r2, r3, #24
 80019d2:	d410      	bmi.n	80019f6 <__swhatbuf_r+0x3e>
 80019d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019d8:	e00e      	b.n	80019f8 <__swhatbuf_r+0x40>
 80019da:	466a      	mov	r2, sp
 80019dc:	f000 fc44 	bl	8002268 <_fstat_r>
 80019e0:	2800      	cmp	r0, #0
 80019e2:	dbf2      	blt.n	80019ca <__swhatbuf_r+0x12>
 80019e4:	9a01      	ldr	r2, [sp, #4]
 80019e6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80019ea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80019ee:	425a      	negs	r2, r3
 80019f0:	415a      	adcs	r2, r3
 80019f2:	602a      	str	r2, [r5, #0]
 80019f4:	e7ee      	b.n	80019d4 <__swhatbuf_r+0x1c>
 80019f6:	2340      	movs	r3, #64	; 0x40
 80019f8:	2000      	movs	r0, #0
 80019fa:	6023      	str	r3, [r4, #0]
 80019fc:	b016      	add	sp, #88	; 0x58
 80019fe:	bd70      	pop	{r4, r5, r6, pc}

08001a00 <__smakebuf_r>:
 8001a00:	898b      	ldrh	r3, [r1, #12]
 8001a02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001a04:	079d      	lsls	r5, r3, #30
 8001a06:	4606      	mov	r6, r0
 8001a08:	460c      	mov	r4, r1
 8001a0a:	d507      	bpl.n	8001a1c <__smakebuf_r+0x1c>
 8001a0c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001a10:	6023      	str	r3, [r4, #0]
 8001a12:	6123      	str	r3, [r4, #16]
 8001a14:	2301      	movs	r3, #1
 8001a16:	6163      	str	r3, [r4, #20]
 8001a18:	b002      	add	sp, #8
 8001a1a:	bd70      	pop	{r4, r5, r6, pc}
 8001a1c:	ab01      	add	r3, sp, #4
 8001a1e:	466a      	mov	r2, sp
 8001a20:	f7ff ffca 	bl	80019b8 <__swhatbuf_r>
 8001a24:	9900      	ldr	r1, [sp, #0]
 8001a26:	4605      	mov	r5, r0
 8001a28:	4630      	mov	r0, r6
 8001a2a:	f7ff fc3f 	bl	80012ac <_malloc_r>
 8001a2e:	b948      	cbnz	r0, 8001a44 <__smakebuf_r+0x44>
 8001a30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001a34:	059a      	lsls	r2, r3, #22
 8001a36:	d4ef      	bmi.n	8001a18 <__smakebuf_r+0x18>
 8001a38:	f023 0303 	bic.w	r3, r3, #3
 8001a3c:	f043 0302 	orr.w	r3, r3, #2
 8001a40:	81a3      	strh	r3, [r4, #12]
 8001a42:	e7e3      	b.n	8001a0c <__smakebuf_r+0xc>
 8001a44:	4b0d      	ldr	r3, [pc, #52]	; (8001a7c <__smakebuf_r+0x7c>)
 8001a46:	62b3      	str	r3, [r6, #40]	; 0x28
 8001a48:	89a3      	ldrh	r3, [r4, #12]
 8001a4a:	6020      	str	r0, [r4, #0]
 8001a4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a50:	81a3      	strh	r3, [r4, #12]
 8001a52:	9b00      	ldr	r3, [sp, #0]
 8001a54:	6163      	str	r3, [r4, #20]
 8001a56:	9b01      	ldr	r3, [sp, #4]
 8001a58:	6120      	str	r0, [r4, #16]
 8001a5a:	b15b      	cbz	r3, 8001a74 <__smakebuf_r+0x74>
 8001a5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001a60:	4630      	mov	r0, r6
 8001a62:	f000 fc13 	bl	800228c <_isatty_r>
 8001a66:	b128      	cbz	r0, 8001a74 <__smakebuf_r+0x74>
 8001a68:	89a3      	ldrh	r3, [r4, #12]
 8001a6a:	f023 0303 	bic.w	r3, r3, #3
 8001a6e:	f043 0301 	orr.w	r3, r3, #1
 8001a72:	81a3      	strh	r3, [r4, #12]
 8001a74:	89a0      	ldrh	r0, [r4, #12]
 8001a76:	4305      	orrs	r5, r0
 8001a78:	81a5      	strh	r5, [r4, #12]
 8001a7a:	e7cd      	b.n	8001a18 <__smakebuf_r+0x18>
 8001a7c:	08001811 	.word	0x08001811

08001a80 <__malloc_lock>:
 8001a80:	4801      	ldr	r0, [pc, #4]	; (8001a88 <__malloc_lock+0x8>)
 8001a82:	f7ff bf97 	b.w	80019b4 <__retarget_lock_acquire_recursive>
 8001a86:	bf00      	nop
 8001a88:	200000a0 	.word	0x200000a0

08001a8c <__malloc_unlock>:
 8001a8c:	4801      	ldr	r0, [pc, #4]	; (8001a94 <__malloc_unlock+0x8>)
 8001a8e:	f7ff bf92 	b.w	80019b6 <__retarget_lock_release_recursive>
 8001a92:	bf00      	nop
 8001a94:	200000a0 	.word	0x200000a0

08001a98 <_free_r>:
 8001a98:	b538      	push	{r3, r4, r5, lr}
 8001a9a:	4605      	mov	r5, r0
 8001a9c:	2900      	cmp	r1, #0
 8001a9e:	d045      	beq.n	8001b2c <_free_r+0x94>
 8001aa0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001aa4:	1f0c      	subs	r4, r1, #4
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	bfb8      	it	lt
 8001aaa:	18e4      	addlt	r4, r4, r3
 8001aac:	f7ff ffe8 	bl	8001a80 <__malloc_lock>
 8001ab0:	4a1f      	ldr	r2, [pc, #124]	; (8001b30 <_free_r+0x98>)
 8001ab2:	6813      	ldr	r3, [r2, #0]
 8001ab4:	4610      	mov	r0, r2
 8001ab6:	b933      	cbnz	r3, 8001ac6 <_free_r+0x2e>
 8001ab8:	6063      	str	r3, [r4, #4]
 8001aba:	6014      	str	r4, [r2, #0]
 8001abc:	4628      	mov	r0, r5
 8001abe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001ac2:	f7ff bfe3 	b.w	8001a8c <__malloc_unlock>
 8001ac6:	42a3      	cmp	r3, r4
 8001ac8:	d90b      	bls.n	8001ae2 <_free_r+0x4a>
 8001aca:	6821      	ldr	r1, [r4, #0]
 8001acc:	1862      	adds	r2, r4, r1
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	bf04      	itt	eq
 8001ad2:	681a      	ldreq	r2, [r3, #0]
 8001ad4:	685b      	ldreq	r3, [r3, #4]
 8001ad6:	6063      	str	r3, [r4, #4]
 8001ad8:	bf04      	itt	eq
 8001ada:	1852      	addeq	r2, r2, r1
 8001adc:	6022      	streq	r2, [r4, #0]
 8001ade:	6004      	str	r4, [r0, #0]
 8001ae0:	e7ec      	b.n	8001abc <_free_r+0x24>
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	b10b      	cbz	r3, 8001aec <_free_r+0x54>
 8001ae8:	42a3      	cmp	r3, r4
 8001aea:	d9fa      	bls.n	8001ae2 <_free_r+0x4a>
 8001aec:	6811      	ldr	r1, [r2, #0]
 8001aee:	1850      	adds	r0, r2, r1
 8001af0:	42a0      	cmp	r0, r4
 8001af2:	d10b      	bne.n	8001b0c <_free_r+0x74>
 8001af4:	6820      	ldr	r0, [r4, #0]
 8001af6:	4401      	add	r1, r0
 8001af8:	1850      	adds	r0, r2, r1
 8001afa:	4283      	cmp	r3, r0
 8001afc:	6011      	str	r1, [r2, #0]
 8001afe:	d1dd      	bne.n	8001abc <_free_r+0x24>
 8001b00:	6818      	ldr	r0, [r3, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	6053      	str	r3, [r2, #4]
 8001b06:	4401      	add	r1, r0
 8001b08:	6011      	str	r1, [r2, #0]
 8001b0a:	e7d7      	b.n	8001abc <_free_r+0x24>
 8001b0c:	d902      	bls.n	8001b14 <_free_r+0x7c>
 8001b0e:	230c      	movs	r3, #12
 8001b10:	602b      	str	r3, [r5, #0]
 8001b12:	e7d3      	b.n	8001abc <_free_r+0x24>
 8001b14:	6820      	ldr	r0, [r4, #0]
 8001b16:	1821      	adds	r1, r4, r0
 8001b18:	428b      	cmp	r3, r1
 8001b1a:	bf04      	itt	eq
 8001b1c:	6819      	ldreq	r1, [r3, #0]
 8001b1e:	685b      	ldreq	r3, [r3, #4]
 8001b20:	6063      	str	r3, [r4, #4]
 8001b22:	bf04      	itt	eq
 8001b24:	1809      	addeq	r1, r1, r0
 8001b26:	6021      	streq	r1, [r4, #0]
 8001b28:	6054      	str	r4, [r2, #4]
 8001b2a:	e7c7      	b.n	8001abc <_free_r+0x24>
 8001b2c:	bd38      	pop	{r3, r4, r5, pc}
 8001b2e:	bf00      	nop
 8001b30:	2000008c 	.word	0x2000008c

08001b34 <__sfputc_r>:
 8001b34:	6893      	ldr	r3, [r2, #8]
 8001b36:	3b01      	subs	r3, #1
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	b410      	push	{r4}
 8001b3c:	6093      	str	r3, [r2, #8]
 8001b3e:	da07      	bge.n	8001b50 <__sfputc_r+0x1c>
 8001b40:	6994      	ldr	r4, [r2, #24]
 8001b42:	42a3      	cmp	r3, r4
 8001b44:	db01      	blt.n	8001b4a <__sfputc_r+0x16>
 8001b46:	290a      	cmp	r1, #10
 8001b48:	d102      	bne.n	8001b50 <__sfputc_r+0x1c>
 8001b4a:	bc10      	pop	{r4}
 8001b4c:	f7ff bcba 	b.w	80014c4 <__swbuf_r>
 8001b50:	6813      	ldr	r3, [r2, #0]
 8001b52:	1c58      	adds	r0, r3, #1
 8001b54:	6010      	str	r0, [r2, #0]
 8001b56:	7019      	strb	r1, [r3, #0]
 8001b58:	4608      	mov	r0, r1
 8001b5a:	bc10      	pop	{r4}
 8001b5c:	4770      	bx	lr

08001b5e <__sfputs_r>:
 8001b5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b60:	4606      	mov	r6, r0
 8001b62:	460f      	mov	r7, r1
 8001b64:	4614      	mov	r4, r2
 8001b66:	18d5      	adds	r5, r2, r3
 8001b68:	42ac      	cmp	r4, r5
 8001b6a:	d101      	bne.n	8001b70 <__sfputs_r+0x12>
 8001b6c:	2000      	movs	r0, #0
 8001b6e:	e007      	b.n	8001b80 <__sfputs_r+0x22>
 8001b70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001b74:	463a      	mov	r2, r7
 8001b76:	4630      	mov	r0, r6
 8001b78:	f7ff ffdc 	bl	8001b34 <__sfputc_r>
 8001b7c:	1c43      	adds	r3, r0, #1
 8001b7e:	d1f3      	bne.n	8001b68 <__sfputs_r+0xa>
 8001b80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001b84 <_vfiprintf_r>:
 8001b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b88:	460d      	mov	r5, r1
 8001b8a:	b09d      	sub	sp, #116	; 0x74
 8001b8c:	4614      	mov	r4, r2
 8001b8e:	4698      	mov	r8, r3
 8001b90:	4606      	mov	r6, r0
 8001b92:	b118      	cbz	r0, 8001b9c <_vfiprintf_r+0x18>
 8001b94:	6983      	ldr	r3, [r0, #24]
 8001b96:	b90b      	cbnz	r3, 8001b9c <_vfiprintf_r+0x18>
 8001b98:	f7ff fe6e 	bl	8001878 <__sinit>
 8001b9c:	4b89      	ldr	r3, [pc, #548]	; (8001dc4 <_vfiprintf_r+0x240>)
 8001b9e:	429d      	cmp	r5, r3
 8001ba0:	d11b      	bne.n	8001bda <_vfiprintf_r+0x56>
 8001ba2:	6875      	ldr	r5, [r6, #4]
 8001ba4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001ba6:	07d9      	lsls	r1, r3, #31
 8001ba8:	d405      	bmi.n	8001bb6 <_vfiprintf_r+0x32>
 8001baa:	89ab      	ldrh	r3, [r5, #12]
 8001bac:	059a      	lsls	r2, r3, #22
 8001bae:	d402      	bmi.n	8001bb6 <_vfiprintf_r+0x32>
 8001bb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001bb2:	f7ff feff 	bl	80019b4 <__retarget_lock_acquire_recursive>
 8001bb6:	89ab      	ldrh	r3, [r5, #12]
 8001bb8:	071b      	lsls	r3, r3, #28
 8001bba:	d501      	bpl.n	8001bc0 <_vfiprintf_r+0x3c>
 8001bbc:	692b      	ldr	r3, [r5, #16]
 8001bbe:	b9eb      	cbnz	r3, 8001bfc <_vfiprintf_r+0x78>
 8001bc0:	4629      	mov	r1, r5
 8001bc2:	4630      	mov	r0, r6
 8001bc4:	f7ff fcd0 	bl	8001568 <__swsetup_r>
 8001bc8:	b1c0      	cbz	r0, 8001bfc <_vfiprintf_r+0x78>
 8001bca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001bcc:	07dc      	lsls	r4, r3, #31
 8001bce:	d50e      	bpl.n	8001bee <_vfiprintf_r+0x6a>
 8001bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8001bd4:	b01d      	add	sp, #116	; 0x74
 8001bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001bda:	4b7b      	ldr	r3, [pc, #492]	; (8001dc8 <_vfiprintf_r+0x244>)
 8001bdc:	429d      	cmp	r5, r3
 8001bde:	d101      	bne.n	8001be4 <_vfiprintf_r+0x60>
 8001be0:	68b5      	ldr	r5, [r6, #8]
 8001be2:	e7df      	b.n	8001ba4 <_vfiprintf_r+0x20>
 8001be4:	4b79      	ldr	r3, [pc, #484]	; (8001dcc <_vfiprintf_r+0x248>)
 8001be6:	429d      	cmp	r5, r3
 8001be8:	bf08      	it	eq
 8001bea:	68f5      	ldreq	r5, [r6, #12]
 8001bec:	e7da      	b.n	8001ba4 <_vfiprintf_r+0x20>
 8001bee:	89ab      	ldrh	r3, [r5, #12]
 8001bf0:	0598      	lsls	r0, r3, #22
 8001bf2:	d4ed      	bmi.n	8001bd0 <_vfiprintf_r+0x4c>
 8001bf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001bf6:	f7ff fede 	bl	80019b6 <__retarget_lock_release_recursive>
 8001bfa:	e7e9      	b.n	8001bd0 <_vfiprintf_r+0x4c>
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	9309      	str	r3, [sp, #36]	; 0x24
 8001c00:	2320      	movs	r3, #32
 8001c02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001c06:	f8cd 800c 	str.w	r8, [sp, #12]
 8001c0a:	2330      	movs	r3, #48	; 0x30
 8001c0c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001dd0 <_vfiprintf_r+0x24c>
 8001c10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001c14:	f04f 0901 	mov.w	r9, #1
 8001c18:	4623      	mov	r3, r4
 8001c1a:	469a      	mov	sl, r3
 8001c1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001c20:	b10a      	cbz	r2, 8001c26 <_vfiprintf_r+0xa2>
 8001c22:	2a25      	cmp	r2, #37	; 0x25
 8001c24:	d1f9      	bne.n	8001c1a <_vfiprintf_r+0x96>
 8001c26:	ebba 0b04 	subs.w	fp, sl, r4
 8001c2a:	d00b      	beq.n	8001c44 <_vfiprintf_r+0xc0>
 8001c2c:	465b      	mov	r3, fp
 8001c2e:	4622      	mov	r2, r4
 8001c30:	4629      	mov	r1, r5
 8001c32:	4630      	mov	r0, r6
 8001c34:	f7ff ff93 	bl	8001b5e <__sfputs_r>
 8001c38:	3001      	adds	r0, #1
 8001c3a:	f000 80aa 	beq.w	8001d92 <_vfiprintf_r+0x20e>
 8001c3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001c40:	445a      	add	r2, fp
 8001c42:	9209      	str	r2, [sp, #36]	; 0x24
 8001c44:	f89a 3000 	ldrb.w	r3, [sl]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	f000 80a2 	beq.w	8001d92 <_vfiprintf_r+0x20e>
 8001c4e:	2300      	movs	r3, #0
 8001c50:	f04f 32ff 	mov.w	r2, #4294967295
 8001c54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001c58:	f10a 0a01 	add.w	sl, sl, #1
 8001c5c:	9304      	str	r3, [sp, #16]
 8001c5e:	9307      	str	r3, [sp, #28]
 8001c60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001c64:	931a      	str	r3, [sp, #104]	; 0x68
 8001c66:	4654      	mov	r4, sl
 8001c68:	2205      	movs	r2, #5
 8001c6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001c6e:	4858      	ldr	r0, [pc, #352]	; (8001dd0 <_vfiprintf_r+0x24c>)
 8001c70:	f7fe fad6 	bl	8000220 <memchr>
 8001c74:	9a04      	ldr	r2, [sp, #16]
 8001c76:	b9d8      	cbnz	r0, 8001cb0 <_vfiprintf_r+0x12c>
 8001c78:	06d1      	lsls	r1, r2, #27
 8001c7a:	bf44      	itt	mi
 8001c7c:	2320      	movmi	r3, #32
 8001c7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001c82:	0713      	lsls	r3, r2, #28
 8001c84:	bf44      	itt	mi
 8001c86:	232b      	movmi	r3, #43	; 0x2b
 8001c88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001c8c:	f89a 3000 	ldrb.w	r3, [sl]
 8001c90:	2b2a      	cmp	r3, #42	; 0x2a
 8001c92:	d015      	beq.n	8001cc0 <_vfiprintf_r+0x13c>
 8001c94:	9a07      	ldr	r2, [sp, #28]
 8001c96:	4654      	mov	r4, sl
 8001c98:	2000      	movs	r0, #0
 8001c9a:	f04f 0c0a 	mov.w	ip, #10
 8001c9e:	4621      	mov	r1, r4
 8001ca0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001ca4:	3b30      	subs	r3, #48	; 0x30
 8001ca6:	2b09      	cmp	r3, #9
 8001ca8:	d94e      	bls.n	8001d48 <_vfiprintf_r+0x1c4>
 8001caa:	b1b0      	cbz	r0, 8001cda <_vfiprintf_r+0x156>
 8001cac:	9207      	str	r2, [sp, #28]
 8001cae:	e014      	b.n	8001cda <_vfiprintf_r+0x156>
 8001cb0:	eba0 0308 	sub.w	r3, r0, r8
 8001cb4:	fa09 f303 	lsl.w	r3, r9, r3
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	9304      	str	r3, [sp, #16]
 8001cbc:	46a2      	mov	sl, r4
 8001cbe:	e7d2      	b.n	8001c66 <_vfiprintf_r+0xe2>
 8001cc0:	9b03      	ldr	r3, [sp, #12]
 8001cc2:	1d19      	adds	r1, r3, #4
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	9103      	str	r1, [sp, #12]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	bfbb      	ittet	lt
 8001ccc:	425b      	neglt	r3, r3
 8001cce:	f042 0202 	orrlt.w	r2, r2, #2
 8001cd2:	9307      	strge	r3, [sp, #28]
 8001cd4:	9307      	strlt	r3, [sp, #28]
 8001cd6:	bfb8      	it	lt
 8001cd8:	9204      	strlt	r2, [sp, #16]
 8001cda:	7823      	ldrb	r3, [r4, #0]
 8001cdc:	2b2e      	cmp	r3, #46	; 0x2e
 8001cde:	d10c      	bne.n	8001cfa <_vfiprintf_r+0x176>
 8001ce0:	7863      	ldrb	r3, [r4, #1]
 8001ce2:	2b2a      	cmp	r3, #42	; 0x2a
 8001ce4:	d135      	bne.n	8001d52 <_vfiprintf_r+0x1ce>
 8001ce6:	9b03      	ldr	r3, [sp, #12]
 8001ce8:	1d1a      	adds	r2, r3, #4
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	9203      	str	r2, [sp, #12]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	bfb8      	it	lt
 8001cf2:	f04f 33ff 	movlt.w	r3, #4294967295
 8001cf6:	3402      	adds	r4, #2
 8001cf8:	9305      	str	r3, [sp, #20]
 8001cfa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8001de0 <_vfiprintf_r+0x25c>
 8001cfe:	7821      	ldrb	r1, [r4, #0]
 8001d00:	2203      	movs	r2, #3
 8001d02:	4650      	mov	r0, sl
 8001d04:	f7fe fa8c 	bl	8000220 <memchr>
 8001d08:	b140      	cbz	r0, 8001d1c <_vfiprintf_r+0x198>
 8001d0a:	2340      	movs	r3, #64	; 0x40
 8001d0c:	eba0 000a 	sub.w	r0, r0, sl
 8001d10:	fa03 f000 	lsl.w	r0, r3, r0
 8001d14:	9b04      	ldr	r3, [sp, #16]
 8001d16:	4303      	orrs	r3, r0
 8001d18:	3401      	adds	r4, #1
 8001d1a:	9304      	str	r3, [sp, #16]
 8001d1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001d20:	482c      	ldr	r0, [pc, #176]	; (8001dd4 <_vfiprintf_r+0x250>)
 8001d22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001d26:	2206      	movs	r2, #6
 8001d28:	f7fe fa7a 	bl	8000220 <memchr>
 8001d2c:	2800      	cmp	r0, #0
 8001d2e:	d03f      	beq.n	8001db0 <_vfiprintf_r+0x22c>
 8001d30:	4b29      	ldr	r3, [pc, #164]	; (8001dd8 <_vfiprintf_r+0x254>)
 8001d32:	bb1b      	cbnz	r3, 8001d7c <_vfiprintf_r+0x1f8>
 8001d34:	9b03      	ldr	r3, [sp, #12]
 8001d36:	3307      	adds	r3, #7
 8001d38:	f023 0307 	bic.w	r3, r3, #7
 8001d3c:	3308      	adds	r3, #8
 8001d3e:	9303      	str	r3, [sp, #12]
 8001d40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001d42:	443b      	add	r3, r7
 8001d44:	9309      	str	r3, [sp, #36]	; 0x24
 8001d46:	e767      	b.n	8001c18 <_vfiprintf_r+0x94>
 8001d48:	fb0c 3202 	mla	r2, ip, r2, r3
 8001d4c:	460c      	mov	r4, r1
 8001d4e:	2001      	movs	r0, #1
 8001d50:	e7a5      	b.n	8001c9e <_vfiprintf_r+0x11a>
 8001d52:	2300      	movs	r3, #0
 8001d54:	3401      	adds	r4, #1
 8001d56:	9305      	str	r3, [sp, #20]
 8001d58:	4619      	mov	r1, r3
 8001d5a:	f04f 0c0a 	mov.w	ip, #10
 8001d5e:	4620      	mov	r0, r4
 8001d60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001d64:	3a30      	subs	r2, #48	; 0x30
 8001d66:	2a09      	cmp	r2, #9
 8001d68:	d903      	bls.n	8001d72 <_vfiprintf_r+0x1ee>
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d0c5      	beq.n	8001cfa <_vfiprintf_r+0x176>
 8001d6e:	9105      	str	r1, [sp, #20]
 8001d70:	e7c3      	b.n	8001cfa <_vfiprintf_r+0x176>
 8001d72:	fb0c 2101 	mla	r1, ip, r1, r2
 8001d76:	4604      	mov	r4, r0
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e7f0      	b.n	8001d5e <_vfiprintf_r+0x1da>
 8001d7c:	ab03      	add	r3, sp, #12
 8001d7e:	9300      	str	r3, [sp, #0]
 8001d80:	462a      	mov	r2, r5
 8001d82:	4b16      	ldr	r3, [pc, #88]	; (8001ddc <_vfiprintf_r+0x258>)
 8001d84:	a904      	add	r1, sp, #16
 8001d86:	4630      	mov	r0, r6
 8001d88:	f3af 8000 	nop.w
 8001d8c:	4607      	mov	r7, r0
 8001d8e:	1c78      	adds	r0, r7, #1
 8001d90:	d1d6      	bne.n	8001d40 <_vfiprintf_r+0x1bc>
 8001d92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001d94:	07d9      	lsls	r1, r3, #31
 8001d96:	d405      	bmi.n	8001da4 <_vfiprintf_r+0x220>
 8001d98:	89ab      	ldrh	r3, [r5, #12]
 8001d9a:	059a      	lsls	r2, r3, #22
 8001d9c:	d402      	bmi.n	8001da4 <_vfiprintf_r+0x220>
 8001d9e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001da0:	f7ff fe09 	bl	80019b6 <__retarget_lock_release_recursive>
 8001da4:	89ab      	ldrh	r3, [r5, #12]
 8001da6:	065b      	lsls	r3, r3, #25
 8001da8:	f53f af12 	bmi.w	8001bd0 <_vfiprintf_r+0x4c>
 8001dac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001dae:	e711      	b.n	8001bd4 <_vfiprintf_r+0x50>
 8001db0:	ab03      	add	r3, sp, #12
 8001db2:	9300      	str	r3, [sp, #0]
 8001db4:	462a      	mov	r2, r5
 8001db6:	4b09      	ldr	r3, [pc, #36]	; (8001ddc <_vfiprintf_r+0x258>)
 8001db8:	a904      	add	r1, sp, #16
 8001dba:	4630      	mov	r0, r6
 8001dbc:	f000 f880 	bl	8001ec0 <_printf_i>
 8001dc0:	e7e4      	b.n	8001d8c <_vfiprintf_r+0x208>
 8001dc2:	bf00      	nop
 8001dc4:	0800274c 	.word	0x0800274c
 8001dc8:	0800276c 	.word	0x0800276c
 8001dcc:	0800272c 	.word	0x0800272c
 8001dd0:	0800278c 	.word	0x0800278c
 8001dd4:	08002796 	.word	0x08002796
 8001dd8:	00000000 	.word	0x00000000
 8001ddc:	08001b5f 	.word	0x08001b5f
 8001de0:	08002792 	.word	0x08002792

08001de4 <_printf_common>:
 8001de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001de8:	4616      	mov	r6, r2
 8001dea:	4699      	mov	r9, r3
 8001dec:	688a      	ldr	r2, [r1, #8]
 8001dee:	690b      	ldr	r3, [r1, #16]
 8001df0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001df4:	4293      	cmp	r3, r2
 8001df6:	bfb8      	it	lt
 8001df8:	4613      	movlt	r3, r2
 8001dfa:	6033      	str	r3, [r6, #0]
 8001dfc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001e00:	4607      	mov	r7, r0
 8001e02:	460c      	mov	r4, r1
 8001e04:	b10a      	cbz	r2, 8001e0a <_printf_common+0x26>
 8001e06:	3301      	adds	r3, #1
 8001e08:	6033      	str	r3, [r6, #0]
 8001e0a:	6823      	ldr	r3, [r4, #0]
 8001e0c:	0699      	lsls	r1, r3, #26
 8001e0e:	bf42      	ittt	mi
 8001e10:	6833      	ldrmi	r3, [r6, #0]
 8001e12:	3302      	addmi	r3, #2
 8001e14:	6033      	strmi	r3, [r6, #0]
 8001e16:	6825      	ldr	r5, [r4, #0]
 8001e18:	f015 0506 	ands.w	r5, r5, #6
 8001e1c:	d106      	bne.n	8001e2c <_printf_common+0x48>
 8001e1e:	f104 0a19 	add.w	sl, r4, #25
 8001e22:	68e3      	ldr	r3, [r4, #12]
 8001e24:	6832      	ldr	r2, [r6, #0]
 8001e26:	1a9b      	subs	r3, r3, r2
 8001e28:	42ab      	cmp	r3, r5
 8001e2a:	dc26      	bgt.n	8001e7a <_printf_common+0x96>
 8001e2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001e30:	1e13      	subs	r3, r2, #0
 8001e32:	6822      	ldr	r2, [r4, #0]
 8001e34:	bf18      	it	ne
 8001e36:	2301      	movne	r3, #1
 8001e38:	0692      	lsls	r2, r2, #26
 8001e3a:	d42b      	bmi.n	8001e94 <_printf_common+0xb0>
 8001e3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001e40:	4649      	mov	r1, r9
 8001e42:	4638      	mov	r0, r7
 8001e44:	47c0      	blx	r8
 8001e46:	3001      	adds	r0, #1
 8001e48:	d01e      	beq.n	8001e88 <_printf_common+0xa4>
 8001e4a:	6823      	ldr	r3, [r4, #0]
 8001e4c:	68e5      	ldr	r5, [r4, #12]
 8001e4e:	6832      	ldr	r2, [r6, #0]
 8001e50:	f003 0306 	and.w	r3, r3, #6
 8001e54:	2b04      	cmp	r3, #4
 8001e56:	bf08      	it	eq
 8001e58:	1aad      	subeq	r5, r5, r2
 8001e5a:	68a3      	ldr	r3, [r4, #8]
 8001e5c:	6922      	ldr	r2, [r4, #16]
 8001e5e:	bf0c      	ite	eq
 8001e60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001e64:	2500      	movne	r5, #0
 8001e66:	4293      	cmp	r3, r2
 8001e68:	bfc4      	itt	gt
 8001e6a:	1a9b      	subgt	r3, r3, r2
 8001e6c:	18ed      	addgt	r5, r5, r3
 8001e6e:	2600      	movs	r6, #0
 8001e70:	341a      	adds	r4, #26
 8001e72:	42b5      	cmp	r5, r6
 8001e74:	d11a      	bne.n	8001eac <_printf_common+0xc8>
 8001e76:	2000      	movs	r0, #0
 8001e78:	e008      	b.n	8001e8c <_printf_common+0xa8>
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	4652      	mov	r2, sl
 8001e7e:	4649      	mov	r1, r9
 8001e80:	4638      	mov	r0, r7
 8001e82:	47c0      	blx	r8
 8001e84:	3001      	adds	r0, #1
 8001e86:	d103      	bne.n	8001e90 <_printf_common+0xac>
 8001e88:	f04f 30ff 	mov.w	r0, #4294967295
 8001e8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e90:	3501      	adds	r5, #1
 8001e92:	e7c6      	b.n	8001e22 <_printf_common+0x3e>
 8001e94:	18e1      	adds	r1, r4, r3
 8001e96:	1c5a      	adds	r2, r3, #1
 8001e98:	2030      	movs	r0, #48	; 0x30
 8001e9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001e9e:	4422      	add	r2, r4
 8001ea0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001ea4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001ea8:	3302      	adds	r3, #2
 8001eaa:	e7c7      	b.n	8001e3c <_printf_common+0x58>
 8001eac:	2301      	movs	r3, #1
 8001eae:	4622      	mov	r2, r4
 8001eb0:	4649      	mov	r1, r9
 8001eb2:	4638      	mov	r0, r7
 8001eb4:	47c0      	blx	r8
 8001eb6:	3001      	adds	r0, #1
 8001eb8:	d0e6      	beq.n	8001e88 <_printf_common+0xa4>
 8001eba:	3601      	adds	r6, #1
 8001ebc:	e7d9      	b.n	8001e72 <_printf_common+0x8e>
	...

08001ec0 <_printf_i>:
 8001ec0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001ec4:	460c      	mov	r4, r1
 8001ec6:	4691      	mov	r9, r2
 8001ec8:	7e27      	ldrb	r7, [r4, #24]
 8001eca:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001ecc:	2f78      	cmp	r7, #120	; 0x78
 8001ece:	4680      	mov	r8, r0
 8001ed0:	469a      	mov	sl, r3
 8001ed2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001ed6:	d807      	bhi.n	8001ee8 <_printf_i+0x28>
 8001ed8:	2f62      	cmp	r7, #98	; 0x62
 8001eda:	d80a      	bhi.n	8001ef2 <_printf_i+0x32>
 8001edc:	2f00      	cmp	r7, #0
 8001ede:	f000 80d8 	beq.w	8002092 <_printf_i+0x1d2>
 8001ee2:	2f58      	cmp	r7, #88	; 0x58
 8001ee4:	f000 80a3 	beq.w	800202e <_printf_i+0x16e>
 8001ee8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001eec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001ef0:	e03a      	b.n	8001f68 <_printf_i+0xa8>
 8001ef2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001ef6:	2b15      	cmp	r3, #21
 8001ef8:	d8f6      	bhi.n	8001ee8 <_printf_i+0x28>
 8001efa:	a001      	add	r0, pc, #4	; (adr r0, 8001f00 <_printf_i+0x40>)
 8001efc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8001f00:	08001f59 	.word	0x08001f59
 8001f04:	08001f6d 	.word	0x08001f6d
 8001f08:	08001ee9 	.word	0x08001ee9
 8001f0c:	08001ee9 	.word	0x08001ee9
 8001f10:	08001ee9 	.word	0x08001ee9
 8001f14:	08001ee9 	.word	0x08001ee9
 8001f18:	08001f6d 	.word	0x08001f6d
 8001f1c:	08001ee9 	.word	0x08001ee9
 8001f20:	08001ee9 	.word	0x08001ee9
 8001f24:	08001ee9 	.word	0x08001ee9
 8001f28:	08001ee9 	.word	0x08001ee9
 8001f2c:	08002079 	.word	0x08002079
 8001f30:	08001f9d 	.word	0x08001f9d
 8001f34:	0800205b 	.word	0x0800205b
 8001f38:	08001ee9 	.word	0x08001ee9
 8001f3c:	08001ee9 	.word	0x08001ee9
 8001f40:	0800209b 	.word	0x0800209b
 8001f44:	08001ee9 	.word	0x08001ee9
 8001f48:	08001f9d 	.word	0x08001f9d
 8001f4c:	08001ee9 	.word	0x08001ee9
 8001f50:	08001ee9 	.word	0x08001ee9
 8001f54:	08002063 	.word	0x08002063
 8001f58:	680b      	ldr	r3, [r1, #0]
 8001f5a:	1d1a      	adds	r2, r3, #4
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	600a      	str	r2, [r1, #0]
 8001f60:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001f64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e0a3      	b.n	80020b4 <_printf_i+0x1f4>
 8001f6c:	6825      	ldr	r5, [r4, #0]
 8001f6e:	6808      	ldr	r0, [r1, #0]
 8001f70:	062e      	lsls	r6, r5, #24
 8001f72:	f100 0304 	add.w	r3, r0, #4
 8001f76:	d50a      	bpl.n	8001f8e <_printf_i+0xce>
 8001f78:	6805      	ldr	r5, [r0, #0]
 8001f7a:	600b      	str	r3, [r1, #0]
 8001f7c:	2d00      	cmp	r5, #0
 8001f7e:	da03      	bge.n	8001f88 <_printf_i+0xc8>
 8001f80:	232d      	movs	r3, #45	; 0x2d
 8001f82:	426d      	negs	r5, r5
 8001f84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001f88:	485e      	ldr	r0, [pc, #376]	; (8002104 <_printf_i+0x244>)
 8001f8a:	230a      	movs	r3, #10
 8001f8c:	e019      	b.n	8001fc2 <_printf_i+0x102>
 8001f8e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8001f92:	6805      	ldr	r5, [r0, #0]
 8001f94:	600b      	str	r3, [r1, #0]
 8001f96:	bf18      	it	ne
 8001f98:	b22d      	sxthne	r5, r5
 8001f9a:	e7ef      	b.n	8001f7c <_printf_i+0xbc>
 8001f9c:	680b      	ldr	r3, [r1, #0]
 8001f9e:	6825      	ldr	r5, [r4, #0]
 8001fa0:	1d18      	adds	r0, r3, #4
 8001fa2:	6008      	str	r0, [r1, #0]
 8001fa4:	0628      	lsls	r0, r5, #24
 8001fa6:	d501      	bpl.n	8001fac <_printf_i+0xec>
 8001fa8:	681d      	ldr	r5, [r3, #0]
 8001faa:	e002      	b.n	8001fb2 <_printf_i+0xf2>
 8001fac:	0669      	lsls	r1, r5, #25
 8001fae:	d5fb      	bpl.n	8001fa8 <_printf_i+0xe8>
 8001fb0:	881d      	ldrh	r5, [r3, #0]
 8001fb2:	4854      	ldr	r0, [pc, #336]	; (8002104 <_printf_i+0x244>)
 8001fb4:	2f6f      	cmp	r7, #111	; 0x6f
 8001fb6:	bf0c      	ite	eq
 8001fb8:	2308      	moveq	r3, #8
 8001fba:	230a      	movne	r3, #10
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001fc2:	6866      	ldr	r6, [r4, #4]
 8001fc4:	60a6      	str	r6, [r4, #8]
 8001fc6:	2e00      	cmp	r6, #0
 8001fc8:	bfa2      	ittt	ge
 8001fca:	6821      	ldrge	r1, [r4, #0]
 8001fcc:	f021 0104 	bicge.w	r1, r1, #4
 8001fd0:	6021      	strge	r1, [r4, #0]
 8001fd2:	b90d      	cbnz	r5, 8001fd8 <_printf_i+0x118>
 8001fd4:	2e00      	cmp	r6, #0
 8001fd6:	d04d      	beq.n	8002074 <_printf_i+0x1b4>
 8001fd8:	4616      	mov	r6, r2
 8001fda:	fbb5 f1f3 	udiv	r1, r5, r3
 8001fde:	fb03 5711 	mls	r7, r3, r1, r5
 8001fe2:	5dc7      	ldrb	r7, [r0, r7]
 8001fe4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001fe8:	462f      	mov	r7, r5
 8001fea:	42bb      	cmp	r3, r7
 8001fec:	460d      	mov	r5, r1
 8001fee:	d9f4      	bls.n	8001fda <_printf_i+0x11a>
 8001ff0:	2b08      	cmp	r3, #8
 8001ff2:	d10b      	bne.n	800200c <_printf_i+0x14c>
 8001ff4:	6823      	ldr	r3, [r4, #0]
 8001ff6:	07df      	lsls	r7, r3, #31
 8001ff8:	d508      	bpl.n	800200c <_printf_i+0x14c>
 8001ffa:	6923      	ldr	r3, [r4, #16]
 8001ffc:	6861      	ldr	r1, [r4, #4]
 8001ffe:	4299      	cmp	r1, r3
 8002000:	bfde      	ittt	le
 8002002:	2330      	movle	r3, #48	; 0x30
 8002004:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002008:	f106 36ff 	addle.w	r6, r6, #4294967295
 800200c:	1b92      	subs	r2, r2, r6
 800200e:	6122      	str	r2, [r4, #16]
 8002010:	f8cd a000 	str.w	sl, [sp]
 8002014:	464b      	mov	r3, r9
 8002016:	aa03      	add	r2, sp, #12
 8002018:	4621      	mov	r1, r4
 800201a:	4640      	mov	r0, r8
 800201c:	f7ff fee2 	bl	8001de4 <_printf_common>
 8002020:	3001      	adds	r0, #1
 8002022:	d14c      	bne.n	80020be <_printf_i+0x1fe>
 8002024:	f04f 30ff 	mov.w	r0, #4294967295
 8002028:	b004      	add	sp, #16
 800202a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800202e:	4835      	ldr	r0, [pc, #212]	; (8002104 <_printf_i+0x244>)
 8002030:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002034:	6823      	ldr	r3, [r4, #0]
 8002036:	680e      	ldr	r6, [r1, #0]
 8002038:	061f      	lsls	r7, r3, #24
 800203a:	f856 5b04 	ldr.w	r5, [r6], #4
 800203e:	600e      	str	r6, [r1, #0]
 8002040:	d514      	bpl.n	800206c <_printf_i+0x1ac>
 8002042:	07d9      	lsls	r1, r3, #31
 8002044:	bf44      	itt	mi
 8002046:	f043 0320 	orrmi.w	r3, r3, #32
 800204a:	6023      	strmi	r3, [r4, #0]
 800204c:	b91d      	cbnz	r5, 8002056 <_printf_i+0x196>
 800204e:	6823      	ldr	r3, [r4, #0]
 8002050:	f023 0320 	bic.w	r3, r3, #32
 8002054:	6023      	str	r3, [r4, #0]
 8002056:	2310      	movs	r3, #16
 8002058:	e7b0      	b.n	8001fbc <_printf_i+0xfc>
 800205a:	6823      	ldr	r3, [r4, #0]
 800205c:	f043 0320 	orr.w	r3, r3, #32
 8002060:	6023      	str	r3, [r4, #0]
 8002062:	2378      	movs	r3, #120	; 0x78
 8002064:	4828      	ldr	r0, [pc, #160]	; (8002108 <_printf_i+0x248>)
 8002066:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800206a:	e7e3      	b.n	8002034 <_printf_i+0x174>
 800206c:	065e      	lsls	r6, r3, #25
 800206e:	bf48      	it	mi
 8002070:	b2ad      	uxthmi	r5, r5
 8002072:	e7e6      	b.n	8002042 <_printf_i+0x182>
 8002074:	4616      	mov	r6, r2
 8002076:	e7bb      	b.n	8001ff0 <_printf_i+0x130>
 8002078:	680b      	ldr	r3, [r1, #0]
 800207a:	6826      	ldr	r6, [r4, #0]
 800207c:	6960      	ldr	r0, [r4, #20]
 800207e:	1d1d      	adds	r5, r3, #4
 8002080:	600d      	str	r5, [r1, #0]
 8002082:	0635      	lsls	r5, r6, #24
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	d501      	bpl.n	800208c <_printf_i+0x1cc>
 8002088:	6018      	str	r0, [r3, #0]
 800208a:	e002      	b.n	8002092 <_printf_i+0x1d2>
 800208c:	0671      	lsls	r1, r6, #25
 800208e:	d5fb      	bpl.n	8002088 <_printf_i+0x1c8>
 8002090:	8018      	strh	r0, [r3, #0]
 8002092:	2300      	movs	r3, #0
 8002094:	6123      	str	r3, [r4, #16]
 8002096:	4616      	mov	r6, r2
 8002098:	e7ba      	b.n	8002010 <_printf_i+0x150>
 800209a:	680b      	ldr	r3, [r1, #0]
 800209c:	1d1a      	adds	r2, r3, #4
 800209e:	600a      	str	r2, [r1, #0]
 80020a0:	681e      	ldr	r6, [r3, #0]
 80020a2:	6862      	ldr	r2, [r4, #4]
 80020a4:	2100      	movs	r1, #0
 80020a6:	4630      	mov	r0, r6
 80020a8:	f7fe f8ba 	bl	8000220 <memchr>
 80020ac:	b108      	cbz	r0, 80020b2 <_printf_i+0x1f2>
 80020ae:	1b80      	subs	r0, r0, r6
 80020b0:	6060      	str	r0, [r4, #4]
 80020b2:	6863      	ldr	r3, [r4, #4]
 80020b4:	6123      	str	r3, [r4, #16]
 80020b6:	2300      	movs	r3, #0
 80020b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80020bc:	e7a8      	b.n	8002010 <_printf_i+0x150>
 80020be:	6923      	ldr	r3, [r4, #16]
 80020c0:	4632      	mov	r2, r6
 80020c2:	4649      	mov	r1, r9
 80020c4:	4640      	mov	r0, r8
 80020c6:	47d0      	blx	sl
 80020c8:	3001      	adds	r0, #1
 80020ca:	d0ab      	beq.n	8002024 <_printf_i+0x164>
 80020cc:	6823      	ldr	r3, [r4, #0]
 80020ce:	079b      	lsls	r3, r3, #30
 80020d0:	d413      	bmi.n	80020fa <_printf_i+0x23a>
 80020d2:	68e0      	ldr	r0, [r4, #12]
 80020d4:	9b03      	ldr	r3, [sp, #12]
 80020d6:	4298      	cmp	r0, r3
 80020d8:	bfb8      	it	lt
 80020da:	4618      	movlt	r0, r3
 80020dc:	e7a4      	b.n	8002028 <_printf_i+0x168>
 80020de:	2301      	movs	r3, #1
 80020e0:	4632      	mov	r2, r6
 80020e2:	4649      	mov	r1, r9
 80020e4:	4640      	mov	r0, r8
 80020e6:	47d0      	blx	sl
 80020e8:	3001      	adds	r0, #1
 80020ea:	d09b      	beq.n	8002024 <_printf_i+0x164>
 80020ec:	3501      	adds	r5, #1
 80020ee:	68e3      	ldr	r3, [r4, #12]
 80020f0:	9903      	ldr	r1, [sp, #12]
 80020f2:	1a5b      	subs	r3, r3, r1
 80020f4:	42ab      	cmp	r3, r5
 80020f6:	dcf2      	bgt.n	80020de <_printf_i+0x21e>
 80020f8:	e7eb      	b.n	80020d2 <_printf_i+0x212>
 80020fa:	2500      	movs	r5, #0
 80020fc:	f104 0619 	add.w	r6, r4, #25
 8002100:	e7f5      	b.n	80020ee <_printf_i+0x22e>
 8002102:	bf00      	nop
 8002104:	0800279d 	.word	0x0800279d
 8002108:	080027ae 	.word	0x080027ae

0800210c <_putc_r>:
 800210c:	b570      	push	{r4, r5, r6, lr}
 800210e:	460d      	mov	r5, r1
 8002110:	4614      	mov	r4, r2
 8002112:	4606      	mov	r6, r0
 8002114:	b118      	cbz	r0, 800211e <_putc_r+0x12>
 8002116:	6983      	ldr	r3, [r0, #24]
 8002118:	b90b      	cbnz	r3, 800211e <_putc_r+0x12>
 800211a:	f7ff fbad 	bl	8001878 <__sinit>
 800211e:	4b1c      	ldr	r3, [pc, #112]	; (8002190 <_putc_r+0x84>)
 8002120:	429c      	cmp	r4, r3
 8002122:	d124      	bne.n	800216e <_putc_r+0x62>
 8002124:	6874      	ldr	r4, [r6, #4]
 8002126:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002128:	07d8      	lsls	r0, r3, #31
 800212a:	d405      	bmi.n	8002138 <_putc_r+0x2c>
 800212c:	89a3      	ldrh	r3, [r4, #12]
 800212e:	0599      	lsls	r1, r3, #22
 8002130:	d402      	bmi.n	8002138 <_putc_r+0x2c>
 8002132:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002134:	f7ff fc3e 	bl	80019b4 <__retarget_lock_acquire_recursive>
 8002138:	68a3      	ldr	r3, [r4, #8]
 800213a:	3b01      	subs	r3, #1
 800213c:	2b00      	cmp	r3, #0
 800213e:	60a3      	str	r3, [r4, #8]
 8002140:	da05      	bge.n	800214e <_putc_r+0x42>
 8002142:	69a2      	ldr	r2, [r4, #24]
 8002144:	4293      	cmp	r3, r2
 8002146:	db1c      	blt.n	8002182 <_putc_r+0x76>
 8002148:	b2eb      	uxtb	r3, r5
 800214a:	2b0a      	cmp	r3, #10
 800214c:	d019      	beq.n	8002182 <_putc_r+0x76>
 800214e:	6823      	ldr	r3, [r4, #0]
 8002150:	1c5a      	adds	r2, r3, #1
 8002152:	6022      	str	r2, [r4, #0]
 8002154:	701d      	strb	r5, [r3, #0]
 8002156:	b2ed      	uxtb	r5, r5
 8002158:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800215a:	07da      	lsls	r2, r3, #31
 800215c:	d405      	bmi.n	800216a <_putc_r+0x5e>
 800215e:	89a3      	ldrh	r3, [r4, #12]
 8002160:	059b      	lsls	r3, r3, #22
 8002162:	d402      	bmi.n	800216a <_putc_r+0x5e>
 8002164:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002166:	f7ff fc26 	bl	80019b6 <__retarget_lock_release_recursive>
 800216a:	4628      	mov	r0, r5
 800216c:	bd70      	pop	{r4, r5, r6, pc}
 800216e:	4b09      	ldr	r3, [pc, #36]	; (8002194 <_putc_r+0x88>)
 8002170:	429c      	cmp	r4, r3
 8002172:	d101      	bne.n	8002178 <_putc_r+0x6c>
 8002174:	68b4      	ldr	r4, [r6, #8]
 8002176:	e7d6      	b.n	8002126 <_putc_r+0x1a>
 8002178:	4b07      	ldr	r3, [pc, #28]	; (8002198 <_putc_r+0x8c>)
 800217a:	429c      	cmp	r4, r3
 800217c:	bf08      	it	eq
 800217e:	68f4      	ldreq	r4, [r6, #12]
 8002180:	e7d1      	b.n	8002126 <_putc_r+0x1a>
 8002182:	4629      	mov	r1, r5
 8002184:	4622      	mov	r2, r4
 8002186:	4630      	mov	r0, r6
 8002188:	f7ff f99c 	bl	80014c4 <__swbuf_r>
 800218c:	4605      	mov	r5, r0
 800218e:	e7e3      	b.n	8002158 <_putc_r+0x4c>
 8002190:	0800274c 	.word	0x0800274c
 8002194:	0800276c 	.word	0x0800276c
 8002198:	0800272c 	.word	0x0800272c

0800219c <__sread>:
 800219c:	b510      	push	{r4, lr}
 800219e:	460c      	mov	r4, r1
 80021a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80021a4:	f000 f894 	bl	80022d0 <_read_r>
 80021a8:	2800      	cmp	r0, #0
 80021aa:	bfab      	itete	ge
 80021ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80021ae:	89a3      	ldrhlt	r3, [r4, #12]
 80021b0:	181b      	addge	r3, r3, r0
 80021b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80021b6:	bfac      	ite	ge
 80021b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80021ba:	81a3      	strhlt	r3, [r4, #12]
 80021bc:	bd10      	pop	{r4, pc}

080021be <__swrite>:
 80021be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021c2:	461f      	mov	r7, r3
 80021c4:	898b      	ldrh	r3, [r1, #12]
 80021c6:	05db      	lsls	r3, r3, #23
 80021c8:	4605      	mov	r5, r0
 80021ca:	460c      	mov	r4, r1
 80021cc:	4616      	mov	r6, r2
 80021ce:	d505      	bpl.n	80021dc <__swrite+0x1e>
 80021d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80021d4:	2302      	movs	r3, #2
 80021d6:	2200      	movs	r2, #0
 80021d8:	f000 f868 	bl	80022ac <_lseek_r>
 80021dc:	89a3      	ldrh	r3, [r4, #12]
 80021de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80021e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80021e6:	81a3      	strh	r3, [r4, #12]
 80021e8:	4632      	mov	r2, r6
 80021ea:	463b      	mov	r3, r7
 80021ec:	4628      	mov	r0, r5
 80021ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80021f2:	f000 b817 	b.w	8002224 <_write_r>

080021f6 <__sseek>:
 80021f6:	b510      	push	{r4, lr}
 80021f8:	460c      	mov	r4, r1
 80021fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80021fe:	f000 f855 	bl	80022ac <_lseek_r>
 8002202:	1c43      	adds	r3, r0, #1
 8002204:	89a3      	ldrh	r3, [r4, #12]
 8002206:	bf15      	itete	ne
 8002208:	6560      	strne	r0, [r4, #84]	; 0x54
 800220a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800220e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002212:	81a3      	strheq	r3, [r4, #12]
 8002214:	bf18      	it	ne
 8002216:	81a3      	strhne	r3, [r4, #12]
 8002218:	bd10      	pop	{r4, pc}

0800221a <__sclose>:
 800221a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800221e:	f000 b813 	b.w	8002248 <_close_r>
	...

08002224 <_write_r>:
 8002224:	b538      	push	{r3, r4, r5, lr}
 8002226:	4d07      	ldr	r5, [pc, #28]	; (8002244 <_write_r+0x20>)
 8002228:	4604      	mov	r4, r0
 800222a:	4608      	mov	r0, r1
 800222c:	4611      	mov	r1, r2
 800222e:	2200      	movs	r2, #0
 8002230:	602a      	str	r2, [r5, #0]
 8002232:	461a      	mov	r2, r3
 8002234:	f7fe fe79 	bl	8000f2a <_write>
 8002238:	1c43      	adds	r3, r0, #1
 800223a:	d102      	bne.n	8002242 <_write_r+0x1e>
 800223c:	682b      	ldr	r3, [r5, #0]
 800223e:	b103      	cbz	r3, 8002242 <_write_r+0x1e>
 8002240:	6023      	str	r3, [r4, #0]
 8002242:	bd38      	pop	{r3, r4, r5, pc}
 8002244:	200000a8 	.word	0x200000a8

08002248 <_close_r>:
 8002248:	b538      	push	{r3, r4, r5, lr}
 800224a:	4d06      	ldr	r5, [pc, #24]	; (8002264 <_close_r+0x1c>)
 800224c:	2300      	movs	r3, #0
 800224e:	4604      	mov	r4, r0
 8002250:	4608      	mov	r0, r1
 8002252:	602b      	str	r3, [r5, #0]
 8002254:	f7fe fe85 	bl	8000f62 <_close>
 8002258:	1c43      	adds	r3, r0, #1
 800225a:	d102      	bne.n	8002262 <_close_r+0x1a>
 800225c:	682b      	ldr	r3, [r5, #0]
 800225e:	b103      	cbz	r3, 8002262 <_close_r+0x1a>
 8002260:	6023      	str	r3, [r4, #0]
 8002262:	bd38      	pop	{r3, r4, r5, pc}
 8002264:	200000a8 	.word	0x200000a8

08002268 <_fstat_r>:
 8002268:	b538      	push	{r3, r4, r5, lr}
 800226a:	4d07      	ldr	r5, [pc, #28]	; (8002288 <_fstat_r+0x20>)
 800226c:	2300      	movs	r3, #0
 800226e:	4604      	mov	r4, r0
 8002270:	4608      	mov	r0, r1
 8002272:	4611      	mov	r1, r2
 8002274:	602b      	str	r3, [r5, #0]
 8002276:	f7fe fe7f 	bl	8000f78 <_fstat>
 800227a:	1c43      	adds	r3, r0, #1
 800227c:	d102      	bne.n	8002284 <_fstat_r+0x1c>
 800227e:	682b      	ldr	r3, [r5, #0]
 8002280:	b103      	cbz	r3, 8002284 <_fstat_r+0x1c>
 8002282:	6023      	str	r3, [r4, #0]
 8002284:	bd38      	pop	{r3, r4, r5, pc}
 8002286:	bf00      	nop
 8002288:	200000a8 	.word	0x200000a8

0800228c <_isatty_r>:
 800228c:	b538      	push	{r3, r4, r5, lr}
 800228e:	4d06      	ldr	r5, [pc, #24]	; (80022a8 <_isatty_r+0x1c>)
 8002290:	2300      	movs	r3, #0
 8002292:	4604      	mov	r4, r0
 8002294:	4608      	mov	r0, r1
 8002296:	602b      	str	r3, [r5, #0]
 8002298:	f7fe fe7d 	bl	8000f96 <_isatty>
 800229c:	1c43      	adds	r3, r0, #1
 800229e:	d102      	bne.n	80022a6 <_isatty_r+0x1a>
 80022a0:	682b      	ldr	r3, [r5, #0]
 80022a2:	b103      	cbz	r3, 80022a6 <_isatty_r+0x1a>
 80022a4:	6023      	str	r3, [r4, #0]
 80022a6:	bd38      	pop	{r3, r4, r5, pc}
 80022a8:	200000a8 	.word	0x200000a8

080022ac <_lseek_r>:
 80022ac:	b538      	push	{r3, r4, r5, lr}
 80022ae:	4d07      	ldr	r5, [pc, #28]	; (80022cc <_lseek_r+0x20>)
 80022b0:	4604      	mov	r4, r0
 80022b2:	4608      	mov	r0, r1
 80022b4:	4611      	mov	r1, r2
 80022b6:	2200      	movs	r2, #0
 80022b8:	602a      	str	r2, [r5, #0]
 80022ba:	461a      	mov	r2, r3
 80022bc:	f7fe fe75 	bl	8000faa <_lseek>
 80022c0:	1c43      	adds	r3, r0, #1
 80022c2:	d102      	bne.n	80022ca <_lseek_r+0x1e>
 80022c4:	682b      	ldr	r3, [r5, #0]
 80022c6:	b103      	cbz	r3, 80022ca <_lseek_r+0x1e>
 80022c8:	6023      	str	r3, [r4, #0]
 80022ca:	bd38      	pop	{r3, r4, r5, pc}
 80022cc:	200000a8 	.word	0x200000a8

080022d0 <_read_r>:
 80022d0:	b538      	push	{r3, r4, r5, lr}
 80022d2:	4d07      	ldr	r5, [pc, #28]	; (80022f0 <_read_r+0x20>)
 80022d4:	4604      	mov	r4, r0
 80022d6:	4608      	mov	r0, r1
 80022d8:	4611      	mov	r1, r2
 80022da:	2200      	movs	r2, #0
 80022dc:	602a      	str	r2, [r5, #0]
 80022de:	461a      	mov	r2, r3
 80022e0:	f7fe fe06 	bl	8000ef0 <_read>
 80022e4:	1c43      	adds	r3, r0, #1
 80022e6:	d102      	bne.n	80022ee <_read_r+0x1e>
 80022e8:	682b      	ldr	r3, [r5, #0]
 80022ea:	b103      	cbz	r3, 80022ee <_read_r+0x1e>
 80022ec:	6023      	str	r3, [r4, #0]
 80022ee:	bd38      	pop	{r3, r4, r5, pc}
 80022f0:	200000a8 	.word	0x200000a8

080022f4 <_init>:
 80022f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022f6:	bf00      	nop
 80022f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022fa:	bc08      	pop	{r3}
 80022fc:	469e      	mov	lr, r3
 80022fe:	4770      	bx	lr

08002300 <_fini>:
 8002300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002302:	bf00      	nop
 8002304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002306:	bc08      	pop	{r3}
 8002308:	469e      	mov	lr, r3
 800230a:	4770      	bx	lr


6_crypto_driver-Ceasars.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001814  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  080019e4  080019e4  000119e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001b30  08001b30  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08001b30  08001b30  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001b30  08001b30  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001b30  08001b30  00011b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001b34  08001b34  00011b34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001b38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  20000064  08001b9c  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  08001b9c  000200a4  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003a17  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000d43  00000000  00000000  00023aa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000240  00000000  00000000  000247e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001a8  00000000  00000000  00024a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001afd3  00000000  00000000  00024bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003955  00000000  00000000  0003fba3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090f7f  00000000  00000000  000434f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d4477  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000f34  00000000  00000000  000d44cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000064 	.word	0x20000064
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080019cc 	.word	0x080019cc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000068 	.word	0x20000068
 800020c:	080019cc 	.word	0x080019cc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <ceasar_encrypt>:

#include "ceasars_cipher.h"


void ceasar_encrypt(char* plain_text, uint8_t key, char* encrypted_data, uint32_t length)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b086      	sub	sp, #24
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	60f8      	str	r0, [r7, #12]
 80002c8:	607a      	str	r2, [r7, #4]
 80002ca:	603b      	str	r3, [r7, #0]
 80002cc:	460b      	mov	r3, r1
 80002ce:	72fb      	strb	r3, [r7, #11]
	/* Store Plaintext_data*/
    uint8_t plaintext_data;

    printf("\r\nCrypto Engine Starting!\r\n");
 80002d0:	4831      	ldr	r0, [pc, #196]	; (8000398 <ceasar_encrypt+0xd8>)
 80002d2:	f000 fc4b 	bl	8000b6c <puts>
    for(uint32_t index = 0; index < length; index++)
 80002d6:	2300      	movs	r3, #0
 80002d8:	613b      	str	r3, [r7, #16]
 80002da:	e04b      	b.n	8000374 <ceasar_encrypt+0xb4>
    {
    	plaintext_data = plain_text[index];
 80002dc:	68fa      	ldr	r2, [r7, #12]
 80002de:	693b      	ldr	r3, [r7, #16]
 80002e0:	4413      	add	r3, r2
 80002e2:	781b      	ldrb	r3, [r3, #0]
 80002e4:	75fb      	strb	r3, [r7, #23]
    	printf("::%d\r\n",plaintext_data);
 80002e6:	7dfb      	ldrb	r3, [r7, #23]
 80002e8:	4619      	mov	r1, r3
 80002ea:	482c      	ldr	r0, [pc, #176]	; (800039c <ceasar_encrypt+0xdc>)
 80002ec:	f000 fba4 	bl	8000a38 <iprintf>

    	if(plaintext_data >= 'a' && plaintext_data <= 'z')
 80002f0:	7dfb      	ldrb	r3, [r7, #23]
 80002f2:	2b60      	cmp	r3, #96	; 0x60
 80002f4:	d915      	bls.n	8000322 <ceasar_encrypt+0x62>
 80002f6:	7dfb      	ldrb	r3, [r7, #23]
 80002f8:	2b7a      	cmp	r3, #122	; 0x7a
 80002fa:	d812      	bhi.n	8000322 <ceasar_encrypt+0x62>
    	{
    		plaintext_data = (plaintext_data - 'a' + key)%26 + 'a';
 80002fc:	7dfb      	ldrb	r3, [r7, #23]
 80002fe:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8000302:	7afb      	ldrb	r3, [r7, #11]
 8000304:	4413      	add	r3, r2
 8000306:	4a26      	ldr	r2, [pc, #152]	; (80003a0 <ceasar_encrypt+0xe0>)
 8000308:	fb82 1203 	smull	r1, r2, r2, r3
 800030c:	10d1      	asrs	r1, r2, #3
 800030e:	17da      	asrs	r2, r3, #31
 8000310:	1a8a      	subs	r2, r1, r2
 8000312:	211a      	movs	r1, #26
 8000314:	fb01 f202 	mul.w	r2, r1, r2
 8000318:	1a9a      	subs	r2, r3, r2
 800031a:	b2d3      	uxtb	r3, r2
 800031c:	3361      	adds	r3, #97	; 0x61
 800031e:	75fb      	strb	r3, [r7, #23]
 8000320:	e017      	b.n	8000352 <ceasar_encrypt+0x92>
    	}
    	else if(plaintext_data >= 'A' && plaintext_data <= 'Z')
 8000322:	7dfb      	ldrb	r3, [r7, #23]
 8000324:	2b40      	cmp	r3, #64	; 0x40
 8000326:	d914      	bls.n	8000352 <ceasar_encrypt+0x92>
 8000328:	7dfb      	ldrb	r3, [r7, #23]
 800032a:	2b5a      	cmp	r3, #90	; 0x5a
 800032c:	d811      	bhi.n	8000352 <ceasar_encrypt+0x92>
    	{
    		plaintext_data = (plaintext_data - 'A' + key)%26 + 'A';
 800032e:	7dfb      	ldrb	r3, [r7, #23]
 8000330:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8000334:	7afb      	ldrb	r3, [r7, #11]
 8000336:	4413      	add	r3, r2
 8000338:	4a19      	ldr	r2, [pc, #100]	; (80003a0 <ceasar_encrypt+0xe0>)
 800033a:	fb82 1203 	smull	r1, r2, r2, r3
 800033e:	10d1      	asrs	r1, r2, #3
 8000340:	17da      	asrs	r2, r3, #31
 8000342:	1a8a      	subs	r2, r1, r2
 8000344:	211a      	movs	r1, #26
 8000346:	fb01 f202 	mul.w	r2, r1, r2
 800034a:	1a9a      	subs	r2, r3, r2
 800034c:	b2d3      	uxtb	r3, r2
 800034e:	3341      	adds	r3, #65	; 0x41
 8000350:	75fb      	strb	r3, [r7, #23]
    	}

    	encrypted_data[index] = plaintext_data;
 8000352:	687a      	ldr	r2, [r7, #4]
 8000354:	693b      	ldr	r3, [r7, #16]
 8000356:	4413      	add	r3, r2
 8000358:	7dfa      	ldrb	r2, [r7, #23]
 800035a:	701a      	strb	r2, [r3, #0]
    	printf("\r\n:::%d  %c\r\n",plaintext_data, encrypted_data[index]);
 800035c:	7df9      	ldrb	r1, [r7, #23]
 800035e:	687a      	ldr	r2, [r7, #4]
 8000360:	693b      	ldr	r3, [r7, #16]
 8000362:	4413      	add	r3, r2
 8000364:	781b      	ldrb	r3, [r3, #0]
 8000366:	461a      	mov	r2, r3
 8000368:	480e      	ldr	r0, [pc, #56]	; (80003a4 <ceasar_encrypt+0xe4>)
 800036a:	f000 fb65 	bl	8000a38 <iprintf>
    for(uint32_t index = 0; index < length; index++)
 800036e:	693b      	ldr	r3, [r7, #16]
 8000370:	3301      	adds	r3, #1
 8000372:	613b      	str	r3, [r7, #16]
 8000374:	693a      	ldr	r2, [r7, #16]
 8000376:	683b      	ldr	r3, [r7, #0]
 8000378:	429a      	cmp	r2, r3
 800037a:	d3af      	bcc.n	80002dc <ceasar_encrypt+0x1c>
    }
    printf("Length At End: %lu\r\n",length);
 800037c:	6839      	ldr	r1, [r7, #0]
 800037e:	480a      	ldr	r0, [pc, #40]	; (80003a8 <ceasar_encrypt+0xe8>)
 8000380:	f000 fb5a 	bl	8000a38 <iprintf>
    encrypted_data[length] = '\0';
 8000384:	687a      	ldr	r2, [r7, #4]
 8000386:	683b      	ldr	r3, [r7, #0]
 8000388:	4413      	add	r3, r2
 800038a:	2200      	movs	r2, #0
 800038c:	701a      	strb	r2, [r3, #0]
}
 800038e:	bf00      	nop
 8000390:	3718      	adds	r7, #24
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	080019e4 	.word	0x080019e4
 800039c:	08001a00 	.word	0x08001a00
 80003a0:	4ec4ec4f 	.word	0x4ec4ec4f
 80003a4:	08001a08 	.word	0x08001a08
 80003a8:	08001a18 	.word	0x08001a18

080003ac <pa1_adc_init>:
 */

#include "adc.h"

void pa1_adc_init(void)
{
 80003ac:	b480      	push	{r7}
 80003ae:	af00      	add	r7, sp, #0
    /* Enable Clock TO ADC Channel */
	/* Set Conversion Sequence Start */
	/* Set Conversion Sequence Length */
	/* Enable ADC Length */

	RCC->AHB1ENR |= GPIOAEN;
 80003b0:	4b13      	ldr	r3, [pc, #76]	; (8000400 <pa1_adc_init+0x54>)
 80003b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003b4:	4a12      	ldr	r2, [pc, #72]	; (8000400 <pa1_adc_init+0x54>)
 80003b6:	f043 0301 	orr.w	r3, r3, #1
 80003ba:	6313      	str	r3, [r2, #48]	; 0x30
    GPIOA->MODER |= ADC_PIN_2_EN;
 80003bc:	4b11      	ldr	r3, [pc, #68]	; (8000404 <pa1_adc_init+0x58>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	4a10      	ldr	r2, [pc, #64]	; (8000404 <pa1_adc_init+0x58>)
 80003c2:	f043 0304 	orr.w	r3, r3, #4
 80003c6:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= ADC_PIN_3_EN;
 80003c8:	4b0e      	ldr	r3, [pc, #56]	; (8000404 <pa1_adc_init+0x58>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	4a0d      	ldr	r2, [pc, #52]	; (8000404 <pa1_adc_init+0x58>)
 80003ce:	f043 0308 	orr.w	r3, r3, #8
 80003d2:	6013      	str	r3, [r2, #0]

    RCC->APB2ENR |= ADC1_EN;
 80003d4:	4b0a      	ldr	r3, [pc, #40]	; (8000400 <pa1_adc_init+0x54>)
 80003d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80003d8:	4a09      	ldr	r2, [pc, #36]	; (8000400 <pa1_adc_init+0x54>)
 80003da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003de:	6453      	str	r3, [r2, #68]	; 0x44

    /* Configure specific channel depending on use-case. Refer to the reference Manual for
     * more information
     * */
    ADC1->SQR3 = ADC_CH1;
 80003e0:	4b09      	ldr	r3, [pc, #36]	; (8000408 <pa1_adc_init+0x5c>)
 80003e2:	2201      	movs	r2, #1
 80003e4:	635a      	str	r2, [r3, #52]	; 0x34
    ADC1->SQR1 = ADC_SEQ_LEN_1;
 80003e6:	4b08      	ldr	r3, [pc, #32]	; (8000408 <pa1_adc_init+0x5c>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	62da      	str	r2, [r3, #44]	; 0x2c

    ADC1->CR2 |= ADC_CR2_ON;
 80003ec:	4b06      	ldr	r3, [pc, #24]	; (8000408 <pa1_adc_init+0x5c>)
 80003ee:	689b      	ldr	r3, [r3, #8]
 80003f0:	4a05      	ldr	r2, [pc, #20]	; (8000408 <pa1_adc_init+0x5c>)
 80003f2:	f043 0301 	orr.w	r3, r3, #1
 80003f6:	6093      	str	r3, [r2, #8]
}
 80003f8:	bf00      	nop
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bc80      	pop	{r7}
 80003fe:	4770      	bx	lr
 8000400:	40023800 	.word	0x40023800
 8000404:	40020000 	.word	0x40020000
 8000408:	40012000 	.word	0x40012000

0800040c <startadc_conversion>:

void startadc_conversion(void)
{
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0
	/* Enable Continuous Conversion */
	ADC1->CR2 |= CR2_CONT;
 8000410:	4b07      	ldr	r3, [pc, #28]	; (8000430 <startadc_conversion+0x24>)
 8000412:	689b      	ldr	r3, [r3, #8]
 8000414:	4a06      	ldr	r2, [pc, #24]	; (8000430 <startadc_conversion+0x24>)
 8000416:	f043 0302 	orr.w	r3, r3, #2
 800041a:	6093      	str	r3, [r2, #8]
	/* Start ADC Conversion */
	ADC1->CR2 |= CR2_SWSTART;
 800041c:	4b04      	ldr	r3, [pc, #16]	; (8000430 <startadc_conversion+0x24>)
 800041e:	689b      	ldr	r3, [r3, #8]
 8000420:	4a03      	ldr	r2, [pc, #12]	; (8000430 <startadc_conversion+0x24>)
 8000422:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000426:	6093      	str	r3, [r2, #8]

}
 8000428:	bf00      	nop
 800042a:	46bd      	mov	sp, r7
 800042c:	bc80      	pop	{r7}
 800042e:	4770      	bx	lr
 8000430:	40012000 	.word	0x40012000

08000434 <led_init>:

#include "bsp.h"


void led_init(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
	/* Provide Clock Access to the respective Peripheral */
	/* GPIO A for stm32f44xx */

	    RCC->AHB1ENR |= GPIOAEN;
 8000438:	4b0a      	ldr	r3, [pc, #40]	; (8000464 <led_init+0x30>)
 800043a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800043c:	4a09      	ldr	r2, [pc, #36]	; (8000464 <led_init+0x30>)
 800043e:	f043 0301 	orr.w	r3, r3, #1
 8000442:	6313      	str	r3, [r2, #48]	; 0x30
	    GPIOA->MODER |= (1U<<10);
 8000444:	4b08      	ldr	r3, [pc, #32]	; (8000468 <led_init+0x34>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	4a07      	ldr	r2, [pc, #28]	; (8000468 <led_init+0x34>)
 800044a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800044e:	6013      	str	r3, [r2, #0]
	    GPIOA->MODER &= ~(1U<<11);
 8000450:	4b05      	ldr	r3, [pc, #20]	; (8000468 <led_init+0x34>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	4a04      	ldr	r2, [pc, #16]	; (8000468 <led_init+0x34>)
 8000456:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800045a:	6013      	str	r3, [r2, #0]
}
 800045c:	bf00      	nop
 800045e:	46bd      	mov	sp, r7
 8000460:	bc80      	pop	{r7}
 8000462:	4770      	bx	lr
 8000464:	40023800 	.word	0x40023800
 8000468:	40020000 	.word	0x40020000

0800046c <button_init>:
	/* Set the Pin Low */
	GPIOA->ODR &= (GPIO_DISABLE);
}

void button_init(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= GPIOCEN;
 8000470:	4b0a      	ldr	r3, [pc, #40]	; (800049c <button_init+0x30>)
 8000472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000474:	4a09      	ldr	r2, [pc, #36]	; (800049c <button_init+0x30>)
 8000476:	f043 0304 	orr.w	r3, r3, #4
 800047a:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOC->MODER &=  ~(1<<26);
 800047c:	4b08      	ldr	r3, [pc, #32]	; (80004a0 <button_init+0x34>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	4a07      	ldr	r2, [pc, #28]	; (80004a0 <button_init+0x34>)
 8000482:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8000486:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &=  ~(1<<27);
 8000488:	4b05      	ldr	r3, [pc, #20]	; (80004a0 <button_init+0x34>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	4a04      	ldr	r2, [pc, #16]	; (80004a0 <button_init+0x34>)
 800048e:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8000492:	6013      	str	r3, [r2, #0]
}
 8000494:	bf00      	nop
 8000496:	46bd      	mov	sp, r7
 8000498:	bc80      	pop	{r7}
 800049a:	4770      	bx	lr
 800049c:	40023800 	.word	0x40023800
 80004a0:	40020800 	.word	0x40020800

080004a4 <fpu_enable>:

#include "fpu.h"


void fpu_enable(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0
	/* Enable Floating Point Unit: Enable CP10 and CP11 Full Access! */
	 SCB->CPACR |= (1<<20);
 80004a8:	4b11      	ldr	r3, [pc, #68]	; (80004f0 <fpu_enable+0x4c>)
 80004aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004ae:	4a10      	ldr	r2, [pc, #64]	; (80004f0 <fpu_enable+0x4c>)
 80004b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80004b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	 SCB->CPACR |= (1<<21);
 80004b8:	4b0d      	ldr	r3, [pc, #52]	; (80004f0 <fpu_enable+0x4c>)
 80004ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004be:	4a0c      	ldr	r2, [pc, #48]	; (80004f0 <fpu_enable+0x4c>)
 80004c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	 SCB->CPACR |= (1<<22);
 80004c8:	4b09      	ldr	r3, [pc, #36]	; (80004f0 <fpu_enable+0x4c>)
 80004ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004ce:	4a08      	ldr	r2, [pc, #32]	; (80004f0 <fpu_enable+0x4c>)
 80004d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	 SCB->CPACR |= (1<<23);
 80004d8:	4b05      	ldr	r3, [pc, #20]	; (80004f0 <fpu_enable+0x4c>)
 80004da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004de:	4a04      	ldr	r2, [pc, #16]	; (80004f0 <fpu_enable+0x4c>)
 80004e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80004e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 80004e8:	bf00      	nop
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bc80      	pop	{r7}
 80004ee:	4770      	bx	lr
 80004f0:	e000ed00 	.word	0xe000ed00

080004f4 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b088      	sub	sp, #32
 80004f8:	af00      	add	r7, sp, #0
	/* Enable FPU */
	fpu_enable();
 80004fa:	f7ff ffd3 	bl	80004a4 <fpu_enable>
    /* initialize UART */
	uart_init();
 80004fe:	f000 f93d 	bl	800077c <uart_init>
	/* Initialize timer */
	timer_init();
 8000502:	f000 f90f 	bl	8000724 <timer_init>
    /* Initialize button and led */
	led_init();
 8000506:	f7ff ff95 	bl	8000434 <led_init>
    /* Initialize the button */
	button_init();
 800050a:	f7ff ffaf 	bl	800046c <button_init>
	/* Initialize the ADC module */
	pa1_adc_init();
 800050e:	f7ff ff4d 	bl	80003ac <pa1_adc_init>
    /* Start the conversion */
	startadc_conversion();
 8000512:	f7ff ff7b 	bl	800040c <startadc_conversion>

	printf("Testing the Ceasar's Module!\r\n");
 8000516:	4828      	ldr	r0, [pc, #160]	; (80005b8 <main+0xc4>)
 8000518:	f000 fb28 	bl	8000b6c <puts>
	char plain_text[] = "HELLO";
 800051c:	4a27      	ldr	r2, [pc, #156]	; (80005bc <main+0xc8>)
 800051e:	1d3b      	adds	r3, r7, #4
 8000520:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000524:	6018      	str	r0, [r3, #0]
 8000526:	3304      	adds	r3, #4
 8000528:	8019      	strh	r1, [r3, #0]
	uint8_t key = 3;
 800052a:	2303      	movs	r3, #3
 800052c:	75fb      	strb	r3, [r7, #23]
	uint32_t length = (uint32_t)strlen(plain_text);
 800052e:	1d3b      	adds	r3, r7, #4
 8000530:	4618      	mov	r0, r3
 8000532:	f7ff fe6d 	bl	8000210 <strlen>
 8000536:	6138      	str	r0, [r7, #16]
	char* encrypted_data = (char *)calloc(length+1,sizeof(char));
 8000538:	693b      	ldr	r3, [r7, #16]
 800053a:	3301      	adds	r3, #1
 800053c:	2101      	movs	r1, #1
 800053e:	4618      	mov	r0, r3
 8000540:	f000 f9d8 	bl	80008f4 <calloc>
 8000544:	4603      	mov	r3, r0
 8000546:	60fb      	str	r3, [r7, #12]



	printf("The length of the plain_text = %lu \r\n",length);
 8000548:	6939      	ldr	r1, [r7, #16]
 800054a:	481d      	ldr	r0, [pc, #116]	; (80005c0 <main+0xcc>)
 800054c:	f000 fa74 	bl	8000a38 <iprintf>

	for(int i = 0 ; i < length; i++)
 8000550:	2300      	movs	r3, #0
 8000552:	61fb      	str	r3, [r7, #28]
 8000554:	e009      	b.n	800056a <main+0x76>
	{
		printf("%c",plain_text[i]);
 8000556:	1d3a      	adds	r2, r7, #4
 8000558:	69fb      	ldr	r3, [r7, #28]
 800055a:	4413      	add	r3, r2
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	4618      	mov	r0, r3
 8000560:	f000 fa82 	bl	8000a68 <putchar>
	for(int i = 0 ; i < length; i++)
 8000564:	69fb      	ldr	r3, [r7, #28]
 8000566:	3301      	adds	r3, #1
 8000568:	61fb      	str	r3, [r7, #28]
 800056a:	69fb      	ldr	r3, [r7, #28]
 800056c:	693a      	ldr	r2, [r7, #16]
 800056e:	429a      	cmp	r2, r3
 8000570:	d8f1      	bhi.n	8000556 <main+0x62>
	}

	ceasar_encrypt(plain_text, key, encrypted_data, length);
 8000572:	7df9      	ldrb	r1, [r7, #23]
 8000574:	1d38      	adds	r0, r7, #4
 8000576:	693b      	ldr	r3, [r7, #16]
 8000578:	68fa      	ldr	r2, [r7, #12]
 800057a:	f7ff fea1 	bl	80002c0 <ceasar_encrypt>

	printf("\r\n Encrypted Data is:\r\n");
 800057e:	4811      	ldr	r0, [pc, #68]	; (80005c4 <main+0xd0>)
 8000580:	f000 faf4 	bl	8000b6c <puts>
	puts(encrypted_data);
 8000584:	68f8      	ldr	r0, [r7, #12]
 8000586:	f000 faf1 	bl	8000b6c <puts>
	for(int j = 0 ; j < length; j++)
 800058a:	2300      	movs	r3, #0
 800058c:	61bb      	str	r3, [r7, #24]
 800058e:	e009      	b.n	80005a4 <main+0xb0>
	{
		printf("%c",encrypted_data[j]);
 8000590:	69bb      	ldr	r3, [r7, #24]
 8000592:	68fa      	ldr	r2, [r7, #12]
 8000594:	4413      	add	r3, r2
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	4618      	mov	r0, r3
 800059a:	f000 fa65 	bl	8000a68 <putchar>
	for(int j = 0 ; j < length; j++)
 800059e:	69bb      	ldr	r3, [r7, #24]
 80005a0:	3301      	adds	r3, #1
 80005a2:	61bb      	str	r3, [r7, #24]
 80005a4:	69bb      	ldr	r3, [r7, #24]
 80005a6:	693a      	ldr	r2, [r7, #16]
 80005a8:	429a      	cmp	r2, r3
 80005aa:	d8f1      	bhi.n	8000590 <main+0x9c>
 80005ac:	2300      	movs	r3, #0
	}


}
 80005ae:	4618      	mov	r0, r3
 80005b0:	3720      	adds	r7, #32
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	08001a30 	.word	0x08001a30
 80005bc:	08001a90 	.word	0x08001a90
 80005c0:	08001a50 	.word	0x08001a50
 80005c4:	08001a78 	.word	0x08001a78

080005c8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b086      	sub	sp, #24
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	60f8      	str	r0, [r7, #12]
 80005d0:	60b9      	str	r1, [r7, #8]
 80005d2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005d4:	2300      	movs	r3, #0
 80005d6:	617b      	str	r3, [r7, #20]
 80005d8:	e00a      	b.n	80005f0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80005da:	f3af 8000 	nop.w
 80005de:	4601      	mov	r1, r0
 80005e0:	68bb      	ldr	r3, [r7, #8]
 80005e2:	1c5a      	adds	r2, r3, #1
 80005e4:	60ba      	str	r2, [r7, #8]
 80005e6:	b2ca      	uxtb	r2, r1
 80005e8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005ea:	697b      	ldr	r3, [r7, #20]
 80005ec:	3301      	adds	r3, #1
 80005ee:	617b      	str	r3, [r7, #20]
 80005f0:	697a      	ldr	r2, [r7, #20]
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	429a      	cmp	r2, r3
 80005f6:	dbf0      	blt.n	80005da <_read+0x12>
	}

return len;
 80005f8:	687b      	ldr	r3, [r7, #4]
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	3718      	adds	r7, #24
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}

08000602 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000602:	b580      	push	{r7, lr}
 8000604:	b086      	sub	sp, #24
 8000606:	af00      	add	r7, sp, #0
 8000608:	60f8      	str	r0, [r7, #12]
 800060a:	60b9      	str	r1, [r7, #8]
 800060c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800060e:	2300      	movs	r3, #0
 8000610:	617b      	str	r3, [r7, #20]
 8000612:	e009      	b.n	8000628 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	1c5a      	adds	r2, r3, #1
 8000618:	60ba      	str	r2, [r7, #8]
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	4618      	mov	r0, r3
 800061e:	f000 f91d 	bl	800085c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000622:	697b      	ldr	r3, [r7, #20]
 8000624:	3301      	adds	r3, #1
 8000626:	617b      	str	r3, [r7, #20]
 8000628:	697a      	ldr	r2, [r7, #20]
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	429a      	cmp	r2, r3
 800062e:	dbf1      	blt.n	8000614 <_write+0x12>
	}
	return len;
 8000630:	687b      	ldr	r3, [r7, #4]
}
 8000632:	4618      	mov	r0, r3
 8000634:	3718      	adds	r7, #24
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}

0800063a <_close>:

int _close(int file)
{
 800063a:	b480      	push	{r7}
 800063c:	b083      	sub	sp, #12
 800063e:	af00      	add	r7, sp, #0
 8000640:	6078      	str	r0, [r7, #4]
	return -1;
 8000642:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000646:	4618      	mov	r0, r3
 8000648:	370c      	adds	r7, #12
 800064a:	46bd      	mov	sp, r7
 800064c:	bc80      	pop	{r7}
 800064e:	4770      	bx	lr

08000650 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000650:	b480      	push	{r7}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
 8000658:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000660:	605a      	str	r2, [r3, #4]
	return 0;
 8000662:	2300      	movs	r3, #0
}
 8000664:	4618      	mov	r0, r3
 8000666:	370c      	adds	r7, #12
 8000668:	46bd      	mov	sp, r7
 800066a:	bc80      	pop	{r7}
 800066c:	4770      	bx	lr

0800066e <_isatty>:

int _isatty(int file)
{
 800066e:	b480      	push	{r7}
 8000670:	b083      	sub	sp, #12
 8000672:	af00      	add	r7, sp, #0
 8000674:	6078      	str	r0, [r7, #4]
	return 1;
 8000676:	2301      	movs	r3, #1
}
 8000678:	4618      	mov	r0, r3
 800067a:	370c      	adds	r7, #12
 800067c:	46bd      	mov	sp, r7
 800067e:	bc80      	pop	{r7}
 8000680:	4770      	bx	lr

08000682 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000682:	b480      	push	{r7}
 8000684:	b085      	sub	sp, #20
 8000686:	af00      	add	r7, sp, #0
 8000688:	60f8      	str	r0, [r7, #12]
 800068a:	60b9      	str	r1, [r7, #8]
 800068c:	607a      	str	r2, [r7, #4]
	return 0;
 800068e:	2300      	movs	r3, #0
}
 8000690:	4618      	mov	r0, r3
 8000692:	3714      	adds	r7, #20
 8000694:	46bd      	mov	sp, r7
 8000696:	bc80      	pop	{r7}
 8000698:	4770      	bx	lr
	...

0800069c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b086      	sub	sp, #24
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006a4:	4a14      	ldr	r2, [pc, #80]	; (80006f8 <_sbrk+0x5c>)
 80006a6:	4b15      	ldr	r3, [pc, #84]	; (80006fc <_sbrk+0x60>)
 80006a8:	1ad3      	subs	r3, r2, r3
 80006aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006ac:	697b      	ldr	r3, [r7, #20]
 80006ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006b0:	4b13      	ldr	r3, [pc, #76]	; (8000700 <_sbrk+0x64>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d102      	bne.n	80006be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006b8:	4b11      	ldr	r3, [pc, #68]	; (8000700 <_sbrk+0x64>)
 80006ba:	4a12      	ldr	r2, [pc, #72]	; (8000704 <_sbrk+0x68>)
 80006bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006be:	4b10      	ldr	r3, [pc, #64]	; (8000700 <_sbrk+0x64>)
 80006c0:	681a      	ldr	r2, [r3, #0]
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	4413      	add	r3, r2
 80006c6:	693a      	ldr	r2, [r7, #16]
 80006c8:	429a      	cmp	r2, r3
 80006ca:	d207      	bcs.n	80006dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006cc:	f000 f91a 	bl	8000904 <__errno>
 80006d0:	4603      	mov	r3, r0
 80006d2:	220c      	movs	r2, #12
 80006d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006d6:	f04f 33ff 	mov.w	r3, #4294967295
 80006da:	e009      	b.n	80006f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006dc:	4b08      	ldr	r3, [pc, #32]	; (8000700 <_sbrk+0x64>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006e2:	4b07      	ldr	r3, [pc, #28]	; (8000700 <_sbrk+0x64>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	4413      	add	r3, r2
 80006ea:	4a05      	ldr	r2, [pc, #20]	; (8000700 <_sbrk+0x64>)
 80006ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006ee:	68fb      	ldr	r3, [r7, #12]
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	3718      	adds	r7, #24
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	20020000 	.word	0x20020000
 80006fc:	00000400 	.word	0x00000400
 8000700:	20000080 	.word	0x20000080
 8000704:	200000a8 	.word	0x200000a8

08000708 <tick_increment>:
	__enable_irq();
	return current_tick_p;
}

static void tick_increment(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
	current_tick += TICK_FREQ;
 800070c:	4b04      	ldr	r3, [pc, #16]	; (8000720 <tick_increment+0x18>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	3301      	adds	r3, #1
 8000712:	4a03      	ldr	r2, [pc, #12]	; (8000720 <tick_increment+0x18>)
 8000714:	6013      	str	r3, [r2, #0]
}
 8000716:	bf00      	nop
 8000718:	46bd      	mov	sp, r7
 800071a:	bc80      	pop	{r7}
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	2000008c 	.word	0x2000008c

08000724 <timer_init>:

void timer_init(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000728:	b672      	cpsid	i
}
 800072a:	bf00      	nop
	/* Disable the  global interrupt during the running of this timer service */
	__disable_irq();
	/* Load the timer with number of clock cycles per second ; generate a tick each second */
	SysTick->LOAD = ONE_SEC_LOAD-ONE;
 800072c:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <timer_init+0x44>)
 800072e:	4a0f      	ldr	r2, [pc, #60]	; (800076c <timer_init+0x48>)
 8000730:	605a      	str	r2, [r3, #4]
	/* Clear the systick current value register */
	SysTick->VAL  = 0;
 8000732:	4b0d      	ldr	r3, [pc, #52]	; (8000768 <timer_init+0x44>)
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
	/* Select Internal Clock Source */
	SysTick->CTRL |= CTRL_CLKSRC;
 8000738:	4b0b      	ldr	r3, [pc, #44]	; (8000768 <timer_init+0x44>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a0a      	ldr	r2, [pc, #40]	; (8000768 <timer_init+0x44>)
 800073e:	f043 0304 	orr.w	r3, r3, #4
 8000742:	6013      	str	r3, [r2, #0]
	/* Enable Interrupt */
	SysTick->CTRL |= CTRL_TICKINIT;
 8000744:	4b08      	ldr	r3, [pc, #32]	; (8000768 <timer_init+0x44>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a07      	ldr	r2, [pc, #28]	; (8000768 <timer_init+0x44>)
 800074a:	f043 0302 	orr.w	r3, r3, #2
 800074e:	6013      	str	r3, [r2, #0]
	/* Enable systick */
	SysTick->CTRL |= CTRL_ENABLE;
 8000750:	4b05      	ldr	r3, [pc, #20]	; (8000768 <timer_init+0x44>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a04      	ldr	r2, [pc, #16]	; (8000768 <timer_init+0x44>)
 8000756:	f043 0301 	orr.w	r3, r3, #1
 800075a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800075c:	b662      	cpsie	i
}
 800075e:	bf00      	nop
	/* Enable Global Interrupt */
	__enable_irq();
}
 8000760:	bf00      	nop
 8000762:	46bd      	mov	sp, r7
 8000764:	bc80      	pop	{r7}
 8000766:	4770      	bx	lr
 8000768:	e000e010 	.word	0xe000e010
 800076c:	00f423ff 	.word	0x00f423ff

08000770 <SysTick_Handler>:


void SysTick_Handler(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
	tick_increment();
 8000774:	f7ff ffc8 	bl	8000708 <tick_increment>
}
 8000778:	bf00      	nop
 800077a:	bd80      	pop	{r7, pc}

0800077c <uart_init>:
 static uint16_t compute_uart_bd(uint32_t periph_clk, uint32_t baudrate);
 static void uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate);


 void uart_init(void)
 {
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
		  Configure Transfer Direction
		  Enable the UART module
	 */

	 /* Enable Clock Access to GPIOA */
	 RCC->AHB1ENR  |= GPIOA_EN;
 8000780:	4b1f      	ldr	r3, [pc, #124]	; (8000800 <uart_init+0x84>)
 8000782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000784:	4a1e      	ldr	r2, [pc, #120]	; (8000800 <uart_init+0x84>)
 8000786:	f043 0301 	orr.w	r3, r3, #1
 800078a:	6313      	str	r3, [r2, #48]	; 0x30
	 /* Set the mode of PA2 to alternate Function mode*/
	 GPIOA->MODER &= ~(GPIOA_AF_PIN4);
 800078c:	4b1d      	ldr	r3, [pc, #116]	; (8000804 <uart_init+0x88>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a1c      	ldr	r2, [pc, #112]	; (8000804 <uart_init+0x88>)
 8000792:	f023 0310 	bic.w	r3, r3, #16
 8000796:	6013      	str	r3, [r2, #0]
	 GPIOA->MODER |=  GPIOA_AF_PIN5;
 8000798:	4b1a      	ldr	r3, [pc, #104]	; (8000804 <uart_init+0x88>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a19      	ldr	r2, [pc, #100]	; (8000804 <uart_init+0x88>)
 800079e:	f043 0320 	orr.w	r3, r3, #32
 80007a2:	6013      	str	r3, [r2, #0]

	 /* Set the Alternate Function to AF7(Uart2_tx); set it according to the datasheet!  */
	 GPIOA->AFR[0] |= (GPIOA_AFR_PIN8);
 80007a4:	4b17      	ldr	r3, [pc, #92]	; (8000804 <uart_init+0x88>)
 80007a6:	6a1b      	ldr	r3, [r3, #32]
 80007a8:	4a16      	ldr	r2, [pc, #88]	; (8000804 <uart_init+0x88>)
 80007aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007ae:	6213      	str	r3, [r2, #32]
	 GPIOA->AFR[0] |= (GPIOA_AFR_PIN9);
 80007b0:	4b14      	ldr	r3, [pc, #80]	; (8000804 <uart_init+0x88>)
 80007b2:	6a1b      	ldr	r3, [r3, #32]
 80007b4:	4a13      	ldr	r2, [pc, #76]	; (8000804 <uart_init+0x88>)
 80007b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007ba:	6213      	str	r3, [r2, #32]
	 GPIOA->AFR[0] |= (GPIOA_AFR_PIN10);
 80007bc:	4b11      	ldr	r3, [pc, #68]	; (8000804 <uart_init+0x88>)
 80007be:	6a1b      	ldr	r3, [r3, #32]
 80007c0:	4a10      	ldr	r2, [pc, #64]	; (8000804 <uart_init+0x88>)
 80007c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007c6:	6213      	str	r3, [r2, #32]
	 GPIOA->AFR[0] &= ~(GPIOA_AFR_PIN11);
 80007c8:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <uart_init+0x88>)
 80007ca:	6a1b      	ldr	r3, [r3, #32]
 80007cc:	4a0d      	ldr	r2, [pc, #52]	; (8000804 <uart_init+0x88>)
 80007ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80007d2:	6213      	str	r3, [r2, #32]

	 /* Enable Clock access to UART 2 */
     RCC->APB1ENR |= UART2EN;
 80007d4:	4b0a      	ldr	r3, [pc, #40]	; (8000800 <uart_init+0x84>)
 80007d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d8:	4a09      	ldr	r2, [pc, #36]	; (8000800 <uart_init+0x84>)
 80007da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007de:	6413      	str	r3, [r2, #64]	; 0x40
	 /* Configure Baud Rate */
     uart_set_baudrate(APB1_CLK, UART_BAUDRATE);
 80007e0:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80007e4:	4808      	ldr	r0, [pc, #32]	; (8000808 <uart_init+0x8c>)
 80007e6:	f000 f825 	bl	8000834 <uart_set_baudrate>
     /* Configure Transfer Direction */
     USART2->CR1 = CR1_TE;
 80007ea:	4b08      	ldr	r3, [pc, #32]	; (800080c <uart_init+0x90>)
 80007ec:	2208      	movs	r2, #8
 80007ee:	60da      	str	r2, [r3, #12]
     /* Enable the UART module */
     USART2->CR1 |= CR1_UE;
 80007f0:	4b06      	ldr	r3, [pc, #24]	; (800080c <uart_init+0x90>)
 80007f2:	68db      	ldr	r3, [r3, #12]
 80007f4:	4a05      	ldr	r2, [pc, #20]	; (800080c <uart_init+0x90>)
 80007f6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80007fa:	60d3      	str	r3, [r2, #12]

 }
 80007fc:	bf00      	nop
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	40023800 	.word	0x40023800
 8000804:	40020000 	.word	0x40020000
 8000808:	00f42400 	.word	0x00f42400
 800080c:	40004400 	.word	0x40004400

08000810 <compute_uart_bd>:

 static uint16_t compute_uart_bd(uint32_t periph_clk, uint32_t baudrate)
 {
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	6039      	str	r1, [r7, #0]
	 return ((periph_clk + (baudrate/2U))/baudrate);
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	085a      	lsrs	r2, r3, #1
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	441a      	add	r2, r3
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	fbb2 f3f3 	udiv	r3, r2, r3
 8000828:	b29b      	uxth	r3, r3
 }
 800082a:	4618      	mov	r0, r3
 800082c:	370c      	adds	r7, #12
 800082e:	46bd      	mov	sp, r7
 8000830:	bc80      	pop	{r7}
 8000832:	4770      	bx	lr

08000834 <uart_set_baudrate>:

 static void uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate)
 {
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
 800083c:	6039      	str	r1, [r7, #0]
	 USART2->BRR = compute_uart_bd(periph_clk,baudrate);
 800083e:	6839      	ldr	r1, [r7, #0]
 8000840:	6878      	ldr	r0, [r7, #4]
 8000842:	f7ff ffe5 	bl	8000810 <compute_uart_bd>
 8000846:	4603      	mov	r3, r0
 8000848:	461a      	mov	r2, r3
 800084a:	4b03      	ldr	r3, [pc, #12]	; (8000858 <uart_set_baudrate+0x24>)
 800084c:	609a      	str	r2, [r3, #8]
 }
 800084e:	bf00      	nop
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	40004400 	.word	0x40004400

0800085c <__io_putchar>:

 int __io_putchar(int ch)
 {
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
 	uart_write(ch);
 8000864:	6878      	ldr	r0, [r7, #4]
 8000866:	f000 f805 	bl	8000874 <uart_write>
 	return ch;
 800086a:	687b      	ldr	r3, [r7, #4]
 }
 800086c:	4618      	mov	r0, r3
 800086e:	3708      	adds	r7, #8
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}

08000874 <uart_write>:

void uart_write(int ch)
 {
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
	 /* Ensure transmit data register is empty before new data can be loaded */
    while(!(USART2->SR & SR_TXE));
 800087c:	bf00      	nop
 800087e:	4b07      	ldr	r3, [pc, #28]	; (800089c <uart_write+0x28>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000886:	2b00      	cmp	r3, #0
 8000888:	d0f9      	beq.n	800087e <uart_write+0xa>
    USART2->DR = (ch & 0xFF);
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	4a03      	ldr	r2, [pc, #12]	; (800089c <uart_write+0x28>)
 800088e:	b2db      	uxtb	r3, r3
 8000890:	6053      	str	r3, [r2, #4]
 }
 8000892:	bf00      	nop
 8000894:	370c      	adds	r7, #12
 8000896:	46bd      	mov	sp, r7
 8000898:	bc80      	pop	{r7}
 800089a:	4770      	bx	lr
 800089c:	40004400 	.word	0x40004400

080008a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008a0:	480d      	ldr	r0, [pc, #52]	; (80008d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008a2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80008a4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008a8:	480c      	ldr	r0, [pc, #48]	; (80008dc <LoopForever+0x6>)
  ldr r1, =_edata
 80008aa:	490d      	ldr	r1, [pc, #52]	; (80008e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008ac:	4a0d      	ldr	r2, [pc, #52]	; (80008e4 <LoopForever+0xe>)
  movs r3, #0
 80008ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008b0:	e002      	b.n	80008b8 <LoopCopyDataInit>

080008b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008b6:	3304      	adds	r3, #4

080008b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008bc:	d3f9      	bcc.n	80008b2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008be:	4a0a      	ldr	r2, [pc, #40]	; (80008e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008c0:	4c0a      	ldr	r4, [pc, #40]	; (80008ec <LoopForever+0x16>)
  movs r3, #0
 80008c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008c4:	e001      	b.n	80008ca <LoopFillZerobss>

080008c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008c8:	3204      	adds	r2, #4

080008ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008cc:	d3fb      	bcc.n	80008c6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008ce:	f000 f81f 	bl	8000910 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008d2:	f7ff fe0f 	bl	80004f4 <main>

080008d6 <LoopForever>:

LoopForever:
    b LoopForever
 80008d6:	e7fe      	b.n	80008d6 <LoopForever>
  ldr   r0, =_estack
 80008d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008e0:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80008e4:	08001b38 	.word	0x08001b38
  ldr r2, =_sbss
 80008e8:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80008ec:	200000a4 	.word	0x200000a4

080008f0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008f0:	e7fe      	b.n	80008f0 <ADC_IRQHandler>
	...

080008f4 <calloc>:
 80008f4:	4b02      	ldr	r3, [pc, #8]	; (8000900 <calloc+0xc>)
 80008f6:	460a      	mov	r2, r1
 80008f8:	4601      	mov	r1, r0
 80008fa:	6818      	ldr	r0, [r3, #0]
 80008fc:	f000 b834 	b.w	8000968 <_calloc_r>
 8000900:	20000000 	.word	0x20000000

08000904 <__errno>:
 8000904:	4b01      	ldr	r3, [pc, #4]	; (800090c <__errno+0x8>)
 8000906:	6818      	ldr	r0, [r3, #0]
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	20000000 	.word	0x20000000

08000910 <__libc_init_array>:
 8000910:	b570      	push	{r4, r5, r6, lr}
 8000912:	4d0d      	ldr	r5, [pc, #52]	; (8000948 <__libc_init_array+0x38>)
 8000914:	4c0d      	ldr	r4, [pc, #52]	; (800094c <__libc_init_array+0x3c>)
 8000916:	1b64      	subs	r4, r4, r5
 8000918:	10a4      	asrs	r4, r4, #2
 800091a:	2600      	movs	r6, #0
 800091c:	42a6      	cmp	r6, r4
 800091e:	d109      	bne.n	8000934 <__libc_init_array+0x24>
 8000920:	4d0b      	ldr	r5, [pc, #44]	; (8000950 <__libc_init_array+0x40>)
 8000922:	4c0c      	ldr	r4, [pc, #48]	; (8000954 <__libc_init_array+0x44>)
 8000924:	f001 f852 	bl	80019cc <_init>
 8000928:	1b64      	subs	r4, r4, r5
 800092a:	10a4      	asrs	r4, r4, #2
 800092c:	2600      	movs	r6, #0
 800092e:	42a6      	cmp	r6, r4
 8000930:	d105      	bne.n	800093e <__libc_init_array+0x2e>
 8000932:	bd70      	pop	{r4, r5, r6, pc}
 8000934:	f855 3b04 	ldr.w	r3, [r5], #4
 8000938:	4798      	blx	r3
 800093a:	3601      	adds	r6, #1
 800093c:	e7ee      	b.n	800091c <__libc_init_array+0xc>
 800093e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000942:	4798      	blx	r3
 8000944:	3601      	adds	r6, #1
 8000946:	e7f2      	b.n	800092e <__libc_init_array+0x1e>
 8000948:	08001b30 	.word	0x08001b30
 800094c:	08001b30 	.word	0x08001b30
 8000950:	08001b30 	.word	0x08001b30
 8000954:	08001b34 	.word	0x08001b34

08000958 <memset>:
 8000958:	4402      	add	r2, r0
 800095a:	4603      	mov	r3, r0
 800095c:	4293      	cmp	r3, r2
 800095e:	d100      	bne.n	8000962 <memset+0xa>
 8000960:	4770      	bx	lr
 8000962:	f803 1b01 	strb.w	r1, [r3], #1
 8000966:	e7f9      	b.n	800095c <memset+0x4>

08000968 <_calloc_r>:
 8000968:	b538      	push	{r3, r4, r5, lr}
 800096a:	fb02 f501 	mul.w	r5, r2, r1
 800096e:	4629      	mov	r1, r5
 8000970:	f000 f808 	bl	8000984 <_malloc_r>
 8000974:	4604      	mov	r4, r0
 8000976:	b118      	cbz	r0, 8000980 <_calloc_r+0x18>
 8000978:	462a      	mov	r2, r5
 800097a:	2100      	movs	r1, #0
 800097c:	f7ff ffec 	bl	8000958 <memset>
 8000980:	4620      	mov	r0, r4
 8000982:	bd38      	pop	{r3, r4, r5, pc}

08000984 <_malloc_r>:
 8000984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000986:	1ccd      	adds	r5, r1, #3
 8000988:	f025 0503 	bic.w	r5, r5, #3
 800098c:	3508      	adds	r5, #8
 800098e:	2d0c      	cmp	r5, #12
 8000990:	bf38      	it	cc
 8000992:	250c      	movcc	r5, #12
 8000994:	2d00      	cmp	r5, #0
 8000996:	4606      	mov	r6, r0
 8000998:	db01      	blt.n	800099e <_malloc_r+0x1a>
 800099a:	42a9      	cmp	r1, r5
 800099c:	d903      	bls.n	80009a6 <_malloc_r+0x22>
 800099e:	230c      	movs	r3, #12
 80009a0:	6033      	str	r3, [r6, #0]
 80009a2:	2000      	movs	r0, #0
 80009a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009a6:	f000 fbd7 	bl	8001158 <__malloc_lock>
 80009aa:	4921      	ldr	r1, [pc, #132]	; (8000a30 <_malloc_r+0xac>)
 80009ac:	680a      	ldr	r2, [r1, #0]
 80009ae:	4614      	mov	r4, r2
 80009b0:	b99c      	cbnz	r4, 80009da <_malloc_r+0x56>
 80009b2:	4f20      	ldr	r7, [pc, #128]	; (8000a34 <_malloc_r+0xb0>)
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	b923      	cbnz	r3, 80009c2 <_malloc_r+0x3e>
 80009b8:	4621      	mov	r1, r4
 80009ba:	4630      	mov	r0, r6
 80009bc:	f000 f8de 	bl	8000b7c <_sbrk_r>
 80009c0:	6038      	str	r0, [r7, #0]
 80009c2:	4629      	mov	r1, r5
 80009c4:	4630      	mov	r0, r6
 80009c6:	f000 f8d9 	bl	8000b7c <_sbrk_r>
 80009ca:	1c43      	adds	r3, r0, #1
 80009cc:	d123      	bne.n	8000a16 <_malloc_r+0x92>
 80009ce:	230c      	movs	r3, #12
 80009d0:	6033      	str	r3, [r6, #0]
 80009d2:	4630      	mov	r0, r6
 80009d4:	f000 fbc6 	bl	8001164 <__malloc_unlock>
 80009d8:	e7e3      	b.n	80009a2 <_malloc_r+0x1e>
 80009da:	6823      	ldr	r3, [r4, #0]
 80009dc:	1b5b      	subs	r3, r3, r5
 80009de:	d417      	bmi.n	8000a10 <_malloc_r+0x8c>
 80009e0:	2b0b      	cmp	r3, #11
 80009e2:	d903      	bls.n	80009ec <_malloc_r+0x68>
 80009e4:	6023      	str	r3, [r4, #0]
 80009e6:	441c      	add	r4, r3
 80009e8:	6025      	str	r5, [r4, #0]
 80009ea:	e004      	b.n	80009f6 <_malloc_r+0x72>
 80009ec:	6863      	ldr	r3, [r4, #4]
 80009ee:	42a2      	cmp	r2, r4
 80009f0:	bf0c      	ite	eq
 80009f2:	600b      	streq	r3, [r1, #0]
 80009f4:	6053      	strne	r3, [r2, #4]
 80009f6:	4630      	mov	r0, r6
 80009f8:	f000 fbb4 	bl	8001164 <__malloc_unlock>
 80009fc:	f104 000b 	add.w	r0, r4, #11
 8000a00:	1d23      	adds	r3, r4, #4
 8000a02:	f020 0007 	bic.w	r0, r0, #7
 8000a06:	1ac2      	subs	r2, r0, r3
 8000a08:	d0cc      	beq.n	80009a4 <_malloc_r+0x20>
 8000a0a:	1a1b      	subs	r3, r3, r0
 8000a0c:	50a3      	str	r3, [r4, r2]
 8000a0e:	e7c9      	b.n	80009a4 <_malloc_r+0x20>
 8000a10:	4622      	mov	r2, r4
 8000a12:	6864      	ldr	r4, [r4, #4]
 8000a14:	e7cc      	b.n	80009b0 <_malloc_r+0x2c>
 8000a16:	1cc4      	adds	r4, r0, #3
 8000a18:	f024 0403 	bic.w	r4, r4, #3
 8000a1c:	42a0      	cmp	r0, r4
 8000a1e:	d0e3      	beq.n	80009e8 <_malloc_r+0x64>
 8000a20:	1a21      	subs	r1, r4, r0
 8000a22:	4630      	mov	r0, r6
 8000a24:	f000 f8aa 	bl	8000b7c <_sbrk_r>
 8000a28:	3001      	adds	r0, #1
 8000a2a:	d1dd      	bne.n	80009e8 <_malloc_r+0x64>
 8000a2c:	e7cf      	b.n	80009ce <_malloc_r+0x4a>
 8000a2e:	bf00      	nop
 8000a30:	20000084 	.word	0x20000084
 8000a34:	20000088 	.word	0x20000088

08000a38 <iprintf>:
 8000a38:	b40f      	push	{r0, r1, r2, r3}
 8000a3a:	4b0a      	ldr	r3, [pc, #40]	; (8000a64 <iprintf+0x2c>)
 8000a3c:	b513      	push	{r0, r1, r4, lr}
 8000a3e:	681c      	ldr	r4, [r3, #0]
 8000a40:	b124      	cbz	r4, 8000a4c <iprintf+0x14>
 8000a42:	69a3      	ldr	r3, [r4, #24]
 8000a44:	b913      	cbnz	r3, 8000a4c <iprintf+0x14>
 8000a46:	4620      	mov	r0, r4
 8000a48:	f000 fa82 	bl	8000f50 <__sinit>
 8000a4c:	ab05      	add	r3, sp, #20
 8000a4e:	9a04      	ldr	r2, [sp, #16]
 8000a50:	68a1      	ldr	r1, [r4, #8]
 8000a52:	9301      	str	r3, [sp, #4]
 8000a54:	4620      	mov	r0, r4
 8000a56:	f000 fc01 	bl	800125c <_vfiprintf_r>
 8000a5a:	b002      	add	sp, #8
 8000a5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a60:	b004      	add	sp, #16
 8000a62:	4770      	bx	lr
 8000a64:	20000000 	.word	0x20000000

08000a68 <putchar>:
 8000a68:	b538      	push	{r3, r4, r5, lr}
 8000a6a:	4b08      	ldr	r3, [pc, #32]	; (8000a8c <putchar+0x24>)
 8000a6c:	681c      	ldr	r4, [r3, #0]
 8000a6e:	4605      	mov	r5, r0
 8000a70:	b124      	cbz	r4, 8000a7c <putchar+0x14>
 8000a72:	69a3      	ldr	r3, [r4, #24]
 8000a74:	b913      	cbnz	r3, 8000a7c <putchar+0x14>
 8000a76:	4620      	mov	r0, r4
 8000a78:	f000 fa6a 	bl	8000f50 <__sinit>
 8000a7c:	68a2      	ldr	r2, [r4, #8]
 8000a7e:	4629      	mov	r1, r5
 8000a80:	4620      	mov	r0, r4
 8000a82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000a86:	f000 bead 	b.w	80017e4 <_putc_r>
 8000a8a:	bf00      	nop
 8000a8c:	20000000 	.word	0x20000000

08000a90 <_puts_r>:
 8000a90:	b570      	push	{r4, r5, r6, lr}
 8000a92:	460e      	mov	r6, r1
 8000a94:	4605      	mov	r5, r0
 8000a96:	b118      	cbz	r0, 8000aa0 <_puts_r+0x10>
 8000a98:	6983      	ldr	r3, [r0, #24]
 8000a9a:	b90b      	cbnz	r3, 8000aa0 <_puts_r+0x10>
 8000a9c:	f000 fa58 	bl	8000f50 <__sinit>
 8000aa0:	69ab      	ldr	r3, [r5, #24]
 8000aa2:	68ac      	ldr	r4, [r5, #8]
 8000aa4:	b913      	cbnz	r3, 8000aac <_puts_r+0x1c>
 8000aa6:	4628      	mov	r0, r5
 8000aa8:	f000 fa52 	bl	8000f50 <__sinit>
 8000aac:	4b2c      	ldr	r3, [pc, #176]	; (8000b60 <_puts_r+0xd0>)
 8000aae:	429c      	cmp	r4, r3
 8000ab0:	d120      	bne.n	8000af4 <_puts_r+0x64>
 8000ab2:	686c      	ldr	r4, [r5, #4]
 8000ab4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000ab6:	07db      	lsls	r3, r3, #31
 8000ab8:	d405      	bmi.n	8000ac6 <_puts_r+0x36>
 8000aba:	89a3      	ldrh	r3, [r4, #12]
 8000abc:	0598      	lsls	r0, r3, #22
 8000abe:	d402      	bmi.n	8000ac6 <_puts_r+0x36>
 8000ac0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000ac2:	f000 fae3 	bl	800108c <__retarget_lock_acquire_recursive>
 8000ac6:	89a3      	ldrh	r3, [r4, #12]
 8000ac8:	0719      	lsls	r1, r3, #28
 8000aca:	d51d      	bpl.n	8000b08 <_puts_r+0x78>
 8000acc:	6923      	ldr	r3, [r4, #16]
 8000ace:	b1db      	cbz	r3, 8000b08 <_puts_r+0x78>
 8000ad0:	3e01      	subs	r6, #1
 8000ad2:	68a3      	ldr	r3, [r4, #8]
 8000ad4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000ad8:	3b01      	subs	r3, #1
 8000ada:	60a3      	str	r3, [r4, #8]
 8000adc:	bb39      	cbnz	r1, 8000b2e <_puts_r+0x9e>
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	da38      	bge.n	8000b54 <_puts_r+0xc4>
 8000ae2:	4622      	mov	r2, r4
 8000ae4:	210a      	movs	r1, #10
 8000ae6:	4628      	mov	r0, r5
 8000ae8:	f000 f858 	bl	8000b9c <__swbuf_r>
 8000aec:	3001      	adds	r0, #1
 8000aee:	d011      	beq.n	8000b14 <_puts_r+0x84>
 8000af0:	250a      	movs	r5, #10
 8000af2:	e011      	b.n	8000b18 <_puts_r+0x88>
 8000af4:	4b1b      	ldr	r3, [pc, #108]	; (8000b64 <_puts_r+0xd4>)
 8000af6:	429c      	cmp	r4, r3
 8000af8:	d101      	bne.n	8000afe <_puts_r+0x6e>
 8000afa:	68ac      	ldr	r4, [r5, #8]
 8000afc:	e7da      	b.n	8000ab4 <_puts_r+0x24>
 8000afe:	4b1a      	ldr	r3, [pc, #104]	; (8000b68 <_puts_r+0xd8>)
 8000b00:	429c      	cmp	r4, r3
 8000b02:	bf08      	it	eq
 8000b04:	68ec      	ldreq	r4, [r5, #12]
 8000b06:	e7d5      	b.n	8000ab4 <_puts_r+0x24>
 8000b08:	4621      	mov	r1, r4
 8000b0a:	4628      	mov	r0, r5
 8000b0c:	f000 f898 	bl	8000c40 <__swsetup_r>
 8000b10:	2800      	cmp	r0, #0
 8000b12:	d0dd      	beq.n	8000ad0 <_puts_r+0x40>
 8000b14:	f04f 35ff 	mov.w	r5, #4294967295
 8000b18:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000b1a:	07da      	lsls	r2, r3, #31
 8000b1c:	d405      	bmi.n	8000b2a <_puts_r+0x9a>
 8000b1e:	89a3      	ldrh	r3, [r4, #12]
 8000b20:	059b      	lsls	r3, r3, #22
 8000b22:	d402      	bmi.n	8000b2a <_puts_r+0x9a>
 8000b24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000b26:	f000 fab2 	bl	800108e <__retarget_lock_release_recursive>
 8000b2a:	4628      	mov	r0, r5
 8000b2c:	bd70      	pop	{r4, r5, r6, pc}
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	da04      	bge.n	8000b3c <_puts_r+0xac>
 8000b32:	69a2      	ldr	r2, [r4, #24]
 8000b34:	429a      	cmp	r2, r3
 8000b36:	dc06      	bgt.n	8000b46 <_puts_r+0xb6>
 8000b38:	290a      	cmp	r1, #10
 8000b3a:	d004      	beq.n	8000b46 <_puts_r+0xb6>
 8000b3c:	6823      	ldr	r3, [r4, #0]
 8000b3e:	1c5a      	adds	r2, r3, #1
 8000b40:	6022      	str	r2, [r4, #0]
 8000b42:	7019      	strb	r1, [r3, #0]
 8000b44:	e7c5      	b.n	8000ad2 <_puts_r+0x42>
 8000b46:	4622      	mov	r2, r4
 8000b48:	4628      	mov	r0, r5
 8000b4a:	f000 f827 	bl	8000b9c <__swbuf_r>
 8000b4e:	3001      	adds	r0, #1
 8000b50:	d1bf      	bne.n	8000ad2 <_puts_r+0x42>
 8000b52:	e7df      	b.n	8000b14 <_puts_r+0x84>
 8000b54:	6823      	ldr	r3, [r4, #0]
 8000b56:	250a      	movs	r5, #10
 8000b58:	1c5a      	adds	r2, r3, #1
 8000b5a:	6022      	str	r2, [r4, #0]
 8000b5c:	701d      	strb	r5, [r3, #0]
 8000b5e:	e7db      	b.n	8000b18 <_puts_r+0x88>
 8000b60:	08001abc 	.word	0x08001abc
 8000b64:	08001adc 	.word	0x08001adc
 8000b68:	08001a9c 	.word	0x08001a9c

08000b6c <puts>:
 8000b6c:	4b02      	ldr	r3, [pc, #8]	; (8000b78 <puts+0xc>)
 8000b6e:	4601      	mov	r1, r0
 8000b70:	6818      	ldr	r0, [r3, #0]
 8000b72:	f7ff bf8d 	b.w	8000a90 <_puts_r>
 8000b76:	bf00      	nop
 8000b78:	20000000 	.word	0x20000000

08000b7c <_sbrk_r>:
 8000b7c:	b538      	push	{r3, r4, r5, lr}
 8000b7e:	4d06      	ldr	r5, [pc, #24]	; (8000b98 <_sbrk_r+0x1c>)
 8000b80:	2300      	movs	r3, #0
 8000b82:	4604      	mov	r4, r0
 8000b84:	4608      	mov	r0, r1
 8000b86:	602b      	str	r3, [r5, #0]
 8000b88:	f7ff fd88 	bl	800069c <_sbrk>
 8000b8c:	1c43      	adds	r3, r0, #1
 8000b8e:	d102      	bne.n	8000b96 <_sbrk_r+0x1a>
 8000b90:	682b      	ldr	r3, [r5, #0]
 8000b92:	b103      	cbz	r3, 8000b96 <_sbrk_r+0x1a>
 8000b94:	6023      	str	r3, [r4, #0]
 8000b96:	bd38      	pop	{r3, r4, r5, pc}
 8000b98:	200000a0 	.word	0x200000a0

08000b9c <__swbuf_r>:
 8000b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b9e:	460e      	mov	r6, r1
 8000ba0:	4614      	mov	r4, r2
 8000ba2:	4605      	mov	r5, r0
 8000ba4:	b118      	cbz	r0, 8000bae <__swbuf_r+0x12>
 8000ba6:	6983      	ldr	r3, [r0, #24]
 8000ba8:	b90b      	cbnz	r3, 8000bae <__swbuf_r+0x12>
 8000baa:	f000 f9d1 	bl	8000f50 <__sinit>
 8000bae:	4b21      	ldr	r3, [pc, #132]	; (8000c34 <__swbuf_r+0x98>)
 8000bb0:	429c      	cmp	r4, r3
 8000bb2:	d12b      	bne.n	8000c0c <__swbuf_r+0x70>
 8000bb4:	686c      	ldr	r4, [r5, #4]
 8000bb6:	69a3      	ldr	r3, [r4, #24]
 8000bb8:	60a3      	str	r3, [r4, #8]
 8000bba:	89a3      	ldrh	r3, [r4, #12]
 8000bbc:	071a      	lsls	r2, r3, #28
 8000bbe:	d52f      	bpl.n	8000c20 <__swbuf_r+0x84>
 8000bc0:	6923      	ldr	r3, [r4, #16]
 8000bc2:	b36b      	cbz	r3, 8000c20 <__swbuf_r+0x84>
 8000bc4:	6923      	ldr	r3, [r4, #16]
 8000bc6:	6820      	ldr	r0, [r4, #0]
 8000bc8:	1ac0      	subs	r0, r0, r3
 8000bca:	6963      	ldr	r3, [r4, #20]
 8000bcc:	b2f6      	uxtb	r6, r6
 8000bce:	4283      	cmp	r3, r0
 8000bd0:	4637      	mov	r7, r6
 8000bd2:	dc04      	bgt.n	8000bde <__swbuf_r+0x42>
 8000bd4:	4621      	mov	r1, r4
 8000bd6:	4628      	mov	r0, r5
 8000bd8:	f000 f926 	bl	8000e28 <_fflush_r>
 8000bdc:	bb30      	cbnz	r0, 8000c2c <__swbuf_r+0x90>
 8000bde:	68a3      	ldr	r3, [r4, #8]
 8000be0:	3b01      	subs	r3, #1
 8000be2:	60a3      	str	r3, [r4, #8]
 8000be4:	6823      	ldr	r3, [r4, #0]
 8000be6:	1c5a      	adds	r2, r3, #1
 8000be8:	6022      	str	r2, [r4, #0]
 8000bea:	701e      	strb	r6, [r3, #0]
 8000bec:	6963      	ldr	r3, [r4, #20]
 8000bee:	3001      	adds	r0, #1
 8000bf0:	4283      	cmp	r3, r0
 8000bf2:	d004      	beq.n	8000bfe <__swbuf_r+0x62>
 8000bf4:	89a3      	ldrh	r3, [r4, #12]
 8000bf6:	07db      	lsls	r3, r3, #31
 8000bf8:	d506      	bpl.n	8000c08 <__swbuf_r+0x6c>
 8000bfa:	2e0a      	cmp	r6, #10
 8000bfc:	d104      	bne.n	8000c08 <__swbuf_r+0x6c>
 8000bfe:	4621      	mov	r1, r4
 8000c00:	4628      	mov	r0, r5
 8000c02:	f000 f911 	bl	8000e28 <_fflush_r>
 8000c06:	b988      	cbnz	r0, 8000c2c <__swbuf_r+0x90>
 8000c08:	4638      	mov	r0, r7
 8000c0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c0c:	4b0a      	ldr	r3, [pc, #40]	; (8000c38 <__swbuf_r+0x9c>)
 8000c0e:	429c      	cmp	r4, r3
 8000c10:	d101      	bne.n	8000c16 <__swbuf_r+0x7a>
 8000c12:	68ac      	ldr	r4, [r5, #8]
 8000c14:	e7cf      	b.n	8000bb6 <__swbuf_r+0x1a>
 8000c16:	4b09      	ldr	r3, [pc, #36]	; (8000c3c <__swbuf_r+0xa0>)
 8000c18:	429c      	cmp	r4, r3
 8000c1a:	bf08      	it	eq
 8000c1c:	68ec      	ldreq	r4, [r5, #12]
 8000c1e:	e7ca      	b.n	8000bb6 <__swbuf_r+0x1a>
 8000c20:	4621      	mov	r1, r4
 8000c22:	4628      	mov	r0, r5
 8000c24:	f000 f80c 	bl	8000c40 <__swsetup_r>
 8000c28:	2800      	cmp	r0, #0
 8000c2a:	d0cb      	beq.n	8000bc4 <__swbuf_r+0x28>
 8000c2c:	f04f 37ff 	mov.w	r7, #4294967295
 8000c30:	e7ea      	b.n	8000c08 <__swbuf_r+0x6c>
 8000c32:	bf00      	nop
 8000c34:	08001abc 	.word	0x08001abc
 8000c38:	08001adc 	.word	0x08001adc
 8000c3c:	08001a9c 	.word	0x08001a9c

08000c40 <__swsetup_r>:
 8000c40:	4b32      	ldr	r3, [pc, #200]	; (8000d0c <__swsetup_r+0xcc>)
 8000c42:	b570      	push	{r4, r5, r6, lr}
 8000c44:	681d      	ldr	r5, [r3, #0]
 8000c46:	4606      	mov	r6, r0
 8000c48:	460c      	mov	r4, r1
 8000c4a:	b125      	cbz	r5, 8000c56 <__swsetup_r+0x16>
 8000c4c:	69ab      	ldr	r3, [r5, #24]
 8000c4e:	b913      	cbnz	r3, 8000c56 <__swsetup_r+0x16>
 8000c50:	4628      	mov	r0, r5
 8000c52:	f000 f97d 	bl	8000f50 <__sinit>
 8000c56:	4b2e      	ldr	r3, [pc, #184]	; (8000d10 <__swsetup_r+0xd0>)
 8000c58:	429c      	cmp	r4, r3
 8000c5a:	d10f      	bne.n	8000c7c <__swsetup_r+0x3c>
 8000c5c:	686c      	ldr	r4, [r5, #4]
 8000c5e:	89a3      	ldrh	r3, [r4, #12]
 8000c60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000c64:	0719      	lsls	r1, r3, #28
 8000c66:	d42c      	bmi.n	8000cc2 <__swsetup_r+0x82>
 8000c68:	06dd      	lsls	r5, r3, #27
 8000c6a:	d411      	bmi.n	8000c90 <__swsetup_r+0x50>
 8000c6c:	2309      	movs	r3, #9
 8000c6e:	6033      	str	r3, [r6, #0]
 8000c70:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000c74:	81a3      	strh	r3, [r4, #12]
 8000c76:	f04f 30ff 	mov.w	r0, #4294967295
 8000c7a:	e03e      	b.n	8000cfa <__swsetup_r+0xba>
 8000c7c:	4b25      	ldr	r3, [pc, #148]	; (8000d14 <__swsetup_r+0xd4>)
 8000c7e:	429c      	cmp	r4, r3
 8000c80:	d101      	bne.n	8000c86 <__swsetup_r+0x46>
 8000c82:	68ac      	ldr	r4, [r5, #8]
 8000c84:	e7eb      	b.n	8000c5e <__swsetup_r+0x1e>
 8000c86:	4b24      	ldr	r3, [pc, #144]	; (8000d18 <__swsetup_r+0xd8>)
 8000c88:	429c      	cmp	r4, r3
 8000c8a:	bf08      	it	eq
 8000c8c:	68ec      	ldreq	r4, [r5, #12]
 8000c8e:	e7e6      	b.n	8000c5e <__swsetup_r+0x1e>
 8000c90:	0758      	lsls	r0, r3, #29
 8000c92:	d512      	bpl.n	8000cba <__swsetup_r+0x7a>
 8000c94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000c96:	b141      	cbz	r1, 8000caa <__swsetup_r+0x6a>
 8000c98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000c9c:	4299      	cmp	r1, r3
 8000c9e:	d002      	beq.n	8000ca6 <__swsetup_r+0x66>
 8000ca0:	4630      	mov	r0, r6
 8000ca2:	f000 fa65 	bl	8001170 <_free_r>
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	6363      	str	r3, [r4, #52]	; 0x34
 8000caa:	89a3      	ldrh	r3, [r4, #12]
 8000cac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000cb0:	81a3      	strh	r3, [r4, #12]
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	6063      	str	r3, [r4, #4]
 8000cb6:	6923      	ldr	r3, [r4, #16]
 8000cb8:	6023      	str	r3, [r4, #0]
 8000cba:	89a3      	ldrh	r3, [r4, #12]
 8000cbc:	f043 0308 	orr.w	r3, r3, #8
 8000cc0:	81a3      	strh	r3, [r4, #12]
 8000cc2:	6923      	ldr	r3, [r4, #16]
 8000cc4:	b94b      	cbnz	r3, 8000cda <__swsetup_r+0x9a>
 8000cc6:	89a3      	ldrh	r3, [r4, #12]
 8000cc8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000ccc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000cd0:	d003      	beq.n	8000cda <__swsetup_r+0x9a>
 8000cd2:	4621      	mov	r1, r4
 8000cd4:	4630      	mov	r0, r6
 8000cd6:	f000 f9ff 	bl	80010d8 <__smakebuf_r>
 8000cda:	89a0      	ldrh	r0, [r4, #12]
 8000cdc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000ce0:	f010 0301 	ands.w	r3, r0, #1
 8000ce4:	d00a      	beq.n	8000cfc <__swsetup_r+0xbc>
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60a3      	str	r3, [r4, #8]
 8000cea:	6963      	ldr	r3, [r4, #20]
 8000cec:	425b      	negs	r3, r3
 8000cee:	61a3      	str	r3, [r4, #24]
 8000cf0:	6923      	ldr	r3, [r4, #16]
 8000cf2:	b943      	cbnz	r3, 8000d06 <__swsetup_r+0xc6>
 8000cf4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000cf8:	d1ba      	bne.n	8000c70 <__swsetup_r+0x30>
 8000cfa:	bd70      	pop	{r4, r5, r6, pc}
 8000cfc:	0781      	lsls	r1, r0, #30
 8000cfe:	bf58      	it	pl
 8000d00:	6963      	ldrpl	r3, [r4, #20]
 8000d02:	60a3      	str	r3, [r4, #8]
 8000d04:	e7f4      	b.n	8000cf0 <__swsetup_r+0xb0>
 8000d06:	2000      	movs	r0, #0
 8000d08:	e7f7      	b.n	8000cfa <__swsetup_r+0xba>
 8000d0a:	bf00      	nop
 8000d0c:	20000000 	.word	0x20000000
 8000d10:	08001abc 	.word	0x08001abc
 8000d14:	08001adc 	.word	0x08001adc
 8000d18:	08001a9c 	.word	0x08001a9c

08000d1c <__sflush_r>:
 8000d1c:	898a      	ldrh	r2, [r1, #12]
 8000d1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d22:	4605      	mov	r5, r0
 8000d24:	0710      	lsls	r0, r2, #28
 8000d26:	460c      	mov	r4, r1
 8000d28:	d458      	bmi.n	8000ddc <__sflush_r+0xc0>
 8000d2a:	684b      	ldr	r3, [r1, #4]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	dc05      	bgt.n	8000d3c <__sflush_r+0x20>
 8000d30:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	dc02      	bgt.n	8000d3c <__sflush_r+0x20>
 8000d36:	2000      	movs	r0, #0
 8000d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000d3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d0f9      	beq.n	8000d36 <__sflush_r+0x1a>
 8000d42:	2300      	movs	r3, #0
 8000d44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000d48:	682f      	ldr	r7, [r5, #0]
 8000d4a:	602b      	str	r3, [r5, #0]
 8000d4c:	d032      	beq.n	8000db4 <__sflush_r+0x98>
 8000d4e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000d50:	89a3      	ldrh	r3, [r4, #12]
 8000d52:	075a      	lsls	r2, r3, #29
 8000d54:	d505      	bpl.n	8000d62 <__sflush_r+0x46>
 8000d56:	6863      	ldr	r3, [r4, #4]
 8000d58:	1ac0      	subs	r0, r0, r3
 8000d5a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000d5c:	b10b      	cbz	r3, 8000d62 <__sflush_r+0x46>
 8000d5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000d60:	1ac0      	subs	r0, r0, r3
 8000d62:	2300      	movs	r3, #0
 8000d64:	4602      	mov	r2, r0
 8000d66:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000d68:	6a21      	ldr	r1, [r4, #32]
 8000d6a:	4628      	mov	r0, r5
 8000d6c:	47b0      	blx	r6
 8000d6e:	1c43      	adds	r3, r0, #1
 8000d70:	89a3      	ldrh	r3, [r4, #12]
 8000d72:	d106      	bne.n	8000d82 <__sflush_r+0x66>
 8000d74:	6829      	ldr	r1, [r5, #0]
 8000d76:	291d      	cmp	r1, #29
 8000d78:	d82c      	bhi.n	8000dd4 <__sflush_r+0xb8>
 8000d7a:	4a2a      	ldr	r2, [pc, #168]	; (8000e24 <__sflush_r+0x108>)
 8000d7c:	40ca      	lsrs	r2, r1
 8000d7e:	07d6      	lsls	r6, r2, #31
 8000d80:	d528      	bpl.n	8000dd4 <__sflush_r+0xb8>
 8000d82:	2200      	movs	r2, #0
 8000d84:	6062      	str	r2, [r4, #4]
 8000d86:	04d9      	lsls	r1, r3, #19
 8000d88:	6922      	ldr	r2, [r4, #16]
 8000d8a:	6022      	str	r2, [r4, #0]
 8000d8c:	d504      	bpl.n	8000d98 <__sflush_r+0x7c>
 8000d8e:	1c42      	adds	r2, r0, #1
 8000d90:	d101      	bne.n	8000d96 <__sflush_r+0x7a>
 8000d92:	682b      	ldr	r3, [r5, #0]
 8000d94:	b903      	cbnz	r3, 8000d98 <__sflush_r+0x7c>
 8000d96:	6560      	str	r0, [r4, #84]	; 0x54
 8000d98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000d9a:	602f      	str	r7, [r5, #0]
 8000d9c:	2900      	cmp	r1, #0
 8000d9e:	d0ca      	beq.n	8000d36 <__sflush_r+0x1a>
 8000da0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000da4:	4299      	cmp	r1, r3
 8000da6:	d002      	beq.n	8000dae <__sflush_r+0x92>
 8000da8:	4628      	mov	r0, r5
 8000daa:	f000 f9e1 	bl	8001170 <_free_r>
 8000dae:	2000      	movs	r0, #0
 8000db0:	6360      	str	r0, [r4, #52]	; 0x34
 8000db2:	e7c1      	b.n	8000d38 <__sflush_r+0x1c>
 8000db4:	6a21      	ldr	r1, [r4, #32]
 8000db6:	2301      	movs	r3, #1
 8000db8:	4628      	mov	r0, r5
 8000dba:	47b0      	blx	r6
 8000dbc:	1c41      	adds	r1, r0, #1
 8000dbe:	d1c7      	bne.n	8000d50 <__sflush_r+0x34>
 8000dc0:	682b      	ldr	r3, [r5, #0]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d0c4      	beq.n	8000d50 <__sflush_r+0x34>
 8000dc6:	2b1d      	cmp	r3, #29
 8000dc8:	d001      	beq.n	8000dce <__sflush_r+0xb2>
 8000dca:	2b16      	cmp	r3, #22
 8000dcc:	d101      	bne.n	8000dd2 <__sflush_r+0xb6>
 8000dce:	602f      	str	r7, [r5, #0]
 8000dd0:	e7b1      	b.n	8000d36 <__sflush_r+0x1a>
 8000dd2:	89a3      	ldrh	r3, [r4, #12]
 8000dd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dd8:	81a3      	strh	r3, [r4, #12]
 8000dda:	e7ad      	b.n	8000d38 <__sflush_r+0x1c>
 8000ddc:	690f      	ldr	r7, [r1, #16]
 8000dde:	2f00      	cmp	r7, #0
 8000de0:	d0a9      	beq.n	8000d36 <__sflush_r+0x1a>
 8000de2:	0793      	lsls	r3, r2, #30
 8000de4:	680e      	ldr	r6, [r1, #0]
 8000de6:	bf08      	it	eq
 8000de8:	694b      	ldreq	r3, [r1, #20]
 8000dea:	600f      	str	r7, [r1, #0]
 8000dec:	bf18      	it	ne
 8000dee:	2300      	movne	r3, #0
 8000df0:	eba6 0807 	sub.w	r8, r6, r7
 8000df4:	608b      	str	r3, [r1, #8]
 8000df6:	f1b8 0f00 	cmp.w	r8, #0
 8000dfa:	dd9c      	ble.n	8000d36 <__sflush_r+0x1a>
 8000dfc:	6a21      	ldr	r1, [r4, #32]
 8000dfe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000e00:	4643      	mov	r3, r8
 8000e02:	463a      	mov	r2, r7
 8000e04:	4628      	mov	r0, r5
 8000e06:	47b0      	blx	r6
 8000e08:	2800      	cmp	r0, #0
 8000e0a:	dc06      	bgt.n	8000e1a <__sflush_r+0xfe>
 8000e0c:	89a3      	ldrh	r3, [r4, #12]
 8000e0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e12:	81a3      	strh	r3, [r4, #12]
 8000e14:	f04f 30ff 	mov.w	r0, #4294967295
 8000e18:	e78e      	b.n	8000d38 <__sflush_r+0x1c>
 8000e1a:	4407      	add	r7, r0
 8000e1c:	eba8 0800 	sub.w	r8, r8, r0
 8000e20:	e7e9      	b.n	8000df6 <__sflush_r+0xda>
 8000e22:	bf00      	nop
 8000e24:	20400001 	.word	0x20400001

08000e28 <_fflush_r>:
 8000e28:	b538      	push	{r3, r4, r5, lr}
 8000e2a:	690b      	ldr	r3, [r1, #16]
 8000e2c:	4605      	mov	r5, r0
 8000e2e:	460c      	mov	r4, r1
 8000e30:	b913      	cbnz	r3, 8000e38 <_fflush_r+0x10>
 8000e32:	2500      	movs	r5, #0
 8000e34:	4628      	mov	r0, r5
 8000e36:	bd38      	pop	{r3, r4, r5, pc}
 8000e38:	b118      	cbz	r0, 8000e42 <_fflush_r+0x1a>
 8000e3a:	6983      	ldr	r3, [r0, #24]
 8000e3c:	b90b      	cbnz	r3, 8000e42 <_fflush_r+0x1a>
 8000e3e:	f000 f887 	bl	8000f50 <__sinit>
 8000e42:	4b14      	ldr	r3, [pc, #80]	; (8000e94 <_fflush_r+0x6c>)
 8000e44:	429c      	cmp	r4, r3
 8000e46:	d11b      	bne.n	8000e80 <_fflush_r+0x58>
 8000e48:	686c      	ldr	r4, [r5, #4]
 8000e4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d0ef      	beq.n	8000e32 <_fflush_r+0xa>
 8000e52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000e54:	07d0      	lsls	r0, r2, #31
 8000e56:	d404      	bmi.n	8000e62 <_fflush_r+0x3a>
 8000e58:	0599      	lsls	r1, r3, #22
 8000e5a:	d402      	bmi.n	8000e62 <_fflush_r+0x3a>
 8000e5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000e5e:	f000 f915 	bl	800108c <__retarget_lock_acquire_recursive>
 8000e62:	4628      	mov	r0, r5
 8000e64:	4621      	mov	r1, r4
 8000e66:	f7ff ff59 	bl	8000d1c <__sflush_r>
 8000e6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000e6c:	07da      	lsls	r2, r3, #31
 8000e6e:	4605      	mov	r5, r0
 8000e70:	d4e0      	bmi.n	8000e34 <_fflush_r+0xc>
 8000e72:	89a3      	ldrh	r3, [r4, #12]
 8000e74:	059b      	lsls	r3, r3, #22
 8000e76:	d4dd      	bmi.n	8000e34 <_fflush_r+0xc>
 8000e78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000e7a:	f000 f908 	bl	800108e <__retarget_lock_release_recursive>
 8000e7e:	e7d9      	b.n	8000e34 <_fflush_r+0xc>
 8000e80:	4b05      	ldr	r3, [pc, #20]	; (8000e98 <_fflush_r+0x70>)
 8000e82:	429c      	cmp	r4, r3
 8000e84:	d101      	bne.n	8000e8a <_fflush_r+0x62>
 8000e86:	68ac      	ldr	r4, [r5, #8]
 8000e88:	e7df      	b.n	8000e4a <_fflush_r+0x22>
 8000e8a:	4b04      	ldr	r3, [pc, #16]	; (8000e9c <_fflush_r+0x74>)
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	bf08      	it	eq
 8000e90:	68ec      	ldreq	r4, [r5, #12]
 8000e92:	e7da      	b.n	8000e4a <_fflush_r+0x22>
 8000e94:	08001abc 	.word	0x08001abc
 8000e98:	08001adc 	.word	0x08001adc
 8000e9c:	08001a9c 	.word	0x08001a9c

08000ea0 <std>:
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	b510      	push	{r4, lr}
 8000ea4:	4604      	mov	r4, r0
 8000ea6:	e9c0 3300 	strd	r3, r3, [r0]
 8000eaa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000eae:	6083      	str	r3, [r0, #8]
 8000eb0:	8181      	strh	r1, [r0, #12]
 8000eb2:	6643      	str	r3, [r0, #100]	; 0x64
 8000eb4:	81c2      	strh	r2, [r0, #14]
 8000eb6:	6183      	str	r3, [r0, #24]
 8000eb8:	4619      	mov	r1, r3
 8000eba:	2208      	movs	r2, #8
 8000ebc:	305c      	adds	r0, #92	; 0x5c
 8000ebe:	f7ff fd4b 	bl	8000958 <memset>
 8000ec2:	4b05      	ldr	r3, [pc, #20]	; (8000ed8 <std+0x38>)
 8000ec4:	6263      	str	r3, [r4, #36]	; 0x24
 8000ec6:	4b05      	ldr	r3, [pc, #20]	; (8000edc <std+0x3c>)
 8000ec8:	62a3      	str	r3, [r4, #40]	; 0x28
 8000eca:	4b05      	ldr	r3, [pc, #20]	; (8000ee0 <std+0x40>)
 8000ecc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000ece:	4b05      	ldr	r3, [pc, #20]	; (8000ee4 <std+0x44>)
 8000ed0:	6224      	str	r4, [r4, #32]
 8000ed2:	6323      	str	r3, [r4, #48]	; 0x30
 8000ed4:	bd10      	pop	{r4, pc}
 8000ed6:	bf00      	nop
 8000ed8:	08001875 	.word	0x08001875
 8000edc:	08001897 	.word	0x08001897
 8000ee0:	080018cf 	.word	0x080018cf
 8000ee4:	080018f3 	.word	0x080018f3

08000ee8 <_cleanup_r>:
 8000ee8:	4901      	ldr	r1, [pc, #4]	; (8000ef0 <_cleanup_r+0x8>)
 8000eea:	f000 b8af 	b.w	800104c <_fwalk_reent>
 8000eee:	bf00      	nop
 8000ef0:	08000e29 	.word	0x08000e29

08000ef4 <__sfmoreglue>:
 8000ef4:	b570      	push	{r4, r5, r6, lr}
 8000ef6:	1e4a      	subs	r2, r1, #1
 8000ef8:	2568      	movs	r5, #104	; 0x68
 8000efa:	4355      	muls	r5, r2
 8000efc:	460e      	mov	r6, r1
 8000efe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000f02:	f7ff fd3f 	bl	8000984 <_malloc_r>
 8000f06:	4604      	mov	r4, r0
 8000f08:	b140      	cbz	r0, 8000f1c <__sfmoreglue+0x28>
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	e9c0 1600 	strd	r1, r6, [r0]
 8000f10:	300c      	adds	r0, #12
 8000f12:	60a0      	str	r0, [r4, #8]
 8000f14:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000f18:	f7ff fd1e 	bl	8000958 <memset>
 8000f1c:	4620      	mov	r0, r4
 8000f1e:	bd70      	pop	{r4, r5, r6, pc}

08000f20 <__sfp_lock_acquire>:
 8000f20:	4801      	ldr	r0, [pc, #4]	; (8000f28 <__sfp_lock_acquire+0x8>)
 8000f22:	f000 b8b3 	b.w	800108c <__retarget_lock_acquire_recursive>
 8000f26:	bf00      	nop
 8000f28:	2000009c 	.word	0x2000009c

08000f2c <__sfp_lock_release>:
 8000f2c:	4801      	ldr	r0, [pc, #4]	; (8000f34 <__sfp_lock_release+0x8>)
 8000f2e:	f000 b8ae 	b.w	800108e <__retarget_lock_release_recursive>
 8000f32:	bf00      	nop
 8000f34:	2000009c 	.word	0x2000009c

08000f38 <__sinit_lock_acquire>:
 8000f38:	4801      	ldr	r0, [pc, #4]	; (8000f40 <__sinit_lock_acquire+0x8>)
 8000f3a:	f000 b8a7 	b.w	800108c <__retarget_lock_acquire_recursive>
 8000f3e:	bf00      	nop
 8000f40:	20000097 	.word	0x20000097

08000f44 <__sinit_lock_release>:
 8000f44:	4801      	ldr	r0, [pc, #4]	; (8000f4c <__sinit_lock_release+0x8>)
 8000f46:	f000 b8a2 	b.w	800108e <__retarget_lock_release_recursive>
 8000f4a:	bf00      	nop
 8000f4c:	20000097 	.word	0x20000097

08000f50 <__sinit>:
 8000f50:	b510      	push	{r4, lr}
 8000f52:	4604      	mov	r4, r0
 8000f54:	f7ff fff0 	bl	8000f38 <__sinit_lock_acquire>
 8000f58:	69a3      	ldr	r3, [r4, #24]
 8000f5a:	b11b      	cbz	r3, 8000f64 <__sinit+0x14>
 8000f5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000f60:	f7ff bff0 	b.w	8000f44 <__sinit_lock_release>
 8000f64:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000f68:	6523      	str	r3, [r4, #80]	; 0x50
 8000f6a:	4b13      	ldr	r3, [pc, #76]	; (8000fb8 <__sinit+0x68>)
 8000f6c:	4a13      	ldr	r2, [pc, #76]	; (8000fbc <__sinit+0x6c>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	62a2      	str	r2, [r4, #40]	; 0x28
 8000f72:	42a3      	cmp	r3, r4
 8000f74:	bf04      	itt	eq
 8000f76:	2301      	moveq	r3, #1
 8000f78:	61a3      	streq	r3, [r4, #24]
 8000f7a:	4620      	mov	r0, r4
 8000f7c:	f000 f820 	bl	8000fc0 <__sfp>
 8000f80:	6060      	str	r0, [r4, #4]
 8000f82:	4620      	mov	r0, r4
 8000f84:	f000 f81c 	bl	8000fc0 <__sfp>
 8000f88:	60a0      	str	r0, [r4, #8]
 8000f8a:	4620      	mov	r0, r4
 8000f8c:	f000 f818 	bl	8000fc0 <__sfp>
 8000f90:	2200      	movs	r2, #0
 8000f92:	60e0      	str	r0, [r4, #12]
 8000f94:	2104      	movs	r1, #4
 8000f96:	6860      	ldr	r0, [r4, #4]
 8000f98:	f7ff ff82 	bl	8000ea0 <std>
 8000f9c:	68a0      	ldr	r0, [r4, #8]
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	2109      	movs	r1, #9
 8000fa2:	f7ff ff7d 	bl	8000ea0 <std>
 8000fa6:	68e0      	ldr	r0, [r4, #12]
 8000fa8:	2202      	movs	r2, #2
 8000faa:	2112      	movs	r1, #18
 8000fac:	f7ff ff78 	bl	8000ea0 <std>
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	61a3      	str	r3, [r4, #24]
 8000fb4:	e7d2      	b.n	8000f5c <__sinit+0xc>
 8000fb6:	bf00      	nop
 8000fb8:	08001a98 	.word	0x08001a98
 8000fbc:	08000ee9 	.word	0x08000ee9

08000fc0 <__sfp>:
 8000fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fc2:	4607      	mov	r7, r0
 8000fc4:	f7ff ffac 	bl	8000f20 <__sfp_lock_acquire>
 8000fc8:	4b1e      	ldr	r3, [pc, #120]	; (8001044 <__sfp+0x84>)
 8000fca:	681e      	ldr	r6, [r3, #0]
 8000fcc:	69b3      	ldr	r3, [r6, #24]
 8000fce:	b913      	cbnz	r3, 8000fd6 <__sfp+0x16>
 8000fd0:	4630      	mov	r0, r6
 8000fd2:	f7ff ffbd 	bl	8000f50 <__sinit>
 8000fd6:	3648      	adds	r6, #72	; 0x48
 8000fd8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000fdc:	3b01      	subs	r3, #1
 8000fde:	d503      	bpl.n	8000fe8 <__sfp+0x28>
 8000fe0:	6833      	ldr	r3, [r6, #0]
 8000fe2:	b30b      	cbz	r3, 8001028 <__sfp+0x68>
 8000fe4:	6836      	ldr	r6, [r6, #0]
 8000fe6:	e7f7      	b.n	8000fd8 <__sfp+0x18>
 8000fe8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000fec:	b9d5      	cbnz	r5, 8001024 <__sfp+0x64>
 8000fee:	4b16      	ldr	r3, [pc, #88]	; (8001048 <__sfp+0x88>)
 8000ff0:	60e3      	str	r3, [r4, #12]
 8000ff2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000ff6:	6665      	str	r5, [r4, #100]	; 0x64
 8000ff8:	f000 f847 	bl	800108a <__retarget_lock_init_recursive>
 8000ffc:	f7ff ff96 	bl	8000f2c <__sfp_lock_release>
 8001000:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001004:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001008:	6025      	str	r5, [r4, #0]
 800100a:	61a5      	str	r5, [r4, #24]
 800100c:	2208      	movs	r2, #8
 800100e:	4629      	mov	r1, r5
 8001010:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001014:	f7ff fca0 	bl	8000958 <memset>
 8001018:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800101c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001020:	4620      	mov	r0, r4
 8001022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001024:	3468      	adds	r4, #104	; 0x68
 8001026:	e7d9      	b.n	8000fdc <__sfp+0x1c>
 8001028:	2104      	movs	r1, #4
 800102a:	4638      	mov	r0, r7
 800102c:	f7ff ff62 	bl	8000ef4 <__sfmoreglue>
 8001030:	4604      	mov	r4, r0
 8001032:	6030      	str	r0, [r6, #0]
 8001034:	2800      	cmp	r0, #0
 8001036:	d1d5      	bne.n	8000fe4 <__sfp+0x24>
 8001038:	f7ff ff78 	bl	8000f2c <__sfp_lock_release>
 800103c:	230c      	movs	r3, #12
 800103e:	603b      	str	r3, [r7, #0]
 8001040:	e7ee      	b.n	8001020 <__sfp+0x60>
 8001042:	bf00      	nop
 8001044:	08001a98 	.word	0x08001a98
 8001048:	ffff0001 	.word	0xffff0001

0800104c <_fwalk_reent>:
 800104c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001050:	4606      	mov	r6, r0
 8001052:	4688      	mov	r8, r1
 8001054:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001058:	2700      	movs	r7, #0
 800105a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800105e:	f1b9 0901 	subs.w	r9, r9, #1
 8001062:	d505      	bpl.n	8001070 <_fwalk_reent+0x24>
 8001064:	6824      	ldr	r4, [r4, #0]
 8001066:	2c00      	cmp	r4, #0
 8001068:	d1f7      	bne.n	800105a <_fwalk_reent+0xe>
 800106a:	4638      	mov	r0, r7
 800106c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001070:	89ab      	ldrh	r3, [r5, #12]
 8001072:	2b01      	cmp	r3, #1
 8001074:	d907      	bls.n	8001086 <_fwalk_reent+0x3a>
 8001076:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800107a:	3301      	adds	r3, #1
 800107c:	d003      	beq.n	8001086 <_fwalk_reent+0x3a>
 800107e:	4629      	mov	r1, r5
 8001080:	4630      	mov	r0, r6
 8001082:	47c0      	blx	r8
 8001084:	4307      	orrs	r7, r0
 8001086:	3568      	adds	r5, #104	; 0x68
 8001088:	e7e9      	b.n	800105e <_fwalk_reent+0x12>

0800108a <__retarget_lock_init_recursive>:
 800108a:	4770      	bx	lr

0800108c <__retarget_lock_acquire_recursive>:
 800108c:	4770      	bx	lr

0800108e <__retarget_lock_release_recursive>:
 800108e:	4770      	bx	lr

08001090 <__swhatbuf_r>:
 8001090:	b570      	push	{r4, r5, r6, lr}
 8001092:	460e      	mov	r6, r1
 8001094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001098:	2900      	cmp	r1, #0
 800109a:	b096      	sub	sp, #88	; 0x58
 800109c:	4614      	mov	r4, r2
 800109e:	461d      	mov	r5, r3
 80010a0:	da07      	bge.n	80010b2 <__swhatbuf_r+0x22>
 80010a2:	2300      	movs	r3, #0
 80010a4:	602b      	str	r3, [r5, #0]
 80010a6:	89b3      	ldrh	r3, [r6, #12]
 80010a8:	061a      	lsls	r2, r3, #24
 80010aa:	d410      	bmi.n	80010ce <__swhatbuf_r+0x3e>
 80010ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010b0:	e00e      	b.n	80010d0 <__swhatbuf_r+0x40>
 80010b2:	466a      	mov	r2, sp
 80010b4:	f000 fc44 	bl	8001940 <_fstat_r>
 80010b8:	2800      	cmp	r0, #0
 80010ba:	dbf2      	blt.n	80010a2 <__swhatbuf_r+0x12>
 80010bc:	9a01      	ldr	r2, [sp, #4]
 80010be:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80010c2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80010c6:	425a      	negs	r2, r3
 80010c8:	415a      	adcs	r2, r3
 80010ca:	602a      	str	r2, [r5, #0]
 80010cc:	e7ee      	b.n	80010ac <__swhatbuf_r+0x1c>
 80010ce:	2340      	movs	r3, #64	; 0x40
 80010d0:	2000      	movs	r0, #0
 80010d2:	6023      	str	r3, [r4, #0]
 80010d4:	b016      	add	sp, #88	; 0x58
 80010d6:	bd70      	pop	{r4, r5, r6, pc}

080010d8 <__smakebuf_r>:
 80010d8:	898b      	ldrh	r3, [r1, #12]
 80010da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80010dc:	079d      	lsls	r5, r3, #30
 80010de:	4606      	mov	r6, r0
 80010e0:	460c      	mov	r4, r1
 80010e2:	d507      	bpl.n	80010f4 <__smakebuf_r+0x1c>
 80010e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80010e8:	6023      	str	r3, [r4, #0]
 80010ea:	6123      	str	r3, [r4, #16]
 80010ec:	2301      	movs	r3, #1
 80010ee:	6163      	str	r3, [r4, #20]
 80010f0:	b002      	add	sp, #8
 80010f2:	bd70      	pop	{r4, r5, r6, pc}
 80010f4:	ab01      	add	r3, sp, #4
 80010f6:	466a      	mov	r2, sp
 80010f8:	f7ff ffca 	bl	8001090 <__swhatbuf_r>
 80010fc:	9900      	ldr	r1, [sp, #0]
 80010fe:	4605      	mov	r5, r0
 8001100:	4630      	mov	r0, r6
 8001102:	f7ff fc3f 	bl	8000984 <_malloc_r>
 8001106:	b948      	cbnz	r0, 800111c <__smakebuf_r+0x44>
 8001108:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800110c:	059a      	lsls	r2, r3, #22
 800110e:	d4ef      	bmi.n	80010f0 <__smakebuf_r+0x18>
 8001110:	f023 0303 	bic.w	r3, r3, #3
 8001114:	f043 0302 	orr.w	r3, r3, #2
 8001118:	81a3      	strh	r3, [r4, #12]
 800111a:	e7e3      	b.n	80010e4 <__smakebuf_r+0xc>
 800111c:	4b0d      	ldr	r3, [pc, #52]	; (8001154 <__smakebuf_r+0x7c>)
 800111e:	62b3      	str	r3, [r6, #40]	; 0x28
 8001120:	89a3      	ldrh	r3, [r4, #12]
 8001122:	6020      	str	r0, [r4, #0]
 8001124:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001128:	81a3      	strh	r3, [r4, #12]
 800112a:	9b00      	ldr	r3, [sp, #0]
 800112c:	6163      	str	r3, [r4, #20]
 800112e:	9b01      	ldr	r3, [sp, #4]
 8001130:	6120      	str	r0, [r4, #16]
 8001132:	b15b      	cbz	r3, 800114c <__smakebuf_r+0x74>
 8001134:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001138:	4630      	mov	r0, r6
 800113a:	f000 fc13 	bl	8001964 <_isatty_r>
 800113e:	b128      	cbz	r0, 800114c <__smakebuf_r+0x74>
 8001140:	89a3      	ldrh	r3, [r4, #12]
 8001142:	f023 0303 	bic.w	r3, r3, #3
 8001146:	f043 0301 	orr.w	r3, r3, #1
 800114a:	81a3      	strh	r3, [r4, #12]
 800114c:	89a0      	ldrh	r0, [r4, #12]
 800114e:	4305      	orrs	r5, r0
 8001150:	81a5      	strh	r5, [r4, #12]
 8001152:	e7cd      	b.n	80010f0 <__smakebuf_r+0x18>
 8001154:	08000ee9 	.word	0x08000ee9

08001158 <__malloc_lock>:
 8001158:	4801      	ldr	r0, [pc, #4]	; (8001160 <__malloc_lock+0x8>)
 800115a:	f7ff bf97 	b.w	800108c <__retarget_lock_acquire_recursive>
 800115e:	bf00      	nop
 8001160:	20000098 	.word	0x20000098

08001164 <__malloc_unlock>:
 8001164:	4801      	ldr	r0, [pc, #4]	; (800116c <__malloc_unlock+0x8>)
 8001166:	f7ff bf92 	b.w	800108e <__retarget_lock_release_recursive>
 800116a:	bf00      	nop
 800116c:	20000098 	.word	0x20000098

08001170 <_free_r>:
 8001170:	b538      	push	{r3, r4, r5, lr}
 8001172:	4605      	mov	r5, r0
 8001174:	2900      	cmp	r1, #0
 8001176:	d045      	beq.n	8001204 <_free_r+0x94>
 8001178:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800117c:	1f0c      	subs	r4, r1, #4
 800117e:	2b00      	cmp	r3, #0
 8001180:	bfb8      	it	lt
 8001182:	18e4      	addlt	r4, r4, r3
 8001184:	f7ff ffe8 	bl	8001158 <__malloc_lock>
 8001188:	4a1f      	ldr	r2, [pc, #124]	; (8001208 <_free_r+0x98>)
 800118a:	6813      	ldr	r3, [r2, #0]
 800118c:	4610      	mov	r0, r2
 800118e:	b933      	cbnz	r3, 800119e <_free_r+0x2e>
 8001190:	6063      	str	r3, [r4, #4]
 8001192:	6014      	str	r4, [r2, #0]
 8001194:	4628      	mov	r0, r5
 8001196:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800119a:	f7ff bfe3 	b.w	8001164 <__malloc_unlock>
 800119e:	42a3      	cmp	r3, r4
 80011a0:	d90b      	bls.n	80011ba <_free_r+0x4a>
 80011a2:	6821      	ldr	r1, [r4, #0]
 80011a4:	1862      	adds	r2, r4, r1
 80011a6:	4293      	cmp	r3, r2
 80011a8:	bf04      	itt	eq
 80011aa:	681a      	ldreq	r2, [r3, #0]
 80011ac:	685b      	ldreq	r3, [r3, #4]
 80011ae:	6063      	str	r3, [r4, #4]
 80011b0:	bf04      	itt	eq
 80011b2:	1852      	addeq	r2, r2, r1
 80011b4:	6022      	streq	r2, [r4, #0]
 80011b6:	6004      	str	r4, [r0, #0]
 80011b8:	e7ec      	b.n	8001194 <_free_r+0x24>
 80011ba:	461a      	mov	r2, r3
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	b10b      	cbz	r3, 80011c4 <_free_r+0x54>
 80011c0:	42a3      	cmp	r3, r4
 80011c2:	d9fa      	bls.n	80011ba <_free_r+0x4a>
 80011c4:	6811      	ldr	r1, [r2, #0]
 80011c6:	1850      	adds	r0, r2, r1
 80011c8:	42a0      	cmp	r0, r4
 80011ca:	d10b      	bne.n	80011e4 <_free_r+0x74>
 80011cc:	6820      	ldr	r0, [r4, #0]
 80011ce:	4401      	add	r1, r0
 80011d0:	1850      	adds	r0, r2, r1
 80011d2:	4283      	cmp	r3, r0
 80011d4:	6011      	str	r1, [r2, #0]
 80011d6:	d1dd      	bne.n	8001194 <_free_r+0x24>
 80011d8:	6818      	ldr	r0, [r3, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	6053      	str	r3, [r2, #4]
 80011de:	4401      	add	r1, r0
 80011e0:	6011      	str	r1, [r2, #0]
 80011e2:	e7d7      	b.n	8001194 <_free_r+0x24>
 80011e4:	d902      	bls.n	80011ec <_free_r+0x7c>
 80011e6:	230c      	movs	r3, #12
 80011e8:	602b      	str	r3, [r5, #0]
 80011ea:	e7d3      	b.n	8001194 <_free_r+0x24>
 80011ec:	6820      	ldr	r0, [r4, #0]
 80011ee:	1821      	adds	r1, r4, r0
 80011f0:	428b      	cmp	r3, r1
 80011f2:	bf04      	itt	eq
 80011f4:	6819      	ldreq	r1, [r3, #0]
 80011f6:	685b      	ldreq	r3, [r3, #4]
 80011f8:	6063      	str	r3, [r4, #4]
 80011fa:	bf04      	itt	eq
 80011fc:	1809      	addeq	r1, r1, r0
 80011fe:	6021      	streq	r1, [r4, #0]
 8001200:	6054      	str	r4, [r2, #4]
 8001202:	e7c7      	b.n	8001194 <_free_r+0x24>
 8001204:	bd38      	pop	{r3, r4, r5, pc}
 8001206:	bf00      	nop
 8001208:	20000084 	.word	0x20000084

0800120c <__sfputc_r>:
 800120c:	6893      	ldr	r3, [r2, #8]
 800120e:	3b01      	subs	r3, #1
 8001210:	2b00      	cmp	r3, #0
 8001212:	b410      	push	{r4}
 8001214:	6093      	str	r3, [r2, #8]
 8001216:	da07      	bge.n	8001228 <__sfputc_r+0x1c>
 8001218:	6994      	ldr	r4, [r2, #24]
 800121a:	42a3      	cmp	r3, r4
 800121c:	db01      	blt.n	8001222 <__sfputc_r+0x16>
 800121e:	290a      	cmp	r1, #10
 8001220:	d102      	bne.n	8001228 <__sfputc_r+0x1c>
 8001222:	bc10      	pop	{r4}
 8001224:	f7ff bcba 	b.w	8000b9c <__swbuf_r>
 8001228:	6813      	ldr	r3, [r2, #0]
 800122a:	1c58      	adds	r0, r3, #1
 800122c:	6010      	str	r0, [r2, #0]
 800122e:	7019      	strb	r1, [r3, #0]
 8001230:	4608      	mov	r0, r1
 8001232:	bc10      	pop	{r4}
 8001234:	4770      	bx	lr

08001236 <__sfputs_r>:
 8001236:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001238:	4606      	mov	r6, r0
 800123a:	460f      	mov	r7, r1
 800123c:	4614      	mov	r4, r2
 800123e:	18d5      	adds	r5, r2, r3
 8001240:	42ac      	cmp	r4, r5
 8001242:	d101      	bne.n	8001248 <__sfputs_r+0x12>
 8001244:	2000      	movs	r0, #0
 8001246:	e007      	b.n	8001258 <__sfputs_r+0x22>
 8001248:	f814 1b01 	ldrb.w	r1, [r4], #1
 800124c:	463a      	mov	r2, r7
 800124e:	4630      	mov	r0, r6
 8001250:	f7ff ffdc 	bl	800120c <__sfputc_r>
 8001254:	1c43      	adds	r3, r0, #1
 8001256:	d1f3      	bne.n	8001240 <__sfputs_r+0xa>
 8001258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800125c <_vfiprintf_r>:
 800125c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001260:	460d      	mov	r5, r1
 8001262:	b09d      	sub	sp, #116	; 0x74
 8001264:	4614      	mov	r4, r2
 8001266:	4698      	mov	r8, r3
 8001268:	4606      	mov	r6, r0
 800126a:	b118      	cbz	r0, 8001274 <_vfiprintf_r+0x18>
 800126c:	6983      	ldr	r3, [r0, #24]
 800126e:	b90b      	cbnz	r3, 8001274 <_vfiprintf_r+0x18>
 8001270:	f7ff fe6e 	bl	8000f50 <__sinit>
 8001274:	4b89      	ldr	r3, [pc, #548]	; (800149c <_vfiprintf_r+0x240>)
 8001276:	429d      	cmp	r5, r3
 8001278:	d11b      	bne.n	80012b2 <_vfiprintf_r+0x56>
 800127a:	6875      	ldr	r5, [r6, #4]
 800127c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800127e:	07d9      	lsls	r1, r3, #31
 8001280:	d405      	bmi.n	800128e <_vfiprintf_r+0x32>
 8001282:	89ab      	ldrh	r3, [r5, #12]
 8001284:	059a      	lsls	r2, r3, #22
 8001286:	d402      	bmi.n	800128e <_vfiprintf_r+0x32>
 8001288:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800128a:	f7ff feff 	bl	800108c <__retarget_lock_acquire_recursive>
 800128e:	89ab      	ldrh	r3, [r5, #12]
 8001290:	071b      	lsls	r3, r3, #28
 8001292:	d501      	bpl.n	8001298 <_vfiprintf_r+0x3c>
 8001294:	692b      	ldr	r3, [r5, #16]
 8001296:	b9eb      	cbnz	r3, 80012d4 <_vfiprintf_r+0x78>
 8001298:	4629      	mov	r1, r5
 800129a:	4630      	mov	r0, r6
 800129c:	f7ff fcd0 	bl	8000c40 <__swsetup_r>
 80012a0:	b1c0      	cbz	r0, 80012d4 <_vfiprintf_r+0x78>
 80012a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80012a4:	07dc      	lsls	r4, r3, #31
 80012a6:	d50e      	bpl.n	80012c6 <_vfiprintf_r+0x6a>
 80012a8:	f04f 30ff 	mov.w	r0, #4294967295
 80012ac:	b01d      	add	sp, #116	; 0x74
 80012ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80012b2:	4b7b      	ldr	r3, [pc, #492]	; (80014a0 <_vfiprintf_r+0x244>)
 80012b4:	429d      	cmp	r5, r3
 80012b6:	d101      	bne.n	80012bc <_vfiprintf_r+0x60>
 80012b8:	68b5      	ldr	r5, [r6, #8]
 80012ba:	e7df      	b.n	800127c <_vfiprintf_r+0x20>
 80012bc:	4b79      	ldr	r3, [pc, #484]	; (80014a4 <_vfiprintf_r+0x248>)
 80012be:	429d      	cmp	r5, r3
 80012c0:	bf08      	it	eq
 80012c2:	68f5      	ldreq	r5, [r6, #12]
 80012c4:	e7da      	b.n	800127c <_vfiprintf_r+0x20>
 80012c6:	89ab      	ldrh	r3, [r5, #12]
 80012c8:	0598      	lsls	r0, r3, #22
 80012ca:	d4ed      	bmi.n	80012a8 <_vfiprintf_r+0x4c>
 80012cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80012ce:	f7ff fede 	bl	800108e <__retarget_lock_release_recursive>
 80012d2:	e7e9      	b.n	80012a8 <_vfiprintf_r+0x4c>
 80012d4:	2300      	movs	r3, #0
 80012d6:	9309      	str	r3, [sp, #36]	; 0x24
 80012d8:	2320      	movs	r3, #32
 80012da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80012de:	f8cd 800c 	str.w	r8, [sp, #12]
 80012e2:	2330      	movs	r3, #48	; 0x30
 80012e4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80014a8 <_vfiprintf_r+0x24c>
 80012e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80012ec:	f04f 0901 	mov.w	r9, #1
 80012f0:	4623      	mov	r3, r4
 80012f2:	469a      	mov	sl, r3
 80012f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80012f8:	b10a      	cbz	r2, 80012fe <_vfiprintf_r+0xa2>
 80012fa:	2a25      	cmp	r2, #37	; 0x25
 80012fc:	d1f9      	bne.n	80012f2 <_vfiprintf_r+0x96>
 80012fe:	ebba 0b04 	subs.w	fp, sl, r4
 8001302:	d00b      	beq.n	800131c <_vfiprintf_r+0xc0>
 8001304:	465b      	mov	r3, fp
 8001306:	4622      	mov	r2, r4
 8001308:	4629      	mov	r1, r5
 800130a:	4630      	mov	r0, r6
 800130c:	f7ff ff93 	bl	8001236 <__sfputs_r>
 8001310:	3001      	adds	r0, #1
 8001312:	f000 80aa 	beq.w	800146a <_vfiprintf_r+0x20e>
 8001316:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001318:	445a      	add	r2, fp
 800131a:	9209      	str	r2, [sp, #36]	; 0x24
 800131c:	f89a 3000 	ldrb.w	r3, [sl]
 8001320:	2b00      	cmp	r3, #0
 8001322:	f000 80a2 	beq.w	800146a <_vfiprintf_r+0x20e>
 8001326:	2300      	movs	r3, #0
 8001328:	f04f 32ff 	mov.w	r2, #4294967295
 800132c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001330:	f10a 0a01 	add.w	sl, sl, #1
 8001334:	9304      	str	r3, [sp, #16]
 8001336:	9307      	str	r3, [sp, #28]
 8001338:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800133c:	931a      	str	r3, [sp, #104]	; 0x68
 800133e:	4654      	mov	r4, sl
 8001340:	2205      	movs	r2, #5
 8001342:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001346:	4858      	ldr	r0, [pc, #352]	; (80014a8 <_vfiprintf_r+0x24c>)
 8001348:	f7fe ff6a 	bl	8000220 <memchr>
 800134c:	9a04      	ldr	r2, [sp, #16]
 800134e:	b9d8      	cbnz	r0, 8001388 <_vfiprintf_r+0x12c>
 8001350:	06d1      	lsls	r1, r2, #27
 8001352:	bf44      	itt	mi
 8001354:	2320      	movmi	r3, #32
 8001356:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800135a:	0713      	lsls	r3, r2, #28
 800135c:	bf44      	itt	mi
 800135e:	232b      	movmi	r3, #43	; 0x2b
 8001360:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001364:	f89a 3000 	ldrb.w	r3, [sl]
 8001368:	2b2a      	cmp	r3, #42	; 0x2a
 800136a:	d015      	beq.n	8001398 <_vfiprintf_r+0x13c>
 800136c:	9a07      	ldr	r2, [sp, #28]
 800136e:	4654      	mov	r4, sl
 8001370:	2000      	movs	r0, #0
 8001372:	f04f 0c0a 	mov.w	ip, #10
 8001376:	4621      	mov	r1, r4
 8001378:	f811 3b01 	ldrb.w	r3, [r1], #1
 800137c:	3b30      	subs	r3, #48	; 0x30
 800137e:	2b09      	cmp	r3, #9
 8001380:	d94e      	bls.n	8001420 <_vfiprintf_r+0x1c4>
 8001382:	b1b0      	cbz	r0, 80013b2 <_vfiprintf_r+0x156>
 8001384:	9207      	str	r2, [sp, #28]
 8001386:	e014      	b.n	80013b2 <_vfiprintf_r+0x156>
 8001388:	eba0 0308 	sub.w	r3, r0, r8
 800138c:	fa09 f303 	lsl.w	r3, r9, r3
 8001390:	4313      	orrs	r3, r2
 8001392:	9304      	str	r3, [sp, #16]
 8001394:	46a2      	mov	sl, r4
 8001396:	e7d2      	b.n	800133e <_vfiprintf_r+0xe2>
 8001398:	9b03      	ldr	r3, [sp, #12]
 800139a:	1d19      	adds	r1, r3, #4
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	9103      	str	r1, [sp, #12]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	bfbb      	ittet	lt
 80013a4:	425b      	neglt	r3, r3
 80013a6:	f042 0202 	orrlt.w	r2, r2, #2
 80013aa:	9307      	strge	r3, [sp, #28]
 80013ac:	9307      	strlt	r3, [sp, #28]
 80013ae:	bfb8      	it	lt
 80013b0:	9204      	strlt	r2, [sp, #16]
 80013b2:	7823      	ldrb	r3, [r4, #0]
 80013b4:	2b2e      	cmp	r3, #46	; 0x2e
 80013b6:	d10c      	bne.n	80013d2 <_vfiprintf_r+0x176>
 80013b8:	7863      	ldrb	r3, [r4, #1]
 80013ba:	2b2a      	cmp	r3, #42	; 0x2a
 80013bc:	d135      	bne.n	800142a <_vfiprintf_r+0x1ce>
 80013be:	9b03      	ldr	r3, [sp, #12]
 80013c0:	1d1a      	adds	r2, r3, #4
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	9203      	str	r2, [sp, #12]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	bfb8      	it	lt
 80013ca:	f04f 33ff 	movlt.w	r3, #4294967295
 80013ce:	3402      	adds	r4, #2
 80013d0:	9305      	str	r3, [sp, #20]
 80013d2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80014b8 <_vfiprintf_r+0x25c>
 80013d6:	7821      	ldrb	r1, [r4, #0]
 80013d8:	2203      	movs	r2, #3
 80013da:	4650      	mov	r0, sl
 80013dc:	f7fe ff20 	bl	8000220 <memchr>
 80013e0:	b140      	cbz	r0, 80013f4 <_vfiprintf_r+0x198>
 80013e2:	2340      	movs	r3, #64	; 0x40
 80013e4:	eba0 000a 	sub.w	r0, r0, sl
 80013e8:	fa03 f000 	lsl.w	r0, r3, r0
 80013ec:	9b04      	ldr	r3, [sp, #16]
 80013ee:	4303      	orrs	r3, r0
 80013f0:	3401      	adds	r4, #1
 80013f2:	9304      	str	r3, [sp, #16]
 80013f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80013f8:	482c      	ldr	r0, [pc, #176]	; (80014ac <_vfiprintf_r+0x250>)
 80013fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80013fe:	2206      	movs	r2, #6
 8001400:	f7fe ff0e 	bl	8000220 <memchr>
 8001404:	2800      	cmp	r0, #0
 8001406:	d03f      	beq.n	8001488 <_vfiprintf_r+0x22c>
 8001408:	4b29      	ldr	r3, [pc, #164]	; (80014b0 <_vfiprintf_r+0x254>)
 800140a:	bb1b      	cbnz	r3, 8001454 <_vfiprintf_r+0x1f8>
 800140c:	9b03      	ldr	r3, [sp, #12]
 800140e:	3307      	adds	r3, #7
 8001410:	f023 0307 	bic.w	r3, r3, #7
 8001414:	3308      	adds	r3, #8
 8001416:	9303      	str	r3, [sp, #12]
 8001418:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800141a:	443b      	add	r3, r7
 800141c:	9309      	str	r3, [sp, #36]	; 0x24
 800141e:	e767      	b.n	80012f0 <_vfiprintf_r+0x94>
 8001420:	fb0c 3202 	mla	r2, ip, r2, r3
 8001424:	460c      	mov	r4, r1
 8001426:	2001      	movs	r0, #1
 8001428:	e7a5      	b.n	8001376 <_vfiprintf_r+0x11a>
 800142a:	2300      	movs	r3, #0
 800142c:	3401      	adds	r4, #1
 800142e:	9305      	str	r3, [sp, #20]
 8001430:	4619      	mov	r1, r3
 8001432:	f04f 0c0a 	mov.w	ip, #10
 8001436:	4620      	mov	r0, r4
 8001438:	f810 2b01 	ldrb.w	r2, [r0], #1
 800143c:	3a30      	subs	r2, #48	; 0x30
 800143e:	2a09      	cmp	r2, #9
 8001440:	d903      	bls.n	800144a <_vfiprintf_r+0x1ee>
 8001442:	2b00      	cmp	r3, #0
 8001444:	d0c5      	beq.n	80013d2 <_vfiprintf_r+0x176>
 8001446:	9105      	str	r1, [sp, #20]
 8001448:	e7c3      	b.n	80013d2 <_vfiprintf_r+0x176>
 800144a:	fb0c 2101 	mla	r1, ip, r1, r2
 800144e:	4604      	mov	r4, r0
 8001450:	2301      	movs	r3, #1
 8001452:	e7f0      	b.n	8001436 <_vfiprintf_r+0x1da>
 8001454:	ab03      	add	r3, sp, #12
 8001456:	9300      	str	r3, [sp, #0]
 8001458:	462a      	mov	r2, r5
 800145a:	4b16      	ldr	r3, [pc, #88]	; (80014b4 <_vfiprintf_r+0x258>)
 800145c:	a904      	add	r1, sp, #16
 800145e:	4630      	mov	r0, r6
 8001460:	f3af 8000 	nop.w
 8001464:	4607      	mov	r7, r0
 8001466:	1c78      	adds	r0, r7, #1
 8001468:	d1d6      	bne.n	8001418 <_vfiprintf_r+0x1bc>
 800146a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800146c:	07d9      	lsls	r1, r3, #31
 800146e:	d405      	bmi.n	800147c <_vfiprintf_r+0x220>
 8001470:	89ab      	ldrh	r3, [r5, #12]
 8001472:	059a      	lsls	r2, r3, #22
 8001474:	d402      	bmi.n	800147c <_vfiprintf_r+0x220>
 8001476:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001478:	f7ff fe09 	bl	800108e <__retarget_lock_release_recursive>
 800147c:	89ab      	ldrh	r3, [r5, #12]
 800147e:	065b      	lsls	r3, r3, #25
 8001480:	f53f af12 	bmi.w	80012a8 <_vfiprintf_r+0x4c>
 8001484:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001486:	e711      	b.n	80012ac <_vfiprintf_r+0x50>
 8001488:	ab03      	add	r3, sp, #12
 800148a:	9300      	str	r3, [sp, #0]
 800148c:	462a      	mov	r2, r5
 800148e:	4b09      	ldr	r3, [pc, #36]	; (80014b4 <_vfiprintf_r+0x258>)
 8001490:	a904      	add	r1, sp, #16
 8001492:	4630      	mov	r0, r6
 8001494:	f000 f880 	bl	8001598 <_printf_i>
 8001498:	e7e4      	b.n	8001464 <_vfiprintf_r+0x208>
 800149a:	bf00      	nop
 800149c:	08001abc 	.word	0x08001abc
 80014a0:	08001adc 	.word	0x08001adc
 80014a4:	08001a9c 	.word	0x08001a9c
 80014a8:	08001afc 	.word	0x08001afc
 80014ac:	08001b06 	.word	0x08001b06
 80014b0:	00000000 	.word	0x00000000
 80014b4:	08001237 	.word	0x08001237
 80014b8:	08001b02 	.word	0x08001b02

080014bc <_printf_common>:
 80014bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80014c0:	4616      	mov	r6, r2
 80014c2:	4699      	mov	r9, r3
 80014c4:	688a      	ldr	r2, [r1, #8]
 80014c6:	690b      	ldr	r3, [r1, #16]
 80014c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80014cc:	4293      	cmp	r3, r2
 80014ce:	bfb8      	it	lt
 80014d0:	4613      	movlt	r3, r2
 80014d2:	6033      	str	r3, [r6, #0]
 80014d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80014d8:	4607      	mov	r7, r0
 80014da:	460c      	mov	r4, r1
 80014dc:	b10a      	cbz	r2, 80014e2 <_printf_common+0x26>
 80014de:	3301      	adds	r3, #1
 80014e0:	6033      	str	r3, [r6, #0]
 80014e2:	6823      	ldr	r3, [r4, #0]
 80014e4:	0699      	lsls	r1, r3, #26
 80014e6:	bf42      	ittt	mi
 80014e8:	6833      	ldrmi	r3, [r6, #0]
 80014ea:	3302      	addmi	r3, #2
 80014ec:	6033      	strmi	r3, [r6, #0]
 80014ee:	6825      	ldr	r5, [r4, #0]
 80014f0:	f015 0506 	ands.w	r5, r5, #6
 80014f4:	d106      	bne.n	8001504 <_printf_common+0x48>
 80014f6:	f104 0a19 	add.w	sl, r4, #25
 80014fa:	68e3      	ldr	r3, [r4, #12]
 80014fc:	6832      	ldr	r2, [r6, #0]
 80014fe:	1a9b      	subs	r3, r3, r2
 8001500:	42ab      	cmp	r3, r5
 8001502:	dc26      	bgt.n	8001552 <_printf_common+0x96>
 8001504:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001508:	1e13      	subs	r3, r2, #0
 800150a:	6822      	ldr	r2, [r4, #0]
 800150c:	bf18      	it	ne
 800150e:	2301      	movne	r3, #1
 8001510:	0692      	lsls	r2, r2, #26
 8001512:	d42b      	bmi.n	800156c <_printf_common+0xb0>
 8001514:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001518:	4649      	mov	r1, r9
 800151a:	4638      	mov	r0, r7
 800151c:	47c0      	blx	r8
 800151e:	3001      	adds	r0, #1
 8001520:	d01e      	beq.n	8001560 <_printf_common+0xa4>
 8001522:	6823      	ldr	r3, [r4, #0]
 8001524:	68e5      	ldr	r5, [r4, #12]
 8001526:	6832      	ldr	r2, [r6, #0]
 8001528:	f003 0306 	and.w	r3, r3, #6
 800152c:	2b04      	cmp	r3, #4
 800152e:	bf08      	it	eq
 8001530:	1aad      	subeq	r5, r5, r2
 8001532:	68a3      	ldr	r3, [r4, #8]
 8001534:	6922      	ldr	r2, [r4, #16]
 8001536:	bf0c      	ite	eq
 8001538:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800153c:	2500      	movne	r5, #0
 800153e:	4293      	cmp	r3, r2
 8001540:	bfc4      	itt	gt
 8001542:	1a9b      	subgt	r3, r3, r2
 8001544:	18ed      	addgt	r5, r5, r3
 8001546:	2600      	movs	r6, #0
 8001548:	341a      	adds	r4, #26
 800154a:	42b5      	cmp	r5, r6
 800154c:	d11a      	bne.n	8001584 <_printf_common+0xc8>
 800154e:	2000      	movs	r0, #0
 8001550:	e008      	b.n	8001564 <_printf_common+0xa8>
 8001552:	2301      	movs	r3, #1
 8001554:	4652      	mov	r2, sl
 8001556:	4649      	mov	r1, r9
 8001558:	4638      	mov	r0, r7
 800155a:	47c0      	blx	r8
 800155c:	3001      	adds	r0, #1
 800155e:	d103      	bne.n	8001568 <_printf_common+0xac>
 8001560:	f04f 30ff 	mov.w	r0, #4294967295
 8001564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001568:	3501      	adds	r5, #1
 800156a:	e7c6      	b.n	80014fa <_printf_common+0x3e>
 800156c:	18e1      	adds	r1, r4, r3
 800156e:	1c5a      	adds	r2, r3, #1
 8001570:	2030      	movs	r0, #48	; 0x30
 8001572:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001576:	4422      	add	r2, r4
 8001578:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800157c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001580:	3302      	adds	r3, #2
 8001582:	e7c7      	b.n	8001514 <_printf_common+0x58>
 8001584:	2301      	movs	r3, #1
 8001586:	4622      	mov	r2, r4
 8001588:	4649      	mov	r1, r9
 800158a:	4638      	mov	r0, r7
 800158c:	47c0      	blx	r8
 800158e:	3001      	adds	r0, #1
 8001590:	d0e6      	beq.n	8001560 <_printf_common+0xa4>
 8001592:	3601      	adds	r6, #1
 8001594:	e7d9      	b.n	800154a <_printf_common+0x8e>
	...

08001598 <_printf_i>:
 8001598:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800159c:	460c      	mov	r4, r1
 800159e:	4691      	mov	r9, r2
 80015a0:	7e27      	ldrb	r7, [r4, #24]
 80015a2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80015a4:	2f78      	cmp	r7, #120	; 0x78
 80015a6:	4680      	mov	r8, r0
 80015a8:	469a      	mov	sl, r3
 80015aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80015ae:	d807      	bhi.n	80015c0 <_printf_i+0x28>
 80015b0:	2f62      	cmp	r7, #98	; 0x62
 80015b2:	d80a      	bhi.n	80015ca <_printf_i+0x32>
 80015b4:	2f00      	cmp	r7, #0
 80015b6:	f000 80d8 	beq.w	800176a <_printf_i+0x1d2>
 80015ba:	2f58      	cmp	r7, #88	; 0x58
 80015bc:	f000 80a3 	beq.w	8001706 <_printf_i+0x16e>
 80015c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80015c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80015c8:	e03a      	b.n	8001640 <_printf_i+0xa8>
 80015ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80015ce:	2b15      	cmp	r3, #21
 80015d0:	d8f6      	bhi.n	80015c0 <_printf_i+0x28>
 80015d2:	a001      	add	r0, pc, #4	; (adr r0, 80015d8 <_printf_i+0x40>)
 80015d4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80015d8:	08001631 	.word	0x08001631
 80015dc:	08001645 	.word	0x08001645
 80015e0:	080015c1 	.word	0x080015c1
 80015e4:	080015c1 	.word	0x080015c1
 80015e8:	080015c1 	.word	0x080015c1
 80015ec:	080015c1 	.word	0x080015c1
 80015f0:	08001645 	.word	0x08001645
 80015f4:	080015c1 	.word	0x080015c1
 80015f8:	080015c1 	.word	0x080015c1
 80015fc:	080015c1 	.word	0x080015c1
 8001600:	080015c1 	.word	0x080015c1
 8001604:	08001751 	.word	0x08001751
 8001608:	08001675 	.word	0x08001675
 800160c:	08001733 	.word	0x08001733
 8001610:	080015c1 	.word	0x080015c1
 8001614:	080015c1 	.word	0x080015c1
 8001618:	08001773 	.word	0x08001773
 800161c:	080015c1 	.word	0x080015c1
 8001620:	08001675 	.word	0x08001675
 8001624:	080015c1 	.word	0x080015c1
 8001628:	080015c1 	.word	0x080015c1
 800162c:	0800173b 	.word	0x0800173b
 8001630:	680b      	ldr	r3, [r1, #0]
 8001632:	1d1a      	adds	r2, r3, #4
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	600a      	str	r2, [r1, #0]
 8001638:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800163c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001640:	2301      	movs	r3, #1
 8001642:	e0a3      	b.n	800178c <_printf_i+0x1f4>
 8001644:	6825      	ldr	r5, [r4, #0]
 8001646:	6808      	ldr	r0, [r1, #0]
 8001648:	062e      	lsls	r6, r5, #24
 800164a:	f100 0304 	add.w	r3, r0, #4
 800164e:	d50a      	bpl.n	8001666 <_printf_i+0xce>
 8001650:	6805      	ldr	r5, [r0, #0]
 8001652:	600b      	str	r3, [r1, #0]
 8001654:	2d00      	cmp	r5, #0
 8001656:	da03      	bge.n	8001660 <_printf_i+0xc8>
 8001658:	232d      	movs	r3, #45	; 0x2d
 800165a:	426d      	negs	r5, r5
 800165c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001660:	485e      	ldr	r0, [pc, #376]	; (80017dc <_printf_i+0x244>)
 8001662:	230a      	movs	r3, #10
 8001664:	e019      	b.n	800169a <_printf_i+0x102>
 8001666:	f015 0f40 	tst.w	r5, #64	; 0x40
 800166a:	6805      	ldr	r5, [r0, #0]
 800166c:	600b      	str	r3, [r1, #0]
 800166e:	bf18      	it	ne
 8001670:	b22d      	sxthne	r5, r5
 8001672:	e7ef      	b.n	8001654 <_printf_i+0xbc>
 8001674:	680b      	ldr	r3, [r1, #0]
 8001676:	6825      	ldr	r5, [r4, #0]
 8001678:	1d18      	adds	r0, r3, #4
 800167a:	6008      	str	r0, [r1, #0]
 800167c:	0628      	lsls	r0, r5, #24
 800167e:	d501      	bpl.n	8001684 <_printf_i+0xec>
 8001680:	681d      	ldr	r5, [r3, #0]
 8001682:	e002      	b.n	800168a <_printf_i+0xf2>
 8001684:	0669      	lsls	r1, r5, #25
 8001686:	d5fb      	bpl.n	8001680 <_printf_i+0xe8>
 8001688:	881d      	ldrh	r5, [r3, #0]
 800168a:	4854      	ldr	r0, [pc, #336]	; (80017dc <_printf_i+0x244>)
 800168c:	2f6f      	cmp	r7, #111	; 0x6f
 800168e:	bf0c      	ite	eq
 8001690:	2308      	moveq	r3, #8
 8001692:	230a      	movne	r3, #10
 8001694:	2100      	movs	r1, #0
 8001696:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800169a:	6866      	ldr	r6, [r4, #4]
 800169c:	60a6      	str	r6, [r4, #8]
 800169e:	2e00      	cmp	r6, #0
 80016a0:	bfa2      	ittt	ge
 80016a2:	6821      	ldrge	r1, [r4, #0]
 80016a4:	f021 0104 	bicge.w	r1, r1, #4
 80016a8:	6021      	strge	r1, [r4, #0]
 80016aa:	b90d      	cbnz	r5, 80016b0 <_printf_i+0x118>
 80016ac:	2e00      	cmp	r6, #0
 80016ae:	d04d      	beq.n	800174c <_printf_i+0x1b4>
 80016b0:	4616      	mov	r6, r2
 80016b2:	fbb5 f1f3 	udiv	r1, r5, r3
 80016b6:	fb03 5711 	mls	r7, r3, r1, r5
 80016ba:	5dc7      	ldrb	r7, [r0, r7]
 80016bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80016c0:	462f      	mov	r7, r5
 80016c2:	42bb      	cmp	r3, r7
 80016c4:	460d      	mov	r5, r1
 80016c6:	d9f4      	bls.n	80016b2 <_printf_i+0x11a>
 80016c8:	2b08      	cmp	r3, #8
 80016ca:	d10b      	bne.n	80016e4 <_printf_i+0x14c>
 80016cc:	6823      	ldr	r3, [r4, #0]
 80016ce:	07df      	lsls	r7, r3, #31
 80016d0:	d508      	bpl.n	80016e4 <_printf_i+0x14c>
 80016d2:	6923      	ldr	r3, [r4, #16]
 80016d4:	6861      	ldr	r1, [r4, #4]
 80016d6:	4299      	cmp	r1, r3
 80016d8:	bfde      	ittt	le
 80016da:	2330      	movle	r3, #48	; 0x30
 80016dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80016e0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80016e4:	1b92      	subs	r2, r2, r6
 80016e6:	6122      	str	r2, [r4, #16]
 80016e8:	f8cd a000 	str.w	sl, [sp]
 80016ec:	464b      	mov	r3, r9
 80016ee:	aa03      	add	r2, sp, #12
 80016f0:	4621      	mov	r1, r4
 80016f2:	4640      	mov	r0, r8
 80016f4:	f7ff fee2 	bl	80014bc <_printf_common>
 80016f8:	3001      	adds	r0, #1
 80016fa:	d14c      	bne.n	8001796 <_printf_i+0x1fe>
 80016fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001700:	b004      	add	sp, #16
 8001702:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001706:	4835      	ldr	r0, [pc, #212]	; (80017dc <_printf_i+0x244>)
 8001708:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800170c:	6823      	ldr	r3, [r4, #0]
 800170e:	680e      	ldr	r6, [r1, #0]
 8001710:	061f      	lsls	r7, r3, #24
 8001712:	f856 5b04 	ldr.w	r5, [r6], #4
 8001716:	600e      	str	r6, [r1, #0]
 8001718:	d514      	bpl.n	8001744 <_printf_i+0x1ac>
 800171a:	07d9      	lsls	r1, r3, #31
 800171c:	bf44      	itt	mi
 800171e:	f043 0320 	orrmi.w	r3, r3, #32
 8001722:	6023      	strmi	r3, [r4, #0]
 8001724:	b91d      	cbnz	r5, 800172e <_printf_i+0x196>
 8001726:	6823      	ldr	r3, [r4, #0]
 8001728:	f023 0320 	bic.w	r3, r3, #32
 800172c:	6023      	str	r3, [r4, #0]
 800172e:	2310      	movs	r3, #16
 8001730:	e7b0      	b.n	8001694 <_printf_i+0xfc>
 8001732:	6823      	ldr	r3, [r4, #0]
 8001734:	f043 0320 	orr.w	r3, r3, #32
 8001738:	6023      	str	r3, [r4, #0]
 800173a:	2378      	movs	r3, #120	; 0x78
 800173c:	4828      	ldr	r0, [pc, #160]	; (80017e0 <_printf_i+0x248>)
 800173e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001742:	e7e3      	b.n	800170c <_printf_i+0x174>
 8001744:	065e      	lsls	r6, r3, #25
 8001746:	bf48      	it	mi
 8001748:	b2ad      	uxthmi	r5, r5
 800174a:	e7e6      	b.n	800171a <_printf_i+0x182>
 800174c:	4616      	mov	r6, r2
 800174e:	e7bb      	b.n	80016c8 <_printf_i+0x130>
 8001750:	680b      	ldr	r3, [r1, #0]
 8001752:	6826      	ldr	r6, [r4, #0]
 8001754:	6960      	ldr	r0, [r4, #20]
 8001756:	1d1d      	adds	r5, r3, #4
 8001758:	600d      	str	r5, [r1, #0]
 800175a:	0635      	lsls	r5, r6, #24
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	d501      	bpl.n	8001764 <_printf_i+0x1cc>
 8001760:	6018      	str	r0, [r3, #0]
 8001762:	e002      	b.n	800176a <_printf_i+0x1d2>
 8001764:	0671      	lsls	r1, r6, #25
 8001766:	d5fb      	bpl.n	8001760 <_printf_i+0x1c8>
 8001768:	8018      	strh	r0, [r3, #0]
 800176a:	2300      	movs	r3, #0
 800176c:	6123      	str	r3, [r4, #16]
 800176e:	4616      	mov	r6, r2
 8001770:	e7ba      	b.n	80016e8 <_printf_i+0x150>
 8001772:	680b      	ldr	r3, [r1, #0]
 8001774:	1d1a      	adds	r2, r3, #4
 8001776:	600a      	str	r2, [r1, #0]
 8001778:	681e      	ldr	r6, [r3, #0]
 800177a:	6862      	ldr	r2, [r4, #4]
 800177c:	2100      	movs	r1, #0
 800177e:	4630      	mov	r0, r6
 8001780:	f7fe fd4e 	bl	8000220 <memchr>
 8001784:	b108      	cbz	r0, 800178a <_printf_i+0x1f2>
 8001786:	1b80      	subs	r0, r0, r6
 8001788:	6060      	str	r0, [r4, #4]
 800178a:	6863      	ldr	r3, [r4, #4]
 800178c:	6123      	str	r3, [r4, #16]
 800178e:	2300      	movs	r3, #0
 8001790:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001794:	e7a8      	b.n	80016e8 <_printf_i+0x150>
 8001796:	6923      	ldr	r3, [r4, #16]
 8001798:	4632      	mov	r2, r6
 800179a:	4649      	mov	r1, r9
 800179c:	4640      	mov	r0, r8
 800179e:	47d0      	blx	sl
 80017a0:	3001      	adds	r0, #1
 80017a2:	d0ab      	beq.n	80016fc <_printf_i+0x164>
 80017a4:	6823      	ldr	r3, [r4, #0]
 80017a6:	079b      	lsls	r3, r3, #30
 80017a8:	d413      	bmi.n	80017d2 <_printf_i+0x23a>
 80017aa:	68e0      	ldr	r0, [r4, #12]
 80017ac:	9b03      	ldr	r3, [sp, #12]
 80017ae:	4298      	cmp	r0, r3
 80017b0:	bfb8      	it	lt
 80017b2:	4618      	movlt	r0, r3
 80017b4:	e7a4      	b.n	8001700 <_printf_i+0x168>
 80017b6:	2301      	movs	r3, #1
 80017b8:	4632      	mov	r2, r6
 80017ba:	4649      	mov	r1, r9
 80017bc:	4640      	mov	r0, r8
 80017be:	47d0      	blx	sl
 80017c0:	3001      	adds	r0, #1
 80017c2:	d09b      	beq.n	80016fc <_printf_i+0x164>
 80017c4:	3501      	adds	r5, #1
 80017c6:	68e3      	ldr	r3, [r4, #12]
 80017c8:	9903      	ldr	r1, [sp, #12]
 80017ca:	1a5b      	subs	r3, r3, r1
 80017cc:	42ab      	cmp	r3, r5
 80017ce:	dcf2      	bgt.n	80017b6 <_printf_i+0x21e>
 80017d0:	e7eb      	b.n	80017aa <_printf_i+0x212>
 80017d2:	2500      	movs	r5, #0
 80017d4:	f104 0619 	add.w	r6, r4, #25
 80017d8:	e7f5      	b.n	80017c6 <_printf_i+0x22e>
 80017da:	bf00      	nop
 80017dc:	08001b0d 	.word	0x08001b0d
 80017e0:	08001b1e 	.word	0x08001b1e

080017e4 <_putc_r>:
 80017e4:	b570      	push	{r4, r5, r6, lr}
 80017e6:	460d      	mov	r5, r1
 80017e8:	4614      	mov	r4, r2
 80017ea:	4606      	mov	r6, r0
 80017ec:	b118      	cbz	r0, 80017f6 <_putc_r+0x12>
 80017ee:	6983      	ldr	r3, [r0, #24]
 80017f0:	b90b      	cbnz	r3, 80017f6 <_putc_r+0x12>
 80017f2:	f7ff fbad 	bl	8000f50 <__sinit>
 80017f6:	4b1c      	ldr	r3, [pc, #112]	; (8001868 <_putc_r+0x84>)
 80017f8:	429c      	cmp	r4, r3
 80017fa:	d124      	bne.n	8001846 <_putc_r+0x62>
 80017fc:	6874      	ldr	r4, [r6, #4]
 80017fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001800:	07d8      	lsls	r0, r3, #31
 8001802:	d405      	bmi.n	8001810 <_putc_r+0x2c>
 8001804:	89a3      	ldrh	r3, [r4, #12]
 8001806:	0599      	lsls	r1, r3, #22
 8001808:	d402      	bmi.n	8001810 <_putc_r+0x2c>
 800180a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800180c:	f7ff fc3e 	bl	800108c <__retarget_lock_acquire_recursive>
 8001810:	68a3      	ldr	r3, [r4, #8]
 8001812:	3b01      	subs	r3, #1
 8001814:	2b00      	cmp	r3, #0
 8001816:	60a3      	str	r3, [r4, #8]
 8001818:	da05      	bge.n	8001826 <_putc_r+0x42>
 800181a:	69a2      	ldr	r2, [r4, #24]
 800181c:	4293      	cmp	r3, r2
 800181e:	db1c      	blt.n	800185a <_putc_r+0x76>
 8001820:	b2eb      	uxtb	r3, r5
 8001822:	2b0a      	cmp	r3, #10
 8001824:	d019      	beq.n	800185a <_putc_r+0x76>
 8001826:	6823      	ldr	r3, [r4, #0]
 8001828:	1c5a      	adds	r2, r3, #1
 800182a:	6022      	str	r2, [r4, #0]
 800182c:	701d      	strb	r5, [r3, #0]
 800182e:	b2ed      	uxtb	r5, r5
 8001830:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001832:	07da      	lsls	r2, r3, #31
 8001834:	d405      	bmi.n	8001842 <_putc_r+0x5e>
 8001836:	89a3      	ldrh	r3, [r4, #12]
 8001838:	059b      	lsls	r3, r3, #22
 800183a:	d402      	bmi.n	8001842 <_putc_r+0x5e>
 800183c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800183e:	f7ff fc26 	bl	800108e <__retarget_lock_release_recursive>
 8001842:	4628      	mov	r0, r5
 8001844:	bd70      	pop	{r4, r5, r6, pc}
 8001846:	4b09      	ldr	r3, [pc, #36]	; (800186c <_putc_r+0x88>)
 8001848:	429c      	cmp	r4, r3
 800184a:	d101      	bne.n	8001850 <_putc_r+0x6c>
 800184c:	68b4      	ldr	r4, [r6, #8]
 800184e:	e7d6      	b.n	80017fe <_putc_r+0x1a>
 8001850:	4b07      	ldr	r3, [pc, #28]	; (8001870 <_putc_r+0x8c>)
 8001852:	429c      	cmp	r4, r3
 8001854:	bf08      	it	eq
 8001856:	68f4      	ldreq	r4, [r6, #12]
 8001858:	e7d1      	b.n	80017fe <_putc_r+0x1a>
 800185a:	4629      	mov	r1, r5
 800185c:	4622      	mov	r2, r4
 800185e:	4630      	mov	r0, r6
 8001860:	f7ff f99c 	bl	8000b9c <__swbuf_r>
 8001864:	4605      	mov	r5, r0
 8001866:	e7e3      	b.n	8001830 <_putc_r+0x4c>
 8001868:	08001abc 	.word	0x08001abc
 800186c:	08001adc 	.word	0x08001adc
 8001870:	08001a9c 	.word	0x08001a9c

08001874 <__sread>:
 8001874:	b510      	push	{r4, lr}
 8001876:	460c      	mov	r4, r1
 8001878:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800187c:	f000 f894 	bl	80019a8 <_read_r>
 8001880:	2800      	cmp	r0, #0
 8001882:	bfab      	itete	ge
 8001884:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001886:	89a3      	ldrhlt	r3, [r4, #12]
 8001888:	181b      	addge	r3, r3, r0
 800188a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800188e:	bfac      	ite	ge
 8001890:	6563      	strge	r3, [r4, #84]	; 0x54
 8001892:	81a3      	strhlt	r3, [r4, #12]
 8001894:	bd10      	pop	{r4, pc}

08001896 <__swrite>:
 8001896:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800189a:	461f      	mov	r7, r3
 800189c:	898b      	ldrh	r3, [r1, #12]
 800189e:	05db      	lsls	r3, r3, #23
 80018a0:	4605      	mov	r5, r0
 80018a2:	460c      	mov	r4, r1
 80018a4:	4616      	mov	r6, r2
 80018a6:	d505      	bpl.n	80018b4 <__swrite+0x1e>
 80018a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80018ac:	2302      	movs	r3, #2
 80018ae:	2200      	movs	r2, #0
 80018b0:	f000 f868 	bl	8001984 <_lseek_r>
 80018b4:	89a3      	ldrh	r3, [r4, #12]
 80018b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80018ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80018be:	81a3      	strh	r3, [r4, #12]
 80018c0:	4632      	mov	r2, r6
 80018c2:	463b      	mov	r3, r7
 80018c4:	4628      	mov	r0, r5
 80018c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80018ca:	f000 b817 	b.w	80018fc <_write_r>

080018ce <__sseek>:
 80018ce:	b510      	push	{r4, lr}
 80018d0:	460c      	mov	r4, r1
 80018d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80018d6:	f000 f855 	bl	8001984 <_lseek_r>
 80018da:	1c43      	adds	r3, r0, #1
 80018dc:	89a3      	ldrh	r3, [r4, #12]
 80018de:	bf15      	itete	ne
 80018e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80018e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80018e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80018ea:	81a3      	strheq	r3, [r4, #12]
 80018ec:	bf18      	it	ne
 80018ee:	81a3      	strhne	r3, [r4, #12]
 80018f0:	bd10      	pop	{r4, pc}

080018f2 <__sclose>:
 80018f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80018f6:	f000 b813 	b.w	8001920 <_close_r>
	...

080018fc <_write_r>:
 80018fc:	b538      	push	{r3, r4, r5, lr}
 80018fe:	4d07      	ldr	r5, [pc, #28]	; (800191c <_write_r+0x20>)
 8001900:	4604      	mov	r4, r0
 8001902:	4608      	mov	r0, r1
 8001904:	4611      	mov	r1, r2
 8001906:	2200      	movs	r2, #0
 8001908:	602a      	str	r2, [r5, #0]
 800190a:	461a      	mov	r2, r3
 800190c:	f7fe fe79 	bl	8000602 <_write>
 8001910:	1c43      	adds	r3, r0, #1
 8001912:	d102      	bne.n	800191a <_write_r+0x1e>
 8001914:	682b      	ldr	r3, [r5, #0]
 8001916:	b103      	cbz	r3, 800191a <_write_r+0x1e>
 8001918:	6023      	str	r3, [r4, #0]
 800191a:	bd38      	pop	{r3, r4, r5, pc}
 800191c:	200000a0 	.word	0x200000a0

08001920 <_close_r>:
 8001920:	b538      	push	{r3, r4, r5, lr}
 8001922:	4d06      	ldr	r5, [pc, #24]	; (800193c <_close_r+0x1c>)
 8001924:	2300      	movs	r3, #0
 8001926:	4604      	mov	r4, r0
 8001928:	4608      	mov	r0, r1
 800192a:	602b      	str	r3, [r5, #0]
 800192c:	f7fe fe85 	bl	800063a <_close>
 8001930:	1c43      	adds	r3, r0, #1
 8001932:	d102      	bne.n	800193a <_close_r+0x1a>
 8001934:	682b      	ldr	r3, [r5, #0]
 8001936:	b103      	cbz	r3, 800193a <_close_r+0x1a>
 8001938:	6023      	str	r3, [r4, #0]
 800193a:	bd38      	pop	{r3, r4, r5, pc}
 800193c:	200000a0 	.word	0x200000a0

08001940 <_fstat_r>:
 8001940:	b538      	push	{r3, r4, r5, lr}
 8001942:	4d07      	ldr	r5, [pc, #28]	; (8001960 <_fstat_r+0x20>)
 8001944:	2300      	movs	r3, #0
 8001946:	4604      	mov	r4, r0
 8001948:	4608      	mov	r0, r1
 800194a:	4611      	mov	r1, r2
 800194c:	602b      	str	r3, [r5, #0]
 800194e:	f7fe fe7f 	bl	8000650 <_fstat>
 8001952:	1c43      	adds	r3, r0, #1
 8001954:	d102      	bne.n	800195c <_fstat_r+0x1c>
 8001956:	682b      	ldr	r3, [r5, #0]
 8001958:	b103      	cbz	r3, 800195c <_fstat_r+0x1c>
 800195a:	6023      	str	r3, [r4, #0]
 800195c:	bd38      	pop	{r3, r4, r5, pc}
 800195e:	bf00      	nop
 8001960:	200000a0 	.word	0x200000a0

08001964 <_isatty_r>:
 8001964:	b538      	push	{r3, r4, r5, lr}
 8001966:	4d06      	ldr	r5, [pc, #24]	; (8001980 <_isatty_r+0x1c>)
 8001968:	2300      	movs	r3, #0
 800196a:	4604      	mov	r4, r0
 800196c:	4608      	mov	r0, r1
 800196e:	602b      	str	r3, [r5, #0]
 8001970:	f7fe fe7d 	bl	800066e <_isatty>
 8001974:	1c43      	adds	r3, r0, #1
 8001976:	d102      	bne.n	800197e <_isatty_r+0x1a>
 8001978:	682b      	ldr	r3, [r5, #0]
 800197a:	b103      	cbz	r3, 800197e <_isatty_r+0x1a>
 800197c:	6023      	str	r3, [r4, #0]
 800197e:	bd38      	pop	{r3, r4, r5, pc}
 8001980:	200000a0 	.word	0x200000a0

08001984 <_lseek_r>:
 8001984:	b538      	push	{r3, r4, r5, lr}
 8001986:	4d07      	ldr	r5, [pc, #28]	; (80019a4 <_lseek_r+0x20>)
 8001988:	4604      	mov	r4, r0
 800198a:	4608      	mov	r0, r1
 800198c:	4611      	mov	r1, r2
 800198e:	2200      	movs	r2, #0
 8001990:	602a      	str	r2, [r5, #0]
 8001992:	461a      	mov	r2, r3
 8001994:	f7fe fe75 	bl	8000682 <_lseek>
 8001998:	1c43      	adds	r3, r0, #1
 800199a:	d102      	bne.n	80019a2 <_lseek_r+0x1e>
 800199c:	682b      	ldr	r3, [r5, #0]
 800199e:	b103      	cbz	r3, 80019a2 <_lseek_r+0x1e>
 80019a0:	6023      	str	r3, [r4, #0]
 80019a2:	bd38      	pop	{r3, r4, r5, pc}
 80019a4:	200000a0 	.word	0x200000a0

080019a8 <_read_r>:
 80019a8:	b538      	push	{r3, r4, r5, lr}
 80019aa:	4d07      	ldr	r5, [pc, #28]	; (80019c8 <_read_r+0x20>)
 80019ac:	4604      	mov	r4, r0
 80019ae:	4608      	mov	r0, r1
 80019b0:	4611      	mov	r1, r2
 80019b2:	2200      	movs	r2, #0
 80019b4:	602a      	str	r2, [r5, #0]
 80019b6:	461a      	mov	r2, r3
 80019b8:	f7fe fe06 	bl	80005c8 <_read>
 80019bc:	1c43      	adds	r3, r0, #1
 80019be:	d102      	bne.n	80019c6 <_read_r+0x1e>
 80019c0:	682b      	ldr	r3, [r5, #0]
 80019c2:	b103      	cbz	r3, 80019c6 <_read_r+0x1e>
 80019c4:	6023      	str	r3, [r4, #0]
 80019c6:	bd38      	pop	{r3, r4, r5, pc}
 80019c8:	200000a0 	.word	0x200000a0

080019cc <_init>:
 80019cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019ce:	bf00      	nop
 80019d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019d2:	bc08      	pop	{r3}
 80019d4:	469e      	mov	lr, r3
 80019d6:	4770      	bx	lr

080019d8 <_fini>:
 80019d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019da:	bf00      	nop
 80019dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019de:	bc08      	pop	{r3}
 80019e0:	469e      	mov	lr, r3
 80019e2:	4770      	bx	lr


2_system_driver-uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d68  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08000f2c  08000f2c  00010f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000fac  08000fac  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08000fac  08000fac  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000fac  08000fac  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000fac  08000fac  00010fac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000fb0  08000fb0  00010fb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08000fb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  20000064  08001018  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  08001018  0002009c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002be8  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000083e  00000000  00000000  00022c76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000170  00000000  00000000  000234b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000118  00000000  00000000  00023628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aa27  00000000  00000000  00023740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001fc9  00000000  00000000  0003e167  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090b09  00000000  00000000  00040130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d0c39  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ac8  00000000  00000000  000d0c8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000064 	.word	0x20000064
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000f14 	.word	0x08000f14

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000068 	.word	0x20000068
 8000200:	08000f14 	.word	0x08000f14

08000204 <fpu_enable>:

#include "fpu.h"


void fpu_enable(void)
{
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0
	/* Enable Floating Point Unit: Enable CP10 and CP11 Full Access! */
	 SCB->CPACR |= (1<<20);
 8000208:	4b11      	ldr	r3, [pc, #68]	; (8000250 <fpu_enable+0x4c>)
 800020a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800020e:	4a10      	ldr	r2, [pc, #64]	; (8000250 <fpu_enable+0x4c>)
 8000210:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000214:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	 SCB->CPACR |= (1<<21);
 8000218:	4b0d      	ldr	r3, [pc, #52]	; (8000250 <fpu_enable+0x4c>)
 800021a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800021e:	4a0c      	ldr	r2, [pc, #48]	; (8000250 <fpu_enable+0x4c>)
 8000220:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000224:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	 SCB->CPACR |= (1<<22);
 8000228:	4b09      	ldr	r3, [pc, #36]	; (8000250 <fpu_enable+0x4c>)
 800022a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800022e:	4a08      	ldr	r2, [pc, #32]	; (8000250 <fpu_enable+0x4c>)
 8000230:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000234:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	 SCB->CPACR |= (1<<23);
 8000238:	4b05      	ldr	r3, [pc, #20]	; (8000250 <fpu_enable+0x4c>)
 800023a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800023e:	4a04      	ldr	r2, [pc, #16]	; (8000250 <fpu_enable+0x4c>)
 8000240:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000244:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8000248:	bf00      	nop
 800024a:	46bd      	mov	sp, r7
 800024c:	bc80      	pop	{r7}
 800024e:	4770      	bx	lr
 8000250:	e000ed00 	.word	0xe000ed00

08000254 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0
	/* Enable FPU */
	fpu_enable();
 8000258:	f7ff ffd4 	bl	8000204 <fpu_enable>
    /* initialize UART */
	uart_init();
 800025c:	f000 f8a8 	bl	80003b0 <uart_init>
    printf("Testing the USART Module!\n");
 8000260:	4802      	ldr	r0, [pc, #8]	; (800026c <main+0x18>)
 8000262:	f000 fa01 	bl	8000668 <puts>
 8000266:	2300      	movs	r3, #0
}
 8000268:	4618      	mov	r0, r3
 800026a:	bd80      	pop	{r7, pc}
 800026c:	08000f2c 	.word	0x08000f2c

08000270 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b086      	sub	sp, #24
 8000274:	af00      	add	r7, sp, #0
 8000276:	60f8      	str	r0, [r7, #12]
 8000278:	60b9      	str	r1, [r7, #8]
 800027a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800027c:	2300      	movs	r3, #0
 800027e:	617b      	str	r3, [r7, #20]
 8000280:	e00a      	b.n	8000298 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000282:	f3af 8000 	nop.w
 8000286:	4601      	mov	r1, r0
 8000288:	68bb      	ldr	r3, [r7, #8]
 800028a:	1c5a      	adds	r2, r3, #1
 800028c:	60ba      	str	r2, [r7, #8]
 800028e:	b2ca      	uxtb	r2, r1
 8000290:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000292:	697b      	ldr	r3, [r7, #20]
 8000294:	3301      	adds	r3, #1
 8000296:	617b      	str	r3, [r7, #20]
 8000298:	697a      	ldr	r2, [r7, #20]
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	429a      	cmp	r2, r3
 800029e:	dbf0      	blt.n	8000282 <_read+0x12>
	}

return len;
 80002a0:	687b      	ldr	r3, [r7, #4]
}
 80002a2:	4618      	mov	r0, r3
 80002a4:	3718      	adds	r7, #24
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}

080002aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80002aa:	b580      	push	{r7, lr}
 80002ac:	b086      	sub	sp, #24
 80002ae:	af00      	add	r7, sp, #0
 80002b0:	60f8      	str	r0, [r7, #12]
 80002b2:	60b9      	str	r1, [r7, #8]
 80002b4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002b6:	2300      	movs	r3, #0
 80002b8:	617b      	str	r3, [r7, #20]
 80002ba:	e009      	b.n	80002d0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80002bc:	68bb      	ldr	r3, [r7, #8]
 80002be:	1c5a      	adds	r2, r3, #1
 80002c0:	60ba      	str	r2, [r7, #8]
 80002c2:	781b      	ldrb	r3, [r3, #0]
 80002c4:	4618      	mov	r0, r3
 80002c6:	f000 f8e3 	bl	8000490 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002ca:	697b      	ldr	r3, [r7, #20]
 80002cc:	3301      	adds	r3, #1
 80002ce:	617b      	str	r3, [r7, #20]
 80002d0:	697a      	ldr	r2, [r7, #20]
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	429a      	cmp	r2, r3
 80002d6:	dbf1      	blt.n	80002bc <_write+0x12>
	}
	return len;
 80002d8:	687b      	ldr	r3, [r7, #4]
}
 80002da:	4618      	mov	r0, r3
 80002dc:	3718      	adds	r7, #24
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}

080002e2 <_close>:

int _close(int file)
{
 80002e2:	b480      	push	{r7}
 80002e4:	b083      	sub	sp, #12
 80002e6:	af00      	add	r7, sp, #0
 80002e8:	6078      	str	r0, [r7, #4]
	return -1;
 80002ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80002ee:	4618      	mov	r0, r3
 80002f0:	370c      	adds	r7, #12
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bc80      	pop	{r7}
 80002f6:	4770      	bx	lr

080002f8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
 8000300:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000302:	683b      	ldr	r3, [r7, #0]
 8000304:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000308:	605a      	str	r2, [r3, #4]
	return 0;
 800030a:	2300      	movs	r3, #0
}
 800030c:	4618      	mov	r0, r3
 800030e:	370c      	adds	r7, #12
 8000310:	46bd      	mov	sp, r7
 8000312:	bc80      	pop	{r7}
 8000314:	4770      	bx	lr

08000316 <_isatty>:

int _isatty(int file)
{
 8000316:	b480      	push	{r7}
 8000318:	b083      	sub	sp, #12
 800031a:	af00      	add	r7, sp, #0
 800031c:	6078      	str	r0, [r7, #4]
	return 1;
 800031e:	2301      	movs	r3, #1
}
 8000320:	4618      	mov	r0, r3
 8000322:	370c      	adds	r7, #12
 8000324:	46bd      	mov	sp, r7
 8000326:	bc80      	pop	{r7}
 8000328:	4770      	bx	lr

0800032a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800032a:	b480      	push	{r7}
 800032c:	b085      	sub	sp, #20
 800032e:	af00      	add	r7, sp, #0
 8000330:	60f8      	str	r0, [r7, #12]
 8000332:	60b9      	str	r1, [r7, #8]
 8000334:	607a      	str	r2, [r7, #4]
	return 0;
 8000336:	2300      	movs	r3, #0
}
 8000338:	4618      	mov	r0, r3
 800033a:	3714      	adds	r7, #20
 800033c:	46bd      	mov	sp, r7
 800033e:	bc80      	pop	{r7}
 8000340:	4770      	bx	lr
	...

08000344 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b086      	sub	sp, #24
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800034c:	4a14      	ldr	r2, [pc, #80]	; (80003a0 <_sbrk+0x5c>)
 800034e:	4b15      	ldr	r3, [pc, #84]	; (80003a4 <_sbrk+0x60>)
 8000350:	1ad3      	subs	r3, r2, r3
 8000352:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000354:	697b      	ldr	r3, [r7, #20]
 8000356:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000358:	4b13      	ldr	r3, [pc, #76]	; (80003a8 <_sbrk+0x64>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	2b00      	cmp	r3, #0
 800035e:	d102      	bne.n	8000366 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000360:	4b11      	ldr	r3, [pc, #68]	; (80003a8 <_sbrk+0x64>)
 8000362:	4a12      	ldr	r2, [pc, #72]	; (80003ac <_sbrk+0x68>)
 8000364:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000366:	4b10      	ldr	r3, [pc, #64]	; (80003a8 <_sbrk+0x64>)
 8000368:	681a      	ldr	r2, [r3, #0]
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	4413      	add	r3, r2
 800036e:	693a      	ldr	r2, [r7, #16]
 8000370:	429a      	cmp	r2, r3
 8000372:	d207      	bcs.n	8000384 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000374:	f000 f8d8 	bl	8000528 <__errno>
 8000378:	4603      	mov	r3, r0
 800037a:	220c      	movs	r2, #12
 800037c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800037e:	f04f 33ff 	mov.w	r3, #4294967295
 8000382:	e009      	b.n	8000398 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000384:	4b08      	ldr	r3, [pc, #32]	; (80003a8 <_sbrk+0x64>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800038a:	4b07      	ldr	r3, [pc, #28]	; (80003a8 <_sbrk+0x64>)
 800038c:	681a      	ldr	r2, [r3, #0]
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	4413      	add	r3, r2
 8000392:	4a05      	ldr	r2, [pc, #20]	; (80003a8 <_sbrk+0x64>)
 8000394:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000396:	68fb      	ldr	r3, [r7, #12]
}
 8000398:	4618      	mov	r0, r3
 800039a:	3718      	adds	r7, #24
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}
 80003a0:	20020000 	.word	0x20020000
 80003a4:	00000400 	.word	0x00000400
 80003a8:	20000080 	.word	0x20000080
 80003ac:	200000a0 	.word	0x200000a0

080003b0 <uart_init>:
 static uint16_t compute_uart_bd(uint32_t periph_clk, uint32_t baudrate);
 static void uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate);


 void uart_init(void)
 {
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
		  Configure Transfer Direction
		  Enable the UART module
	 */

	 /* Enable Clock Access to GPIOA */
	 RCC->AHB1ENR  |= GPIOA_EN;
 80003b4:	4b1f      	ldr	r3, [pc, #124]	; (8000434 <uart_init+0x84>)
 80003b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003b8:	4a1e      	ldr	r2, [pc, #120]	; (8000434 <uart_init+0x84>)
 80003ba:	f043 0301 	orr.w	r3, r3, #1
 80003be:	6313      	str	r3, [r2, #48]	; 0x30
	 /* Set the mode of PA2 to alternate Function mode*/
	 GPIOA->MODER &= ~(GPIOA_AF_PIN4);
 80003c0:	4b1d      	ldr	r3, [pc, #116]	; (8000438 <uart_init+0x88>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	4a1c      	ldr	r2, [pc, #112]	; (8000438 <uart_init+0x88>)
 80003c6:	f023 0310 	bic.w	r3, r3, #16
 80003ca:	6013      	str	r3, [r2, #0]
	 GPIOA->MODER |=  GPIOA_AF_PIN5;
 80003cc:	4b1a      	ldr	r3, [pc, #104]	; (8000438 <uart_init+0x88>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4a19      	ldr	r2, [pc, #100]	; (8000438 <uart_init+0x88>)
 80003d2:	f043 0320 	orr.w	r3, r3, #32
 80003d6:	6013      	str	r3, [r2, #0]

	 /* Set the Alternate Function to AF7(Uart2_tx); set it according to the datasheet!  */
	 GPIOA->AFR[0] |= (GPIOA_AFR_PIN8);
 80003d8:	4b17      	ldr	r3, [pc, #92]	; (8000438 <uart_init+0x88>)
 80003da:	6a1b      	ldr	r3, [r3, #32]
 80003dc:	4a16      	ldr	r2, [pc, #88]	; (8000438 <uart_init+0x88>)
 80003de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003e2:	6213      	str	r3, [r2, #32]
	 GPIOA->AFR[0] |= (GPIOA_AFR_PIN9);
 80003e4:	4b14      	ldr	r3, [pc, #80]	; (8000438 <uart_init+0x88>)
 80003e6:	6a1b      	ldr	r3, [r3, #32]
 80003e8:	4a13      	ldr	r2, [pc, #76]	; (8000438 <uart_init+0x88>)
 80003ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80003ee:	6213      	str	r3, [r2, #32]
	 GPIOA->AFR[0] |= (GPIOA_AFR_PIN10);
 80003f0:	4b11      	ldr	r3, [pc, #68]	; (8000438 <uart_init+0x88>)
 80003f2:	6a1b      	ldr	r3, [r3, #32]
 80003f4:	4a10      	ldr	r2, [pc, #64]	; (8000438 <uart_init+0x88>)
 80003f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80003fa:	6213      	str	r3, [r2, #32]
	 GPIOA->AFR[0] &= ~(GPIOA_AFR_PIN11);
 80003fc:	4b0e      	ldr	r3, [pc, #56]	; (8000438 <uart_init+0x88>)
 80003fe:	6a1b      	ldr	r3, [r3, #32]
 8000400:	4a0d      	ldr	r2, [pc, #52]	; (8000438 <uart_init+0x88>)
 8000402:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000406:	6213      	str	r3, [r2, #32]

	 /* Enable Clock access to UART 2 */
     RCC->APB1ENR |= UART2EN;
 8000408:	4b0a      	ldr	r3, [pc, #40]	; (8000434 <uart_init+0x84>)
 800040a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800040c:	4a09      	ldr	r2, [pc, #36]	; (8000434 <uart_init+0x84>)
 800040e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000412:	6413      	str	r3, [r2, #64]	; 0x40
	 /* Configure Baud Rate */
     uart_set_baudrate(APB1_CLK, UART_BAUDRATE);
 8000414:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000418:	4808      	ldr	r0, [pc, #32]	; (800043c <uart_init+0x8c>)
 800041a:	f000 f825 	bl	8000468 <uart_set_baudrate>
     /* Configure Transfer Direction */
     USART2->CR1 = CR1_TE;
 800041e:	4b08      	ldr	r3, [pc, #32]	; (8000440 <uart_init+0x90>)
 8000420:	2208      	movs	r2, #8
 8000422:	60da      	str	r2, [r3, #12]
     /* Enable the UART module */
     USART2->CR1 |= CR1_UE;
 8000424:	4b06      	ldr	r3, [pc, #24]	; (8000440 <uart_init+0x90>)
 8000426:	68db      	ldr	r3, [r3, #12]
 8000428:	4a05      	ldr	r2, [pc, #20]	; (8000440 <uart_init+0x90>)
 800042a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800042e:	60d3      	str	r3, [r2, #12]

 }
 8000430:	bf00      	nop
 8000432:	bd80      	pop	{r7, pc}
 8000434:	40023800 	.word	0x40023800
 8000438:	40020000 	.word	0x40020000
 800043c:	00f42400 	.word	0x00f42400
 8000440:	40004400 	.word	0x40004400

08000444 <compute_uart_bd>:

 static uint16_t compute_uart_bd(uint32_t periph_clk, uint32_t baudrate)
 {
 8000444:	b480      	push	{r7}
 8000446:	b083      	sub	sp, #12
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
 800044c:	6039      	str	r1, [r7, #0]
	 return ((periph_clk + (baudrate/2U))/baudrate);
 800044e:	683b      	ldr	r3, [r7, #0]
 8000450:	085a      	lsrs	r2, r3, #1
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	441a      	add	r2, r3
 8000456:	683b      	ldr	r3, [r7, #0]
 8000458:	fbb2 f3f3 	udiv	r3, r2, r3
 800045c:	b29b      	uxth	r3, r3
 }
 800045e:	4618      	mov	r0, r3
 8000460:	370c      	adds	r7, #12
 8000462:	46bd      	mov	sp, r7
 8000464:	bc80      	pop	{r7}
 8000466:	4770      	bx	lr

08000468 <uart_set_baudrate>:

 static void uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate)
 {
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
 8000470:	6039      	str	r1, [r7, #0]
	 USART2->BRR = compute_uart_bd(periph_clk,baudrate);
 8000472:	6839      	ldr	r1, [r7, #0]
 8000474:	6878      	ldr	r0, [r7, #4]
 8000476:	f7ff ffe5 	bl	8000444 <compute_uart_bd>
 800047a:	4603      	mov	r3, r0
 800047c:	461a      	mov	r2, r3
 800047e:	4b03      	ldr	r3, [pc, #12]	; (800048c <uart_set_baudrate+0x24>)
 8000480:	609a      	str	r2, [r3, #8]
 }
 8000482:	bf00      	nop
 8000484:	3708      	adds	r7, #8
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}
 800048a:	bf00      	nop
 800048c:	40004400 	.word	0x40004400

08000490 <__io_putchar>:

 int __io_putchar(int ch)
 {
 8000490:	b580      	push	{r7, lr}
 8000492:	b082      	sub	sp, #8
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
 	uart_write(ch);
 8000498:	6878      	ldr	r0, [r7, #4]
 800049a:	f000 f805 	bl	80004a8 <uart_write>
 	return ch;
 800049e:	687b      	ldr	r3, [r7, #4]
 }
 80004a0:	4618      	mov	r0, r3
 80004a2:	3708      	adds	r7, #8
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bd80      	pop	{r7, pc}

080004a8 <uart_write>:

void uart_write(int ch)
 {
 80004a8:	b480      	push	{r7}
 80004aa:	b083      	sub	sp, #12
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
	 /* Ensure transmit data register is empty before new data can be loaded */
    while(!(USART2->SR & SR_TXE));
 80004b0:	bf00      	nop
 80004b2:	4b07      	ldr	r3, [pc, #28]	; (80004d0 <uart_write+0x28>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d0f9      	beq.n	80004b2 <uart_write+0xa>
    USART2->DR = (ch & 0xFF);
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	4a03      	ldr	r2, [pc, #12]	; (80004d0 <uart_write+0x28>)
 80004c2:	b2db      	uxtb	r3, r3
 80004c4:	6053      	str	r3, [r2, #4]
 }
 80004c6:	bf00      	nop
 80004c8:	370c      	adds	r7, #12
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bc80      	pop	{r7}
 80004ce:	4770      	bx	lr
 80004d0:	40004400 	.word	0x40004400

080004d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004d4:	480d      	ldr	r0, [pc, #52]	; (800050c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004d6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004d8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004dc:	480c      	ldr	r0, [pc, #48]	; (8000510 <LoopForever+0x6>)
  ldr r1, =_edata
 80004de:	490d      	ldr	r1, [pc, #52]	; (8000514 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004e0:	4a0d      	ldr	r2, [pc, #52]	; (8000518 <LoopForever+0xe>)
  movs r3, #0
 80004e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004e4:	e002      	b.n	80004ec <LoopCopyDataInit>

080004e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004ea:	3304      	adds	r3, #4

080004ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004f0:	d3f9      	bcc.n	80004e6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004f2:	4a0a      	ldr	r2, [pc, #40]	; (800051c <LoopForever+0x12>)
  ldr r4, =_ebss
 80004f4:	4c0a      	ldr	r4, [pc, #40]	; (8000520 <LoopForever+0x16>)
  movs r3, #0
 80004f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004f8:	e001      	b.n	80004fe <LoopFillZerobss>

080004fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004fc:	3204      	adds	r2, #4

080004fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000500:	d3fb      	bcc.n	80004fa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000502:	f000 f817 	bl	8000534 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000506:	f7ff fea5 	bl	8000254 <main>

0800050a <LoopForever>:

LoopForever:
    b LoopForever
 800050a:	e7fe      	b.n	800050a <LoopForever>
  ldr   r0, =_estack
 800050c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000510:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000514:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000518:	08000fb4 	.word	0x08000fb4
  ldr r2, =_sbss
 800051c:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000520:	2000009c 	.word	0x2000009c

08000524 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000524:	e7fe      	b.n	8000524 <ADC_IRQHandler>
	...

08000528 <__errno>:
 8000528:	4b01      	ldr	r3, [pc, #4]	; (8000530 <__errno+0x8>)
 800052a:	6818      	ldr	r0, [r3, #0]
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	20000000 	.word	0x20000000

08000534 <__libc_init_array>:
 8000534:	b570      	push	{r4, r5, r6, lr}
 8000536:	4d0d      	ldr	r5, [pc, #52]	; (800056c <__libc_init_array+0x38>)
 8000538:	4c0d      	ldr	r4, [pc, #52]	; (8000570 <__libc_init_array+0x3c>)
 800053a:	1b64      	subs	r4, r4, r5
 800053c:	10a4      	asrs	r4, r4, #2
 800053e:	2600      	movs	r6, #0
 8000540:	42a6      	cmp	r6, r4
 8000542:	d109      	bne.n	8000558 <__libc_init_array+0x24>
 8000544:	4d0b      	ldr	r5, [pc, #44]	; (8000574 <__libc_init_array+0x40>)
 8000546:	4c0c      	ldr	r4, [pc, #48]	; (8000578 <__libc_init_array+0x44>)
 8000548:	f000 fce4 	bl	8000f14 <_init>
 800054c:	1b64      	subs	r4, r4, r5
 800054e:	10a4      	asrs	r4, r4, #2
 8000550:	2600      	movs	r6, #0
 8000552:	42a6      	cmp	r6, r4
 8000554:	d105      	bne.n	8000562 <__libc_init_array+0x2e>
 8000556:	bd70      	pop	{r4, r5, r6, pc}
 8000558:	f855 3b04 	ldr.w	r3, [r5], #4
 800055c:	4798      	blx	r3
 800055e:	3601      	adds	r6, #1
 8000560:	e7ee      	b.n	8000540 <__libc_init_array+0xc>
 8000562:	f855 3b04 	ldr.w	r3, [r5], #4
 8000566:	4798      	blx	r3
 8000568:	3601      	adds	r6, #1
 800056a:	e7f2      	b.n	8000552 <__libc_init_array+0x1e>
 800056c:	08000fac 	.word	0x08000fac
 8000570:	08000fac 	.word	0x08000fac
 8000574:	08000fac 	.word	0x08000fac
 8000578:	08000fb0 	.word	0x08000fb0

0800057c <memset>:
 800057c:	4402      	add	r2, r0
 800057e:	4603      	mov	r3, r0
 8000580:	4293      	cmp	r3, r2
 8000582:	d100      	bne.n	8000586 <memset+0xa>
 8000584:	4770      	bx	lr
 8000586:	f803 1b01 	strb.w	r1, [r3], #1
 800058a:	e7f9      	b.n	8000580 <memset+0x4>

0800058c <_puts_r>:
 800058c:	b570      	push	{r4, r5, r6, lr}
 800058e:	460e      	mov	r6, r1
 8000590:	4605      	mov	r5, r0
 8000592:	b118      	cbz	r0, 800059c <_puts_r+0x10>
 8000594:	6983      	ldr	r3, [r0, #24]
 8000596:	b90b      	cbnz	r3, 800059c <_puts_r+0x10>
 8000598:	f000 fa48 	bl	8000a2c <__sinit>
 800059c:	69ab      	ldr	r3, [r5, #24]
 800059e:	68ac      	ldr	r4, [r5, #8]
 80005a0:	b913      	cbnz	r3, 80005a8 <_puts_r+0x1c>
 80005a2:	4628      	mov	r0, r5
 80005a4:	f000 fa42 	bl	8000a2c <__sinit>
 80005a8:	4b2c      	ldr	r3, [pc, #176]	; (800065c <_puts_r+0xd0>)
 80005aa:	429c      	cmp	r4, r3
 80005ac:	d120      	bne.n	80005f0 <_puts_r+0x64>
 80005ae:	686c      	ldr	r4, [r5, #4]
 80005b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80005b2:	07db      	lsls	r3, r3, #31
 80005b4:	d405      	bmi.n	80005c2 <_puts_r+0x36>
 80005b6:	89a3      	ldrh	r3, [r4, #12]
 80005b8:	0598      	lsls	r0, r3, #22
 80005ba:	d402      	bmi.n	80005c2 <_puts_r+0x36>
 80005bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80005be:	f000 fad3 	bl	8000b68 <__retarget_lock_acquire_recursive>
 80005c2:	89a3      	ldrh	r3, [r4, #12]
 80005c4:	0719      	lsls	r1, r3, #28
 80005c6:	d51d      	bpl.n	8000604 <_puts_r+0x78>
 80005c8:	6923      	ldr	r3, [r4, #16]
 80005ca:	b1db      	cbz	r3, 8000604 <_puts_r+0x78>
 80005cc:	3e01      	subs	r6, #1
 80005ce:	68a3      	ldr	r3, [r4, #8]
 80005d0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80005d4:	3b01      	subs	r3, #1
 80005d6:	60a3      	str	r3, [r4, #8]
 80005d8:	bb39      	cbnz	r1, 800062a <_puts_r+0x9e>
 80005da:	2b00      	cmp	r3, #0
 80005dc:	da38      	bge.n	8000650 <_puts_r+0xc4>
 80005de:	4622      	mov	r2, r4
 80005e0:	210a      	movs	r1, #10
 80005e2:	4628      	mov	r0, r5
 80005e4:	f000 f848 	bl	8000678 <__swbuf_r>
 80005e8:	3001      	adds	r0, #1
 80005ea:	d011      	beq.n	8000610 <_puts_r+0x84>
 80005ec:	250a      	movs	r5, #10
 80005ee:	e011      	b.n	8000614 <_puts_r+0x88>
 80005f0:	4b1b      	ldr	r3, [pc, #108]	; (8000660 <_puts_r+0xd4>)
 80005f2:	429c      	cmp	r4, r3
 80005f4:	d101      	bne.n	80005fa <_puts_r+0x6e>
 80005f6:	68ac      	ldr	r4, [r5, #8]
 80005f8:	e7da      	b.n	80005b0 <_puts_r+0x24>
 80005fa:	4b1a      	ldr	r3, [pc, #104]	; (8000664 <_puts_r+0xd8>)
 80005fc:	429c      	cmp	r4, r3
 80005fe:	bf08      	it	eq
 8000600:	68ec      	ldreq	r4, [r5, #12]
 8000602:	e7d5      	b.n	80005b0 <_puts_r+0x24>
 8000604:	4621      	mov	r1, r4
 8000606:	4628      	mov	r0, r5
 8000608:	f000 f888 	bl	800071c <__swsetup_r>
 800060c:	2800      	cmp	r0, #0
 800060e:	d0dd      	beq.n	80005cc <_puts_r+0x40>
 8000610:	f04f 35ff 	mov.w	r5, #4294967295
 8000614:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000616:	07da      	lsls	r2, r3, #31
 8000618:	d405      	bmi.n	8000626 <_puts_r+0x9a>
 800061a:	89a3      	ldrh	r3, [r4, #12]
 800061c:	059b      	lsls	r3, r3, #22
 800061e:	d402      	bmi.n	8000626 <_puts_r+0x9a>
 8000620:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000622:	f000 faa2 	bl	8000b6a <__retarget_lock_release_recursive>
 8000626:	4628      	mov	r0, r5
 8000628:	bd70      	pop	{r4, r5, r6, pc}
 800062a:	2b00      	cmp	r3, #0
 800062c:	da04      	bge.n	8000638 <_puts_r+0xac>
 800062e:	69a2      	ldr	r2, [r4, #24]
 8000630:	429a      	cmp	r2, r3
 8000632:	dc06      	bgt.n	8000642 <_puts_r+0xb6>
 8000634:	290a      	cmp	r1, #10
 8000636:	d004      	beq.n	8000642 <_puts_r+0xb6>
 8000638:	6823      	ldr	r3, [r4, #0]
 800063a:	1c5a      	adds	r2, r3, #1
 800063c:	6022      	str	r2, [r4, #0]
 800063e:	7019      	strb	r1, [r3, #0]
 8000640:	e7c5      	b.n	80005ce <_puts_r+0x42>
 8000642:	4622      	mov	r2, r4
 8000644:	4628      	mov	r0, r5
 8000646:	f000 f817 	bl	8000678 <__swbuf_r>
 800064a:	3001      	adds	r0, #1
 800064c:	d1bf      	bne.n	80005ce <_puts_r+0x42>
 800064e:	e7df      	b.n	8000610 <_puts_r+0x84>
 8000650:	6823      	ldr	r3, [r4, #0]
 8000652:	250a      	movs	r5, #10
 8000654:	1c5a      	adds	r2, r3, #1
 8000656:	6022      	str	r2, [r4, #0]
 8000658:	701d      	strb	r5, [r3, #0]
 800065a:	e7db      	b.n	8000614 <_puts_r+0x88>
 800065c:	08000f6c 	.word	0x08000f6c
 8000660:	08000f8c 	.word	0x08000f8c
 8000664:	08000f4c 	.word	0x08000f4c

08000668 <puts>:
 8000668:	4b02      	ldr	r3, [pc, #8]	; (8000674 <puts+0xc>)
 800066a:	4601      	mov	r1, r0
 800066c:	6818      	ldr	r0, [r3, #0]
 800066e:	f7ff bf8d 	b.w	800058c <_puts_r>
 8000672:	bf00      	nop
 8000674:	20000000 	.word	0x20000000

08000678 <__swbuf_r>:
 8000678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800067a:	460e      	mov	r6, r1
 800067c:	4614      	mov	r4, r2
 800067e:	4605      	mov	r5, r0
 8000680:	b118      	cbz	r0, 800068a <__swbuf_r+0x12>
 8000682:	6983      	ldr	r3, [r0, #24]
 8000684:	b90b      	cbnz	r3, 800068a <__swbuf_r+0x12>
 8000686:	f000 f9d1 	bl	8000a2c <__sinit>
 800068a:	4b21      	ldr	r3, [pc, #132]	; (8000710 <__swbuf_r+0x98>)
 800068c:	429c      	cmp	r4, r3
 800068e:	d12b      	bne.n	80006e8 <__swbuf_r+0x70>
 8000690:	686c      	ldr	r4, [r5, #4]
 8000692:	69a3      	ldr	r3, [r4, #24]
 8000694:	60a3      	str	r3, [r4, #8]
 8000696:	89a3      	ldrh	r3, [r4, #12]
 8000698:	071a      	lsls	r2, r3, #28
 800069a:	d52f      	bpl.n	80006fc <__swbuf_r+0x84>
 800069c:	6923      	ldr	r3, [r4, #16]
 800069e:	b36b      	cbz	r3, 80006fc <__swbuf_r+0x84>
 80006a0:	6923      	ldr	r3, [r4, #16]
 80006a2:	6820      	ldr	r0, [r4, #0]
 80006a4:	1ac0      	subs	r0, r0, r3
 80006a6:	6963      	ldr	r3, [r4, #20]
 80006a8:	b2f6      	uxtb	r6, r6
 80006aa:	4283      	cmp	r3, r0
 80006ac:	4637      	mov	r7, r6
 80006ae:	dc04      	bgt.n	80006ba <__swbuf_r+0x42>
 80006b0:	4621      	mov	r1, r4
 80006b2:	4628      	mov	r0, r5
 80006b4:	f000 f926 	bl	8000904 <_fflush_r>
 80006b8:	bb30      	cbnz	r0, 8000708 <__swbuf_r+0x90>
 80006ba:	68a3      	ldr	r3, [r4, #8]
 80006bc:	3b01      	subs	r3, #1
 80006be:	60a3      	str	r3, [r4, #8]
 80006c0:	6823      	ldr	r3, [r4, #0]
 80006c2:	1c5a      	adds	r2, r3, #1
 80006c4:	6022      	str	r2, [r4, #0]
 80006c6:	701e      	strb	r6, [r3, #0]
 80006c8:	6963      	ldr	r3, [r4, #20]
 80006ca:	3001      	adds	r0, #1
 80006cc:	4283      	cmp	r3, r0
 80006ce:	d004      	beq.n	80006da <__swbuf_r+0x62>
 80006d0:	89a3      	ldrh	r3, [r4, #12]
 80006d2:	07db      	lsls	r3, r3, #31
 80006d4:	d506      	bpl.n	80006e4 <__swbuf_r+0x6c>
 80006d6:	2e0a      	cmp	r6, #10
 80006d8:	d104      	bne.n	80006e4 <__swbuf_r+0x6c>
 80006da:	4621      	mov	r1, r4
 80006dc:	4628      	mov	r0, r5
 80006de:	f000 f911 	bl	8000904 <_fflush_r>
 80006e2:	b988      	cbnz	r0, 8000708 <__swbuf_r+0x90>
 80006e4:	4638      	mov	r0, r7
 80006e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80006e8:	4b0a      	ldr	r3, [pc, #40]	; (8000714 <__swbuf_r+0x9c>)
 80006ea:	429c      	cmp	r4, r3
 80006ec:	d101      	bne.n	80006f2 <__swbuf_r+0x7a>
 80006ee:	68ac      	ldr	r4, [r5, #8]
 80006f0:	e7cf      	b.n	8000692 <__swbuf_r+0x1a>
 80006f2:	4b09      	ldr	r3, [pc, #36]	; (8000718 <__swbuf_r+0xa0>)
 80006f4:	429c      	cmp	r4, r3
 80006f6:	bf08      	it	eq
 80006f8:	68ec      	ldreq	r4, [r5, #12]
 80006fa:	e7ca      	b.n	8000692 <__swbuf_r+0x1a>
 80006fc:	4621      	mov	r1, r4
 80006fe:	4628      	mov	r0, r5
 8000700:	f000 f80c 	bl	800071c <__swsetup_r>
 8000704:	2800      	cmp	r0, #0
 8000706:	d0cb      	beq.n	80006a0 <__swbuf_r+0x28>
 8000708:	f04f 37ff 	mov.w	r7, #4294967295
 800070c:	e7ea      	b.n	80006e4 <__swbuf_r+0x6c>
 800070e:	bf00      	nop
 8000710:	08000f6c 	.word	0x08000f6c
 8000714:	08000f8c 	.word	0x08000f8c
 8000718:	08000f4c 	.word	0x08000f4c

0800071c <__swsetup_r>:
 800071c:	4b32      	ldr	r3, [pc, #200]	; (80007e8 <__swsetup_r+0xcc>)
 800071e:	b570      	push	{r4, r5, r6, lr}
 8000720:	681d      	ldr	r5, [r3, #0]
 8000722:	4606      	mov	r6, r0
 8000724:	460c      	mov	r4, r1
 8000726:	b125      	cbz	r5, 8000732 <__swsetup_r+0x16>
 8000728:	69ab      	ldr	r3, [r5, #24]
 800072a:	b913      	cbnz	r3, 8000732 <__swsetup_r+0x16>
 800072c:	4628      	mov	r0, r5
 800072e:	f000 f97d 	bl	8000a2c <__sinit>
 8000732:	4b2e      	ldr	r3, [pc, #184]	; (80007ec <__swsetup_r+0xd0>)
 8000734:	429c      	cmp	r4, r3
 8000736:	d10f      	bne.n	8000758 <__swsetup_r+0x3c>
 8000738:	686c      	ldr	r4, [r5, #4]
 800073a:	89a3      	ldrh	r3, [r4, #12]
 800073c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000740:	0719      	lsls	r1, r3, #28
 8000742:	d42c      	bmi.n	800079e <__swsetup_r+0x82>
 8000744:	06dd      	lsls	r5, r3, #27
 8000746:	d411      	bmi.n	800076c <__swsetup_r+0x50>
 8000748:	2309      	movs	r3, #9
 800074a:	6033      	str	r3, [r6, #0]
 800074c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000750:	81a3      	strh	r3, [r4, #12]
 8000752:	f04f 30ff 	mov.w	r0, #4294967295
 8000756:	e03e      	b.n	80007d6 <__swsetup_r+0xba>
 8000758:	4b25      	ldr	r3, [pc, #148]	; (80007f0 <__swsetup_r+0xd4>)
 800075a:	429c      	cmp	r4, r3
 800075c:	d101      	bne.n	8000762 <__swsetup_r+0x46>
 800075e:	68ac      	ldr	r4, [r5, #8]
 8000760:	e7eb      	b.n	800073a <__swsetup_r+0x1e>
 8000762:	4b24      	ldr	r3, [pc, #144]	; (80007f4 <__swsetup_r+0xd8>)
 8000764:	429c      	cmp	r4, r3
 8000766:	bf08      	it	eq
 8000768:	68ec      	ldreq	r4, [r5, #12]
 800076a:	e7e6      	b.n	800073a <__swsetup_r+0x1e>
 800076c:	0758      	lsls	r0, r3, #29
 800076e:	d512      	bpl.n	8000796 <__swsetup_r+0x7a>
 8000770:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000772:	b141      	cbz	r1, 8000786 <__swsetup_r+0x6a>
 8000774:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000778:	4299      	cmp	r1, r3
 800077a:	d002      	beq.n	8000782 <__swsetup_r+0x66>
 800077c:	4630      	mov	r0, r6
 800077e:	f000 fa59 	bl	8000c34 <_free_r>
 8000782:	2300      	movs	r3, #0
 8000784:	6363      	str	r3, [r4, #52]	; 0x34
 8000786:	89a3      	ldrh	r3, [r4, #12]
 8000788:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800078c:	81a3      	strh	r3, [r4, #12]
 800078e:	2300      	movs	r3, #0
 8000790:	6063      	str	r3, [r4, #4]
 8000792:	6923      	ldr	r3, [r4, #16]
 8000794:	6023      	str	r3, [r4, #0]
 8000796:	89a3      	ldrh	r3, [r4, #12]
 8000798:	f043 0308 	orr.w	r3, r3, #8
 800079c:	81a3      	strh	r3, [r4, #12]
 800079e:	6923      	ldr	r3, [r4, #16]
 80007a0:	b94b      	cbnz	r3, 80007b6 <__swsetup_r+0x9a>
 80007a2:	89a3      	ldrh	r3, [r4, #12]
 80007a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80007a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80007ac:	d003      	beq.n	80007b6 <__swsetup_r+0x9a>
 80007ae:	4621      	mov	r1, r4
 80007b0:	4630      	mov	r0, r6
 80007b2:	f000 f9ff 	bl	8000bb4 <__smakebuf_r>
 80007b6:	89a0      	ldrh	r0, [r4, #12]
 80007b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80007bc:	f010 0301 	ands.w	r3, r0, #1
 80007c0:	d00a      	beq.n	80007d8 <__swsetup_r+0xbc>
 80007c2:	2300      	movs	r3, #0
 80007c4:	60a3      	str	r3, [r4, #8]
 80007c6:	6963      	ldr	r3, [r4, #20]
 80007c8:	425b      	negs	r3, r3
 80007ca:	61a3      	str	r3, [r4, #24]
 80007cc:	6923      	ldr	r3, [r4, #16]
 80007ce:	b943      	cbnz	r3, 80007e2 <__swsetup_r+0xc6>
 80007d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80007d4:	d1ba      	bne.n	800074c <__swsetup_r+0x30>
 80007d6:	bd70      	pop	{r4, r5, r6, pc}
 80007d8:	0781      	lsls	r1, r0, #30
 80007da:	bf58      	it	pl
 80007dc:	6963      	ldrpl	r3, [r4, #20]
 80007de:	60a3      	str	r3, [r4, #8]
 80007e0:	e7f4      	b.n	80007cc <__swsetup_r+0xb0>
 80007e2:	2000      	movs	r0, #0
 80007e4:	e7f7      	b.n	80007d6 <__swsetup_r+0xba>
 80007e6:	bf00      	nop
 80007e8:	20000000 	.word	0x20000000
 80007ec:	08000f6c 	.word	0x08000f6c
 80007f0:	08000f8c 	.word	0x08000f8c
 80007f4:	08000f4c 	.word	0x08000f4c

080007f8 <__sflush_r>:
 80007f8:	898a      	ldrh	r2, [r1, #12]
 80007fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80007fe:	4605      	mov	r5, r0
 8000800:	0710      	lsls	r0, r2, #28
 8000802:	460c      	mov	r4, r1
 8000804:	d458      	bmi.n	80008b8 <__sflush_r+0xc0>
 8000806:	684b      	ldr	r3, [r1, #4]
 8000808:	2b00      	cmp	r3, #0
 800080a:	dc05      	bgt.n	8000818 <__sflush_r+0x20>
 800080c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800080e:	2b00      	cmp	r3, #0
 8000810:	dc02      	bgt.n	8000818 <__sflush_r+0x20>
 8000812:	2000      	movs	r0, #0
 8000814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000818:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800081a:	2e00      	cmp	r6, #0
 800081c:	d0f9      	beq.n	8000812 <__sflush_r+0x1a>
 800081e:	2300      	movs	r3, #0
 8000820:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000824:	682f      	ldr	r7, [r5, #0]
 8000826:	602b      	str	r3, [r5, #0]
 8000828:	d032      	beq.n	8000890 <__sflush_r+0x98>
 800082a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800082c:	89a3      	ldrh	r3, [r4, #12]
 800082e:	075a      	lsls	r2, r3, #29
 8000830:	d505      	bpl.n	800083e <__sflush_r+0x46>
 8000832:	6863      	ldr	r3, [r4, #4]
 8000834:	1ac0      	subs	r0, r0, r3
 8000836:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000838:	b10b      	cbz	r3, 800083e <__sflush_r+0x46>
 800083a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800083c:	1ac0      	subs	r0, r0, r3
 800083e:	2300      	movs	r3, #0
 8000840:	4602      	mov	r2, r0
 8000842:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000844:	6a21      	ldr	r1, [r4, #32]
 8000846:	4628      	mov	r0, r5
 8000848:	47b0      	blx	r6
 800084a:	1c43      	adds	r3, r0, #1
 800084c:	89a3      	ldrh	r3, [r4, #12]
 800084e:	d106      	bne.n	800085e <__sflush_r+0x66>
 8000850:	6829      	ldr	r1, [r5, #0]
 8000852:	291d      	cmp	r1, #29
 8000854:	d82c      	bhi.n	80008b0 <__sflush_r+0xb8>
 8000856:	4a2a      	ldr	r2, [pc, #168]	; (8000900 <__sflush_r+0x108>)
 8000858:	40ca      	lsrs	r2, r1
 800085a:	07d6      	lsls	r6, r2, #31
 800085c:	d528      	bpl.n	80008b0 <__sflush_r+0xb8>
 800085e:	2200      	movs	r2, #0
 8000860:	6062      	str	r2, [r4, #4]
 8000862:	04d9      	lsls	r1, r3, #19
 8000864:	6922      	ldr	r2, [r4, #16]
 8000866:	6022      	str	r2, [r4, #0]
 8000868:	d504      	bpl.n	8000874 <__sflush_r+0x7c>
 800086a:	1c42      	adds	r2, r0, #1
 800086c:	d101      	bne.n	8000872 <__sflush_r+0x7a>
 800086e:	682b      	ldr	r3, [r5, #0]
 8000870:	b903      	cbnz	r3, 8000874 <__sflush_r+0x7c>
 8000872:	6560      	str	r0, [r4, #84]	; 0x54
 8000874:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000876:	602f      	str	r7, [r5, #0]
 8000878:	2900      	cmp	r1, #0
 800087a:	d0ca      	beq.n	8000812 <__sflush_r+0x1a>
 800087c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000880:	4299      	cmp	r1, r3
 8000882:	d002      	beq.n	800088a <__sflush_r+0x92>
 8000884:	4628      	mov	r0, r5
 8000886:	f000 f9d5 	bl	8000c34 <_free_r>
 800088a:	2000      	movs	r0, #0
 800088c:	6360      	str	r0, [r4, #52]	; 0x34
 800088e:	e7c1      	b.n	8000814 <__sflush_r+0x1c>
 8000890:	6a21      	ldr	r1, [r4, #32]
 8000892:	2301      	movs	r3, #1
 8000894:	4628      	mov	r0, r5
 8000896:	47b0      	blx	r6
 8000898:	1c41      	adds	r1, r0, #1
 800089a:	d1c7      	bne.n	800082c <__sflush_r+0x34>
 800089c:	682b      	ldr	r3, [r5, #0]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d0c4      	beq.n	800082c <__sflush_r+0x34>
 80008a2:	2b1d      	cmp	r3, #29
 80008a4:	d001      	beq.n	80008aa <__sflush_r+0xb2>
 80008a6:	2b16      	cmp	r3, #22
 80008a8:	d101      	bne.n	80008ae <__sflush_r+0xb6>
 80008aa:	602f      	str	r7, [r5, #0]
 80008ac:	e7b1      	b.n	8000812 <__sflush_r+0x1a>
 80008ae:	89a3      	ldrh	r3, [r4, #12]
 80008b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008b4:	81a3      	strh	r3, [r4, #12]
 80008b6:	e7ad      	b.n	8000814 <__sflush_r+0x1c>
 80008b8:	690f      	ldr	r7, [r1, #16]
 80008ba:	2f00      	cmp	r7, #0
 80008bc:	d0a9      	beq.n	8000812 <__sflush_r+0x1a>
 80008be:	0793      	lsls	r3, r2, #30
 80008c0:	680e      	ldr	r6, [r1, #0]
 80008c2:	bf08      	it	eq
 80008c4:	694b      	ldreq	r3, [r1, #20]
 80008c6:	600f      	str	r7, [r1, #0]
 80008c8:	bf18      	it	ne
 80008ca:	2300      	movne	r3, #0
 80008cc:	eba6 0807 	sub.w	r8, r6, r7
 80008d0:	608b      	str	r3, [r1, #8]
 80008d2:	f1b8 0f00 	cmp.w	r8, #0
 80008d6:	dd9c      	ble.n	8000812 <__sflush_r+0x1a>
 80008d8:	6a21      	ldr	r1, [r4, #32]
 80008da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80008dc:	4643      	mov	r3, r8
 80008de:	463a      	mov	r2, r7
 80008e0:	4628      	mov	r0, r5
 80008e2:	47b0      	blx	r6
 80008e4:	2800      	cmp	r0, #0
 80008e6:	dc06      	bgt.n	80008f6 <__sflush_r+0xfe>
 80008e8:	89a3      	ldrh	r3, [r4, #12]
 80008ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008ee:	81a3      	strh	r3, [r4, #12]
 80008f0:	f04f 30ff 	mov.w	r0, #4294967295
 80008f4:	e78e      	b.n	8000814 <__sflush_r+0x1c>
 80008f6:	4407      	add	r7, r0
 80008f8:	eba8 0800 	sub.w	r8, r8, r0
 80008fc:	e7e9      	b.n	80008d2 <__sflush_r+0xda>
 80008fe:	bf00      	nop
 8000900:	20400001 	.word	0x20400001

08000904 <_fflush_r>:
 8000904:	b538      	push	{r3, r4, r5, lr}
 8000906:	690b      	ldr	r3, [r1, #16]
 8000908:	4605      	mov	r5, r0
 800090a:	460c      	mov	r4, r1
 800090c:	b913      	cbnz	r3, 8000914 <_fflush_r+0x10>
 800090e:	2500      	movs	r5, #0
 8000910:	4628      	mov	r0, r5
 8000912:	bd38      	pop	{r3, r4, r5, pc}
 8000914:	b118      	cbz	r0, 800091e <_fflush_r+0x1a>
 8000916:	6983      	ldr	r3, [r0, #24]
 8000918:	b90b      	cbnz	r3, 800091e <_fflush_r+0x1a>
 800091a:	f000 f887 	bl	8000a2c <__sinit>
 800091e:	4b14      	ldr	r3, [pc, #80]	; (8000970 <_fflush_r+0x6c>)
 8000920:	429c      	cmp	r4, r3
 8000922:	d11b      	bne.n	800095c <_fflush_r+0x58>
 8000924:	686c      	ldr	r4, [r5, #4]
 8000926:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d0ef      	beq.n	800090e <_fflush_r+0xa>
 800092e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000930:	07d0      	lsls	r0, r2, #31
 8000932:	d404      	bmi.n	800093e <_fflush_r+0x3a>
 8000934:	0599      	lsls	r1, r3, #22
 8000936:	d402      	bmi.n	800093e <_fflush_r+0x3a>
 8000938:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800093a:	f000 f915 	bl	8000b68 <__retarget_lock_acquire_recursive>
 800093e:	4628      	mov	r0, r5
 8000940:	4621      	mov	r1, r4
 8000942:	f7ff ff59 	bl	80007f8 <__sflush_r>
 8000946:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000948:	07da      	lsls	r2, r3, #31
 800094a:	4605      	mov	r5, r0
 800094c:	d4e0      	bmi.n	8000910 <_fflush_r+0xc>
 800094e:	89a3      	ldrh	r3, [r4, #12]
 8000950:	059b      	lsls	r3, r3, #22
 8000952:	d4dd      	bmi.n	8000910 <_fflush_r+0xc>
 8000954:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000956:	f000 f908 	bl	8000b6a <__retarget_lock_release_recursive>
 800095a:	e7d9      	b.n	8000910 <_fflush_r+0xc>
 800095c:	4b05      	ldr	r3, [pc, #20]	; (8000974 <_fflush_r+0x70>)
 800095e:	429c      	cmp	r4, r3
 8000960:	d101      	bne.n	8000966 <_fflush_r+0x62>
 8000962:	68ac      	ldr	r4, [r5, #8]
 8000964:	e7df      	b.n	8000926 <_fflush_r+0x22>
 8000966:	4b04      	ldr	r3, [pc, #16]	; (8000978 <_fflush_r+0x74>)
 8000968:	429c      	cmp	r4, r3
 800096a:	bf08      	it	eq
 800096c:	68ec      	ldreq	r4, [r5, #12]
 800096e:	e7da      	b.n	8000926 <_fflush_r+0x22>
 8000970:	08000f6c 	.word	0x08000f6c
 8000974:	08000f8c 	.word	0x08000f8c
 8000978:	08000f4c 	.word	0x08000f4c

0800097c <std>:
 800097c:	2300      	movs	r3, #0
 800097e:	b510      	push	{r4, lr}
 8000980:	4604      	mov	r4, r0
 8000982:	e9c0 3300 	strd	r3, r3, [r0]
 8000986:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800098a:	6083      	str	r3, [r0, #8]
 800098c:	8181      	strh	r1, [r0, #12]
 800098e:	6643      	str	r3, [r0, #100]	; 0x64
 8000990:	81c2      	strh	r2, [r0, #14]
 8000992:	6183      	str	r3, [r0, #24]
 8000994:	4619      	mov	r1, r3
 8000996:	2208      	movs	r2, #8
 8000998:	305c      	adds	r0, #92	; 0x5c
 800099a:	f7ff fdef 	bl	800057c <memset>
 800099e:	4b05      	ldr	r3, [pc, #20]	; (80009b4 <std+0x38>)
 80009a0:	6263      	str	r3, [r4, #36]	; 0x24
 80009a2:	4b05      	ldr	r3, [pc, #20]	; (80009b8 <std+0x3c>)
 80009a4:	62a3      	str	r3, [r4, #40]	; 0x28
 80009a6:	4b05      	ldr	r3, [pc, #20]	; (80009bc <std+0x40>)
 80009a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80009aa:	4b05      	ldr	r3, [pc, #20]	; (80009c0 <std+0x44>)
 80009ac:	6224      	str	r4, [r4, #32]
 80009ae:	6323      	str	r3, [r4, #48]	; 0x30
 80009b0:	bd10      	pop	{r4, pc}
 80009b2:	bf00      	nop
 80009b4:	08000da5 	.word	0x08000da5
 80009b8:	08000dc7 	.word	0x08000dc7
 80009bc:	08000dff 	.word	0x08000dff
 80009c0:	08000e23 	.word	0x08000e23

080009c4 <_cleanup_r>:
 80009c4:	4901      	ldr	r1, [pc, #4]	; (80009cc <_cleanup_r+0x8>)
 80009c6:	f000 b8af 	b.w	8000b28 <_fwalk_reent>
 80009ca:	bf00      	nop
 80009cc:	08000905 	.word	0x08000905

080009d0 <__sfmoreglue>:
 80009d0:	b570      	push	{r4, r5, r6, lr}
 80009d2:	1e4a      	subs	r2, r1, #1
 80009d4:	2568      	movs	r5, #104	; 0x68
 80009d6:	4355      	muls	r5, r2
 80009d8:	460e      	mov	r6, r1
 80009da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80009de:	f000 f977 	bl	8000cd0 <_malloc_r>
 80009e2:	4604      	mov	r4, r0
 80009e4:	b140      	cbz	r0, 80009f8 <__sfmoreglue+0x28>
 80009e6:	2100      	movs	r1, #0
 80009e8:	e9c0 1600 	strd	r1, r6, [r0]
 80009ec:	300c      	adds	r0, #12
 80009ee:	60a0      	str	r0, [r4, #8]
 80009f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80009f4:	f7ff fdc2 	bl	800057c <memset>
 80009f8:	4620      	mov	r0, r4
 80009fa:	bd70      	pop	{r4, r5, r6, pc}

080009fc <__sfp_lock_acquire>:
 80009fc:	4801      	ldr	r0, [pc, #4]	; (8000a04 <__sfp_lock_acquire+0x8>)
 80009fe:	f000 b8b3 	b.w	8000b68 <__retarget_lock_acquire_recursive>
 8000a02:	bf00      	nop
 8000a04:	20000094 	.word	0x20000094

08000a08 <__sfp_lock_release>:
 8000a08:	4801      	ldr	r0, [pc, #4]	; (8000a10 <__sfp_lock_release+0x8>)
 8000a0a:	f000 b8ae 	b.w	8000b6a <__retarget_lock_release_recursive>
 8000a0e:	bf00      	nop
 8000a10:	20000094 	.word	0x20000094

08000a14 <__sinit_lock_acquire>:
 8000a14:	4801      	ldr	r0, [pc, #4]	; (8000a1c <__sinit_lock_acquire+0x8>)
 8000a16:	f000 b8a7 	b.w	8000b68 <__retarget_lock_acquire_recursive>
 8000a1a:	bf00      	nop
 8000a1c:	2000008f 	.word	0x2000008f

08000a20 <__sinit_lock_release>:
 8000a20:	4801      	ldr	r0, [pc, #4]	; (8000a28 <__sinit_lock_release+0x8>)
 8000a22:	f000 b8a2 	b.w	8000b6a <__retarget_lock_release_recursive>
 8000a26:	bf00      	nop
 8000a28:	2000008f 	.word	0x2000008f

08000a2c <__sinit>:
 8000a2c:	b510      	push	{r4, lr}
 8000a2e:	4604      	mov	r4, r0
 8000a30:	f7ff fff0 	bl	8000a14 <__sinit_lock_acquire>
 8000a34:	69a3      	ldr	r3, [r4, #24]
 8000a36:	b11b      	cbz	r3, 8000a40 <__sinit+0x14>
 8000a38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a3c:	f7ff bff0 	b.w	8000a20 <__sinit_lock_release>
 8000a40:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000a44:	6523      	str	r3, [r4, #80]	; 0x50
 8000a46:	4b13      	ldr	r3, [pc, #76]	; (8000a94 <__sinit+0x68>)
 8000a48:	4a13      	ldr	r2, [pc, #76]	; (8000a98 <__sinit+0x6c>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	62a2      	str	r2, [r4, #40]	; 0x28
 8000a4e:	42a3      	cmp	r3, r4
 8000a50:	bf04      	itt	eq
 8000a52:	2301      	moveq	r3, #1
 8000a54:	61a3      	streq	r3, [r4, #24]
 8000a56:	4620      	mov	r0, r4
 8000a58:	f000 f820 	bl	8000a9c <__sfp>
 8000a5c:	6060      	str	r0, [r4, #4]
 8000a5e:	4620      	mov	r0, r4
 8000a60:	f000 f81c 	bl	8000a9c <__sfp>
 8000a64:	60a0      	str	r0, [r4, #8]
 8000a66:	4620      	mov	r0, r4
 8000a68:	f000 f818 	bl	8000a9c <__sfp>
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	60e0      	str	r0, [r4, #12]
 8000a70:	2104      	movs	r1, #4
 8000a72:	6860      	ldr	r0, [r4, #4]
 8000a74:	f7ff ff82 	bl	800097c <std>
 8000a78:	68a0      	ldr	r0, [r4, #8]
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	2109      	movs	r1, #9
 8000a7e:	f7ff ff7d 	bl	800097c <std>
 8000a82:	68e0      	ldr	r0, [r4, #12]
 8000a84:	2202      	movs	r2, #2
 8000a86:	2112      	movs	r1, #18
 8000a88:	f7ff ff78 	bl	800097c <std>
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	61a3      	str	r3, [r4, #24]
 8000a90:	e7d2      	b.n	8000a38 <__sinit+0xc>
 8000a92:	bf00      	nop
 8000a94:	08000f48 	.word	0x08000f48
 8000a98:	080009c5 	.word	0x080009c5

08000a9c <__sfp>:
 8000a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a9e:	4607      	mov	r7, r0
 8000aa0:	f7ff ffac 	bl	80009fc <__sfp_lock_acquire>
 8000aa4:	4b1e      	ldr	r3, [pc, #120]	; (8000b20 <__sfp+0x84>)
 8000aa6:	681e      	ldr	r6, [r3, #0]
 8000aa8:	69b3      	ldr	r3, [r6, #24]
 8000aaa:	b913      	cbnz	r3, 8000ab2 <__sfp+0x16>
 8000aac:	4630      	mov	r0, r6
 8000aae:	f7ff ffbd 	bl	8000a2c <__sinit>
 8000ab2:	3648      	adds	r6, #72	; 0x48
 8000ab4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000ab8:	3b01      	subs	r3, #1
 8000aba:	d503      	bpl.n	8000ac4 <__sfp+0x28>
 8000abc:	6833      	ldr	r3, [r6, #0]
 8000abe:	b30b      	cbz	r3, 8000b04 <__sfp+0x68>
 8000ac0:	6836      	ldr	r6, [r6, #0]
 8000ac2:	e7f7      	b.n	8000ab4 <__sfp+0x18>
 8000ac4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000ac8:	b9d5      	cbnz	r5, 8000b00 <__sfp+0x64>
 8000aca:	4b16      	ldr	r3, [pc, #88]	; (8000b24 <__sfp+0x88>)
 8000acc:	60e3      	str	r3, [r4, #12]
 8000ace:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000ad2:	6665      	str	r5, [r4, #100]	; 0x64
 8000ad4:	f000 f847 	bl	8000b66 <__retarget_lock_init_recursive>
 8000ad8:	f7ff ff96 	bl	8000a08 <__sfp_lock_release>
 8000adc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000ae0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000ae4:	6025      	str	r5, [r4, #0]
 8000ae6:	61a5      	str	r5, [r4, #24]
 8000ae8:	2208      	movs	r2, #8
 8000aea:	4629      	mov	r1, r5
 8000aec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000af0:	f7ff fd44 	bl	800057c <memset>
 8000af4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000af8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000afc:	4620      	mov	r0, r4
 8000afe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b00:	3468      	adds	r4, #104	; 0x68
 8000b02:	e7d9      	b.n	8000ab8 <__sfp+0x1c>
 8000b04:	2104      	movs	r1, #4
 8000b06:	4638      	mov	r0, r7
 8000b08:	f7ff ff62 	bl	80009d0 <__sfmoreglue>
 8000b0c:	4604      	mov	r4, r0
 8000b0e:	6030      	str	r0, [r6, #0]
 8000b10:	2800      	cmp	r0, #0
 8000b12:	d1d5      	bne.n	8000ac0 <__sfp+0x24>
 8000b14:	f7ff ff78 	bl	8000a08 <__sfp_lock_release>
 8000b18:	230c      	movs	r3, #12
 8000b1a:	603b      	str	r3, [r7, #0]
 8000b1c:	e7ee      	b.n	8000afc <__sfp+0x60>
 8000b1e:	bf00      	nop
 8000b20:	08000f48 	.word	0x08000f48
 8000b24:	ffff0001 	.word	0xffff0001

08000b28 <_fwalk_reent>:
 8000b28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000b2c:	4606      	mov	r6, r0
 8000b2e:	4688      	mov	r8, r1
 8000b30:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000b34:	2700      	movs	r7, #0
 8000b36:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000b3a:	f1b9 0901 	subs.w	r9, r9, #1
 8000b3e:	d505      	bpl.n	8000b4c <_fwalk_reent+0x24>
 8000b40:	6824      	ldr	r4, [r4, #0]
 8000b42:	2c00      	cmp	r4, #0
 8000b44:	d1f7      	bne.n	8000b36 <_fwalk_reent+0xe>
 8000b46:	4638      	mov	r0, r7
 8000b48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b4c:	89ab      	ldrh	r3, [r5, #12]
 8000b4e:	2b01      	cmp	r3, #1
 8000b50:	d907      	bls.n	8000b62 <_fwalk_reent+0x3a>
 8000b52:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000b56:	3301      	adds	r3, #1
 8000b58:	d003      	beq.n	8000b62 <_fwalk_reent+0x3a>
 8000b5a:	4629      	mov	r1, r5
 8000b5c:	4630      	mov	r0, r6
 8000b5e:	47c0      	blx	r8
 8000b60:	4307      	orrs	r7, r0
 8000b62:	3568      	adds	r5, #104	; 0x68
 8000b64:	e7e9      	b.n	8000b3a <_fwalk_reent+0x12>

08000b66 <__retarget_lock_init_recursive>:
 8000b66:	4770      	bx	lr

08000b68 <__retarget_lock_acquire_recursive>:
 8000b68:	4770      	bx	lr

08000b6a <__retarget_lock_release_recursive>:
 8000b6a:	4770      	bx	lr

08000b6c <__swhatbuf_r>:
 8000b6c:	b570      	push	{r4, r5, r6, lr}
 8000b6e:	460e      	mov	r6, r1
 8000b70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000b74:	2900      	cmp	r1, #0
 8000b76:	b096      	sub	sp, #88	; 0x58
 8000b78:	4614      	mov	r4, r2
 8000b7a:	461d      	mov	r5, r3
 8000b7c:	da07      	bge.n	8000b8e <__swhatbuf_r+0x22>
 8000b7e:	2300      	movs	r3, #0
 8000b80:	602b      	str	r3, [r5, #0]
 8000b82:	89b3      	ldrh	r3, [r6, #12]
 8000b84:	061a      	lsls	r2, r3, #24
 8000b86:	d410      	bmi.n	8000baa <__swhatbuf_r+0x3e>
 8000b88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b8c:	e00e      	b.n	8000bac <__swhatbuf_r+0x40>
 8000b8e:	466a      	mov	r2, sp
 8000b90:	f000 f96e 	bl	8000e70 <_fstat_r>
 8000b94:	2800      	cmp	r0, #0
 8000b96:	dbf2      	blt.n	8000b7e <__swhatbuf_r+0x12>
 8000b98:	9a01      	ldr	r2, [sp, #4]
 8000b9a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000b9e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000ba2:	425a      	negs	r2, r3
 8000ba4:	415a      	adcs	r2, r3
 8000ba6:	602a      	str	r2, [r5, #0]
 8000ba8:	e7ee      	b.n	8000b88 <__swhatbuf_r+0x1c>
 8000baa:	2340      	movs	r3, #64	; 0x40
 8000bac:	2000      	movs	r0, #0
 8000bae:	6023      	str	r3, [r4, #0]
 8000bb0:	b016      	add	sp, #88	; 0x58
 8000bb2:	bd70      	pop	{r4, r5, r6, pc}

08000bb4 <__smakebuf_r>:
 8000bb4:	898b      	ldrh	r3, [r1, #12]
 8000bb6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000bb8:	079d      	lsls	r5, r3, #30
 8000bba:	4606      	mov	r6, r0
 8000bbc:	460c      	mov	r4, r1
 8000bbe:	d507      	bpl.n	8000bd0 <__smakebuf_r+0x1c>
 8000bc0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000bc4:	6023      	str	r3, [r4, #0]
 8000bc6:	6123      	str	r3, [r4, #16]
 8000bc8:	2301      	movs	r3, #1
 8000bca:	6163      	str	r3, [r4, #20]
 8000bcc:	b002      	add	sp, #8
 8000bce:	bd70      	pop	{r4, r5, r6, pc}
 8000bd0:	ab01      	add	r3, sp, #4
 8000bd2:	466a      	mov	r2, sp
 8000bd4:	f7ff ffca 	bl	8000b6c <__swhatbuf_r>
 8000bd8:	9900      	ldr	r1, [sp, #0]
 8000bda:	4605      	mov	r5, r0
 8000bdc:	4630      	mov	r0, r6
 8000bde:	f000 f877 	bl	8000cd0 <_malloc_r>
 8000be2:	b948      	cbnz	r0, 8000bf8 <__smakebuf_r+0x44>
 8000be4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000be8:	059a      	lsls	r2, r3, #22
 8000bea:	d4ef      	bmi.n	8000bcc <__smakebuf_r+0x18>
 8000bec:	f023 0303 	bic.w	r3, r3, #3
 8000bf0:	f043 0302 	orr.w	r3, r3, #2
 8000bf4:	81a3      	strh	r3, [r4, #12]
 8000bf6:	e7e3      	b.n	8000bc0 <__smakebuf_r+0xc>
 8000bf8:	4b0d      	ldr	r3, [pc, #52]	; (8000c30 <__smakebuf_r+0x7c>)
 8000bfa:	62b3      	str	r3, [r6, #40]	; 0x28
 8000bfc:	89a3      	ldrh	r3, [r4, #12]
 8000bfe:	6020      	str	r0, [r4, #0]
 8000c00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c04:	81a3      	strh	r3, [r4, #12]
 8000c06:	9b00      	ldr	r3, [sp, #0]
 8000c08:	6163      	str	r3, [r4, #20]
 8000c0a:	9b01      	ldr	r3, [sp, #4]
 8000c0c:	6120      	str	r0, [r4, #16]
 8000c0e:	b15b      	cbz	r3, 8000c28 <__smakebuf_r+0x74>
 8000c10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000c14:	4630      	mov	r0, r6
 8000c16:	f000 f93d 	bl	8000e94 <_isatty_r>
 8000c1a:	b128      	cbz	r0, 8000c28 <__smakebuf_r+0x74>
 8000c1c:	89a3      	ldrh	r3, [r4, #12]
 8000c1e:	f023 0303 	bic.w	r3, r3, #3
 8000c22:	f043 0301 	orr.w	r3, r3, #1
 8000c26:	81a3      	strh	r3, [r4, #12]
 8000c28:	89a0      	ldrh	r0, [r4, #12]
 8000c2a:	4305      	orrs	r5, r0
 8000c2c:	81a5      	strh	r5, [r4, #12]
 8000c2e:	e7cd      	b.n	8000bcc <__smakebuf_r+0x18>
 8000c30:	080009c5 	.word	0x080009c5

08000c34 <_free_r>:
 8000c34:	b538      	push	{r3, r4, r5, lr}
 8000c36:	4605      	mov	r5, r0
 8000c38:	2900      	cmp	r1, #0
 8000c3a:	d045      	beq.n	8000cc8 <_free_r+0x94>
 8000c3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000c40:	1f0c      	subs	r4, r1, #4
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	bfb8      	it	lt
 8000c46:	18e4      	addlt	r4, r4, r3
 8000c48:	f000 f946 	bl	8000ed8 <__malloc_lock>
 8000c4c:	4a1f      	ldr	r2, [pc, #124]	; (8000ccc <_free_r+0x98>)
 8000c4e:	6813      	ldr	r3, [r2, #0]
 8000c50:	4610      	mov	r0, r2
 8000c52:	b933      	cbnz	r3, 8000c62 <_free_r+0x2e>
 8000c54:	6063      	str	r3, [r4, #4]
 8000c56:	6014      	str	r4, [r2, #0]
 8000c58:	4628      	mov	r0, r5
 8000c5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c5e:	f000 b941 	b.w	8000ee4 <__malloc_unlock>
 8000c62:	42a3      	cmp	r3, r4
 8000c64:	d90b      	bls.n	8000c7e <_free_r+0x4a>
 8000c66:	6821      	ldr	r1, [r4, #0]
 8000c68:	1862      	adds	r2, r4, r1
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	bf04      	itt	eq
 8000c6e:	681a      	ldreq	r2, [r3, #0]
 8000c70:	685b      	ldreq	r3, [r3, #4]
 8000c72:	6063      	str	r3, [r4, #4]
 8000c74:	bf04      	itt	eq
 8000c76:	1852      	addeq	r2, r2, r1
 8000c78:	6022      	streq	r2, [r4, #0]
 8000c7a:	6004      	str	r4, [r0, #0]
 8000c7c:	e7ec      	b.n	8000c58 <_free_r+0x24>
 8000c7e:	461a      	mov	r2, r3
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	b10b      	cbz	r3, 8000c88 <_free_r+0x54>
 8000c84:	42a3      	cmp	r3, r4
 8000c86:	d9fa      	bls.n	8000c7e <_free_r+0x4a>
 8000c88:	6811      	ldr	r1, [r2, #0]
 8000c8a:	1850      	adds	r0, r2, r1
 8000c8c:	42a0      	cmp	r0, r4
 8000c8e:	d10b      	bne.n	8000ca8 <_free_r+0x74>
 8000c90:	6820      	ldr	r0, [r4, #0]
 8000c92:	4401      	add	r1, r0
 8000c94:	1850      	adds	r0, r2, r1
 8000c96:	4283      	cmp	r3, r0
 8000c98:	6011      	str	r1, [r2, #0]
 8000c9a:	d1dd      	bne.n	8000c58 <_free_r+0x24>
 8000c9c:	6818      	ldr	r0, [r3, #0]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	6053      	str	r3, [r2, #4]
 8000ca2:	4401      	add	r1, r0
 8000ca4:	6011      	str	r1, [r2, #0]
 8000ca6:	e7d7      	b.n	8000c58 <_free_r+0x24>
 8000ca8:	d902      	bls.n	8000cb0 <_free_r+0x7c>
 8000caa:	230c      	movs	r3, #12
 8000cac:	602b      	str	r3, [r5, #0]
 8000cae:	e7d3      	b.n	8000c58 <_free_r+0x24>
 8000cb0:	6820      	ldr	r0, [r4, #0]
 8000cb2:	1821      	adds	r1, r4, r0
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	bf04      	itt	eq
 8000cb8:	6819      	ldreq	r1, [r3, #0]
 8000cba:	685b      	ldreq	r3, [r3, #4]
 8000cbc:	6063      	str	r3, [r4, #4]
 8000cbe:	bf04      	itt	eq
 8000cc0:	1809      	addeq	r1, r1, r0
 8000cc2:	6021      	streq	r1, [r4, #0]
 8000cc4:	6054      	str	r4, [r2, #4]
 8000cc6:	e7c7      	b.n	8000c58 <_free_r+0x24>
 8000cc8:	bd38      	pop	{r3, r4, r5, pc}
 8000cca:	bf00      	nop
 8000ccc:	20000084 	.word	0x20000084

08000cd0 <_malloc_r>:
 8000cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cd2:	1ccd      	adds	r5, r1, #3
 8000cd4:	f025 0503 	bic.w	r5, r5, #3
 8000cd8:	3508      	adds	r5, #8
 8000cda:	2d0c      	cmp	r5, #12
 8000cdc:	bf38      	it	cc
 8000cde:	250c      	movcc	r5, #12
 8000ce0:	2d00      	cmp	r5, #0
 8000ce2:	4606      	mov	r6, r0
 8000ce4:	db01      	blt.n	8000cea <_malloc_r+0x1a>
 8000ce6:	42a9      	cmp	r1, r5
 8000ce8:	d903      	bls.n	8000cf2 <_malloc_r+0x22>
 8000cea:	230c      	movs	r3, #12
 8000cec:	6033      	str	r3, [r6, #0]
 8000cee:	2000      	movs	r0, #0
 8000cf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000cf2:	f000 f8f1 	bl	8000ed8 <__malloc_lock>
 8000cf6:	4921      	ldr	r1, [pc, #132]	; (8000d7c <_malloc_r+0xac>)
 8000cf8:	680a      	ldr	r2, [r1, #0]
 8000cfa:	4614      	mov	r4, r2
 8000cfc:	b99c      	cbnz	r4, 8000d26 <_malloc_r+0x56>
 8000cfe:	4f20      	ldr	r7, [pc, #128]	; (8000d80 <_malloc_r+0xb0>)
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	b923      	cbnz	r3, 8000d0e <_malloc_r+0x3e>
 8000d04:	4621      	mov	r1, r4
 8000d06:	4630      	mov	r0, r6
 8000d08:	f000 f83c 	bl	8000d84 <_sbrk_r>
 8000d0c:	6038      	str	r0, [r7, #0]
 8000d0e:	4629      	mov	r1, r5
 8000d10:	4630      	mov	r0, r6
 8000d12:	f000 f837 	bl	8000d84 <_sbrk_r>
 8000d16:	1c43      	adds	r3, r0, #1
 8000d18:	d123      	bne.n	8000d62 <_malloc_r+0x92>
 8000d1a:	230c      	movs	r3, #12
 8000d1c:	6033      	str	r3, [r6, #0]
 8000d1e:	4630      	mov	r0, r6
 8000d20:	f000 f8e0 	bl	8000ee4 <__malloc_unlock>
 8000d24:	e7e3      	b.n	8000cee <_malloc_r+0x1e>
 8000d26:	6823      	ldr	r3, [r4, #0]
 8000d28:	1b5b      	subs	r3, r3, r5
 8000d2a:	d417      	bmi.n	8000d5c <_malloc_r+0x8c>
 8000d2c:	2b0b      	cmp	r3, #11
 8000d2e:	d903      	bls.n	8000d38 <_malloc_r+0x68>
 8000d30:	6023      	str	r3, [r4, #0]
 8000d32:	441c      	add	r4, r3
 8000d34:	6025      	str	r5, [r4, #0]
 8000d36:	e004      	b.n	8000d42 <_malloc_r+0x72>
 8000d38:	6863      	ldr	r3, [r4, #4]
 8000d3a:	42a2      	cmp	r2, r4
 8000d3c:	bf0c      	ite	eq
 8000d3e:	600b      	streq	r3, [r1, #0]
 8000d40:	6053      	strne	r3, [r2, #4]
 8000d42:	4630      	mov	r0, r6
 8000d44:	f000 f8ce 	bl	8000ee4 <__malloc_unlock>
 8000d48:	f104 000b 	add.w	r0, r4, #11
 8000d4c:	1d23      	adds	r3, r4, #4
 8000d4e:	f020 0007 	bic.w	r0, r0, #7
 8000d52:	1ac2      	subs	r2, r0, r3
 8000d54:	d0cc      	beq.n	8000cf0 <_malloc_r+0x20>
 8000d56:	1a1b      	subs	r3, r3, r0
 8000d58:	50a3      	str	r3, [r4, r2]
 8000d5a:	e7c9      	b.n	8000cf0 <_malloc_r+0x20>
 8000d5c:	4622      	mov	r2, r4
 8000d5e:	6864      	ldr	r4, [r4, #4]
 8000d60:	e7cc      	b.n	8000cfc <_malloc_r+0x2c>
 8000d62:	1cc4      	adds	r4, r0, #3
 8000d64:	f024 0403 	bic.w	r4, r4, #3
 8000d68:	42a0      	cmp	r0, r4
 8000d6a:	d0e3      	beq.n	8000d34 <_malloc_r+0x64>
 8000d6c:	1a21      	subs	r1, r4, r0
 8000d6e:	4630      	mov	r0, r6
 8000d70:	f000 f808 	bl	8000d84 <_sbrk_r>
 8000d74:	3001      	adds	r0, #1
 8000d76:	d1dd      	bne.n	8000d34 <_malloc_r+0x64>
 8000d78:	e7cf      	b.n	8000d1a <_malloc_r+0x4a>
 8000d7a:	bf00      	nop
 8000d7c:	20000084 	.word	0x20000084
 8000d80:	20000088 	.word	0x20000088

08000d84 <_sbrk_r>:
 8000d84:	b538      	push	{r3, r4, r5, lr}
 8000d86:	4d06      	ldr	r5, [pc, #24]	; (8000da0 <_sbrk_r+0x1c>)
 8000d88:	2300      	movs	r3, #0
 8000d8a:	4604      	mov	r4, r0
 8000d8c:	4608      	mov	r0, r1
 8000d8e:	602b      	str	r3, [r5, #0]
 8000d90:	f7ff fad8 	bl	8000344 <_sbrk>
 8000d94:	1c43      	adds	r3, r0, #1
 8000d96:	d102      	bne.n	8000d9e <_sbrk_r+0x1a>
 8000d98:	682b      	ldr	r3, [r5, #0]
 8000d9a:	b103      	cbz	r3, 8000d9e <_sbrk_r+0x1a>
 8000d9c:	6023      	str	r3, [r4, #0]
 8000d9e:	bd38      	pop	{r3, r4, r5, pc}
 8000da0:	20000098 	.word	0x20000098

08000da4 <__sread>:
 8000da4:	b510      	push	{r4, lr}
 8000da6:	460c      	mov	r4, r1
 8000da8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000dac:	f000 f8a0 	bl	8000ef0 <_read_r>
 8000db0:	2800      	cmp	r0, #0
 8000db2:	bfab      	itete	ge
 8000db4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000db6:	89a3      	ldrhlt	r3, [r4, #12]
 8000db8:	181b      	addge	r3, r3, r0
 8000dba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000dbe:	bfac      	ite	ge
 8000dc0:	6563      	strge	r3, [r4, #84]	; 0x54
 8000dc2:	81a3      	strhlt	r3, [r4, #12]
 8000dc4:	bd10      	pop	{r4, pc}

08000dc6 <__swrite>:
 8000dc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000dca:	461f      	mov	r7, r3
 8000dcc:	898b      	ldrh	r3, [r1, #12]
 8000dce:	05db      	lsls	r3, r3, #23
 8000dd0:	4605      	mov	r5, r0
 8000dd2:	460c      	mov	r4, r1
 8000dd4:	4616      	mov	r6, r2
 8000dd6:	d505      	bpl.n	8000de4 <__swrite+0x1e>
 8000dd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ddc:	2302      	movs	r3, #2
 8000dde:	2200      	movs	r2, #0
 8000de0:	f000 f868 	bl	8000eb4 <_lseek_r>
 8000de4:	89a3      	ldrh	r3, [r4, #12]
 8000de6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000dea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000dee:	81a3      	strh	r3, [r4, #12]
 8000df0:	4632      	mov	r2, r6
 8000df2:	463b      	mov	r3, r7
 8000df4:	4628      	mov	r0, r5
 8000df6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000dfa:	f000 b817 	b.w	8000e2c <_write_r>

08000dfe <__sseek>:
 8000dfe:	b510      	push	{r4, lr}
 8000e00:	460c      	mov	r4, r1
 8000e02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e06:	f000 f855 	bl	8000eb4 <_lseek_r>
 8000e0a:	1c43      	adds	r3, r0, #1
 8000e0c:	89a3      	ldrh	r3, [r4, #12]
 8000e0e:	bf15      	itete	ne
 8000e10:	6560      	strne	r0, [r4, #84]	; 0x54
 8000e12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000e16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000e1a:	81a3      	strheq	r3, [r4, #12]
 8000e1c:	bf18      	it	ne
 8000e1e:	81a3      	strhne	r3, [r4, #12]
 8000e20:	bd10      	pop	{r4, pc}

08000e22 <__sclose>:
 8000e22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e26:	f000 b813 	b.w	8000e50 <_close_r>
	...

08000e2c <_write_r>:
 8000e2c:	b538      	push	{r3, r4, r5, lr}
 8000e2e:	4d07      	ldr	r5, [pc, #28]	; (8000e4c <_write_r+0x20>)
 8000e30:	4604      	mov	r4, r0
 8000e32:	4608      	mov	r0, r1
 8000e34:	4611      	mov	r1, r2
 8000e36:	2200      	movs	r2, #0
 8000e38:	602a      	str	r2, [r5, #0]
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	f7ff fa35 	bl	80002aa <_write>
 8000e40:	1c43      	adds	r3, r0, #1
 8000e42:	d102      	bne.n	8000e4a <_write_r+0x1e>
 8000e44:	682b      	ldr	r3, [r5, #0]
 8000e46:	b103      	cbz	r3, 8000e4a <_write_r+0x1e>
 8000e48:	6023      	str	r3, [r4, #0]
 8000e4a:	bd38      	pop	{r3, r4, r5, pc}
 8000e4c:	20000098 	.word	0x20000098

08000e50 <_close_r>:
 8000e50:	b538      	push	{r3, r4, r5, lr}
 8000e52:	4d06      	ldr	r5, [pc, #24]	; (8000e6c <_close_r+0x1c>)
 8000e54:	2300      	movs	r3, #0
 8000e56:	4604      	mov	r4, r0
 8000e58:	4608      	mov	r0, r1
 8000e5a:	602b      	str	r3, [r5, #0]
 8000e5c:	f7ff fa41 	bl	80002e2 <_close>
 8000e60:	1c43      	adds	r3, r0, #1
 8000e62:	d102      	bne.n	8000e6a <_close_r+0x1a>
 8000e64:	682b      	ldr	r3, [r5, #0]
 8000e66:	b103      	cbz	r3, 8000e6a <_close_r+0x1a>
 8000e68:	6023      	str	r3, [r4, #0]
 8000e6a:	bd38      	pop	{r3, r4, r5, pc}
 8000e6c:	20000098 	.word	0x20000098

08000e70 <_fstat_r>:
 8000e70:	b538      	push	{r3, r4, r5, lr}
 8000e72:	4d07      	ldr	r5, [pc, #28]	; (8000e90 <_fstat_r+0x20>)
 8000e74:	2300      	movs	r3, #0
 8000e76:	4604      	mov	r4, r0
 8000e78:	4608      	mov	r0, r1
 8000e7a:	4611      	mov	r1, r2
 8000e7c:	602b      	str	r3, [r5, #0]
 8000e7e:	f7ff fa3b 	bl	80002f8 <_fstat>
 8000e82:	1c43      	adds	r3, r0, #1
 8000e84:	d102      	bne.n	8000e8c <_fstat_r+0x1c>
 8000e86:	682b      	ldr	r3, [r5, #0]
 8000e88:	b103      	cbz	r3, 8000e8c <_fstat_r+0x1c>
 8000e8a:	6023      	str	r3, [r4, #0]
 8000e8c:	bd38      	pop	{r3, r4, r5, pc}
 8000e8e:	bf00      	nop
 8000e90:	20000098 	.word	0x20000098

08000e94 <_isatty_r>:
 8000e94:	b538      	push	{r3, r4, r5, lr}
 8000e96:	4d06      	ldr	r5, [pc, #24]	; (8000eb0 <_isatty_r+0x1c>)
 8000e98:	2300      	movs	r3, #0
 8000e9a:	4604      	mov	r4, r0
 8000e9c:	4608      	mov	r0, r1
 8000e9e:	602b      	str	r3, [r5, #0]
 8000ea0:	f7ff fa39 	bl	8000316 <_isatty>
 8000ea4:	1c43      	adds	r3, r0, #1
 8000ea6:	d102      	bne.n	8000eae <_isatty_r+0x1a>
 8000ea8:	682b      	ldr	r3, [r5, #0]
 8000eaa:	b103      	cbz	r3, 8000eae <_isatty_r+0x1a>
 8000eac:	6023      	str	r3, [r4, #0]
 8000eae:	bd38      	pop	{r3, r4, r5, pc}
 8000eb0:	20000098 	.word	0x20000098

08000eb4 <_lseek_r>:
 8000eb4:	b538      	push	{r3, r4, r5, lr}
 8000eb6:	4d07      	ldr	r5, [pc, #28]	; (8000ed4 <_lseek_r+0x20>)
 8000eb8:	4604      	mov	r4, r0
 8000eba:	4608      	mov	r0, r1
 8000ebc:	4611      	mov	r1, r2
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	602a      	str	r2, [r5, #0]
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	f7ff fa31 	bl	800032a <_lseek>
 8000ec8:	1c43      	adds	r3, r0, #1
 8000eca:	d102      	bne.n	8000ed2 <_lseek_r+0x1e>
 8000ecc:	682b      	ldr	r3, [r5, #0]
 8000ece:	b103      	cbz	r3, 8000ed2 <_lseek_r+0x1e>
 8000ed0:	6023      	str	r3, [r4, #0]
 8000ed2:	bd38      	pop	{r3, r4, r5, pc}
 8000ed4:	20000098 	.word	0x20000098

08000ed8 <__malloc_lock>:
 8000ed8:	4801      	ldr	r0, [pc, #4]	; (8000ee0 <__malloc_lock+0x8>)
 8000eda:	f7ff be45 	b.w	8000b68 <__retarget_lock_acquire_recursive>
 8000ede:	bf00      	nop
 8000ee0:	20000090 	.word	0x20000090

08000ee4 <__malloc_unlock>:
 8000ee4:	4801      	ldr	r0, [pc, #4]	; (8000eec <__malloc_unlock+0x8>)
 8000ee6:	f7ff be40 	b.w	8000b6a <__retarget_lock_release_recursive>
 8000eea:	bf00      	nop
 8000eec:	20000090 	.word	0x20000090

08000ef0 <_read_r>:
 8000ef0:	b538      	push	{r3, r4, r5, lr}
 8000ef2:	4d07      	ldr	r5, [pc, #28]	; (8000f10 <_read_r+0x20>)
 8000ef4:	4604      	mov	r4, r0
 8000ef6:	4608      	mov	r0, r1
 8000ef8:	4611      	mov	r1, r2
 8000efa:	2200      	movs	r2, #0
 8000efc:	602a      	str	r2, [r5, #0]
 8000efe:	461a      	mov	r2, r3
 8000f00:	f7ff f9b6 	bl	8000270 <_read>
 8000f04:	1c43      	adds	r3, r0, #1
 8000f06:	d102      	bne.n	8000f0e <_read_r+0x1e>
 8000f08:	682b      	ldr	r3, [r5, #0]
 8000f0a:	b103      	cbz	r3, 8000f0e <_read_r+0x1e>
 8000f0c:	6023      	str	r3, [r4, #0]
 8000f0e:	bd38      	pop	{r3, r4, r5, pc}
 8000f10:	20000098 	.word	0x20000098

08000f14 <_init>:
 8000f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f16:	bf00      	nop
 8000f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f1a:	bc08      	pop	{r3}
 8000f1c:	469e      	mov	lr, r3
 8000f1e:	4770      	bx	lr

08000f20 <_fini>:
 8000f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f22:	bf00      	nop
 8000f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f26:	bc08      	pop	{r3}
 8000f28:	469e      	mov	lr, r3
 8000f2a:	4770      	bx	lr

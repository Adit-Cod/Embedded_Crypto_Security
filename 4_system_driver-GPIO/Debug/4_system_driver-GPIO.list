
4_system_driver-GPIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ec4  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08001088  08001088  00011088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001108  08001108  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08001108  08001108  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001108  08001108  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001108  08001108  00011108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800110c  0800110c  0001110c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001110  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  20000064  08001174  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  08001174  000200a4  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000032a4  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000ad7  00000000  00000000  00023332  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001f0  00000000  00000000  00023e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000178  00000000  00000000  00024000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001acbd  00000000  00000000  00024178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002bb9  00000000  00000000  0003ee35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090d3a  00000000  00000000  000419ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d2728  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c28  00000000  00000000  000d277c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000064 	.word	0x20000064
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08001070 	.word	0x08001070

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000068 	.word	0x20000068
 8000200:	08001070 	.word	0x08001070

08000204 <led_init>:

#include "bsp.h"


void led_init(void)
{
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0
	/* Provide Clock Access to the respective Peripheral */
	/* GPIO A for stm32f44xx */

	    RCC->AHB1ENR |= GPIOAEN;
 8000208:	4b0a      	ldr	r3, [pc, #40]	; (8000234 <led_init+0x30>)
 800020a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800020c:	4a09      	ldr	r2, [pc, #36]	; (8000234 <led_init+0x30>)
 800020e:	f043 0301 	orr.w	r3, r3, #1
 8000212:	6313      	str	r3, [r2, #48]	; 0x30
	    GPIOA->MODER |= (1U<<10);
 8000214:	4b08      	ldr	r3, [pc, #32]	; (8000238 <led_init+0x34>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a07      	ldr	r2, [pc, #28]	; (8000238 <led_init+0x34>)
 800021a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800021e:	6013      	str	r3, [r2, #0]
	    GPIOA->MODER &= ~(1U<<11);
 8000220:	4b05      	ldr	r3, [pc, #20]	; (8000238 <led_init+0x34>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a04      	ldr	r2, [pc, #16]	; (8000238 <led_init+0x34>)
 8000226:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800022a:	6013      	str	r3, [r2, #0]
}
 800022c:	bf00      	nop
 800022e:	46bd      	mov	sp, r7
 8000230:	bc80      	pop	{r7}
 8000232:	4770      	bx	lr
 8000234:	40023800 	.word	0x40023800
 8000238:	40020000 	.word	0x40020000

0800023c <led_on>:

void led_on(void)
{
 800023c:	b480      	push	{r7}
 800023e:	af00      	add	r7, sp, #0
	/* Set the Pin High */
	GPIOA->ODR |= GPIO_ENABLE;
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <led_on+0x18>)
 8000242:	695b      	ldr	r3, [r3, #20]
 8000244:	4a03      	ldr	r2, [pc, #12]	; (8000254 <led_on+0x18>)
 8000246:	f043 0320 	orr.w	r3, r3, #32
 800024a:	6153      	str	r3, [r2, #20]
}
 800024c:	bf00      	nop
 800024e:	46bd      	mov	sp, r7
 8000250:	bc80      	pop	{r7}
 8000252:	4770      	bx	lr
 8000254:	40020000 	.word	0x40020000

08000258 <led_off>:

void led_off(void)
{
 8000258:	b480      	push	{r7}
 800025a:	af00      	add	r7, sp, #0
	/* Set the Pin Low */
	GPIOA->ODR &= (GPIO_DISABLE);
 800025c:	4b04      	ldr	r3, [pc, #16]	; (8000270 <led_off+0x18>)
 800025e:	695b      	ldr	r3, [r3, #20]
 8000260:	4a03      	ldr	r2, [pc, #12]	; (8000270 <led_off+0x18>)
 8000262:	f023 0320 	bic.w	r3, r3, #32
 8000266:	6153      	str	r3, [r2, #20]
}
 8000268:	bf00      	nop
 800026a:	46bd      	mov	sp, r7
 800026c:	bc80      	pop	{r7}
 800026e:	4770      	bx	lr
 8000270:	40020000 	.word	0x40020000

08000274 <button_init>:

void button_init(void)
{
 8000274:	b480      	push	{r7}
 8000276:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= GPIOCEN;
 8000278:	4b0a      	ldr	r3, [pc, #40]	; (80002a4 <button_init+0x30>)
 800027a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800027c:	4a09      	ldr	r2, [pc, #36]	; (80002a4 <button_init+0x30>)
 800027e:	f043 0304 	orr.w	r3, r3, #4
 8000282:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOC->MODER &=  ~(1<<26);
 8000284:	4b08      	ldr	r3, [pc, #32]	; (80002a8 <button_init+0x34>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a07      	ldr	r2, [pc, #28]	; (80002a8 <button_init+0x34>)
 800028a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800028e:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &=  ~(1<<27);
 8000290:	4b05      	ldr	r3, [pc, #20]	; (80002a8 <button_init+0x34>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a04      	ldr	r2, [pc, #16]	; (80002a8 <button_init+0x34>)
 8000296:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800029a:	6013      	str	r3, [r2, #0]
}
 800029c:	bf00      	nop
 800029e:	46bd      	mov	sp, r7
 80002a0:	bc80      	pop	{r7}
 80002a2:	4770      	bx	lr
 80002a4:	40023800 	.word	0x40023800
 80002a8:	40020800 	.word	0x40020800

080002ac <get_buttonState>:

bool get_buttonState(void)
{
 80002ac:	b480      	push	{r7}
 80002ae:	af00      	add	r7, sp, #0
     if(GPIOC->IDR & GPIOBTN_PIN)
 80002b0:	4b06      	ldr	r3, [pc, #24]	; (80002cc <get_buttonState+0x20>)
 80002b2:	691b      	ldr	r3, [r3, #16]
 80002b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d001      	beq.n	80002c0 <get_buttonState+0x14>
    	 return true;
 80002bc:	2301      	movs	r3, #1
 80002be:	e000      	b.n	80002c2 <get_buttonState+0x16>

     return false;
 80002c0:	2300      	movs	r3, #0
}
 80002c2:	4618      	mov	r0, r3
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bc80      	pop	{r7}
 80002c8:	4770      	bx	lr
 80002ca:	bf00      	nop
 80002cc:	40020800 	.word	0x40020800

080002d0 <fpu_enable>:

#include "fpu.h"


void fpu_enable(void)
{
 80002d0:	b480      	push	{r7}
 80002d2:	af00      	add	r7, sp, #0
	/* Enable Floating Point Unit: Enable CP10 and CP11 Full Access! */
	 SCB->CPACR |= (1<<20);
 80002d4:	4b11      	ldr	r3, [pc, #68]	; (800031c <fpu_enable+0x4c>)
 80002d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002da:	4a10      	ldr	r2, [pc, #64]	; (800031c <fpu_enable+0x4c>)
 80002dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	 SCB->CPACR |= (1<<21);
 80002e4:	4b0d      	ldr	r3, [pc, #52]	; (800031c <fpu_enable+0x4c>)
 80002e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002ea:	4a0c      	ldr	r2, [pc, #48]	; (800031c <fpu_enable+0x4c>)
 80002ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80002f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	 SCB->CPACR |= (1<<22);
 80002f4:	4b09      	ldr	r3, [pc, #36]	; (800031c <fpu_enable+0x4c>)
 80002f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002fa:	4a08      	ldr	r2, [pc, #32]	; (800031c <fpu_enable+0x4c>)
 80002fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000300:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	 SCB->CPACR |= (1<<23);
 8000304:	4b05      	ldr	r3, [pc, #20]	; (800031c <fpu_enable+0x4c>)
 8000306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800030a:	4a04      	ldr	r2, [pc, #16]	; (800031c <fpu_enable+0x4c>)
 800030c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000310:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8000314:	bf00      	nop
 8000316:	46bd      	mov	sp, r7
 8000318:	bc80      	pop	{r7}
 800031a:	4770      	bx	lr
 800031c:	e000ed00 	.word	0xe000ed00

08000320 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
	/* Enable FPU */
	fpu_enable();
 8000324:	f7ff ffd4 	bl	80002d0 <fpu_enable>
    /* initialize UART */
	uart_init();
 8000328:	f000 f8f0 	bl	800050c <uart_init>
	/* Initialize timer */
	timer_init();
 800032c:	f000 f8c2 	bl	80004b4 <timer_init>
    /* Initialize button and led */
	led_init();
 8000330:	f7ff ff68 	bl	8000204 <led_init>

	button_init();
 8000334:	f7ff ff9e 	bl	8000274 <button_init>
	printf("Testing the GPIO Module!\r\n");
 8000338:	4806      	ldr	r0, [pc, #24]	; (8000354 <main+0x34>)
 800033a:	f000 fa43 	bl	80007c4 <puts>
	while(1)
	{

		if(get_buttonState() == true)
 800033e:	f7ff ffb5 	bl	80002ac <get_buttonState>
 8000342:	4603      	mov	r3, r0
 8000344:	2b00      	cmp	r3, #0
 8000346:	d002      	beq.n	800034e <main+0x2e>
			led_on();
 8000348:	f7ff ff78 	bl	800023c <led_on>
 800034c:	e7f7      	b.n	800033e <main+0x1e>
		else
			led_off();
 800034e:	f7ff ff83 	bl	8000258 <led_off>
		if(get_buttonState() == true)
 8000352:	e7f4      	b.n	800033e <main+0x1e>
 8000354:	08001088 	.word	0x08001088

08000358 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b086      	sub	sp, #24
 800035c:	af00      	add	r7, sp, #0
 800035e:	60f8      	str	r0, [r7, #12]
 8000360:	60b9      	str	r1, [r7, #8]
 8000362:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000364:	2300      	movs	r3, #0
 8000366:	617b      	str	r3, [r7, #20]
 8000368:	e00a      	b.n	8000380 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800036a:	f3af 8000 	nop.w
 800036e:	4601      	mov	r1, r0
 8000370:	68bb      	ldr	r3, [r7, #8]
 8000372:	1c5a      	adds	r2, r3, #1
 8000374:	60ba      	str	r2, [r7, #8]
 8000376:	b2ca      	uxtb	r2, r1
 8000378:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800037a:	697b      	ldr	r3, [r7, #20]
 800037c:	3301      	adds	r3, #1
 800037e:	617b      	str	r3, [r7, #20]
 8000380:	697a      	ldr	r2, [r7, #20]
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	429a      	cmp	r2, r3
 8000386:	dbf0      	blt.n	800036a <_read+0x12>
	}

return len;
 8000388:	687b      	ldr	r3, [r7, #4]
}
 800038a:	4618      	mov	r0, r3
 800038c:	3718      	adds	r7, #24
 800038e:	46bd      	mov	sp, r7
 8000390:	bd80      	pop	{r7, pc}

08000392 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000392:	b580      	push	{r7, lr}
 8000394:	b086      	sub	sp, #24
 8000396:	af00      	add	r7, sp, #0
 8000398:	60f8      	str	r0, [r7, #12]
 800039a:	60b9      	str	r1, [r7, #8]
 800039c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800039e:	2300      	movs	r3, #0
 80003a0:	617b      	str	r3, [r7, #20]
 80003a2:	e009      	b.n	80003b8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80003a4:	68bb      	ldr	r3, [r7, #8]
 80003a6:	1c5a      	adds	r2, r3, #1
 80003a8:	60ba      	str	r2, [r7, #8]
 80003aa:	781b      	ldrb	r3, [r3, #0]
 80003ac:	4618      	mov	r0, r3
 80003ae:	f000 f91d 	bl	80005ec <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003b2:	697b      	ldr	r3, [r7, #20]
 80003b4:	3301      	adds	r3, #1
 80003b6:	617b      	str	r3, [r7, #20]
 80003b8:	697a      	ldr	r2, [r7, #20]
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	429a      	cmp	r2, r3
 80003be:	dbf1      	blt.n	80003a4 <_write+0x12>
	}
	return len;
 80003c0:	687b      	ldr	r3, [r7, #4]
}
 80003c2:	4618      	mov	r0, r3
 80003c4:	3718      	adds	r7, #24
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}

080003ca <_close>:

int _close(int file)
{
 80003ca:	b480      	push	{r7}
 80003cc:	b083      	sub	sp, #12
 80003ce:	af00      	add	r7, sp, #0
 80003d0:	6078      	str	r0, [r7, #4]
	return -1;
 80003d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80003d6:	4618      	mov	r0, r3
 80003d8:	370c      	adds	r7, #12
 80003da:	46bd      	mov	sp, r7
 80003dc:	bc80      	pop	{r7}
 80003de:	4770      	bx	lr

080003e0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80003e0:	b480      	push	{r7}
 80003e2:	b083      	sub	sp, #12
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
 80003e8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80003ea:	683b      	ldr	r3, [r7, #0]
 80003ec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80003f0:	605a      	str	r2, [r3, #4]
	return 0;
 80003f2:	2300      	movs	r3, #0
}
 80003f4:	4618      	mov	r0, r3
 80003f6:	370c      	adds	r7, #12
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bc80      	pop	{r7}
 80003fc:	4770      	bx	lr

080003fe <_isatty>:

int _isatty(int file)
{
 80003fe:	b480      	push	{r7}
 8000400:	b083      	sub	sp, #12
 8000402:	af00      	add	r7, sp, #0
 8000404:	6078      	str	r0, [r7, #4]
	return 1;
 8000406:	2301      	movs	r3, #1
}
 8000408:	4618      	mov	r0, r3
 800040a:	370c      	adds	r7, #12
 800040c:	46bd      	mov	sp, r7
 800040e:	bc80      	pop	{r7}
 8000410:	4770      	bx	lr

08000412 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000412:	b480      	push	{r7}
 8000414:	b085      	sub	sp, #20
 8000416:	af00      	add	r7, sp, #0
 8000418:	60f8      	str	r0, [r7, #12]
 800041a:	60b9      	str	r1, [r7, #8]
 800041c:	607a      	str	r2, [r7, #4]
	return 0;
 800041e:	2300      	movs	r3, #0
}
 8000420:	4618      	mov	r0, r3
 8000422:	3714      	adds	r7, #20
 8000424:	46bd      	mov	sp, r7
 8000426:	bc80      	pop	{r7}
 8000428:	4770      	bx	lr
	...

0800042c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b086      	sub	sp, #24
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000434:	4a14      	ldr	r2, [pc, #80]	; (8000488 <_sbrk+0x5c>)
 8000436:	4b15      	ldr	r3, [pc, #84]	; (800048c <_sbrk+0x60>)
 8000438:	1ad3      	subs	r3, r2, r3
 800043a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800043c:	697b      	ldr	r3, [r7, #20]
 800043e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000440:	4b13      	ldr	r3, [pc, #76]	; (8000490 <_sbrk+0x64>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	2b00      	cmp	r3, #0
 8000446:	d102      	bne.n	800044e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000448:	4b11      	ldr	r3, [pc, #68]	; (8000490 <_sbrk+0x64>)
 800044a:	4a12      	ldr	r2, [pc, #72]	; (8000494 <_sbrk+0x68>)
 800044c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800044e:	4b10      	ldr	r3, [pc, #64]	; (8000490 <_sbrk+0x64>)
 8000450:	681a      	ldr	r2, [r3, #0]
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	4413      	add	r3, r2
 8000456:	693a      	ldr	r2, [r7, #16]
 8000458:	429a      	cmp	r2, r3
 800045a:	d207      	bcs.n	800046c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800045c:	f000 f912 	bl	8000684 <__errno>
 8000460:	4603      	mov	r3, r0
 8000462:	220c      	movs	r2, #12
 8000464:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000466:	f04f 33ff 	mov.w	r3, #4294967295
 800046a:	e009      	b.n	8000480 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800046c:	4b08      	ldr	r3, [pc, #32]	; (8000490 <_sbrk+0x64>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000472:	4b07      	ldr	r3, [pc, #28]	; (8000490 <_sbrk+0x64>)
 8000474:	681a      	ldr	r2, [r3, #0]
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	4413      	add	r3, r2
 800047a:	4a05      	ldr	r2, [pc, #20]	; (8000490 <_sbrk+0x64>)
 800047c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800047e:	68fb      	ldr	r3, [r7, #12]
}
 8000480:	4618      	mov	r0, r3
 8000482:	3718      	adds	r7, #24
 8000484:	46bd      	mov	sp, r7
 8000486:	bd80      	pop	{r7, pc}
 8000488:	20020000 	.word	0x20020000
 800048c:	00000400 	.word	0x00000400
 8000490:	20000080 	.word	0x20000080
 8000494:	200000a8 	.word	0x200000a8

08000498 <tick_increment>:
	__enable_irq();
	return current_tick_p;
}

static void tick_increment(void)
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0
	current_tick += TICK_FREQ;
 800049c:	4b04      	ldr	r3, [pc, #16]	; (80004b0 <tick_increment+0x18>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	3301      	adds	r3, #1
 80004a2:	4a03      	ldr	r2, [pc, #12]	; (80004b0 <tick_increment+0x18>)
 80004a4:	6013      	str	r3, [r2, #0]
}
 80004a6:	bf00      	nop
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bc80      	pop	{r7}
 80004ac:	4770      	bx	lr
 80004ae:	bf00      	nop
 80004b0:	2000008c 	.word	0x2000008c

080004b4 <timer_init>:

void timer_init(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004b8:	b672      	cpsid	i
}
 80004ba:	bf00      	nop
	/* Disable the  global interrupt during the running of this timer service */
	__disable_irq();
	/* Load the timer with number of clock cycles per second ; generate a tick each second */
	SysTick->LOAD = ONE_SEC_LOAD-ONE;
 80004bc:	4b0e      	ldr	r3, [pc, #56]	; (80004f8 <timer_init+0x44>)
 80004be:	4a0f      	ldr	r2, [pc, #60]	; (80004fc <timer_init+0x48>)
 80004c0:	605a      	str	r2, [r3, #4]
	/* Clear the systick current value register */
	SysTick->VAL  = 0;
 80004c2:	4b0d      	ldr	r3, [pc, #52]	; (80004f8 <timer_init+0x44>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	609a      	str	r2, [r3, #8]
	/* Select Internal Clock Source */
	SysTick->CTRL |= CTRL_CLKSRC;
 80004c8:	4b0b      	ldr	r3, [pc, #44]	; (80004f8 <timer_init+0x44>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	4a0a      	ldr	r2, [pc, #40]	; (80004f8 <timer_init+0x44>)
 80004ce:	f043 0304 	orr.w	r3, r3, #4
 80004d2:	6013      	str	r3, [r2, #0]
	/* Enable Interrupt */
	SysTick->CTRL |= CTRL_TICKINIT;
 80004d4:	4b08      	ldr	r3, [pc, #32]	; (80004f8 <timer_init+0x44>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a07      	ldr	r2, [pc, #28]	; (80004f8 <timer_init+0x44>)
 80004da:	f043 0302 	orr.w	r3, r3, #2
 80004de:	6013      	str	r3, [r2, #0]
	/* Enable systick */
	SysTick->CTRL |= CTRL_ENABLE;
 80004e0:	4b05      	ldr	r3, [pc, #20]	; (80004f8 <timer_init+0x44>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a04      	ldr	r2, [pc, #16]	; (80004f8 <timer_init+0x44>)
 80004e6:	f043 0301 	orr.w	r3, r3, #1
 80004ea:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80004ec:	b662      	cpsie	i
}
 80004ee:	bf00      	nop
	/* Enable Global Interrupt */
	__enable_irq();
}
 80004f0:	bf00      	nop
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bc80      	pop	{r7}
 80004f6:	4770      	bx	lr
 80004f8:	e000e010 	.word	0xe000e010
 80004fc:	00f423ff 	.word	0x00f423ff

08000500 <SysTick_Handler>:


void SysTick_Handler(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
	tick_increment();
 8000504:	f7ff ffc8 	bl	8000498 <tick_increment>
}
 8000508:	bf00      	nop
 800050a:	bd80      	pop	{r7, pc}

0800050c <uart_init>:
 static uint16_t compute_uart_bd(uint32_t periph_clk, uint32_t baudrate);
 static void uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate);


 void uart_init(void)
 {
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
		  Configure Transfer Direction
		  Enable the UART module
	 */

	 /* Enable Clock Access to GPIOA */
	 RCC->AHB1ENR  |= GPIOA_EN;
 8000510:	4b1f      	ldr	r3, [pc, #124]	; (8000590 <uart_init+0x84>)
 8000512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000514:	4a1e      	ldr	r2, [pc, #120]	; (8000590 <uart_init+0x84>)
 8000516:	f043 0301 	orr.w	r3, r3, #1
 800051a:	6313      	str	r3, [r2, #48]	; 0x30
	 /* Set the mode of PA2 to alternate Function mode*/
	 GPIOA->MODER &= ~(GPIOA_AF_PIN4);
 800051c:	4b1d      	ldr	r3, [pc, #116]	; (8000594 <uart_init+0x88>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4a1c      	ldr	r2, [pc, #112]	; (8000594 <uart_init+0x88>)
 8000522:	f023 0310 	bic.w	r3, r3, #16
 8000526:	6013      	str	r3, [r2, #0]
	 GPIOA->MODER |=  GPIOA_AF_PIN5;
 8000528:	4b1a      	ldr	r3, [pc, #104]	; (8000594 <uart_init+0x88>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4a19      	ldr	r2, [pc, #100]	; (8000594 <uart_init+0x88>)
 800052e:	f043 0320 	orr.w	r3, r3, #32
 8000532:	6013      	str	r3, [r2, #0]

	 /* Set the Alternate Function to AF7(Uart2_tx); set it according to the datasheet!  */
	 GPIOA->AFR[0] |= (GPIOA_AFR_PIN8);
 8000534:	4b17      	ldr	r3, [pc, #92]	; (8000594 <uart_init+0x88>)
 8000536:	6a1b      	ldr	r3, [r3, #32]
 8000538:	4a16      	ldr	r2, [pc, #88]	; (8000594 <uart_init+0x88>)
 800053a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800053e:	6213      	str	r3, [r2, #32]
	 GPIOA->AFR[0] |= (GPIOA_AFR_PIN9);
 8000540:	4b14      	ldr	r3, [pc, #80]	; (8000594 <uart_init+0x88>)
 8000542:	6a1b      	ldr	r3, [r3, #32]
 8000544:	4a13      	ldr	r2, [pc, #76]	; (8000594 <uart_init+0x88>)
 8000546:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800054a:	6213      	str	r3, [r2, #32]
	 GPIOA->AFR[0] |= (GPIOA_AFR_PIN10);
 800054c:	4b11      	ldr	r3, [pc, #68]	; (8000594 <uart_init+0x88>)
 800054e:	6a1b      	ldr	r3, [r3, #32]
 8000550:	4a10      	ldr	r2, [pc, #64]	; (8000594 <uart_init+0x88>)
 8000552:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000556:	6213      	str	r3, [r2, #32]
	 GPIOA->AFR[0] &= ~(GPIOA_AFR_PIN11);
 8000558:	4b0e      	ldr	r3, [pc, #56]	; (8000594 <uart_init+0x88>)
 800055a:	6a1b      	ldr	r3, [r3, #32]
 800055c:	4a0d      	ldr	r2, [pc, #52]	; (8000594 <uart_init+0x88>)
 800055e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000562:	6213      	str	r3, [r2, #32]

	 /* Enable Clock access to UART 2 */
     RCC->APB1ENR |= UART2EN;
 8000564:	4b0a      	ldr	r3, [pc, #40]	; (8000590 <uart_init+0x84>)
 8000566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000568:	4a09      	ldr	r2, [pc, #36]	; (8000590 <uart_init+0x84>)
 800056a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800056e:	6413      	str	r3, [r2, #64]	; 0x40
	 /* Configure Baud Rate */
     uart_set_baudrate(APB1_CLK, UART_BAUDRATE);
 8000570:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000574:	4808      	ldr	r0, [pc, #32]	; (8000598 <uart_init+0x8c>)
 8000576:	f000 f825 	bl	80005c4 <uart_set_baudrate>
     /* Configure Transfer Direction */
     USART2->CR1 = CR1_TE;
 800057a:	4b08      	ldr	r3, [pc, #32]	; (800059c <uart_init+0x90>)
 800057c:	2208      	movs	r2, #8
 800057e:	60da      	str	r2, [r3, #12]
     /* Enable the UART module */
     USART2->CR1 |= CR1_UE;
 8000580:	4b06      	ldr	r3, [pc, #24]	; (800059c <uart_init+0x90>)
 8000582:	68db      	ldr	r3, [r3, #12]
 8000584:	4a05      	ldr	r2, [pc, #20]	; (800059c <uart_init+0x90>)
 8000586:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800058a:	60d3      	str	r3, [r2, #12]

 }
 800058c:	bf00      	nop
 800058e:	bd80      	pop	{r7, pc}
 8000590:	40023800 	.word	0x40023800
 8000594:	40020000 	.word	0x40020000
 8000598:	00f42400 	.word	0x00f42400
 800059c:	40004400 	.word	0x40004400

080005a0 <compute_uart_bd>:

 static uint16_t compute_uart_bd(uint32_t periph_clk, uint32_t baudrate)
 {
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
 80005a8:	6039      	str	r1, [r7, #0]
	 return ((periph_clk + (baudrate/2U))/baudrate);
 80005aa:	683b      	ldr	r3, [r7, #0]
 80005ac:	085a      	lsrs	r2, r3, #1
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	441a      	add	r2, r3
 80005b2:	683b      	ldr	r3, [r7, #0]
 80005b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80005b8:	b29b      	uxth	r3, r3
 }
 80005ba:	4618      	mov	r0, r3
 80005bc:	370c      	adds	r7, #12
 80005be:	46bd      	mov	sp, r7
 80005c0:	bc80      	pop	{r7}
 80005c2:	4770      	bx	lr

080005c4 <uart_set_baudrate>:

 static void uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate)
 {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	6039      	str	r1, [r7, #0]
	 USART2->BRR = compute_uart_bd(periph_clk,baudrate);
 80005ce:	6839      	ldr	r1, [r7, #0]
 80005d0:	6878      	ldr	r0, [r7, #4]
 80005d2:	f7ff ffe5 	bl	80005a0 <compute_uart_bd>
 80005d6:	4603      	mov	r3, r0
 80005d8:	461a      	mov	r2, r3
 80005da:	4b03      	ldr	r3, [pc, #12]	; (80005e8 <uart_set_baudrate+0x24>)
 80005dc:	609a      	str	r2, [r3, #8]
 }
 80005de:	bf00      	nop
 80005e0:	3708      	adds	r7, #8
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40004400 	.word	0x40004400

080005ec <__io_putchar>:

 int __io_putchar(int ch)
 {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
 	uart_write(ch);
 80005f4:	6878      	ldr	r0, [r7, #4]
 80005f6:	f000 f805 	bl	8000604 <uart_write>
 	return ch;
 80005fa:	687b      	ldr	r3, [r7, #4]
 }
 80005fc:	4618      	mov	r0, r3
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}

08000604 <uart_write>:

void uart_write(int ch)
 {
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
	 /* Ensure transmit data register is empty before new data can be loaded */
    while(!(USART2->SR & SR_TXE));
 800060c:	bf00      	nop
 800060e:	4b07      	ldr	r3, [pc, #28]	; (800062c <uart_write+0x28>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000616:	2b00      	cmp	r3, #0
 8000618:	d0f9      	beq.n	800060e <uart_write+0xa>
    USART2->DR = (ch & 0xFF);
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	4a03      	ldr	r2, [pc, #12]	; (800062c <uart_write+0x28>)
 800061e:	b2db      	uxtb	r3, r3
 8000620:	6053      	str	r3, [r2, #4]
 }
 8000622:	bf00      	nop
 8000624:	370c      	adds	r7, #12
 8000626:	46bd      	mov	sp, r7
 8000628:	bc80      	pop	{r7}
 800062a:	4770      	bx	lr
 800062c:	40004400 	.word	0x40004400

08000630 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000630:	480d      	ldr	r0, [pc, #52]	; (8000668 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000632:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000634:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000638:	480c      	ldr	r0, [pc, #48]	; (800066c <LoopForever+0x6>)
  ldr r1, =_edata
 800063a:	490d      	ldr	r1, [pc, #52]	; (8000670 <LoopForever+0xa>)
  ldr r2, =_sidata
 800063c:	4a0d      	ldr	r2, [pc, #52]	; (8000674 <LoopForever+0xe>)
  movs r3, #0
 800063e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000640:	e002      	b.n	8000648 <LoopCopyDataInit>

08000642 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000642:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000644:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000646:	3304      	adds	r3, #4

08000648 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000648:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800064a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800064c:	d3f9      	bcc.n	8000642 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800064e:	4a0a      	ldr	r2, [pc, #40]	; (8000678 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000650:	4c0a      	ldr	r4, [pc, #40]	; (800067c <LoopForever+0x16>)
  movs r3, #0
 8000652:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000654:	e001      	b.n	800065a <LoopFillZerobss>

08000656 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000656:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000658:	3204      	adds	r2, #4

0800065a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800065a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800065c:	d3fb      	bcc.n	8000656 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800065e:	f000 f817 	bl	8000690 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000662:	f7ff fe5d 	bl	8000320 <main>

08000666 <LoopForever>:

LoopForever:
    b LoopForever
 8000666:	e7fe      	b.n	8000666 <LoopForever>
  ldr   r0, =_estack
 8000668:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800066c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000670:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000674:	08001110 	.word	0x08001110
  ldr r2, =_sbss
 8000678:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 800067c:	200000a4 	.word	0x200000a4

08000680 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000680:	e7fe      	b.n	8000680 <ADC_IRQHandler>
	...

08000684 <__errno>:
 8000684:	4b01      	ldr	r3, [pc, #4]	; (800068c <__errno+0x8>)
 8000686:	6818      	ldr	r0, [r3, #0]
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	20000000 	.word	0x20000000

08000690 <__libc_init_array>:
 8000690:	b570      	push	{r4, r5, r6, lr}
 8000692:	4d0d      	ldr	r5, [pc, #52]	; (80006c8 <__libc_init_array+0x38>)
 8000694:	4c0d      	ldr	r4, [pc, #52]	; (80006cc <__libc_init_array+0x3c>)
 8000696:	1b64      	subs	r4, r4, r5
 8000698:	10a4      	asrs	r4, r4, #2
 800069a:	2600      	movs	r6, #0
 800069c:	42a6      	cmp	r6, r4
 800069e:	d109      	bne.n	80006b4 <__libc_init_array+0x24>
 80006a0:	4d0b      	ldr	r5, [pc, #44]	; (80006d0 <__libc_init_array+0x40>)
 80006a2:	4c0c      	ldr	r4, [pc, #48]	; (80006d4 <__libc_init_array+0x44>)
 80006a4:	f000 fce4 	bl	8001070 <_init>
 80006a8:	1b64      	subs	r4, r4, r5
 80006aa:	10a4      	asrs	r4, r4, #2
 80006ac:	2600      	movs	r6, #0
 80006ae:	42a6      	cmp	r6, r4
 80006b0:	d105      	bne.n	80006be <__libc_init_array+0x2e>
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80006b8:	4798      	blx	r3
 80006ba:	3601      	adds	r6, #1
 80006bc:	e7ee      	b.n	800069c <__libc_init_array+0xc>
 80006be:	f855 3b04 	ldr.w	r3, [r5], #4
 80006c2:	4798      	blx	r3
 80006c4:	3601      	adds	r6, #1
 80006c6:	e7f2      	b.n	80006ae <__libc_init_array+0x1e>
 80006c8:	08001108 	.word	0x08001108
 80006cc:	08001108 	.word	0x08001108
 80006d0:	08001108 	.word	0x08001108
 80006d4:	0800110c 	.word	0x0800110c

080006d8 <memset>:
 80006d8:	4402      	add	r2, r0
 80006da:	4603      	mov	r3, r0
 80006dc:	4293      	cmp	r3, r2
 80006de:	d100      	bne.n	80006e2 <memset+0xa>
 80006e0:	4770      	bx	lr
 80006e2:	f803 1b01 	strb.w	r1, [r3], #1
 80006e6:	e7f9      	b.n	80006dc <memset+0x4>

080006e8 <_puts_r>:
 80006e8:	b570      	push	{r4, r5, r6, lr}
 80006ea:	460e      	mov	r6, r1
 80006ec:	4605      	mov	r5, r0
 80006ee:	b118      	cbz	r0, 80006f8 <_puts_r+0x10>
 80006f0:	6983      	ldr	r3, [r0, #24]
 80006f2:	b90b      	cbnz	r3, 80006f8 <_puts_r+0x10>
 80006f4:	f000 fa48 	bl	8000b88 <__sinit>
 80006f8:	69ab      	ldr	r3, [r5, #24]
 80006fa:	68ac      	ldr	r4, [r5, #8]
 80006fc:	b913      	cbnz	r3, 8000704 <_puts_r+0x1c>
 80006fe:	4628      	mov	r0, r5
 8000700:	f000 fa42 	bl	8000b88 <__sinit>
 8000704:	4b2c      	ldr	r3, [pc, #176]	; (80007b8 <_puts_r+0xd0>)
 8000706:	429c      	cmp	r4, r3
 8000708:	d120      	bne.n	800074c <_puts_r+0x64>
 800070a:	686c      	ldr	r4, [r5, #4]
 800070c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800070e:	07db      	lsls	r3, r3, #31
 8000710:	d405      	bmi.n	800071e <_puts_r+0x36>
 8000712:	89a3      	ldrh	r3, [r4, #12]
 8000714:	0598      	lsls	r0, r3, #22
 8000716:	d402      	bmi.n	800071e <_puts_r+0x36>
 8000718:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800071a:	f000 fad3 	bl	8000cc4 <__retarget_lock_acquire_recursive>
 800071e:	89a3      	ldrh	r3, [r4, #12]
 8000720:	0719      	lsls	r1, r3, #28
 8000722:	d51d      	bpl.n	8000760 <_puts_r+0x78>
 8000724:	6923      	ldr	r3, [r4, #16]
 8000726:	b1db      	cbz	r3, 8000760 <_puts_r+0x78>
 8000728:	3e01      	subs	r6, #1
 800072a:	68a3      	ldr	r3, [r4, #8]
 800072c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000730:	3b01      	subs	r3, #1
 8000732:	60a3      	str	r3, [r4, #8]
 8000734:	bb39      	cbnz	r1, 8000786 <_puts_r+0x9e>
 8000736:	2b00      	cmp	r3, #0
 8000738:	da38      	bge.n	80007ac <_puts_r+0xc4>
 800073a:	4622      	mov	r2, r4
 800073c:	210a      	movs	r1, #10
 800073e:	4628      	mov	r0, r5
 8000740:	f000 f848 	bl	80007d4 <__swbuf_r>
 8000744:	3001      	adds	r0, #1
 8000746:	d011      	beq.n	800076c <_puts_r+0x84>
 8000748:	250a      	movs	r5, #10
 800074a:	e011      	b.n	8000770 <_puts_r+0x88>
 800074c:	4b1b      	ldr	r3, [pc, #108]	; (80007bc <_puts_r+0xd4>)
 800074e:	429c      	cmp	r4, r3
 8000750:	d101      	bne.n	8000756 <_puts_r+0x6e>
 8000752:	68ac      	ldr	r4, [r5, #8]
 8000754:	e7da      	b.n	800070c <_puts_r+0x24>
 8000756:	4b1a      	ldr	r3, [pc, #104]	; (80007c0 <_puts_r+0xd8>)
 8000758:	429c      	cmp	r4, r3
 800075a:	bf08      	it	eq
 800075c:	68ec      	ldreq	r4, [r5, #12]
 800075e:	e7d5      	b.n	800070c <_puts_r+0x24>
 8000760:	4621      	mov	r1, r4
 8000762:	4628      	mov	r0, r5
 8000764:	f000 f888 	bl	8000878 <__swsetup_r>
 8000768:	2800      	cmp	r0, #0
 800076a:	d0dd      	beq.n	8000728 <_puts_r+0x40>
 800076c:	f04f 35ff 	mov.w	r5, #4294967295
 8000770:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000772:	07da      	lsls	r2, r3, #31
 8000774:	d405      	bmi.n	8000782 <_puts_r+0x9a>
 8000776:	89a3      	ldrh	r3, [r4, #12]
 8000778:	059b      	lsls	r3, r3, #22
 800077a:	d402      	bmi.n	8000782 <_puts_r+0x9a>
 800077c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800077e:	f000 faa2 	bl	8000cc6 <__retarget_lock_release_recursive>
 8000782:	4628      	mov	r0, r5
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	2b00      	cmp	r3, #0
 8000788:	da04      	bge.n	8000794 <_puts_r+0xac>
 800078a:	69a2      	ldr	r2, [r4, #24]
 800078c:	429a      	cmp	r2, r3
 800078e:	dc06      	bgt.n	800079e <_puts_r+0xb6>
 8000790:	290a      	cmp	r1, #10
 8000792:	d004      	beq.n	800079e <_puts_r+0xb6>
 8000794:	6823      	ldr	r3, [r4, #0]
 8000796:	1c5a      	adds	r2, r3, #1
 8000798:	6022      	str	r2, [r4, #0]
 800079a:	7019      	strb	r1, [r3, #0]
 800079c:	e7c5      	b.n	800072a <_puts_r+0x42>
 800079e:	4622      	mov	r2, r4
 80007a0:	4628      	mov	r0, r5
 80007a2:	f000 f817 	bl	80007d4 <__swbuf_r>
 80007a6:	3001      	adds	r0, #1
 80007a8:	d1bf      	bne.n	800072a <_puts_r+0x42>
 80007aa:	e7df      	b.n	800076c <_puts_r+0x84>
 80007ac:	6823      	ldr	r3, [r4, #0]
 80007ae:	250a      	movs	r5, #10
 80007b0:	1c5a      	adds	r2, r3, #1
 80007b2:	6022      	str	r2, [r4, #0]
 80007b4:	701d      	strb	r5, [r3, #0]
 80007b6:	e7db      	b.n	8000770 <_puts_r+0x88>
 80007b8:	080010c8 	.word	0x080010c8
 80007bc:	080010e8 	.word	0x080010e8
 80007c0:	080010a8 	.word	0x080010a8

080007c4 <puts>:
 80007c4:	4b02      	ldr	r3, [pc, #8]	; (80007d0 <puts+0xc>)
 80007c6:	4601      	mov	r1, r0
 80007c8:	6818      	ldr	r0, [r3, #0]
 80007ca:	f7ff bf8d 	b.w	80006e8 <_puts_r>
 80007ce:	bf00      	nop
 80007d0:	20000000 	.word	0x20000000

080007d4 <__swbuf_r>:
 80007d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007d6:	460e      	mov	r6, r1
 80007d8:	4614      	mov	r4, r2
 80007da:	4605      	mov	r5, r0
 80007dc:	b118      	cbz	r0, 80007e6 <__swbuf_r+0x12>
 80007de:	6983      	ldr	r3, [r0, #24]
 80007e0:	b90b      	cbnz	r3, 80007e6 <__swbuf_r+0x12>
 80007e2:	f000 f9d1 	bl	8000b88 <__sinit>
 80007e6:	4b21      	ldr	r3, [pc, #132]	; (800086c <__swbuf_r+0x98>)
 80007e8:	429c      	cmp	r4, r3
 80007ea:	d12b      	bne.n	8000844 <__swbuf_r+0x70>
 80007ec:	686c      	ldr	r4, [r5, #4]
 80007ee:	69a3      	ldr	r3, [r4, #24]
 80007f0:	60a3      	str	r3, [r4, #8]
 80007f2:	89a3      	ldrh	r3, [r4, #12]
 80007f4:	071a      	lsls	r2, r3, #28
 80007f6:	d52f      	bpl.n	8000858 <__swbuf_r+0x84>
 80007f8:	6923      	ldr	r3, [r4, #16]
 80007fa:	b36b      	cbz	r3, 8000858 <__swbuf_r+0x84>
 80007fc:	6923      	ldr	r3, [r4, #16]
 80007fe:	6820      	ldr	r0, [r4, #0]
 8000800:	1ac0      	subs	r0, r0, r3
 8000802:	6963      	ldr	r3, [r4, #20]
 8000804:	b2f6      	uxtb	r6, r6
 8000806:	4283      	cmp	r3, r0
 8000808:	4637      	mov	r7, r6
 800080a:	dc04      	bgt.n	8000816 <__swbuf_r+0x42>
 800080c:	4621      	mov	r1, r4
 800080e:	4628      	mov	r0, r5
 8000810:	f000 f926 	bl	8000a60 <_fflush_r>
 8000814:	bb30      	cbnz	r0, 8000864 <__swbuf_r+0x90>
 8000816:	68a3      	ldr	r3, [r4, #8]
 8000818:	3b01      	subs	r3, #1
 800081a:	60a3      	str	r3, [r4, #8]
 800081c:	6823      	ldr	r3, [r4, #0]
 800081e:	1c5a      	adds	r2, r3, #1
 8000820:	6022      	str	r2, [r4, #0]
 8000822:	701e      	strb	r6, [r3, #0]
 8000824:	6963      	ldr	r3, [r4, #20]
 8000826:	3001      	adds	r0, #1
 8000828:	4283      	cmp	r3, r0
 800082a:	d004      	beq.n	8000836 <__swbuf_r+0x62>
 800082c:	89a3      	ldrh	r3, [r4, #12]
 800082e:	07db      	lsls	r3, r3, #31
 8000830:	d506      	bpl.n	8000840 <__swbuf_r+0x6c>
 8000832:	2e0a      	cmp	r6, #10
 8000834:	d104      	bne.n	8000840 <__swbuf_r+0x6c>
 8000836:	4621      	mov	r1, r4
 8000838:	4628      	mov	r0, r5
 800083a:	f000 f911 	bl	8000a60 <_fflush_r>
 800083e:	b988      	cbnz	r0, 8000864 <__swbuf_r+0x90>
 8000840:	4638      	mov	r0, r7
 8000842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000844:	4b0a      	ldr	r3, [pc, #40]	; (8000870 <__swbuf_r+0x9c>)
 8000846:	429c      	cmp	r4, r3
 8000848:	d101      	bne.n	800084e <__swbuf_r+0x7a>
 800084a:	68ac      	ldr	r4, [r5, #8]
 800084c:	e7cf      	b.n	80007ee <__swbuf_r+0x1a>
 800084e:	4b09      	ldr	r3, [pc, #36]	; (8000874 <__swbuf_r+0xa0>)
 8000850:	429c      	cmp	r4, r3
 8000852:	bf08      	it	eq
 8000854:	68ec      	ldreq	r4, [r5, #12]
 8000856:	e7ca      	b.n	80007ee <__swbuf_r+0x1a>
 8000858:	4621      	mov	r1, r4
 800085a:	4628      	mov	r0, r5
 800085c:	f000 f80c 	bl	8000878 <__swsetup_r>
 8000860:	2800      	cmp	r0, #0
 8000862:	d0cb      	beq.n	80007fc <__swbuf_r+0x28>
 8000864:	f04f 37ff 	mov.w	r7, #4294967295
 8000868:	e7ea      	b.n	8000840 <__swbuf_r+0x6c>
 800086a:	bf00      	nop
 800086c:	080010c8 	.word	0x080010c8
 8000870:	080010e8 	.word	0x080010e8
 8000874:	080010a8 	.word	0x080010a8

08000878 <__swsetup_r>:
 8000878:	4b32      	ldr	r3, [pc, #200]	; (8000944 <__swsetup_r+0xcc>)
 800087a:	b570      	push	{r4, r5, r6, lr}
 800087c:	681d      	ldr	r5, [r3, #0]
 800087e:	4606      	mov	r6, r0
 8000880:	460c      	mov	r4, r1
 8000882:	b125      	cbz	r5, 800088e <__swsetup_r+0x16>
 8000884:	69ab      	ldr	r3, [r5, #24]
 8000886:	b913      	cbnz	r3, 800088e <__swsetup_r+0x16>
 8000888:	4628      	mov	r0, r5
 800088a:	f000 f97d 	bl	8000b88 <__sinit>
 800088e:	4b2e      	ldr	r3, [pc, #184]	; (8000948 <__swsetup_r+0xd0>)
 8000890:	429c      	cmp	r4, r3
 8000892:	d10f      	bne.n	80008b4 <__swsetup_r+0x3c>
 8000894:	686c      	ldr	r4, [r5, #4]
 8000896:	89a3      	ldrh	r3, [r4, #12]
 8000898:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800089c:	0719      	lsls	r1, r3, #28
 800089e:	d42c      	bmi.n	80008fa <__swsetup_r+0x82>
 80008a0:	06dd      	lsls	r5, r3, #27
 80008a2:	d411      	bmi.n	80008c8 <__swsetup_r+0x50>
 80008a4:	2309      	movs	r3, #9
 80008a6:	6033      	str	r3, [r6, #0]
 80008a8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80008ac:	81a3      	strh	r3, [r4, #12]
 80008ae:	f04f 30ff 	mov.w	r0, #4294967295
 80008b2:	e03e      	b.n	8000932 <__swsetup_r+0xba>
 80008b4:	4b25      	ldr	r3, [pc, #148]	; (800094c <__swsetup_r+0xd4>)
 80008b6:	429c      	cmp	r4, r3
 80008b8:	d101      	bne.n	80008be <__swsetup_r+0x46>
 80008ba:	68ac      	ldr	r4, [r5, #8]
 80008bc:	e7eb      	b.n	8000896 <__swsetup_r+0x1e>
 80008be:	4b24      	ldr	r3, [pc, #144]	; (8000950 <__swsetup_r+0xd8>)
 80008c0:	429c      	cmp	r4, r3
 80008c2:	bf08      	it	eq
 80008c4:	68ec      	ldreq	r4, [r5, #12]
 80008c6:	e7e6      	b.n	8000896 <__swsetup_r+0x1e>
 80008c8:	0758      	lsls	r0, r3, #29
 80008ca:	d512      	bpl.n	80008f2 <__swsetup_r+0x7a>
 80008cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80008ce:	b141      	cbz	r1, 80008e2 <__swsetup_r+0x6a>
 80008d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80008d4:	4299      	cmp	r1, r3
 80008d6:	d002      	beq.n	80008de <__swsetup_r+0x66>
 80008d8:	4630      	mov	r0, r6
 80008da:	f000 fa59 	bl	8000d90 <_free_r>
 80008de:	2300      	movs	r3, #0
 80008e0:	6363      	str	r3, [r4, #52]	; 0x34
 80008e2:	89a3      	ldrh	r3, [r4, #12]
 80008e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80008e8:	81a3      	strh	r3, [r4, #12]
 80008ea:	2300      	movs	r3, #0
 80008ec:	6063      	str	r3, [r4, #4]
 80008ee:	6923      	ldr	r3, [r4, #16]
 80008f0:	6023      	str	r3, [r4, #0]
 80008f2:	89a3      	ldrh	r3, [r4, #12]
 80008f4:	f043 0308 	orr.w	r3, r3, #8
 80008f8:	81a3      	strh	r3, [r4, #12]
 80008fa:	6923      	ldr	r3, [r4, #16]
 80008fc:	b94b      	cbnz	r3, 8000912 <__swsetup_r+0x9a>
 80008fe:	89a3      	ldrh	r3, [r4, #12]
 8000900:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000904:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000908:	d003      	beq.n	8000912 <__swsetup_r+0x9a>
 800090a:	4621      	mov	r1, r4
 800090c:	4630      	mov	r0, r6
 800090e:	f000 f9ff 	bl	8000d10 <__smakebuf_r>
 8000912:	89a0      	ldrh	r0, [r4, #12]
 8000914:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000918:	f010 0301 	ands.w	r3, r0, #1
 800091c:	d00a      	beq.n	8000934 <__swsetup_r+0xbc>
 800091e:	2300      	movs	r3, #0
 8000920:	60a3      	str	r3, [r4, #8]
 8000922:	6963      	ldr	r3, [r4, #20]
 8000924:	425b      	negs	r3, r3
 8000926:	61a3      	str	r3, [r4, #24]
 8000928:	6923      	ldr	r3, [r4, #16]
 800092a:	b943      	cbnz	r3, 800093e <__swsetup_r+0xc6>
 800092c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000930:	d1ba      	bne.n	80008a8 <__swsetup_r+0x30>
 8000932:	bd70      	pop	{r4, r5, r6, pc}
 8000934:	0781      	lsls	r1, r0, #30
 8000936:	bf58      	it	pl
 8000938:	6963      	ldrpl	r3, [r4, #20]
 800093a:	60a3      	str	r3, [r4, #8]
 800093c:	e7f4      	b.n	8000928 <__swsetup_r+0xb0>
 800093e:	2000      	movs	r0, #0
 8000940:	e7f7      	b.n	8000932 <__swsetup_r+0xba>
 8000942:	bf00      	nop
 8000944:	20000000 	.word	0x20000000
 8000948:	080010c8 	.word	0x080010c8
 800094c:	080010e8 	.word	0x080010e8
 8000950:	080010a8 	.word	0x080010a8

08000954 <__sflush_r>:
 8000954:	898a      	ldrh	r2, [r1, #12]
 8000956:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800095a:	4605      	mov	r5, r0
 800095c:	0710      	lsls	r0, r2, #28
 800095e:	460c      	mov	r4, r1
 8000960:	d458      	bmi.n	8000a14 <__sflush_r+0xc0>
 8000962:	684b      	ldr	r3, [r1, #4]
 8000964:	2b00      	cmp	r3, #0
 8000966:	dc05      	bgt.n	8000974 <__sflush_r+0x20>
 8000968:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800096a:	2b00      	cmp	r3, #0
 800096c:	dc02      	bgt.n	8000974 <__sflush_r+0x20>
 800096e:	2000      	movs	r0, #0
 8000970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000974:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000976:	2e00      	cmp	r6, #0
 8000978:	d0f9      	beq.n	800096e <__sflush_r+0x1a>
 800097a:	2300      	movs	r3, #0
 800097c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000980:	682f      	ldr	r7, [r5, #0]
 8000982:	602b      	str	r3, [r5, #0]
 8000984:	d032      	beq.n	80009ec <__sflush_r+0x98>
 8000986:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000988:	89a3      	ldrh	r3, [r4, #12]
 800098a:	075a      	lsls	r2, r3, #29
 800098c:	d505      	bpl.n	800099a <__sflush_r+0x46>
 800098e:	6863      	ldr	r3, [r4, #4]
 8000990:	1ac0      	subs	r0, r0, r3
 8000992:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000994:	b10b      	cbz	r3, 800099a <__sflush_r+0x46>
 8000996:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000998:	1ac0      	subs	r0, r0, r3
 800099a:	2300      	movs	r3, #0
 800099c:	4602      	mov	r2, r0
 800099e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80009a0:	6a21      	ldr	r1, [r4, #32]
 80009a2:	4628      	mov	r0, r5
 80009a4:	47b0      	blx	r6
 80009a6:	1c43      	adds	r3, r0, #1
 80009a8:	89a3      	ldrh	r3, [r4, #12]
 80009aa:	d106      	bne.n	80009ba <__sflush_r+0x66>
 80009ac:	6829      	ldr	r1, [r5, #0]
 80009ae:	291d      	cmp	r1, #29
 80009b0:	d82c      	bhi.n	8000a0c <__sflush_r+0xb8>
 80009b2:	4a2a      	ldr	r2, [pc, #168]	; (8000a5c <__sflush_r+0x108>)
 80009b4:	40ca      	lsrs	r2, r1
 80009b6:	07d6      	lsls	r6, r2, #31
 80009b8:	d528      	bpl.n	8000a0c <__sflush_r+0xb8>
 80009ba:	2200      	movs	r2, #0
 80009bc:	6062      	str	r2, [r4, #4]
 80009be:	04d9      	lsls	r1, r3, #19
 80009c0:	6922      	ldr	r2, [r4, #16]
 80009c2:	6022      	str	r2, [r4, #0]
 80009c4:	d504      	bpl.n	80009d0 <__sflush_r+0x7c>
 80009c6:	1c42      	adds	r2, r0, #1
 80009c8:	d101      	bne.n	80009ce <__sflush_r+0x7a>
 80009ca:	682b      	ldr	r3, [r5, #0]
 80009cc:	b903      	cbnz	r3, 80009d0 <__sflush_r+0x7c>
 80009ce:	6560      	str	r0, [r4, #84]	; 0x54
 80009d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80009d2:	602f      	str	r7, [r5, #0]
 80009d4:	2900      	cmp	r1, #0
 80009d6:	d0ca      	beq.n	800096e <__sflush_r+0x1a>
 80009d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80009dc:	4299      	cmp	r1, r3
 80009de:	d002      	beq.n	80009e6 <__sflush_r+0x92>
 80009e0:	4628      	mov	r0, r5
 80009e2:	f000 f9d5 	bl	8000d90 <_free_r>
 80009e6:	2000      	movs	r0, #0
 80009e8:	6360      	str	r0, [r4, #52]	; 0x34
 80009ea:	e7c1      	b.n	8000970 <__sflush_r+0x1c>
 80009ec:	6a21      	ldr	r1, [r4, #32]
 80009ee:	2301      	movs	r3, #1
 80009f0:	4628      	mov	r0, r5
 80009f2:	47b0      	blx	r6
 80009f4:	1c41      	adds	r1, r0, #1
 80009f6:	d1c7      	bne.n	8000988 <__sflush_r+0x34>
 80009f8:	682b      	ldr	r3, [r5, #0]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d0c4      	beq.n	8000988 <__sflush_r+0x34>
 80009fe:	2b1d      	cmp	r3, #29
 8000a00:	d001      	beq.n	8000a06 <__sflush_r+0xb2>
 8000a02:	2b16      	cmp	r3, #22
 8000a04:	d101      	bne.n	8000a0a <__sflush_r+0xb6>
 8000a06:	602f      	str	r7, [r5, #0]
 8000a08:	e7b1      	b.n	800096e <__sflush_r+0x1a>
 8000a0a:	89a3      	ldrh	r3, [r4, #12]
 8000a0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a10:	81a3      	strh	r3, [r4, #12]
 8000a12:	e7ad      	b.n	8000970 <__sflush_r+0x1c>
 8000a14:	690f      	ldr	r7, [r1, #16]
 8000a16:	2f00      	cmp	r7, #0
 8000a18:	d0a9      	beq.n	800096e <__sflush_r+0x1a>
 8000a1a:	0793      	lsls	r3, r2, #30
 8000a1c:	680e      	ldr	r6, [r1, #0]
 8000a1e:	bf08      	it	eq
 8000a20:	694b      	ldreq	r3, [r1, #20]
 8000a22:	600f      	str	r7, [r1, #0]
 8000a24:	bf18      	it	ne
 8000a26:	2300      	movne	r3, #0
 8000a28:	eba6 0807 	sub.w	r8, r6, r7
 8000a2c:	608b      	str	r3, [r1, #8]
 8000a2e:	f1b8 0f00 	cmp.w	r8, #0
 8000a32:	dd9c      	ble.n	800096e <__sflush_r+0x1a>
 8000a34:	6a21      	ldr	r1, [r4, #32]
 8000a36:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000a38:	4643      	mov	r3, r8
 8000a3a:	463a      	mov	r2, r7
 8000a3c:	4628      	mov	r0, r5
 8000a3e:	47b0      	blx	r6
 8000a40:	2800      	cmp	r0, #0
 8000a42:	dc06      	bgt.n	8000a52 <__sflush_r+0xfe>
 8000a44:	89a3      	ldrh	r3, [r4, #12]
 8000a46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a4a:	81a3      	strh	r3, [r4, #12]
 8000a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a50:	e78e      	b.n	8000970 <__sflush_r+0x1c>
 8000a52:	4407      	add	r7, r0
 8000a54:	eba8 0800 	sub.w	r8, r8, r0
 8000a58:	e7e9      	b.n	8000a2e <__sflush_r+0xda>
 8000a5a:	bf00      	nop
 8000a5c:	20400001 	.word	0x20400001

08000a60 <_fflush_r>:
 8000a60:	b538      	push	{r3, r4, r5, lr}
 8000a62:	690b      	ldr	r3, [r1, #16]
 8000a64:	4605      	mov	r5, r0
 8000a66:	460c      	mov	r4, r1
 8000a68:	b913      	cbnz	r3, 8000a70 <_fflush_r+0x10>
 8000a6a:	2500      	movs	r5, #0
 8000a6c:	4628      	mov	r0, r5
 8000a6e:	bd38      	pop	{r3, r4, r5, pc}
 8000a70:	b118      	cbz	r0, 8000a7a <_fflush_r+0x1a>
 8000a72:	6983      	ldr	r3, [r0, #24]
 8000a74:	b90b      	cbnz	r3, 8000a7a <_fflush_r+0x1a>
 8000a76:	f000 f887 	bl	8000b88 <__sinit>
 8000a7a:	4b14      	ldr	r3, [pc, #80]	; (8000acc <_fflush_r+0x6c>)
 8000a7c:	429c      	cmp	r4, r3
 8000a7e:	d11b      	bne.n	8000ab8 <_fflush_r+0x58>
 8000a80:	686c      	ldr	r4, [r5, #4]
 8000a82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d0ef      	beq.n	8000a6a <_fflush_r+0xa>
 8000a8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000a8c:	07d0      	lsls	r0, r2, #31
 8000a8e:	d404      	bmi.n	8000a9a <_fflush_r+0x3a>
 8000a90:	0599      	lsls	r1, r3, #22
 8000a92:	d402      	bmi.n	8000a9a <_fflush_r+0x3a>
 8000a94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000a96:	f000 f915 	bl	8000cc4 <__retarget_lock_acquire_recursive>
 8000a9a:	4628      	mov	r0, r5
 8000a9c:	4621      	mov	r1, r4
 8000a9e:	f7ff ff59 	bl	8000954 <__sflush_r>
 8000aa2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000aa4:	07da      	lsls	r2, r3, #31
 8000aa6:	4605      	mov	r5, r0
 8000aa8:	d4e0      	bmi.n	8000a6c <_fflush_r+0xc>
 8000aaa:	89a3      	ldrh	r3, [r4, #12]
 8000aac:	059b      	lsls	r3, r3, #22
 8000aae:	d4dd      	bmi.n	8000a6c <_fflush_r+0xc>
 8000ab0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000ab2:	f000 f908 	bl	8000cc6 <__retarget_lock_release_recursive>
 8000ab6:	e7d9      	b.n	8000a6c <_fflush_r+0xc>
 8000ab8:	4b05      	ldr	r3, [pc, #20]	; (8000ad0 <_fflush_r+0x70>)
 8000aba:	429c      	cmp	r4, r3
 8000abc:	d101      	bne.n	8000ac2 <_fflush_r+0x62>
 8000abe:	68ac      	ldr	r4, [r5, #8]
 8000ac0:	e7df      	b.n	8000a82 <_fflush_r+0x22>
 8000ac2:	4b04      	ldr	r3, [pc, #16]	; (8000ad4 <_fflush_r+0x74>)
 8000ac4:	429c      	cmp	r4, r3
 8000ac6:	bf08      	it	eq
 8000ac8:	68ec      	ldreq	r4, [r5, #12]
 8000aca:	e7da      	b.n	8000a82 <_fflush_r+0x22>
 8000acc:	080010c8 	.word	0x080010c8
 8000ad0:	080010e8 	.word	0x080010e8
 8000ad4:	080010a8 	.word	0x080010a8

08000ad8 <std>:
 8000ad8:	2300      	movs	r3, #0
 8000ada:	b510      	push	{r4, lr}
 8000adc:	4604      	mov	r4, r0
 8000ade:	e9c0 3300 	strd	r3, r3, [r0]
 8000ae2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000ae6:	6083      	str	r3, [r0, #8]
 8000ae8:	8181      	strh	r1, [r0, #12]
 8000aea:	6643      	str	r3, [r0, #100]	; 0x64
 8000aec:	81c2      	strh	r2, [r0, #14]
 8000aee:	6183      	str	r3, [r0, #24]
 8000af0:	4619      	mov	r1, r3
 8000af2:	2208      	movs	r2, #8
 8000af4:	305c      	adds	r0, #92	; 0x5c
 8000af6:	f7ff fdef 	bl	80006d8 <memset>
 8000afa:	4b05      	ldr	r3, [pc, #20]	; (8000b10 <std+0x38>)
 8000afc:	6263      	str	r3, [r4, #36]	; 0x24
 8000afe:	4b05      	ldr	r3, [pc, #20]	; (8000b14 <std+0x3c>)
 8000b00:	62a3      	str	r3, [r4, #40]	; 0x28
 8000b02:	4b05      	ldr	r3, [pc, #20]	; (8000b18 <std+0x40>)
 8000b04:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000b06:	4b05      	ldr	r3, [pc, #20]	; (8000b1c <std+0x44>)
 8000b08:	6224      	str	r4, [r4, #32]
 8000b0a:	6323      	str	r3, [r4, #48]	; 0x30
 8000b0c:	bd10      	pop	{r4, pc}
 8000b0e:	bf00      	nop
 8000b10:	08000f01 	.word	0x08000f01
 8000b14:	08000f23 	.word	0x08000f23
 8000b18:	08000f5b 	.word	0x08000f5b
 8000b1c:	08000f7f 	.word	0x08000f7f

08000b20 <_cleanup_r>:
 8000b20:	4901      	ldr	r1, [pc, #4]	; (8000b28 <_cleanup_r+0x8>)
 8000b22:	f000 b8af 	b.w	8000c84 <_fwalk_reent>
 8000b26:	bf00      	nop
 8000b28:	08000a61 	.word	0x08000a61

08000b2c <__sfmoreglue>:
 8000b2c:	b570      	push	{r4, r5, r6, lr}
 8000b2e:	1e4a      	subs	r2, r1, #1
 8000b30:	2568      	movs	r5, #104	; 0x68
 8000b32:	4355      	muls	r5, r2
 8000b34:	460e      	mov	r6, r1
 8000b36:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000b3a:	f000 f977 	bl	8000e2c <_malloc_r>
 8000b3e:	4604      	mov	r4, r0
 8000b40:	b140      	cbz	r0, 8000b54 <__sfmoreglue+0x28>
 8000b42:	2100      	movs	r1, #0
 8000b44:	e9c0 1600 	strd	r1, r6, [r0]
 8000b48:	300c      	adds	r0, #12
 8000b4a:	60a0      	str	r0, [r4, #8]
 8000b4c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000b50:	f7ff fdc2 	bl	80006d8 <memset>
 8000b54:	4620      	mov	r0, r4
 8000b56:	bd70      	pop	{r4, r5, r6, pc}

08000b58 <__sfp_lock_acquire>:
 8000b58:	4801      	ldr	r0, [pc, #4]	; (8000b60 <__sfp_lock_acquire+0x8>)
 8000b5a:	f000 b8b3 	b.w	8000cc4 <__retarget_lock_acquire_recursive>
 8000b5e:	bf00      	nop
 8000b60:	2000009c 	.word	0x2000009c

08000b64 <__sfp_lock_release>:
 8000b64:	4801      	ldr	r0, [pc, #4]	; (8000b6c <__sfp_lock_release+0x8>)
 8000b66:	f000 b8ae 	b.w	8000cc6 <__retarget_lock_release_recursive>
 8000b6a:	bf00      	nop
 8000b6c:	2000009c 	.word	0x2000009c

08000b70 <__sinit_lock_acquire>:
 8000b70:	4801      	ldr	r0, [pc, #4]	; (8000b78 <__sinit_lock_acquire+0x8>)
 8000b72:	f000 b8a7 	b.w	8000cc4 <__retarget_lock_acquire_recursive>
 8000b76:	bf00      	nop
 8000b78:	20000097 	.word	0x20000097

08000b7c <__sinit_lock_release>:
 8000b7c:	4801      	ldr	r0, [pc, #4]	; (8000b84 <__sinit_lock_release+0x8>)
 8000b7e:	f000 b8a2 	b.w	8000cc6 <__retarget_lock_release_recursive>
 8000b82:	bf00      	nop
 8000b84:	20000097 	.word	0x20000097

08000b88 <__sinit>:
 8000b88:	b510      	push	{r4, lr}
 8000b8a:	4604      	mov	r4, r0
 8000b8c:	f7ff fff0 	bl	8000b70 <__sinit_lock_acquire>
 8000b90:	69a3      	ldr	r3, [r4, #24]
 8000b92:	b11b      	cbz	r3, 8000b9c <__sinit+0x14>
 8000b94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000b98:	f7ff bff0 	b.w	8000b7c <__sinit_lock_release>
 8000b9c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000ba0:	6523      	str	r3, [r4, #80]	; 0x50
 8000ba2:	4b13      	ldr	r3, [pc, #76]	; (8000bf0 <__sinit+0x68>)
 8000ba4:	4a13      	ldr	r2, [pc, #76]	; (8000bf4 <__sinit+0x6c>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	62a2      	str	r2, [r4, #40]	; 0x28
 8000baa:	42a3      	cmp	r3, r4
 8000bac:	bf04      	itt	eq
 8000bae:	2301      	moveq	r3, #1
 8000bb0:	61a3      	streq	r3, [r4, #24]
 8000bb2:	4620      	mov	r0, r4
 8000bb4:	f000 f820 	bl	8000bf8 <__sfp>
 8000bb8:	6060      	str	r0, [r4, #4]
 8000bba:	4620      	mov	r0, r4
 8000bbc:	f000 f81c 	bl	8000bf8 <__sfp>
 8000bc0:	60a0      	str	r0, [r4, #8]
 8000bc2:	4620      	mov	r0, r4
 8000bc4:	f000 f818 	bl	8000bf8 <__sfp>
 8000bc8:	2200      	movs	r2, #0
 8000bca:	60e0      	str	r0, [r4, #12]
 8000bcc:	2104      	movs	r1, #4
 8000bce:	6860      	ldr	r0, [r4, #4]
 8000bd0:	f7ff ff82 	bl	8000ad8 <std>
 8000bd4:	68a0      	ldr	r0, [r4, #8]
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	2109      	movs	r1, #9
 8000bda:	f7ff ff7d 	bl	8000ad8 <std>
 8000bde:	68e0      	ldr	r0, [r4, #12]
 8000be0:	2202      	movs	r2, #2
 8000be2:	2112      	movs	r1, #18
 8000be4:	f7ff ff78 	bl	8000ad8 <std>
 8000be8:	2301      	movs	r3, #1
 8000bea:	61a3      	str	r3, [r4, #24]
 8000bec:	e7d2      	b.n	8000b94 <__sinit+0xc>
 8000bee:	bf00      	nop
 8000bf0:	080010a4 	.word	0x080010a4
 8000bf4:	08000b21 	.word	0x08000b21

08000bf8 <__sfp>:
 8000bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bfa:	4607      	mov	r7, r0
 8000bfc:	f7ff ffac 	bl	8000b58 <__sfp_lock_acquire>
 8000c00:	4b1e      	ldr	r3, [pc, #120]	; (8000c7c <__sfp+0x84>)
 8000c02:	681e      	ldr	r6, [r3, #0]
 8000c04:	69b3      	ldr	r3, [r6, #24]
 8000c06:	b913      	cbnz	r3, 8000c0e <__sfp+0x16>
 8000c08:	4630      	mov	r0, r6
 8000c0a:	f7ff ffbd 	bl	8000b88 <__sinit>
 8000c0e:	3648      	adds	r6, #72	; 0x48
 8000c10:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000c14:	3b01      	subs	r3, #1
 8000c16:	d503      	bpl.n	8000c20 <__sfp+0x28>
 8000c18:	6833      	ldr	r3, [r6, #0]
 8000c1a:	b30b      	cbz	r3, 8000c60 <__sfp+0x68>
 8000c1c:	6836      	ldr	r6, [r6, #0]
 8000c1e:	e7f7      	b.n	8000c10 <__sfp+0x18>
 8000c20:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000c24:	b9d5      	cbnz	r5, 8000c5c <__sfp+0x64>
 8000c26:	4b16      	ldr	r3, [pc, #88]	; (8000c80 <__sfp+0x88>)
 8000c28:	60e3      	str	r3, [r4, #12]
 8000c2a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000c2e:	6665      	str	r5, [r4, #100]	; 0x64
 8000c30:	f000 f847 	bl	8000cc2 <__retarget_lock_init_recursive>
 8000c34:	f7ff ff96 	bl	8000b64 <__sfp_lock_release>
 8000c38:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000c3c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000c40:	6025      	str	r5, [r4, #0]
 8000c42:	61a5      	str	r5, [r4, #24]
 8000c44:	2208      	movs	r2, #8
 8000c46:	4629      	mov	r1, r5
 8000c48:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000c4c:	f7ff fd44 	bl	80006d8 <memset>
 8000c50:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000c54:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000c58:	4620      	mov	r0, r4
 8000c5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c5c:	3468      	adds	r4, #104	; 0x68
 8000c5e:	e7d9      	b.n	8000c14 <__sfp+0x1c>
 8000c60:	2104      	movs	r1, #4
 8000c62:	4638      	mov	r0, r7
 8000c64:	f7ff ff62 	bl	8000b2c <__sfmoreglue>
 8000c68:	4604      	mov	r4, r0
 8000c6a:	6030      	str	r0, [r6, #0]
 8000c6c:	2800      	cmp	r0, #0
 8000c6e:	d1d5      	bne.n	8000c1c <__sfp+0x24>
 8000c70:	f7ff ff78 	bl	8000b64 <__sfp_lock_release>
 8000c74:	230c      	movs	r3, #12
 8000c76:	603b      	str	r3, [r7, #0]
 8000c78:	e7ee      	b.n	8000c58 <__sfp+0x60>
 8000c7a:	bf00      	nop
 8000c7c:	080010a4 	.word	0x080010a4
 8000c80:	ffff0001 	.word	0xffff0001

08000c84 <_fwalk_reent>:
 8000c84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c88:	4606      	mov	r6, r0
 8000c8a:	4688      	mov	r8, r1
 8000c8c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000c90:	2700      	movs	r7, #0
 8000c92:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000c96:	f1b9 0901 	subs.w	r9, r9, #1
 8000c9a:	d505      	bpl.n	8000ca8 <_fwalk_reent+0x24>
 8000c9c:	6824      	ldr	r4, [r4, #0]
 8000c9e:	2c00      	cmp	r4, #0
 8000ca0:	d1f7      	bne.n	8000c92 <_fwalk_reent+0xe>
 8000ca2:	4638      	mov	r0, r7
 8000ca4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000ca8:	89ab      	ldrh	r3, [r5, #12]
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d907      	bls.n	8000cbe <_fwalk_reent+0x3a>
 8000cae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	d003      	beq.n	8000cbe <_fwalk_reent+0x3a>
 8000cb6:	4629      	mov	r1, r5
 8000cb8:	4630      	mov	r0, r6
 8000cba:	47c0      	blx	r8
 8000cbc:	4307      	orrs	r7, r0
 8000cbe:	3568      	adds	r5, #104	; 0x68
 8000cc0:	e7e9      	b.n	8000c96 <_fwalk_reent+0x12>

08000cc2 <__retarget_lock_init_recursive>:
 8000cc2:	4770      	bx	lr

08000cc4 <__retarget_lock_acquire_recursive>:
 8000cc4:	4770      	bx	lr

08000cc6 <__retarget_lock_release_recursive>:
 8000cc6:	4770      	bx	lr

08000cc8 <__swhatbuf_r>:
 8000cc8:	b570      	push	{r4, r5, r6, lr}
 8000cca:	460e      	mov	r6, r1
 8000ccc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000cd0:	2900      	cmp	r1, #0
 8000cd2:	b096      	sub	sp, #88	; 0x58
 8000cd4:	4614      	mov	r4, r2
 8000cd6:	461d      	mov	r5, r3
 8000cd8:	da07      	bge.n	8000cea <__swhatbuf_r+0x22>
 8000cda:	2300      	movs	r3, #0
 8000cdc:	602b      	str	r3, [r5, #0]
 8000cde:	89b3      	ldrh	r3, [r6, #12]
 8000ce0:	061a      	lsls	r2, r3, #24
 8000ce2:	d410      	bmi.n	8000d06 <__swhatbuf_r+0x3e>
 8000ce4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ce8:	e00e      	b.n	8000d08 <__swhatbuf_r+0x40>
 8000cea:	466a      	mov	r2, sp
 8000cec:	f000 f96e 	bl	8000fcc <_fstat_r>
 8000cf0:	2800      	cmp	r0, #0
 8000cf2:	dbf2      	blt.n	8000cda <__swhatbuf_r+0x12>
 8000cf4:	9a01      	ldr	r2, [sp, #4]
 8000cf6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000cfa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000cfe:	425a      	negs	r2, r3
 8000d00:	415a      	adcs	r2, r3
 8000d02:	602a      	str	r2, [r5, #0]
 8000d04:	e7ee      	b.n	8000ce4 <__swhatbuf_r+0x1c>
 8000d06:	2340      	movs	r3, #64	; 0x40
 8000d08:	2000      	movs	r0, #0
 8000d0a:	6023      	str	r3, [r4, #0]
 8000d0c:	b016      	add	sp, #88	; 0x58
 8000d0e:	bd70      	pop	{r4, r5, r6, pc}

08000d10 <__smakebuf_r>:
 8000d10:	898b      	ldrh	r3, [r1, #12]
 8000d12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000d14:	079d      	lsls	r5, r3, #30
 8000d16:	4606      	mov	r6, r0
 8000d18:	460c      	mov	r4, r1
 8000d1a:	d507      	bpl.n	8000d2c <__smakebuf_r+0x1c>
 8000d1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000d20:	6023      	str	r3, [r4, #0]
 8000d22:	6123      	str	r3, [r4, #16]
 8000d24:	2301      	movs	r3, #1
 8000d26:	6163      	str	r3, [r4, #20]
 8000d28:	b002      	add	sp, #8
 8000d2a:	bd70      	pop	{r4, r5, r6, pc}
 8000d2c:	ab01      	add	r3, sp, #4
 8000d2e:	466a      	mov	r2, sp
 8000d30:	f7ff ffca 	bl	8000cc8 <__swhatbuf_r>
 8000d34:	9900      	ldr	r1, [sp, #0]
 8000d36:	4605      	mov	r5, r0
 8000d38:	4630      	mov	r0, r6
 8000d3a:	f000 f877 	bl	8000e2c <_malloc_r>
 8000d3e:	b948      	cbnz	r0, 8000d54 <__smakebuf_r+0x44>
 8000d40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000d44:	059a      	lsls	r2, r3, #22
 8000d46:	d4ef      	bmi.n	8000d28 <__smakebuf_r+0x18>
 8000d48:	f023 0303 	bic.w	r3, r3, #3
 8000d4c:	f043 0302 	orr.w	r3, r3, #2
 8000d50:	81a3      	strh	r3, [r4, #12]
 8000d52:	e7e3      	b.n	8000d1c <__smakebuf_r+0xc>
 8000d54:	4b0d      	ldr	r3, [pc, #52]	; (8000d8c <__smakebuf_r+0x7c>)
 8000d56:	62b3      	str	r3, [r6, #40]	; 0x28
 8000d58:	89a3      	ldrh	r3, [r4, #12]
 8000d5a:	6020      	str	r0, [r4, #0]
 8000d5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d60:	81a3      	strh	r3, [r4, #12]
 8000d62:	9b00      	ldr	r3, [sp, #0]
 8000d64:	6163      	str	r3, [r4, #20]
 8000d66:	9b01      	ldr	r3, [sp, #4]
 8000d68:	6120      	str	r0, [r4, #16]
 8000d6a:	b15b      	cbz	r3, 8000d84 <__smakebuf_r+0x74>
 8000d6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000d70:	4630      	mov	r0, r6
 8000d72:	f000 f93d 	bl	8000ff0 <_isatty_r>
 8000d76:	b128      	cbz	r0, 8000d84 <__smakebuf_r+0x74>
 8000d78:	89a3      	ldrh	r3, [r4, #12]
 8000d7a:	f023 0303 	bic.w	r3, r3, #3
 8000d7e:	f043 0301 	orr.w	r3, r3, #1
 8000d82:	81a3      	strh	r3, [r4, #12]
 8000d84:	89a0      	ldrh	r0, [r4, #12]
 8000d86:	4305      	orrs	r5, r0
 8000d88:	81a5      	strh	r5, [r4, #12]
 8000d8a:	e7cd      	b.n	8000d28 <__smakebuf_r+0x18>
 8000d8c:	08000b21 	.word	0x08000b21

08000d90 <_free_r>:
 8000d90:	b538      	push	{r3, r4, r5, lr}
 8000d92:	4605      	mov	r5, r0
 8000d94:	2900      	cmp	r1, #0
 8000d96:	d045      	beq.n	8000e24 <_free_r+0x94>
 8000d98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000d9c:	1f0c      	subs	r4, r1, #4
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	bfb8      	it	lt
 8000da2:	18e4      	addlt	r4, r4, r3
 8000da4:	f000 f946 	bl	8001034 <__malloc_lock>
 8000da8:	4a1f      	ldr	r2, [pc, #124]	; (8000e28 <_free_r+0x98>)
 8000daa:	6813      	ldr	r3, [r2, #0]
 8000dac:	4610      	mov	r0, r2
 8000dae:	b933      	cbnz	r3, 8000dbe <_free_r+0x2e>
 8000db0:	6063      	str	r3, [r4, #4]
 8000db2:	6014      	str	r4, [r2, #0]
 8000db4:	4628      	mov	r0, r5
 8000db6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000dba:	f000 b941 	b.w	8001040 <__malloc_unlock>
 8000dbe:	42a3      	cmp	r3, r4
 8000dc0:	d90b      	bls.n	8000dda <_free_r+0x4a>
 8000dc2:	6821      	ldr	r1, [r4, #0]
 8000dc4:	1862      	adds	r2, r4, r1
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	bf04      	itt	eq
 8000dca:	681a      	ldreq	r2, [r3, #0]
 8000dcc:	685b      	ldreq	r3, [r3, #4]
 8000dce:	6063      	str	r3, [r4, #4]
 8000dd0:	bf04      	itt	eq
 8000dd2:	1852      	addeq	r2, r2, r1
 8000dd4:	6022      	streq	r2, [r4, #0]
 8000dd6:	6004      	str	r4, [r0, #0]
 8000dd8:	e7ec      	b.n	8000db4 <_free_r+0x24>
 8000dda:	461a      	mov	r2, r3
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	b10b      	cbz	r3, 8000de4 <_free_r+0x54>
 8000de0:	42a3      	cmp	r3, r4
 8000de2:	d9fa      	bls.n	8000dda <_free_r+0x4a>
 8000de4:	6811      	ldr	r1, [r2, #0]
 8000de6:	1850      	adds	r0, r2, r1
 8000de8:	42a0      	cmp	r0, r4
 8000dea:	d10b      	bne.n	8000e04 <_free_r+0x74>
 8000dec:	6820      	ldr	r0, [r4, #0]
 8000dee:	4401      	add	r1, r0
 8000df0:	1850      	adds	r0, r2, r1
 8000df2:	4283      	cmp	r3, r0
 8000df4:	6011      	str	r1, [r2, #0]
 8000df6:	d1dd      	bne.n	8000db4 <_free_r+0x24>
 8000df8:	6818      	ldr	r0, [r3, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	6053      	str	r3, [r2, #4]
 8000dfe:	4401      	add	r1, r0
 8000e00:	6011      	str	r1, [r2, #0]
 8000e02:	e7d7      	b.n	8000db4 <_free_r+0x24>
 8000e04:	d902      	bls.n	8000e0c <_free_r+0x7c>
 8000e06:	230c      	movs	r3, #12
 8000e08:	602b      	str	r3, [r5, #0]
 8000e0a:	e7d3      	b.n	8000db4 <_free_r+0x24>
 8000e0c:	6820      	ldr	r0, [r4, #0]
 8000e0e:	1821      	adds	r1, r4, r0
 8000e10:	428b      	cmp	r3, r1
 8000e12:	bf04      	itt	eq
 8000e14:	6819      	ldreq	r1, [r3, #0]
 8000e16:	685b      	ldreq	r3, [r3, #4]
 8000e18:	6063      	str	r3, [r4, #4]
 8000e1a:	bf04      	itt	eq
 8000e1c:	1809      	addeq	r1, r1, r0
 8000e1e:	6021      	streq	r1, [r4, #0]
 8000e20:	6054      	str	r4, [r2, #4]
 8000e22:	e7c7      	b.n	8000db4 <_free_r+0x24>
 8000e24:	bd38      	pop	{r3, r4, r5, pc}
 8000e26:	bf00      	nop
 8000e28:	20000084 	.word	0x20000084

08000e2c <_malloc_r>:
 8000e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e2e:	1ccd      	adds	r5, r1, #3
 8000e30:	f025 0503 	bic.w	r5, r5, #3
 8000e34:	3508      	adds	r5, #8
 8000e36:	2d0c      	cmp	r5, #12
 8000e38:	bf38      	it	cc
 8000e3a:	250c      	movcc	r5, #12
 8000e3c:	2d00      	cmp	r5, #0
 8000e3e:	4606      	mov	r6, r0
 8000e40:	db01      	blt.n	8000e46 <_malloc_r+0x1a>
 8000e42:	42a9      	cmp	r1, r5
 8000e44:	d903      	bls.n	8000e4e <_malloc_r+0x22>
 8000e46:	230c      	movs	r3, #12
 8000e48:	6033      	str	r3, [r6, #0]
 8000e4a:	2000      	movs	r0, #0
 8000e4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e4e:	f000 f8f1 	bl	8001034 <__malloc_lock>
 8000e52:	4921      	ldr	r1, [pc, #132]	; (8000ed8 <_malloc_r+0xac>)
 8000e54:	680a      	ldr	r2, [r1, #0]
 8000e56:	4614      	mov	r4, r2
 8000e58:	b99c      	cbnz	r4, 8000e82 <_malloc_r+0x56>
 8000e5a:	4f20      	ldr	r7, [pc, #128]	; (8000edc <_malloc_r+0xb0>)
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	b923      	cbnz	r3, 8000e6a <_malloc_r+0x3e>
 8000e60:	4621      	mov	r1, r4
 8000e62:	4630      	mov	r0, r6
 8000e64:	f000 f83c 	bl	8000ee0 <_sbrk_r>
 8000e68:	6038      	str	r0, [r7, #0]
 8000e6a:	4629      	mov	r1, r5
 8000e6c:	4630      	mov	r0, r6
 8000e6e:	f000 f837 	bl	8000ee0 <_sbrk_r>
 8000e72:	1c43      	adds	r3, r0, #1
 8000e74:	d123      	bne.n	8000ebe <_malloc_r+0x92>
 8000e76:	230c      	movs	r3, #12
 8000e78:	6033      	str	r3, [r6, #0]
 8000e7a:	4630      	mov	r0, r6
 8000e7c:	f000 f8e0 	bl	8001040 <__malloc_unlock>
 8000e80:	e7e3      	b.n	8000e4a <_malloc_r+0x1e>
 8000e82:	6823      	ldr	r3, [r4, #0]
 8000e84:	1b5b      	subs	r3, r3, r5
 8000e86:	d417      	bmi.n	8000eb8 <_malloc_r+0x8c>
 8000e88:	2b0b      	cmp	r3, #11
 8000e8a:	d903      	bls.n	8000e94 <_malloc_r+0x68>
 8000e8c:	6023      	str	r3, [r4, #0]
 8000e8e:	441c      	add	r4, r3
 8000e90:	6025      	str	r5, [r4, #0]
 8000e92:	e004      	b.n	8000e9e <_malloc_r+0x72>
 8000e94:	6863      	ldr	r3, [r4, #4]
 8000e96:	42a2      	cmp	r2, r4
 8000e98:	bf0c      	ite	eq
 8000e9a:	600b      	streq	r3, [r1, #0]
 8000e9c:	6053      	strne	r3, [r2, #4]
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	f000 f8ce 	bl	8001040 <__malloc_unlock>
 8000ea4:	f104 000b 	add.w	r0, r4, #11
 8000ea8:	1d23      	adds	r3, r4, #4
 8000eaa:	f020 0007 	bic.w	r0, r0, #7
 8000eae:	1ac2      	subs	r2, r0, r3
 8000eb0:	d0cc      	beq.n	8000e4c <_malloc_r+0x20>
 8000eb2:	1a1b      	subs	r3, r3, r0
 8000eb4:	50a3      	str	r3, [r4, r2]
 8000eb6:	e7c9      	b.n	8000e4c <_malloc_r+0x20>
 8000eb8:	4622      	mov	r2, r4
 8000eba:	6864      	ldr	r4, [r4, #4]
 8000ebc:	e7cc      	b.n	8000e58 <_malloc_r+0x2c>
 8000ebe:	1cc4      	adds	r4, r0, #3
 8000ec0:	f024 0403 	bic.w	r4, r4, #3
 8000ec4:	42a0      	cmp	r0, r4
 8000ec6:	d0e3      	beq.n	8000e90 <_malloc_r+0x64>
 8000ec8:	1a21      	subs	r1, r4, r0
 8000eca:	4630      	mov	r0, r6
 8000ecc:	f000 f808 	bl	8000ee0 <_sbrk_r>
 8000ed0:	3001      	adds	r0, #1
 8000ed2:	d1dd      	bne.n	8000e90 <_malloc_r+0x64>
 8000ed4:	e7cf      	b.n	8000e76 <_malloc_r+0x4a>
 8000ed6:	bf00      	nop
 8000ed8:	20000084 	.word	0x20000084
 8000edc:	20000088 	.word	0x20000088

08000ee0 <_sbrk_r>:
 8000ee0:	b538      	push	{r3, r4, r5, lr}
 8000ee2:	4d06      	ldr	r5, [pc, #24]	; (8000efc <_sbrk_r+0x1c>)
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	4604      	mov	r4, r0
 8000ee8:	4608      	mov	r0, r1
 8000eea:	602b      	str	r3, [r5, #0]
 8000eec:	f7ff fa9e 	bl	800042c <_sbrk>
 8000ef0:	1c43      	adds	r3, r0, #1
 8000ef2:	d102      	bne.n	8000efa <_sbrk_r+0x1a>
 8000ef4:	682b      	ldr	r3, [r5, #0]
 8000ef6:	b103      	cbz	r3, 8000efa <_sbrk_r+0x1a>
 8000ef8:	6023      	str	r3, [r4, #0]
 8000efa:	bd38      	pop	{r3, r4, r5, pc}
 8000efc:	200000a0 	.word	0x200000a0

08000f00 <__sread>:
 8000f00:	b510      	push	{r4, lr}
 8000f02:	460c      	mov	r4, r1
 8000f04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f08:	f000 f8a0 	bl	800104c <_read_r>
 8000f0c:	2800      	cmp	r0, #0
 8000f0e:	bfab      	itete	ge
 8000f10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000f12:	89a3      	ldrhlt	r3, [r4, #12]
 8000f14:	181b      	addge	r3, r3, r0
 8000f16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000f1a:	bfac      	ite	ge
 8000f1c:	6563      	strge	r3, [r4, #84]	; 0x54
 8000f1e:	81a3      	strhlt	r3, [r4, #12]
 8000f20:	bd10      	pop	{r4, pc}

08000f22 <__swrite>:
 8000f22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f26:	461f      	mov	r7, r3
 8000f28:	898b      	ldrh	r3, [r1, #12]
 8000f2a:	05db      	lsls	r3, r3, #23
 8000f2c:	4605      	mov	r5, r0
 8000f2e:	460c      	mov	r4, r1
 8000f30:	4616      	mov	r6, r2
 8000f32:	d505      	bpl.n	8000f40 <__swrite+0x1e>
 8000f34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f38:	2302      	movs	r3, #2
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	f000 f868 	bl	8001010 <_lseek_r>
 8000f40:	89a3      	ldrh	r3, [r4, #12]
 8000f42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000f46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000f4a:	81a3      	strh	r3, [r4, #12]
 8000f4c:	4632      	mov	r2, r6
 8000f4e:	463b      	mov	r3, r7
 8000f50:	4628      	mov	r0, r5
 8000f52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000f56:	f000 b817 	b.w	8000f88 <_write_r>

08000f5a <__sseek>:
 8000f5a:	b510      	push	{r4, lr}
 8000f5c:	460c      	mov	r4, r1
 8000f5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f62:	f000 f855 	bl	8001010 <_lseek_r>
 8000f66:	1c43      	adds	r3, r0, #1
 8000f68:	89a3      	ldrh	r3, [r4, #12]
 8000f6a:	bf15      	itete	ne
 8000f6c:	6560      	strne	r0, [r4, #84]	; 0x54
 8000f6e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000f72:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000f76:	81a3      	strheq	r3, [r4, #12]
 8000f78:	bf18      	it	ne
 8000f7a:	81a3      	strhne	r3, [r4, #12]
 8000f7c:	bd10      	pop	{r4, pc}

08000f7e <__sclose>:
 8000f7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f82:	f000 b813 	b.w	8000fac <_close_r>
	...

08000f88 <_write_r>:
 8000f88:	b538      	push	{r3, r4, r5, lr}
 8000f8a:	4d07      	ldr	r5, [pc, #28]	; (8000fa8 <_write_r+0x20>)
 8000f8c:	4604      	mov	r4, r0
 8000f8e:	4608      	mov	r0, r1
 8000f90:	4611      	mov	r1, r2
 8000f92:	2200      	movs	r2, #0
 8000f94:	602a      	str	r2, [r5, #0]
 8000f96:	461a      	mov	r2, r3
 8000f98:	f7ff f9fb 	bl	8000392 <_write>
 8000f9c:	1c43      	adds	r3, r0, #1
 8000f9e:	d102      	bne.n	8000fa6 <_write_r+0x1e>
 8000fa0:	682b      	ldr	r3, [r5, #0]
 8000fa2:	b103      	cbz	r3, 8000fa6 <_write_r+0x1e>
 8000fa4:	6023      	str	r3, [r4, #0]
 8000fa6:	bd38      	pop	{r3, r4, r5, pc}
 8000fa8:	200000a0 	.word	0x200000a0

08000fac <_close_r>:
 8000fac:	b538      	push	{r3, r4, r5, lr}
 8000fae:	4d06      	ldr	r5, [pc, #24]	; (8000fc8 <_close_r+0x1c>)
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	4608      	mov	r0, r1
 8000fb6:	602b      	str	r3, [r5, #0]
 8000fb8:	f7ff fa07 	bl	80003ca <_close>
 8000fbc:	1c43      	adds	r3, r0, #1
 8000fbe:	d102      	bne.n	8000fc6 <_close_r+0x1a>
 8000fc0:	682b      	ldr	r3, [r5, #0]
 8000fc2:	b103      	cbz	r3, 8000fc6 <_close_r+0x1a>
 8000fc4:	6023      	str	r3, [r4, #0]
 8000fc6:	bd38      	pop	{r3, r4, r5, pc}
 8000fc8:	200000a0 	.word	0x200000a0

08000fcc <_fstat_r>:
 8000fcc:	b538      	push	{r3, r4, r5, lr}
 8000fce:	4d07      	ldr	r5, [pc, #28]	; (8000fec <_fstat_r+0x20>)
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	4604      	mov	r4, r0
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	4611      	mov	r1, r2
 8000fd8:	602b      	str	r3, [r5, #0]
 8000fda:	f7ff fa01 	bl	80003e0 <_fstat>
 8000fde:	1c43      	adds	r3, r0, #1
 8000fe0:	d102      	bne.n	8000fe8 <_fstat_r+0x1c>
 8000fe2:	682b      	ldr	r3, [r5, #0]
 8000fe4:	b103      	cbz	r3, 8000fe8 <_fstat_r+0x1c>
 8000fe6:	6023      	str	r3, [r4, #0]
 8000fe8:	bd38      	pop	{r3, r4, r5, pc}
 8000fea:	bf00      	nop
 8000fec:	200000a0 	.word	0x200000a0

08000ff0 <_isatty_r>:
 8000ff0:	b538      	push	{r3, r4, r5, lr}
 8000ff2:	4d06      	ldr	r5, [pc, #24]	; (800100c <_isatty_r+0x1c>)
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	4604      	mov	r4, r0
 8000ff8:	4608      	mov	r0, r1
 8000ffa:	602b      	str	r3, [r5, #0]
 8000ffc:	f7ff f9ff 	bl	80003fe <_isatty>
 8001000:	1c43      	adds	r3, r0, #1
 8001002:	d102      	bne.n	800100a <_isatty_r+0x1a>
 8001004:	682b      	ldr	r3, [r5, #0]
 8001006:	b103      	cbz	r3, 800100a <_isatty_r+0x1a>
 8001008:	6023      	str	r3, [r4, #0]
 800100a:	bd38      	pop	{r3, r4, r5, pc}
 800100c:	200000a0 	.word	0x200000a0

08001010 <_lseek_r>:
 8001010:	b538      	push	{r3, r4, r5, lr}
 8001012:	4d07      	ldr	r5, [pc, #28]	; (8001030 <_lseek_r+0x20>)
 8001014:	4604      	mov	r4, r0
 8001016:	4608      	mov	r0, r1
 8001018:	4611      	mov	r1, r2
 800101a:	2200      	movs	r2, #0
 800101c:	602a      	str	r2, [r5, #0]
 800101e:	461a      	mov	r2, r3
 8001020:	f7ff f9f7 	bl	8000412 <_lseek>
 8001024:	1c43      	adds	r3, r0, #1
 8001026:	d102      	bne.n	800102e <_lseek_r+0x1e>
 8001028:	682b      	ldr	r3, [r5, #0]
 800102a:	b103      	cbz	r3, 800102e <_lseek_r+0x1e>
 800102c:	6023      	str	r3, [r4, #0]
 800102e:	bd38      	pop	{r3, r4, r5, pc}
 8001030:	200000a0 	.word	0x200000a0

08001034 <__malloc_lock>:
 8001034:	4801      	ldr	r0, [pc, #4]	; (800103c <__malloc_lock+0x8>)
 8001036:	f7ff be45 	b.w	8000cc4 <__retarget_lock_acquire_recursive>
 800103a:	bf00      	nop
 800103c:	20000098 	.word	0x20000098

08001040 <__malloc_unlock>:
 8001040:	4801      	ldr	r0, [pc, #4]	; (8001048 <__malloc_unlock+0x8>)
 8001042:	f7ff be40 	b.w	8000cc6 <__retarget_lock_release_recursive>
 8001046:	bf00      	nop
 8001048:	20000098 	.word	0x20000098

0800104c <_read_r>:
 800104c:	b538      	push	{r3, r4, r5, lr}
 800104e:	4d07      	ldr	r5, [pc, #28]	; (800106c <_read_r+0x20>)
 8001050:	4604      	mov	r4, r0
 8001052:	4608      	mov	r0, r1
 8001054:	4611      	mov	r1, r2
 8001056:	2200      	movs	r2, #0
 8001058:	602a      	str	r2, [r5, #0]
 800105a:	461a      	mov	r2, r3
 800105c:	f7ff f97c 	bl	8000358 <_read>
 8001060:	1c43      	adds	r3, r0, #1
 8001062:	d102      	bne.n	800106a <_read_r+0x1e>
 8001064:	682b      	ldr	r3, [r5, #0]
 8001066:	b103      	cbz	r3, 800106a <_read_r+0x1e>
 8001068:	6023      	str	r3, [r4, #0]
 800106a:	bd38      	pop	{r3, r4, r5, pc}
 800106c:	200000a0 	.word	0x200000a0

08001070 <_init>:
 8001070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001072:	bf00      	nop
 8001074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001076:	bc08      	pop	{r3}
 8001078:	469e      	mov	lr, r3
 800107a:	4770      	bx	lr

0800107c <_fini>:
 800107c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800107e:	bf00      	nop
 8001080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001082:	bc08      	pop	{r3}
 8001084:	469e      	mov	lr, r3
 8001086:	4770      	bx	lr

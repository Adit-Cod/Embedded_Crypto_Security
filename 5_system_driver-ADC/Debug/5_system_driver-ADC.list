
5_system_driver-ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000015a0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08001770  08001770  00011770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001830  08001830  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08001830  08001830  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001830  08001830  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001830  08001830  00011830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001834  08001834  00011834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001838  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  20000064  0800189c  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  0800189c  000200a4  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000037e6  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000c22  00000000  00000000  00023874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000220  00000000  00000000  00024498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000198  00000000  00000000  000246b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ae33  00000000  00000000  00024850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003165  00000000  00000000  0003f683  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090e77  00000000  00000000  000427e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d365f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000e1c  00000000  00000000  000d36b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000064 	.word	0x20000064
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08001758 	.word	0x08001758

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000068 	.word	0x20000068
 800020c:	08001758 	.word	0x08001758

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <pa1_adc_init>:
 */

#include "adc.h"

void pa1_adc_init(void)
{
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
    /* Enable Clock TO ADC Channel */
	/* Set Conversion Sequence Start */
	/* Set Conversion Sequence Length */
	/* Enable ADC Length */

	RCC->AHB1ENR |= GPIOAEN;
 80002b4:	4b13      	ldr	r3, [pc, #76]	; (8000304 <pa1_adc_init+0x54>)
 80002b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002b8:	4a12      	ldr	r2, [pc, #72]	; (8000304 <pa1_adc_init+0x54>)
 80002ba:	f043 0301 	orr.w	r3, r3, #1
 80002be:	6313      	str	r3, [r2, #48]	; 0x30
    GPIOA->MODER |= ADC_PIN_2_EN;
 80002c0:	4b11      	ldr	r3, [pc, #68]	; (8000308 <pa1_adc_init+0x58>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a10      	ldr	r2, [pc, #64]	; (8000308 <pa1_adc_init+0x58>)
 80002c6:	f043 0304 	orr.w	r3, r3, #4
 80002ca:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= ADC_PIN_3_EN;
 80002cc:	4b0e      	ldr	r3, [pc, #56]	; (8000308 <pa1_adc_init+0x58>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a0d      	ldr	r2, [pc, #52]	; (8000308 <pa1_adc_init+0x58>)
 80002d2:	f043 0308 	orr.w	r3, r3, #8
 80002d6:	6013      	str	r3, [r2, #0]

    RCC->APB2ENR |= ADC1_EN;
 80002d8:	4b0a      	ldr	r3, [pc, #40]	; (8000304 <pa1_adc_init+0x54>)
 80002da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002dc:	4a09      	ldr	r2, [pc, #36]	; (8000304 <pa1_adc_init+0x54>)
 80002de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002e2:	6453      	str	r3, [r2, #68]	; 0x44

    /* Configure specific channel depending on use-case. Refer to the reference Manual for
     * more information
     * */
    ADC1->SQR3 = ADC_CH1;
 80002e4:	4b09      	ldr	r3, [pc, #36]	; (800030c <pa1_adc_init+0x5c>)
 80002e6:	2201      	movs	r2, #1
 80002e8:	635a      	str	r2, [r3, #52]	; 0x34
    ADC1->SQR1 = ADC_SEQ_LEN_1;
 80002ea:	4b08      	ldr	r3, [pc, #32]	; (800030c <pa1_adc_init+0x5c>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	62da      	str	r2, [r3, #44]	; 0x2c

    ADC1->CR2 |= ADC_CR2_ON;
 80002f0:	4b06      	ldr	r3, [pc, #24]	; (800030c <pa1_adc_init+0x5c>)
 80002f2:	689b      	ldr	r3, [r3, #8]
 80002f4:	4a05      	ldr	r2, [pc, #20]	; (800030c <pa1_adc_init+0x5c>)
 80002f6:	f043 0301 	orr.w	r3, r3, #1
 80002fa:	6093      	str	r3, [r2, #8]
}
 80002fc:	bf00      	nop
 80002fe:	46bd      	mov	sp, r7
 8000300:	bc80      	pop	{r7}
 8000302:	4770      	bx	lr
 8000304:	40023800 	.word	0x40023800
 8000308:	40020000 	.word	0x40020000
 800030c:	40012000 	.word	0x40012000

08000310 <startadc_conversion>:

void startadc_conversion(void)
{
 8000310:	b480      	push	{r7}
 8000312:	af00      	add	r7, sp, #0
	/* Enable Continuous Conversion */
	ADC1->CR2 |= CR2_CONT;
 8000314:	4b07      	ldr	r3, [pc, #28]	; (8000334 <startadc_conversion+0x24>)
 8000316:	689b      	ldr	r3, [r3, #8]
 8000318:	4a06      	ldr	r2, [pc, #24]	; (8000334 <startadc_conversion+0x24>)
 800031a:	f043 0302 	orr.w	r3, r3, #2
 800031e:	6093      	str	r3, [r2, #8]
	/* Start ADC Conversion */
	ADC1->CR2 |= CR2_SWSTART;
 8000320:	4b04      	ldr	r3, [pc, #16]	; (8000334 <startadc_conversion+0x24>)
 8000322:	689b      	ldr	r3, [r3, #8]
 8000324:	4a03      	ldr	r2, [pc, #12]	; (8000334 <startadc_conversion+0x24>)
 8000326:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800032a:	6093      	str	r3, [r2, #8]

}
 800032c:	bf00      	nop
 800032e:	46bd      	mov	sp, r7
 8000330:	bc80      	pop	{r7}
 8000332:	4770      	bx	lr
 8000334:	40012000 	.word	0x40012000

08000338 <led_init>:

#include "bsp.h"


void led_init(void)
{
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0
	/* Provide Clock Access to the respective Peripheral */
	/* GPIO A for stm32f44xx */

	    RCC->AHB1ENR |= GPIOAEN;
 800033c:	4b0a      	ldr	r3, [pc, #40]	; (8000368 <led_init+0x30>)
 800033e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000340:	4a09      	ldr	r2, [pc, #36]	; (8000368 <led_init+0x30>)
 8000342:	f043 0301 	orr.w	r3, r3, #1
 8000346:	6313      	str	r3, [r2, #48]	; 0x30
	    GPIOA->MODER |= (1U<<10);
 8000348:	4b08      	ldr	r3, [pc, #32]	; (800036c <led_init+0x34>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	4a07      	ldr	r2, [pc, #28]	; (800036c <led_init+0x34>)
 800034e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000352:	6013      	str	r3, [r2, #0]
	    GPIOA->MODER &= ~(1U<<11);
 8000354:	4b05      	ldr	r3, [pc, #20]	; (800036c <led_init+0x34>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4a04      	ldr	r2, [pc, #16]	; (800036c <led_init+0x34>)
 800035a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800035e:	6013      	str	r3, [r2, #0]
}
 8000360:	bf00      	nop
 8000362:	46bd      	mov	sp, r7
 8000364:	bc80      	pop	{r7}
 8000366:	4770      	bx	lr
 8000368:	40023800 	.word	0x40023800
 800036c:	40020000 	.word	0x40020000

08000370 <button_init>:
	/* Set the Pin Low */
	GPIOA->ODR &= (GPIO_DISABLE);
}

void button_init(void)
{
 8000370:	b480      	push	{r7}
 8000372:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= GPIOCEN;
 8000374:	4b0a      	ldr	r3, [pc, #40]	; (80003a0 <button_init+0x30>)
 8000376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000378:	4a09      	ldr	r2, [pc, #36]	; (80003a0 <button_init+0x30>)
 800037a:	f043 0304 	orr.w	r3, r3, #4
 800037e:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOC->MODER &=  ~(1<<26);
 8000380:	4b08      	ldr	r3, [pc, #32]	; (80003a4 <button_init+0x34>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	4a07      	ldr	r2, [pc, #28]	; (80003a4 <button_init+0x34>)
 8000386:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800038a:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &=  ~(1<<27);
 800038c:	4b05      	ldr	r3, [pc, #20]	; (80003a4 <button_init+0x34>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	4a04      	ldr	r2, [pc, #16]	; (80003a4 <button_init+0x34>)
 8000392:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8000396:	6013      	str	r3, [r2, #0]
}
 8000398:	bf00      	nop
 800039a:	46bd      	mov	sp, r7
 800039c:	bc80      	pop	{r7}
 800039e:	4770      	bx	lr
 80003a0:	40023800 	.word	0x40023800
 80003a4:	40020800 	.word	0x40020800

080003a8 <fpu_enable>:

#include "fpu.h"


void fpu_enable(void)
{
 80003a8:	b480      	push	{r7}
 80003aa:	af00      	add	r7, sp, #0
	/* Enable Floating Point Unit: Enable CP10 and CP11 Full Access! */
	 SCB->CPACR |= (1<<20);
 80003ac:	4b11      	ldr	r3, [pc, #68]	; (80003f4 <fpu_enable+0x4c>)
 80003ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003b2:	4a10      	ldr	r2, [pc, #64]	; (80003f4 <fpu_enable+0x4c>)
 80003b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80003b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	 SCB->CPACR |= (1<<21);
 80003bc:	4b0d      	ldr	r3, [pc, #52]	; (80003f4 <fpu_enable+0x4c>)
 80003be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003c2:	4a0c      	ldr	r2, [pc, #48]	; (80003f4 <fpu_enable+0x4c>)
 80003c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80003c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	 SCB->CPACR |= (1<<22);
 80003cc:	4b09      	ldr	r3, [pc, #36]	; (80003f4 <fpu_enable+0x4c>)
 80003ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003d2:	4a08      	ldr	r2, [pc, #32]	; (80003f4 <fpu_enable+0x4c>)
 80003d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80003d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	 SCB->CPACR |= (1<<23);
 80003dc:	4b05      	ldr	r3, [pc, #20]	; (80003f4 <fpu_enable+0x4c>)
 80003de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003e2:	4a04      	ldr	r2, [pc, #16]	; (80003f4 <fpu_enable+0x4c>)
 80003e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80003e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 80003ec:	bf00      	nop
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bc80      	pop	{r7}
 80003f2:	4770      	bx	lr
 80003f4:	e000ed00 	.word	0xe000ed00

080003f8 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b082      	sub	sp, #8
 80003fc:	af00      	add	r7, sp, #0
	/* Enable FPU */
	fpu_enable();
 80003fe:	f7ff ffd3 	bl	80003a8 <fpu_enable>
    /* initialize UART */
	uart_init();
 8000402:	f000 f8f3 	bl	80005ec <uart_init>
	/* Initialize timer */
	timer_init();
 8000406:	f000 f8c5 	bl	8000594 <timer_init>
    /* Initialize button and led */
	led_init();
 800040a:	f7ff ff95 	bl	8000338 <led_init>
    /* Initialize the button */
	button_init();
 800040e:	f7ff ffaf 	bl	8000370 <button_init>
	/* Initialize the ADC module */
	pa1_adc_init();
 8000412:	f7ff ff4d 	bl	80002b0 <pa1_adc_init>
    /* Start the conversion */
	startadc_conversion();
 8000416:	f7ff ff7b 	bl	8000310 <startadc_conversion>

	printf("Testing the ADC Module!\r\n");
 800041a:	4805      	ldr	r0, [pc, #20]	; (8000430 <main+0x38>)
 800041c:	f000 fa5a 	bl	80008d4 <puts>
	uint8_t a = -8;
 8000420:	23f8      	movs	r3, #248	; 0xf8
 8000422:	71fb      	strb	r3, [r7, #7]
    printf("a: %d \r\n",a);
 8000424:	79fb      	ldrb	r3, [r7, #7]
 8000426:	4619      	mov	r1, r3
 8000428:	4802      	ldr	r0, [pc, #8]	; (8000434 <main+0x3c>)
 800042a:	f000 f9cd 	bl	80007c8 <iprintf>
	while(1)
 800042e:	e7fe      	b.n	800042e <main+0x36>
 8000430:	08001770 	.word	0x08001770
 8000434:	0800178c 	.word	0x0800178c

08000438 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b086      	sub	sp, #24
 800043c:	af00      	add	r7, sp, #0
 800043e:	60f8      	str	r0, [r7, #12]
 8000440:	60b9      	str	r1, [r7, #8]
 8000442:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000444:	2300      	movs	r3, #0
 8000446:	617b      	str	r3, [r7, #20]
 8000448:	e00a      	b.n	8000460 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800044a:	f3af 8000 	nop.w
 800044e:	4601      	mov	r1, r0
 8000450:	68bb      	ldr	r3, [r7, #8]
 8000452:	1c5a      	adds	r2, r3, #1
 8000454:	60ba      	str	r2, [r7, #8]
 8000456:	b2ca      	uxtb	r2, r1
 8000458:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800045a:	697b      	ldr	r3, [r7, #20]
 800045c:	3301      	adds	r3, #1
 800045e:	617b      	str	r3, [r7, #20]
 8000460:	697a      	ldr	r2, [r7, #20]
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	429a      	cmp	r2, r3
 8000466:	dbf0      	blt.n	800044a <_read+0x12>
	}

return len;
 8000468:	687b      	ldr	r3, [r7, #4]
}
 800046a:	4618      	mov	r0, r3
 800046c:	3718      	adds	r7, #24
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}

08000472 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000472:	b580      	push	{r7, lr}
 8000474:	b086      	sub	sp, #24
 8000476:	af00      	add	r7, sp, #0
 8000478:	60f8      	str	r0, [r7, #12]
 800047a:	60b9      	str	r1, [r7, #8]
 800047c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800047e:	2300      	movs	r3, #0
 8000480:	617b      	str	r3, [r7, #20]
 8000482:	e009      	b.n	8000498 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000484:	68bb      	ldr	r3, [r7, #8]
 8000486:	1c5a      	adds	r2, r3, #1
 8000488:	60ba      	str	r2, [r7, #8]
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	4618      	mov	r0, r3
 800048e:	f000 f91d 	bl	80006cc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000492:	697b      	ldr	r3, [r7, #20]
 8000494:	3301      	adds	r3, #1
 8000496:	617b      	str	r3, [r7, #20]
 8000498:	697a      	ldr	r2, [r7, #20]
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	429a      	cmp	r2, r3
 800049e:	dbf1      	blt.n	8000484 <_write+0x12>
	}
	return len;
 80004a0:	687b      	ldr	r3, [r7, #4]
}
 80004a2:	4618      	mov	r0, r3
 80004a4:	3718      	adds	r7, #24
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}

080004aa <_close>:

int _close(int file)
{
 80004aa:	b480      	push	{r7}
 80004ac:	b083      	sub	sp, #12
 80004ae:	af00      	add	r7, sp, #0
 80004b0:	6078      	str	r0, [r7, #4]
	return -1;
 80004b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80004b6:	4618      	mov	r0, r3
 80004b8:	370c      	adds	r7, #12
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bc80      	pop	{r7}
 80004be:	4770      	bx	lr

080004c0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b083      	sub	sp, #12
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
 80004c8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80004ca:	683b      	ldr	r3, [r7, #0]
 80004cc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80004d0:	605a      	str	r2, [r3, #4]
	return 0;
 80004d2:	2300      	movs	r3, #0
}
 80004d4:	4618      	mov	r0, r3
 80004d6:	370c      	adds	r7, #12
 80004d8:	46bd      	mov	sp, r7
 80004da:	bc80      	pop	{r7}
 80004dc:	4770      	bx	lr

080004de <_isatty>:

int _isatty(int file)
{
 80004de:	b480      	push	{r7}
 80004e0:	b083      	sub	sp, #12
 80004e2:	af00      	add	r7, sp, #0
 80004e4:	6078      	str	r0, [r7, #4]
	return 1;
 80004e6:	2301      	movs	r3, #1
}
 80004e8:	4618      	mov	r0, r3
 80004ea:	370c      	adds	r7, #12
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bc80      	pop	{r7}
 80004f0:	4770      	bx	lr

080004f2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80004f2:	b480      	push	{r7}
 80004f4:	b085      	sub	sp, #20
 80004f6:	af00      	add	r7, sp, #0
 80004f8:	60f8      	str	r0, [r7, #12]
 80004fa:	60b9      	str	r1, [r7, #8]
 80004fc:	607a      	str	r2, [r7, #4]
	return 0;
 80004fe:	2300      	movs	r3, #0
}
 8000500:	4618      	mov	r0, r3
 8000502:	3714      	adds	r7, #20
 8000504:	46bd      	mov	sp, r7
 8000506:	bc80      	pop	{r7}
 8000508:	4770      	bx	lr
	...

0800050c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b086      	sub	sp, #24
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000514:	4a14      	ldr	r2, [pc, #80]	; (8000568 <_sbrk+0x5c>)
 8000516:	4b15      	ldr	r3, [pc, #84]	; (800056c <_sbrk+0x60>)
 8000518:	1ad3      	subs	r3, r2, r3
 800051a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800051c:	697b      	ldr	r3, [r7, #20]
 800051e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000520:	4b13      	ldr	r3, [pc, #76]	; (8000570 <_sbrk+0x64>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	2b00      	cmp	r3, #0
 8000526:	d102      	bne.n	800052e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000528:	4b11      	ldr	r3, [pc, #68]	; (8000570 <_sbrk+0x64>)
 800052a:	4a12      	ldr	r2, [pc, #72]	; (8000574 <_sbrk+0x68>)
 800052c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800052e:	4b10      	ldr	r3, [pc, #64]	; (8000570 <_sbrk+0x64>)
 8000530:	681a      	ldr	r2, [r3, #0]
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	4413      	add	r3, r2
 8000536:	693a      	ldr	r2, [r7, #16]
 8000538:	429a      	cmp	r2, r3
 800053a:	d207      	bcs.n	800054c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800053c:	f000 f912 	bl	8000764 <__errno>
 8000540:	4603      	mov	r3, r0
 8000542:	220c      	movs	r2, #12
 8000544:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000546:	f04f 33ff 	mov.w	r3, #4294967295
 800054a:	e009      	b.n	8000560 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800054c:	4b08      	ldr	r3, [pc, #32]	; (8000570 <_sbrk+0x64>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000552:	4b07      	ldr	r3, [pc, #28]	; (8000570 <_sbrk+0x64>)
 8000554:	681a      	ldr	r2, [r3, #0]
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	4413      	add	r3, r2
 800055a:	4a05      	ldr	r2, [pc, #20]	; (8000570 <_sbrk+0x64>)
 800055c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800055e:	68fb      	ldr	r3, [r7, #12]
}
 8000560:	4618      	mov	r0, r3
 8000562:	3718      	adds	r7, #24
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	20020000 	.word	0x20020000
 800056c:	00000400 	.word	0x00000400
 8000570:	20000080 	.word	0x20000080
 8000574:	200000a8 	.word	0x200000a8

08000578 <tick_increment>:
	__enable_irq();
	return current_tick_p;
}

static void tick_increment(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
	current_tick += TICK_FREQ;
 800057c:	4b04      	ldr	r3, [pc, #16]	; (8000590 <tick_increment+0x18>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	3301      	adds	r3, #1
 8000582:	4a03      	ldr	r2, [pc, #12]	; (8000590 <tick_increment+0x18>)
 8000584:	6013      	str	r3, [r2, #0]
}
 8000586:	bf00      	nop
 8000588:	46bd      	mov	sp, r7
 800058a:	bc80      	pop	{r7}
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	2000008c 	.word	0x2000008c

08000594 <timer_init>:

void timer_init(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000598:	b672      	cpsid	i
}
 800059a:	bf00      	nop
	/* Disable the  global interrupt during the running of this timer service */
	__disable_irq();
	/* Load the timer with number of clock cycles per second ; generate a tick each second */
	SysTick->LOAD = ONE_SEC_LOAD-ONE;
 800059c:	4b0e      	ldr	r3, [pc, #56]	; (80005d8 <timer_init+0x44>)
 800059e:	4a0f      	ldr	r2, [pc, #60]	; (80005dc <timer_init+0x48>)
 80005a0:	605a      	str	r2, [r3, #4]
	/* Clear the systick current value register */
	SysTick->VAL  = 0;
 80005a2:	4b0d      	ldr	r3, [pc, #52]	; (80005d8 <timer_init+0x44>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	609a      	str	r2, [r3, #8]
	/* Select Internal Clock Source */
	SysTick->CTRL |= CTRL_CLKSRC;
 80005a8:	4b0b      	ldr	r3, [pc, #44]	; (80005d8 <timer_init+0x44>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a0a      	ldr	r2, [pc, #40]	; (80005d8 <timer_init+0x44>)
 80005ae:	f043 0304 	orr.w	r3, r3, #4
 80005b2:	6013      	str	r3, [r2, #0]
	/* Enable Interrupt */
	SysTick->CTRL |= CTRL_TICKINIT;
 80005b4:	4b08      	ldr	r3, [pc, #32]	; (80005d8 <timer_init+0x44>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a07      	ldr	r2, [pc, #28]	; (80005d8 <timer_init+0x44>)
 80005ba:	f043 0302 	orr.w	r3, r3, #2
 80005be:	6013      	str	r3, [r2, #0]
	/* Enable systick */
	SysTick->CTRL |= CTRL_ENABLE;
 80005c0:	4b05      	ldr	r3, [pc, #20]	; (80005d8 <timer_init+0x44>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a04      	ldr	r2, [pc, #16]	; (80005d8 <timer_init+0x44>)
 80005c6:	f043 0301 	orr.w	r3, r3, #1
 80005ca:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80005cc:	b662      	cpsie	i
}
 80005ce:	bf00      	nop
	/* Enable Global Interrupt */
	__enable_irq();
}
 80005d0:	bf00      	nop
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bc80      	pop	{r7}
 80005d6:	4770      	bx	lr
 80005d8:	e000e010 	.word	0xe000e010
 80005dc:	00f423ff 	.word	0x00f423ff

080005e0 <SysTick_Handler>:


void SysTick_Handler(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
	tick_increment();
 80005e4:	f7ff ffc8 	bl	8000578 <tick_increment>
}
 80005e8:	bf00      	nop
 80005ea:	bd80      	pop	{r7, pc}

080005ec <uart_init>:
 static uint16_t compute_uart_bd(uint32_t periph_clk, uint32_t baudrate);
 static void uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate);


 void uart_init(void)
 {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
		  Configure Transfer Direction
		  Enable the UART module
	 */

	 /* Enable Clock Access to GPIOA */
	 RCC->AHB1ENR  |= GPIOA_EN;
 80005f0:	4b1f      	ldr	r3, [pc, #124]	; (8000670 <uart_init+0x84>)
 80005f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f4:	4a1e      	ldr	r2, [pc, #120]	; (8000670 <uart_init+0x84>)
 80005f6:	f043 0301 	orr.w	r3, r3, #1
 80005fa:	6313      	str	r3, [r2, #48]	; 0x30
	 /* Set the mode of PA2 to alternate Function mode*/
	 GPIOA->MODER &= ~(GPIOA_AF_PIN4);
 80005fc:	4b1d      	ldr	r3, [pc, #116]	; (8000674 <uart_init+0x88>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a1c      	ldr	r2, [pc, #112]	; (8000674 <uart_init+0x88>)
 8000602:	f023 0310 	bic.w	r3, r3, #16
 8000606:	6013      	str	r3, [r2, #0]
	 GPIOA->MODER |=  GPIOA_AF_PIN5;
 8000608:	4b1a      	ldr	r3, [pc, #104]	; (8000674 <uart_init+0x88>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a19      	ldr	r2, [pc, #100]	; (8000674 <uart_init+0x88>)
 800060e:	f043 0320 	orr.w	r3, r3, #32
 8000612:	6013      	str	r3, [r2, #0]

	 /* Set the Alternate Function to AF7(Uart2_tx); set it according to the datasheet!  */
	 GPIOA->AFR[0] |= (GPIOA_AFR_PIN8);
 8000614:	4b17      	ldr	r3, [pc, #92]	; (8000674 <uart_init+0x88>)
 8000616:	6a1b      	ldr	r3, [r3, #32]
 8000618:	4a16      	ldr	r2, [pc, #88]	; (8000674 <uart_init+0x88>)
 800061a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800061e:	6213      	str	r3, [r2, #32]
	 GPIOA->AFR[0] |= (GPIOA_AFR_PIN9);
 8000620:	4b14      	ldr	r3, [pc, #80]	; (8000674 <uart_init+0x88>)
 8000622:	6a1b      	ldr	r3, [r3, #32]
 8000624:	4a13      	ldr	r2, [pc, #76]	; (8000674 <uart_init+0x88>)
 8000626:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800062a:	6213      	str	r3, [r2, #32]
	 GPIOA->AFR[0] |= (GPIOA_AFR_PIN10);
 800062c:	4b11      	ldr	r3, [pc, #68]	; (8000674 <uart_init+0x88>)
 800062e:	6a1b      	ldr	r3, [r3, #32]
 8000630:	4a10      	ldr	r2, [pc, #64]	; (8000674 <uart_init+0x88>)
 8000632:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000636:	6213      	str	r3, [r2, #32]
	 GPIOA->AFR[0] &= ~(GPIOA_AFR_PIN11);
 8000638:	4b0e      	ldr	r3, [pc, #56]	; (8000674 <uart_init+0x88>)
 800063a:	6a1b      	ldr	r3, [r3, #32]
 800063c:	4a0d      	ldr	r2, [pc, #52]	; (8000674 <uart_init+0x88>)
 800063e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000642:	6213      	str	r3, [r2, #32]

	 /* Enable Clock access to UART 2 */
     RCC->APB1ENR |= UART2EN;
 8000644:	4b0a      	ldr	r3, [pc, #40]	; (8000670 <uart_init+0x84>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000648:	4a09      	ldr	r2, [pc, #36]	; (8000670 <uart_init+0x84>)
 800064a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800064e:	6413      	str	r3, [r2, #64]	; 0x40
	 /* Configure Baud Rate */
     uart_set_baudrate(APB1_CLK, UART_BAUDRATE);
 8000650:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000654:	4808      	ldr	r0, [pc, #32]	; (8000678 <uart_init+0x8c>)
 8000656:	f000 f825 	bl	80006a4 <uart_set_baudrate>
     /* Configure Transfer Direction */
     USART2->CR1 = CR1_TE;
 800065a:	4b08      	ldr	r3, [pc, #32]	; (800067c <uart_init+0x90>)
 800065c:	2208      	movs	r2, #8
 800065e:	60da      	str	r2, [r3, #12]
     /* Enable the UART module */
     USART2->CR1 |= CR1_UE;
 8000660:	4b06      	ldr	r3, [pc, #24]	; (800067c <uart_init+0x90>)
 8000662:	68db      	ldr	r3, [r3, #12]
 8000664:	4a05      	ldr	r2, [pc, #20]	; (800067c <uart_init+0x90>)
 8000666:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800066a:	60d3      	str	r3, [r2, #12]

 }
 800066c:	bf00      	nop
 800066e:	bd80      	pop	{r7, pc}
 8000670:	40023800 	.word	0x40023800
 8000674:	40020000 	.word	0x40020000
 8000678:	00f42400 	.word	0x00f42400
 800067c:	40004400 	.word	0x40004400

08000680 <compute_uart_bd>:

 static uint16_t compute_uart_bd(uint32_t periph_clk, uint32_t baudrate)
 {
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
 8000688:	6039      	str	r1, [r7, #0]
	 return ((periph_clk + (baudrate/2U))/baudrate);
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	085a      	lsrs	r2, r3, #1
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	441a      	add	r2, r3
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	fbb2 f3f3 	udiv	r3, r2, r3
 8000698:	b29b      	uxth	r3, r3
 }
 800069a:	4618      	mov	r0, r3
 800069c:	370c      	adds	r7, #12
 800069e:	46bd      	mov	sp, r7
 80006a0:	bc80      	pop	{r7}
 80006a2:	4770      	bx	lr

080006a4 <uart_set_baudrate>:

 static void uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate)
 {
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
 80006ac:	6039      	str	r1, [r7, #0]
	 USART2->BRR = compute_uart_bd(periph_clk,baudrate);
 80006ae:	6839      	ldr	r1, [r7, #0]
 80006b0:	6878      	ldr	r0, [r7, #4]
 80006b2:	f7ff ffe5 	bl	8000680 <compute_uart_bd>
 80006b6:	4603      	mov	r3, r0
 80006b8:	461a      	mov	r2, r3
 80006ba:	4b03      	ldr	r3, [pc, #12]	; (80006c8 <uart_set_baudrate+0x24>)
 80006bc:	609a      	str	r2, [r3, #8]
 }
 80006be:	bf00      	nop
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40004400 	.word	0x40004400

080006cc <__io_putchar>:

 int __io_putchar(int ch)
 {
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
 	uart_write(ch);
 80006d4:	6878      	ldr	r0, [r7, #4]
 80006d6:	f000 f805 	bl	80006e4 <uart_write>
 	return ch;
 80006da:	687b      	ldr	r3, [r7, #4]
 }
 80006dc:	4618      	mov	r0, r3
 80006de:	3708      	adds	r7, #8
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <uart_write>:

void uart_write(int ch)
 {
 80006e4:	b480      	push	{r7}
 80006e6:	b083      	sub	sp, #12
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
	 /* Ensure transmit data register is empty before new data can be loaded */
    while(!(USART2->SR & SR_TXE));
 80006ec:	bf00      	nop
 80006ee:	4b07      	ldr	r3, [pc, #28]	; (800070c <uart_write+0x28>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d0f9      	beq.n	80006ee <uart_write+0xa>
    USART2->DR = (ch & 0xFF);
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	4a03      	ldr	r2, [pc, #12]	; (800070c <uart_write+0x28>)
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	6053      	str	r3, [r2, #4]
 }
 8000702:	bf00      	nop
 8000704:	370c      	adds	r7, #12
 8000706:	46bd      	mov	sp, r7
 8000708:	bc80      	pop	{r7}
 800070a:	4770      	bx	lr
 800070c:	40004400 	.word	0x40004400

08000710 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000710:	480d      	ldr	r0, [pc, #52]	; (8000748 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000712:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000714:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000718:	480c      	ldr	r0, [pc, #48]	; (800074c <LoopForever+0x6>)
  ldr r1, =_edata
 800071a:	490d      	ldr	r1, [pc, #52]	; (8000750 <LoopForever+0xa>)
  ldr r2, =_sidata
 800071c:	4a0d      	ldr	r2, [pc, #52]	; (8000754 <LoopForever+0xe>)
  movs r3, #0
 800071e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000720:	e002      	b.n	8000728 <LoopCopyDataInit>

08000722 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000722:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000724:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000726:	3304      	adds	r3, #4

08000728 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000728:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800072a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800072c:	d3f9      	bcc.n	8000722 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800072e:	4a0a      	ldr	r2, [pc, #40]	; (8000758 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000730:	4c0a      	ldr	r4, [pc, #40]	; (800075c <LoopForever+0x16>)
  movs r3, #0
 8000732:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000734:	e001      	b.n	800073a <LoopFillZerobss>

08000736 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000736:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000738:	3204      	adds	r2, #4

0800073a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800073a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800073c:	d3fb      	bcc.n	8000736 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800073e:	f000 f817 	bl	8000770 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000742:	f7ff fe59 	bl	80003f8 <main>

08000746 <LoopForever>:

LoopForever:
    b LoopForever
 8000746:	e7fe      	b.n	8000746 <LoopForever>
  ldr   r0, =_estack
 8000748:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800074c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000750:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000754:	08001838 	.word	0x08001838
  ldr r2, =_sbss
 8000758:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 800075c:	200000a4 	.word	0x200000a4

08000760 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000760:	e7fe      	b.n	8000760 <ADC_IRQHandler>
	...

08000764 <__errno>:
 8000764:	4b01      	ldr	r3, [pc, #4]	; (800076c <__errno+0x8>)
 8000766:	6818      	ldr	r0, [r3, #0]
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	20000000 	.word	0x20000000

08000770 <__libc_init_array>:
 8000770:	b570      	push	{r4, r5, r6, lr}
 8000772:	4d0d      	ldr	r5, [pc, #52]	; (80007a8 <__libc_init_array+0x38>)
 8000774:	4c0d      	ldr	r4, [pc, #52]	; (80007ac <__libc_init_array+0x3c>)
 8000776:	1b64      	subs	r4, r4, r5
 8000778:	10a4      	asrs	r4, r4, #2
 800077a:	2600      	movs	r6, #0
 800077c:	42a6      	cmp	r6, r4
 800077e:	d109      	bne.n	8000794 <__libc_init_array+0x24>
 8000780:	4d0b      	ldr	r5, [pc, #44]	; (80007b0 <__libc_init_array+0x40>)
 8000782:	4c0c      	ldr	r4, [pc, #48]	; (80007b4 <__libc_init_array+0x44>)
 8000784:	f000 ffe8 	bl	8001758 <_init>
 8000788:	1b64      	subs	r4, r4, r5
 800078a:	10a4      	asrs	r4, r4, #2
 800078c:	2600      	movs	r6, #0
 800078e:	42a6      	cmp	r6, r4
 8000790:	d105      	bne.n	800079e <__libc_init_array+0x2e>
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f855 3b04 	ldr.w	r3, [r5], #4
 8000798:	4798      	blx	r3
 800079a:	3601      	adds	r6, #1
 800079c:	e7ee      	b.n	800077c <__libc_init_array+0xc>
 800079e:	f855 3b04 	ldr.w	r3, [r5], #4
 80007a2:	4798      	blx	r3
 80007a4:	3601      	adds	r6, #1
 80007a6:	e7f2      	b.n	800078e <__libc_init_array+0x1e>
 80007a8:	08001830 	.word	0x08001830
 80007ac:	08001830 	.word	0x08001830
 80007b0:	08001830 	.word	0x08001830
 80007b4:	08001834 	.word	0x08001834

080007b8 <memset>:
 80007b8:	4402      	add	r2, r0
 80007ba:	4603      	mov	r3, r0
 80007bc:	4293      	cmp	r3, r2
 80007be:	d100      	bne.n	80007c2 <memset+0xa>
 80007c0:	4770      	bx	lr
 80007c2:	f803 1b01 	strb.w	r1, [r3], #1
 80007c6:	e7f9      	b.n	80007bc <memset+0x4>

080007c8 <iprintf>:
 80007c8:	b40f      	push	{r0, r1, r2, r3}
 80007ca:	4b0a      	ldr	r3, [pc, #40]	; (80007f4 <iprintf+0x2c>)
 80007cc:	b513      	push	{r0, r1, r4, lr}
 80007ce:	681c      	ldr	r4, [r3, #0]
 80007d0:	b124      	cbz	r4, 80007dc <iprintf+0x14>
 80007d2:	69a3      	ldr	r3, [r4, #24]
 80007d4:	b913      	cbnz	r3, 80007dc <iprintf+0x14>
 80007d6:	4620      	mov	r0, r4
 80007d8:	f000 fa5e 	bl	8000c98 <__sinit>
 80007dc:	ab05      	add	r3, sp, #20
 80007de:	9a04      	ldr	r2, [sp, #16]
 80007e0:	68a1      	ldr	r1, [r4, #8]
 80007e2:	9301      	str	r3, [sp, #4]
 80007e4:	4620      	mov	r0, r4
 80007e6:	f000 fc2b 	bl	8001040 <_vfiprintf_r>
 80007ea:	b002      	add	sp, #8
 80007ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007f0:	b004      	add	sp, #16
 80007f2:	4770      	bx	lr
 80007f4:	20000000 	.word	0x20000000

080007f8 <_puts_r>:
 80007f8:	b570      	push	{r4, r5, r6, lr}
 80007fa:	460e      	mov	r6, r1
 80007fc:	4605      	mov	r5, r0
 80007fe:	b118      	cbz	r0, 8000808 <_puts_r+0x10>
 8000800:	6983      	ldr	r3, [r0, #24]
 8000802:	b90b      	cbnz	r3, 8000808 <_puts_r+0x10>
 8000804:	f000 fa48 	bl	8000c98 <__sinit>
 8000808:	69ab      	ldr	r3, [r5, #24]
 800080a:	68ac      	ldr	r4, [r5, #8]
 800080c:	b913      	cbnz	r3, 8000814 <_puts_r+0x1c>
 800080e:	4628      	mov	r0, r5
 8000810:	f000 fa42 	bl	8000c98 <__sinit>
 8000814:	4b2c      	ldr	r3, [pc, #176]	; (80008c8 <_puts_r+0xd0>)
 8000816:	429c      	cmp	r4, r3
 8000818:	d120      	bne.n	800085c <_puts_r+0x64>
 800081a:	686c      	ldr	r4, [r5, #4]
 800081c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800081e:	07db      	lsls	r3, r3, #31
 8000820:	d405      	bmi.n	800082e <_puts_r+0x36>
 8000822:	89a3      	ldrh	r3, [r4, #12]
 8000824:	0598      	lsls	r0, r3, #22
 8000826:	d402      	bmi.n	800082e <_puts_r+0x36>
 8000828:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800082a:	f000 fad3 	bl	8000dd4 <__retarget_lock_acquire_recursive>
 800082e:	89a3      	ldrh	r3, [r4, #12]
 8000830:	0719      	lsls	r1, r3, #28
 8000832:	d51d      	bpl.n	8000870 <_puts_r+0x78>
 8000834:	6923      	ldr	r3, [r4, #16]
 8000836:	b1db      	cbz	r3, 8000870 <_puts_r+0x78>
 8000838:	3e01      	subs	r6, #1
 800083a:	68a3      	ldr	r3, [r4, #8]
 800083c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000840:	3b01      	subs	r3, #1
 8000842:	60a3      	str	r3, [r4, #8]
 8000844:	bb39      	cbnz	r1, 8000896 <_puts_r+0x9e>
 8000846:	2b00      	cmp	r3, #0
 8000848:	da38      	bge.n	80008bc <_puts_r+0xc4>
 800084a:	4622      	mov	r2, r4
 800084c:	210a      	movs	r1, #10
 800084e:	4628      	mov	r0, r5
 8000850:	f000 f848 	bl	80008e4 <__swbuf_r>
 8000854:	3001      	adds	r0, #1
 8000856:	d011      	beq.n	800087c <_puts_r+0x84>
 8000858:	250a      	movs	r5, #10
 800085a:	e011      	b.n	8000880 <_puts_r+0x88>
 800085c:	4b1b      	ldr	r3, [pc, #108]	; (80008cc <_puts_r+0xd4>)
 800085e:	429c      	cmp	r4, r3
 8000860:	d101      	bne.n	8000866 <_puts_r+0x6e>
 8000862:	68ac      	ldr	r4, [r5, #8]
 8000864:	e7da      	b.n	800081c <_puts_r+0x24>
 8000866:	4b1a      	ldr	r3, [pc, #104]	; (80008d0 <_puts_r+0xd8>)
 8000868:	429c      	cmp	r4, r3
 800086a:	bf08      	it	eq
 800086c:	68ec      	ldreq	r4, [r5, #12]
 800086e:	e7d5      	b.n	800081c <_puts_r+0x24>
 8000870:	4621      	mov	r1, r4
 8000872:	4628      	mov	r0, r5
 8000874:	f000 f888 	bl	8000988 <__swsetup_r>
 8000878:	2800      	cmp	r0, #0
 800087a:	d0dd      	beq.n	8000838 <_puts_r+0x40>
 800087c:	f04f 35ff 	mov.w	r5, #4294967295
 8000880:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000882:	07da      	lsls	r2, r3, #31
 8000884:	d405      	bmi.n	8000892 <_puts_r+0x9a>
 8000886:	89a3      	ldrh	r3, [r4, #12]
 8000888:	059b      	lsls	r3, r3, #22
 800088a:	d402      	bmi.n	8000892 <_puts_r+0x9a>
 800088c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800088e:	f000 faa2 	bl	8000dd6 <__retarget_lock_release_recursive>
 8000892:	4628      	mov	r0, r5
 8000894:	bd70      	pop	{r4, r5, r6, pc}
 8000896:	2b00      	cmp	r3, #0
 8000898:	da04      	bge.n	80008a4 <_puts_r+0xac>
 800089a:	69a2      	ldr	r2, [r4, #24]
 800089c:	429a      	cmp	r2, r3
 800089e:	dc06      	bgt.n	80008ae <_puts_r+0xb6>
 80008a0:	290a      	cmp	r1, #10
 80008a2:	d004      	beq.n	80008ae <_puts_r+0xb6>
 80008a4:	6823      	ldr	r3, [r4, #0]
 80008a6:	1c5a      	adds	r2, r3, #1
 80008a8:	6022      	str	r2, [r4, #0]
 80008aa:	7019      	strb	r1, [r3, #0]
 80008ac:	e7c5      	b.n	800083a <_puts_r+0x42>
 80008ae:	4622      	mov	r2, r4
 80008b0:	4628      	mov	r0, r5
 80008b2:	f000 f817 	bl	80008e4 <__swbuf_r>
 80008b6:	3001      	adds	r0, #1
 80008b8:	d1bf      	bne.n	800083a <_puts_r+0x42>
 80008ba:	e7df      	b.n	800087c <_puts_r+0x84>
 80008bc:	6823      	ldr	r3, [r4, #0]
 80008be:	250a      	movs	r5, #10
 80008c0:	1c5a      	adds	r2, r3, #1
 80008c2:	6022      	str	r2, [r4, #0]
 80008c4:	701d      	strb	r5, [r3, #0]
 80008c6:	e7db      	b.n	8000880 <_puts_r+0x88>
 80008c8:	080017bc 	.word	0x080017bc
 80008cc:	080017dc 	.word	0x080017dc
 80008d0:	0800179c 	.word	0x0800179c

080008d4 <puts>:
 80008d4:	4b02      	ldr	r3, [pc, #8]	; (80008e0 <puts+0xc>)
 80008d6:	4601      	mov	r1, r0
 80008d8:	6818      	ldr	r0, [r3, #0]
 80008da:	f7ff bf8d 	b.w	80007f8 <_puts_r>
 80008de:	bf00      	nop
 80008e0:	20000000 	.word	0x20000000

080008e4 <__swbuf_r>:
 80008e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008e6:	460e      	mov	r6, r1
 80008e8:	4614      	mov	r4, r2
 80008ea:	4605      	mov	r5, r0
 80008ec:	b118      	cbz	r0, 80008f6 <__swbuf_r+0x12>
 80008ee:	6983      	ldr	r3, [r0, #24]
 80008f0:	b90b      	cbnz	r3, 80008f6 <__swbuf_r+0x12>
 80008f2:	f000 f9d1 	bl	8000c98 <__sinit>
 80008f6:	4b21      	ldr	r3, [pc, #132]	; (800097c <__swbuf_r+0x98>)
 80008f8:	429c      	cmp	r4, r3
 80008fa:	d12b      	bne.n	8000954 <__swbuf_r+0x70>
 80008fc:	686c      	ldr	r4, [r5, #4]
 80008fe:	69a3      	ldr	r3, [r4, #24]
 8000900:	60a3      	str	r3, [r4, #8]
 8000902:	89a3      	ldrh	r3, [r4, #12]
 8000904:	071a      	lsls	r2, r3, #28
 8000906:	d52f      	bpl.n	8000968 <__swbuf_r+0x84>
 8000908:	6923      	ldr	r3, [r4, #16]
 800090a:	b36b      	cbz	r3, 8000968 <__swbuf_r+0x84>
 800090c:	6923      	ldr	r3, [r4, #16]
 800090e:	6820      	ldr	r0, [r4, #0]
 8000910:	1ac0      	subs	r0, r0, r3
 8000912:	6963      	ldr	r3, [r4, #20]
 8000914:	b2f6      	uxtb	r6, r6
 8000916:	4283      	cmp	r3, r0
 8000918:	4637      	mov	r7, r6
 800091a:	dc04      	bgt.n	8000926 <__swbuf_r+0x42>
 800091c:	4621      	mov	r1, r4
 800091e:	4628      	mov	r0, r5
 8000920:	f000 f926 	bl	8000b70 <_fflush_r>
 8000924:	bb30      	cbnz	r0, 8000974 <__swbuf_r+0x90>
 8000926:	68a3      	ldr	r3, [r4, #8]
 8000928:	3b01      	subs	r3, #1
 800092a:	60a3      	str	r3, [r4, #8]
 800092c:	6823      	ldr	r3, [r4, #0]
 800092e:	1c5a      	adds	r2, r3, #1
 8000930:	6022      	str	r2, [r4, #0]
 8000932:	701e      	strb	r6, [r3, #0]
 8000934:	6963      	ldr	r3, [r4, #20]
 8000936:	3001      	adds	r0, #1
 8000938:	4283      	cmp	r3, r0
 800093a:	d004      	beq.n	8000946 <__swbuf_r+0x62>
 800093c:	89a3      	ldrh	r3, [r4, #12]
 800093e:	07db      	lsls	r3, r3, #31
 8000940:	d506      	bpl.n	8000950 <__swbuf_r+0x6c>
 8000942:	2e0a      	cmp	r6, #10
 8000944:	d104      	bne.n	8000950 <__swbuf_r+0x6c>
 8000946:	4621      	mov	r1, r4
 8000948:	4628      	mov	r0, r5
 800094a:	f000 f911 	bl	8000b70 <_fflush_r>
 800094e:	b988      	cbnz	r0, 8000974 <__swbuf_r+0x90>
 8000950:	4638      	mov	r0, r7
 8000952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000954:	4b0a      	ldr	r3, [pc, #40]	; (8000980 <__swbuf_r+0x9c>)
 8000956:	429c      	cmp	r4, r3
 8000958:	d101      	bne.n	800095e <__swbuf_r+0x7a>
 800095a:	68ac      	ldr	r4, [r5, #8]
 800095c:	e7cf      	b.n	80008fe <__swbuf_r+0x1a>
 800095e:	4b09      	ldr	r3, [pc, #36]	; (8000984 <__swbuf_r+0xa0>)
 8000960:	429c      	cmp	r4, r3
 8000962:	bf08      	it	eq
 8000964:	68ec      	ldreq	r4, [r5, #12]
 8000966:	e7ca      	b.n	80008fe <__swbuf_r+0x1a>
 8000968:	4621      	mov	r1, r4
 800096a:	4628      	mov	r0, r5
 800096c:	f000 f80c 	bl	8000988 <__swsetup_r>
 8000970:	2800      	cmp	r0, #0
 8000972:	d0cb      	beq.n	800090c <__swbuf_r+0x28>
 8000974:	f04f 37ff 	mov.w	r7, #4294967295
 8000978:	e7ea      	b.n	8000950 <__swbuf_r+0x6c>
 800097a:	bf00      	nop
 800097c:	080017bc 	.word	0x080017bc
 8000980:	080017dc 	.word	0x080017dc
 8000984:	0800179c 	.word	0x0800179c

08000988 <__swsetup_r>:
 8000988:	4b32      	ldr	r3, [pc, #200]	; (8000a54 <__swsetup_r+0xcc>)
 800098a:	b570      	push	{r4, r5, r6, lr}
 800098c:	681d      	ldr	r5, [r3, #0]
 800098e:	4606      	mov	r6, r0
 8000990:	460c      	mov	r4, r1
 8000992:	b125      	cbz	r5, 800099e <__swsetup_r+0x16>
 8000994:	69ab      	ldr	r3, [r5, #24]
 8000996:	b913      	cbnz	r3, 800099e <__swsetup_r+0x16>
 8000998:	4628      	mov	r0, r5
 800099a:	f000 f97d 	bl	8000c98 <__sinit>
 800099e:	4b2e      	ldr	r3, [pc, #184]	; (8000a58 <__swsetup_r+0xd0>)
 80009a0:	429c      	cmp	r4, r3
 80009a2:	d10f      	bne.n	80009c4 <__swsetup_r+0x3c>
 80009a4:	686c      	ldr	r4, [r5, #4]
 80009a6:	89a3      	ldrh	r3, [r4, #12]
 80009a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80009ac:	0719      	lsls	r1, r3, #28
 80009ae:	d42c      	bmi.n	8000a0a <__swsetup_r+0x82>
 80009b0:	06dd      	lsls	r5, r3, #27
 80009b2:	d411      	bmi.n	80009d8 <__swsetup_r+0x50>
 80009b4:	2309      	movs	r3, #9
 80009b6:	6033      	str	r3, [r6, #0]
 80009b8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80009bc:	81a3      	strh	r3, [r4, #12]
 80009be:	f04f 30ff 	mov.w	r0, #4294967295
 80009c2:	e03e      	b.n	8000a42 <__swsetup_r+0xba>
 80009c4:	4b25      	ldr	r3, [pc, #148]	; (8000a5c <__swsetup_r+0xd4>)
 80009c6:	429c      	cmp	r4, r3
 80009c8:	d101      	bne.n	80009ce <__swsetup_r+0x46>
 80009ca:	68ac      	ldr	r4, [r5, #8]
 80009cc:	e7eb      	b.n	80009a6 <__swsetup_r+0x1e>
 80009ce:	4b24      	ldr	r3, [pc, #144]	; (8000a60 <__swsetup_r+0xd8>)
 80009d0:	429c      	cmp	r4, r3
 80009d2:	bf08      	it	eq
 80009d4:	68ec      	ldreq	r4, [r5, #12]
 80009d6:	e7e6      	b.n	80009a6 <__swsetup_r+0x1e>
 80009d8:	0758      	lsls	r0, r3, #29
 80009da:	d512      	bpl.n	8000a02 <__swsetup_r+0x7a>
 80009dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80009de:	b141      	cbz	r1, 80009f2 <__swsetup_r+0x6a>
 80009e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80009e4:	4299      	cmp	r1, r3
 80009e6:	d002      	beq.n	80009ee <__swsetup_r+0x66>
 80009e8:	4630      	mov	r0, r6
 80009ea:	f000 fa59 	bl	8000ea0 <_free_r>
 80009ee:	2300      	movs	r3, #0
 80009f0:	6363      	str	r3, [r4, #52]	; 0x34
 80009f2:	89a3      	ldrh	r3, [r4, #12]
 80009f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80009f8:	81a3      	strh	r3, [r4, #12]
 80009fa:	2300      	movs	r3, #0
 80009fc:	6063      	str	r3, [r4, #4]
 80009fe:	6923      	ldr	r3, [r4, #16]
 8000a00:	6023      	str	r3, [r4, #0]
 8000a02:	89a3      	ldrh	r3, [r4, #12]
 8000a04:	f043 0308 	orr.w	r3, r3, #8
 8000a08:	81a3      	strh	r3, [r4, #12]
 8000a0a:	6923      	ldr	r3, [r4, #16]
 8000a0c:	b94b      	cbnz	r3, 8000a22 <__swsetup_r+0x9a>
 8000a0e:	89a3      	ldrh	r3, [r4, #12]
 8000a10:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000a14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a18:	d003      	beq.n	8000a22 <__swsetup_r+0x9a>
 8000a1a:	4621      	mov	r1, r4
 8000a1c:	4630      	mov	r0, r6
 8000a1e:	f000 f9ff 	bl	8000e20 <__smakebuf_r>
 8000a22:	89a0      	ldrh	r0, [r4, #12]
 8000a24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000a28:	f010 0301 	ands.w	r3, r0, #1
 8000a2c:	d00a      	beq.n	8000a44 <__swsetup_r+0xbc>
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60a3      	str	r3, [r4, #8]
 8000a32:	6963      	ldr	r3, [r4, #20]
 8000a34:	425b      	negs	r3, r3
 8000a36:	61a3      	str	r3, [r4, #24]
 8000a38:	6923      	ldr	r3, [r4, #16]
 8000a3a:	b943      	cbnz	r3, 8000a4e <__swsetup_r+0xc6>
 8000a3c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000a40:	d1ba      	bne.n	80009b8 <__swsetup_r+0x30>
 8000a42:	bd70      	pop	{r4, r5, r6, pc}
 8000a44:	0781      	lsls	r1, r0, #30
 8000a46:	bf58      	it	pl
 8000a48:	6963      	ldrpl	r3, [r4, #20]
 8000a4a:	60a3      	str	r3, [r4, #8]
 8000a4c:	e7f4      	b.n	8000a38 <__swsetup_r+0xb0>
 8000a4e:	2000      	movs	r0, #0
 8000a50:	e7f7      	b.n	8000a42 <__swsetup_r+0xba>
 8000a52:	bf00      	nop
 8000a54:	20000000 	.word	0x20000000
 8000a58:	080017bc 	.word	0x080017bc
 8000a5c:	080017dc 	.word	0x080017dc
 8000a60:	0800179c 	.word	0x0800179c

08000a64 <__sflush_r>:
 8000a64:	898a      	ldrh	r2, [r1, #12]
 8000a66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a6a:	4605      	mov	r5, r0
 8000a6c:	0710      	lsls	r0, r2, #28
 8000a6e:	460c      	mov	r4, r1
 8000a70:	d458      	bmi.n	8000b24 <__sflush_r+0xc0>
 8000a72:	684b      	ldr	r3, [r1, #4]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	dc05      	bgt.n	8000a84 <__sflush_r+0x20>
 8000a78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	dc02      	bgt.n	8000a84 <__sflush_r+0x20>
 8000a7e:	2000      	movs	r0, #0
 8000a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000a84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000a86:	2e00      	cmp	r6, #0
 8000a88:	d0f9      	beq.n	8000a7e <__sflush_r+0x1a>
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000a90:	682f      	ldr	r7, [r5, #0]
 8000a92:	602b      	str	r3, [r5, #0]
 8000a94:	d032      	beq.n	8000afc <__sflush_r+0x98>
 8000a96:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000a98:	89a3      	ldrh	r3, [r4, #12]
 8000a9a:	075a      	lsls	r2, r3, #29
 8000a9c:	d505      	bpl.n	8000aaa <__sflush_r+0x46>
 8000a9e:	6863      	ldr	r3, [r4, #4]
 8000aa0:	1ac0      	subs	r0, r0, r3
 8000aa2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000aa4:	b10b      	cbz	r3, 8000aaa <__sflush_r+0x46>
 8000aa6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000aa8:	1ac0      	subs	r0, r0, r3
 8000aaa:	2300      	movs	r3, #0
 8000aac:	4602      	mov	r2, r0
 8000aae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000ab0:	6a21      	ldr	r1, [r4, #32]
 8000ab2:	4628      	mov	r0, r5
 8000ab4:	47b0      	blx	r6
 8000ab6:	1c43      	adds	r3, r0, #1
 8000ab8:	89a3      	ldrh	r3, [r4, #12]
 8000aba:	d106      	bne.n	8000aca <__sflush_r+0x66>
 8000abc:	6829      	ldr	r1, [r5, #0]
 8000abe:	291d      	cmp	r1, #29
 8000ac0:	d82c      	bhi.n	8000b1c <__sflush_r+0xb8>
 8000ac2:	4a2a      	ldr	r2, [pc, #168]	; (8000b6c <__sflush_r+0x108>)
 8000ac4:	40ca      	lsrs	r2, r1
 8000ac6:	07d6      	lsls	r6, r2, #31
 8000ac8:	d528      	bpl.n	8000b1c <__sflush_r+0xb8>
 8000aca:	2200      	movs	r2, #0
 8000acc:	6062      	str	r2, [r4, #4]
 8000ace:	04d9      	lsls	r1, r3, #19
 8000ad0:	6922      	ldr	r2, [r4, #16]
 8000ad2:	6022      	str	r2, [r4, #0]
 8000ad4:	d504      	bpl.n	8000ae0 <__sflush_r+0x7c>
 8000ad6:	1c42      	adds	r2, r0, #1
 8000ad8:	d101      	bne.n	8000ade <__sflush_r+0x7a>
 8000ada:	682b      	ldr	r3, [r5, #0]
 8000adc:	b903      	cbnz	r3, 8000ae0 <__sflush_r+0x7c>
 8000ade:	6560      	str	r0, [r4, #84]	; 0x54
 8000ae0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000ae2:	602f      	str	r7, [r5, #0]
 8000ae4:	2900      	cmp	r1, #0
 8000ae6:	d0ca      	beq.n	8000a7e <__sflush_r+0x1a>
 8000ae8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000aec:	4299      	cmp	r1, r3
 8000aee:	d002      	beq.n	8000af6 <__sflush_r+0x92>
 8000af0:	4628      	mov	r0, r5
 8000af2:	f000 f9d5 	bl	8000ea0 <_free_r>
 8000af6:	2000      	movs	r0, #0
 8000af8:	6360      	str	r0, [r4, #52]	; 0x34
 8000afa:	e7c1      	b.n	8000a80 <__sflush_r+0x1c>
 8000afc:	6a21      	ldr	r1, [r4, #32]
 8000afe:	2301      	movs	r3, #1
 8000b00:	4628      	mov	r0, r5
 8000b02:	47b0      	blx	r6
 8000b04:	1c41      	adds	r1, r0, #1
 8000b06:	d1c7      	bne.n	8000a98 <__sflush_r+0x34>
 8000b08:	682b      	ldr	r3, [r5, #0]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d0c4      	beq.n	8000a98 <__sflush_r+0x34>
 8000b0e:	2b1d      	cmp	r3, #29
 8000b10:	d001      	beq.n	8000b16 <__sflush_r+0xb2>
 8000b12:	2b16      	cmp	r3, #22
 8000b14:	d101      	bne.n	8000b1a <__sflush_r+0xb6>
 8000b16:	602f      	str	r7, [r5, #0]
 8000b18:	e7b1      	b.n	8000a7e <__sflush_r+0x1a>
 8000b1a:	89a3      	ldrh	r3, [r4, #12]
 8000b1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b20:	81a3      	strh	r3, [r4, #12]
 8000b22:	e7ad      	b.n	8000a80 <__sflush_r+0x1c>
 8000b24:	690f      	ldr	r7, [r1, #16]
 8000b26:	2f00      	cmp	r7, #0
 8000b28:	d0a9      	beq.n	8000a7e <__sflush_r+0x1a>
 8000b2a:	0793      	lsls	r3, r2, #30
 8000b2c:	680e      	ldr	r6, [r1, #0]
 8000b2e:	bf08      	it	eq
 8000b30:	694b      	ldreq	r3, [r1, #20]
 8000b32:	600f      	str	r7, [r1, #0]
 8000b34:	bf18      	it	ne
 8000b36:	2300      	movne	r3, #0
 8000b38:	eba6 0807 	sub.w	r8, r6, r7
 8000b3c:	608b      	str	r3, [r1, #8]
 8000b3e:	f1b8 0f00 	cmp.w	r8, #0
 8000b42:	dd9c      	ble.n	8000a7e <__sflush_r+0x1a>
 8000b44:	6a21      	ldr	r1, [r4, #32]
 8000b46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000b48:	4643      	mov	r3, r8
 8000b4a:	463a      	mov	r2, r7
 8000b4c:	4628      	mov	r0, r5
 8000b4e:	47b0      	blx	r6
 8000b50:	2800      	cmp	r0, #0
 8000b52:	dc06      	bgt.n	8000b62 <__sflush_r+0xfe>
 8000b54:	89a3      	ldrh	r3, [r4, #12]
 8000b56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b5a:	81a3      	strh	r3, [r4, #12]
 8000b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b60:	e78e      	b.n	8000a80 <__sflush_r+0x1c>
 8000b62:	4407      	add	r7, r0
 8000b64:	eba8 0800 	sub.w	r8, r8, r0
 8000b68:	e7e9      	b.n	8000b3e <__sflush_r+0xda>
 8000b6a:	bf00      	nop
 8000b6c:	20400001 	.word	0x20400001

08000b70 <_fflush_r>:
 8000b70:	b538      	push	{r3, r4, r5, lr}
 8000b72:	690b      	ldr	r3, [r1, #16]
 8000b74:	4605      	mov	r5, r0
 8000b76:	460c      	mov	r4, r1
 8000b78:	b913      	cbnz	r3, 8000b80 <_fflush_r+0x10>
 8000b7a:	2500      	movs	r5, #0
 8000b7c:	4628      	mov	r0, r5
 8000b7e:	bd38      	pop	{r3, r4, r5, pc}
 8000b80:	b118      	cbz	r0, 8000b8a <_fflush_r+0x1a>
 8000b82:	6983      	ldr	r3, [r0, #24]
 8000b84:	b90b      	cbnz	r3, 8000b8a <_fflush_r+0x1a>
 8000b86:	f000 f887 	bl	8000c98 <__sinit>
 8000b8a:	4b14      	ldr	r3, [pc, #80]	; (8000bdc <_fflush_r+0x6c>)
 8000b8c:	429c      	cmp	r4, r3
 8000b8e:	d11b      	bne.n	8000bc8 <_fflush_r+0x58>
 8000b90:	686c      	ldr	r4, [r5, #4]
 8000b92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d0ef      	beq.n	8000b7a <_fflush_r+0xa>
 8000b9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000b9c:	07d0      	lsls	r0, r2, #31
 8000b9e:	d404      	bmi.n	8000baa <_fflush_r+0x3a>
 8000ba0:	0599      	lsls	r1, r3, #22
 8000ba2:	d402      	bmi.n	8000baa <_fflush_r+0x3a>
 8000ba4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000ba6:	f000 f915 	bl	8000dd4 <__retarget_lock_acquire_recursive>
 8000baa:	4628      	mov	r0, r5
 8000bac:	4621      	mov	r1, r4
 8000bae:	f7ff ff59 	bl	8000a64 <__sflush_r>
 8000bb2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000bb4:	07da      	lsls	r2, r3, #31
 8000bb6:	4605      	mov	r5, r0
 8000bb8:	d4e0      	bmi.n	8000b7c <_fflush_r+0xc>
 8000bba:	89a3      	ldrh	r3, [r4, #12]
 8000bbc:	059b      	lsls	r3, r3, #22
 8000bbe:	d4dd      	bmi.n	8000b7c <_fflush_r+0xc>
 8000bc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000bc2:	f000 f908 	bl	8000dd6 <__retarget_lock_release_recursive>
 8000bc6:	e7d9      	b.n	8000b7c <_fflush_r+0xc>
 8000bc8:	4b05      	ldr	r3, [pc, #20]	; (8000be0 <_fflush_r+0x70>)
 8000bca:	429c      	cmp	r4, r3
 8000bcc:	d101      	bne.n	8000bd2 <_fflush_r+0x62>
 8000bce:	68ac      	ldr	r4, [r5, #8]
 8000bd0:	e7df      	b.n	8000b92 <_fflush_r+0x22>
 8000bd2:	4b04      	ldr	r3, [pc, #16]	; (8000be4 <_fflush_r+0x74>)
 8000bd4:	429c      	cmp	r4, r3
 8000bd6:	bf08      	it	eq
 8000bd8:	68ec      	ldreq	r4, [r5, #12]
 8000bda:	e7da      	b.n	8000b92 <_fflush_r+0x22>
 8000bdc:	080017bc 	.word	0x080017bc
 8000be0:	080017dc 	.word	0x080017dc
 8000be4:	0800179c 	.word	0x0800179c

08000be8 <std>:
 8000be8:	2300      	movs	r3, #0
 8000bea:	b510      	push	{r4, lr}
 8000bec:	4604      	mov	r4, r0
 8000bee:	e9c0 3300 	strd	r3, r3, [r0]
 8000bf2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000bf6:	6083      	str	r3, [r0, #8]
 8000bf8:	8181      	strh	r1, [r0, #12]
 8000bfa:	6643      	str	r3, [r0, #100]	; 0x64
 8000bfc:	81c2      	strh	r2, [r0, #14]
 8000bfe:	6183      	str	r3, [r0, #24]
 8000c00:	4619      	mov	r1, r3
 8000c02:	2208      	movs	r2, #8
 8000c04:	305c      	adds	r0, #92	; 0x5c
 8000c06:	f7ff fdd7 	bl	80007b8 <memset>
 8000c0a:	4b05      	ldr	r3, [pc, #20]	; (8000c20 <std+0x38>)
 8000c0c:	6263      	str	r3, [r4, #36]	; 0x24
 8000c0e:	4b05      	ldr	r3, [pc, #20]	; (8000c24 <std+0x3c>)
 8000c10:	62a3      	str	r3, [r4, #40]	; 0x28
 8000c12:	4b05      	ldr	r3, [pc, #20]	; (8000c28 <std+0x40>)
 8000c14:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000c16:	4b05      	ldr	r3, [pc, #20]	; (8000c2c <std+0x44>)
 8000c18:	6224      	str	r4, [r4, #32]
 8000c1a:	6323      	str	r3, [r4, #48]	; 0x30
 8000c1c:	bd10      	pop	{r4, pc}
 8000c1e:	bf00      	nop
 8000c20:	080015e9 	.word	0x080015e9
 8000c24:	0800160b 	.word	0x0800160b
 8000c28:	08001643 	.word	0x08001643
 8000c2c:	08001667 	.word	0x08001667

08000c30 <_cleanup_r>:
 8000c30:	4901      	ldr	r1, [pc, #4]	; (8000c38 <_cleanup_r+0x8>)
 8000c32:	f000 b8af 	b.w	8000d94 <_fwalk_reent>
 8000c36:	bf00      	nop
 8000c38:	08000b71 	.word	0x08000b71

08000c3c <__sfmoreglue>:
 8000c3c:	b570      	push	{r4, r5, r6, lr}
 8000c3e:	1e4a      	subs	r2, r1, #1
 8000c40:	2568      	movs	r5, #104	; 0x68
 8000c42:	4355      	muls	r5, r2
 8000c44:	460e      	mov	r6, r1
 8000c46:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000c4a:	f000 f977 	bl	8000f3c <_malloc_r>
 8000c4e:	4604      	mov	r4, r0
 8000c50:	b140      	cbz	r0, 8000c64 <__sfmoreglue+0x28>
 8000c52:	2100      	movs	r1, #0
 8000c54:	e9c0 1600 	strd	r1, r6, [r0]
 8000c58:	300c      	adds	r0, #12
 8000c5a:	60a0      	str	r0, [r4, #8]
 8000c5c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000c60:	f7ff fdaa 	bl	80007b8 <memset>
 8000c64:	4620      	mov	r0, r4
 8000c66:	bd70      	pop	{r4, r5, r6, pc}

08000c68 <__sfp_lock_acquire>:
 8000c68:	4801      	ldr	r0, [pc, #4]	; (8000c70 <__sfp_lock_acquire+0x8>)
 8000c6a:	f000 b8b3 	b.w	8000dd4 <__retarget_lock_acquire_recursive>
 8000c6e:	bf00      	nop
 8000c70:	2000009c 	.word	0x2000009c

08000c74 <__sfp_lock_release>:
 8000c74:	4801      	ldr	r0, [pc, #4]	; (8000c7c <__sfp_lock_release+0x8>)
 8000c76:	f000 b8ae 	b.w	8000dd6 <__retarget_lock_release_recursive>
 8000c7a:	bf00      	nop
 8000c7c:	2000009c 	.word	0x2000009c

08000c80 <__sinit_lock_acquire>:
 8000c80:	4801      	ldr	r0, [pc, #4]	; (8000c88 <__sinit_lock_acquire+0x8>)
 8000c82:	f000 b8a7 	b.w	8000dd4 <__retarget_lock_acquire_recursive>
 8000c86:	bf00      	nop
 8000c88:	20000097 	.word	0x20000097

08000c8c <__sinit_lock_release>:
 8000c8c:	4801      	ldr	r0, [pc, #4]	; (8000c94 <__sinit_lock_release+0x8>)
 8000c8e:	f000 b8a2 	b.w	8000dd6 <__retarget_lock_release_recursive>
 8000c92:	bf00      	nop
 8000c94:	20000097 	.word	0x20000097

08000c98 <__sinit>:
 8000c98:	b510      	push	{r4, lr}
 8000c9a:	4604      	mov	r4, r0
 8000c9c:	f7ff fff0 	bl	8000c80 <__sinit_lock_acquire>
 8000ca0:	69a3      	ldr	r3, [r4, #24]
 8000ca2:	b11b      	cbz	r3, 8000cac <__sinit+0x14>
 8000ca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000ca8:	f7ff bff0 	b.w	8000c8c <__sinit_lock_release>
 8000cac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000cb0:	6523      	str	r3, [r4, #80]	; 0x50
 8000cb2:	4b13      	ldr	r3, [pc, #76]	; (8000d00 <__sinit+0x68>)
 8000cb4:	4a13      	ldr	r2, [pc, #76]	; (8000d04 <__sinit+0x6c>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	62a2      	str	r2, [r4, #40]	; 0x28
 8000cba:	42a3      	cmp	r3, r4
 8000cbc:	bf04      	itt	eq
 8000cbe:	2301      	moveq	r3, #1
 8000cc0:	61a3      	streq	r3, [r4, #24]
 8000cc2:	4620      	mov	r0, r4
 8000cc4:	f000 f820 	bl	8000d08 <__sfp>
 8000cc8:	6060      	str	r0, [r4, #4]
 8000cca:	4620      	mov	r0, r4
 8000ccc:	f000 f81c 	bl	8000d08 <__sfp>
 8000cd0:	60a0      	str	r0, [r4, #8]
 8000cd2:	4620      	mov	r0, r4
 8000cd4:	f000 f818 	bl	8000d08 <__sfp>
 8000cd8:	2200      	movs	r2, #0
 8000cda:	60e0      	str	r0, [r4, #12]
 8000cdc:	2104      	movs	r1, #4
 8000cde:	6860      	ldr	r0, [r4, #4]
 8000ce0:	f7ff ff82 	bl	8000be8 <std>
 8000ce4:	68a0      	ldr	r0, [r4, #8]
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	2109      	movs	r1, #9
 8000cea:	f7ff ff7d 	bl	8000be8 <std>
 8000cee:	68e0      	ldr	r0, [r4, #12]
 8000cf0:	2202      	movs	r2, #2
 8000cf2:	2112      	movs	r1, #18
 8000cf4:	f7ff ff78 	bl	8000be8 <std>
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	61a3      	str	r3, [r4, #24]
 8000cfc:	e7d2      	b.n	8000ca4 <__sinit+0xc>
 8000cfe:	bf00      	nop
 8000d00:	08001798 	.word	0x08001798
 8000d04:	08000c31 	.word	0x08000c31

08000d08 <__sfp>:
 8000d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d0a:	4607      	mov	r7, r0
 8000d0c:	f7ff ffac 	bl	8000c68 <__sfp_lock_acquire>
 8000d10:	4b1e      	ldr	r3, [pc, #120]	; (8000d8c <__sfp+0x84>)
 8000d12:	681e      	ldr	r6, [r3, #0]
 8000d14:	69b3      	ldr	r3, [r6, #24]
 8000d16:	b913      	cbnz	r3, 8000d1e <__sfp+0x16>
 8000d18:	4630      	mov	r0, r6
 8000d1a:	f7ff ffbd 	bl	8000c98 <__sinit>
 8000d1e:	3648      	adds	r6, #72	; 0x48
 8000d20:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000d24:	3b01      	subs	r3, #1
 8000d26:	d503      	bpl.n	8000d30 <__sfp+0x28>
 8000d28:	6833      	ldr	r3, [r6, #0]
 8000d2a:	b30b      	cbz	r3, 8000d70 <__sfp+0x68>
 8000d2c:	6836      	ldr	r6, [r6, #0]
 8000d2e:	e7f7      	b.n	8000d20 <__sfp+0x18>
 8000d30:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000d34:	b9d5      	cbnz	r5, 8000d6c <__sfp+0x64>
 8000d36:	4b16      	ldr	r3, [pc, #88]	; (8000d90 <__sfp+0x88>)
 8000d38:	60e3      	str	r3, [r4, #12]
 8000d3a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000d3e:	6665      	str	r5, [r4, #100]	; 0x64
 8000d40:	f000 f847 	bl	8000dd2 <__retarget_lock_init_recursive>
 8000d44:	f7ff ff96 	bl	8000c74 <__sfp_lock_release>
 8000d48:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000d4c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000d50:	6025      	str	r5, [r4, #0]
 8000d52:	61a5      	str	r5, [r4, #24]
 8000d54:	2208      	movs	r2, #8
 8000d56:	4629      	mov	r1, r5
 8000d58:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000d5c:	f7ff fd2c 	bl	80007b8 <memset>
 8000d60:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000d64:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000d68:	4620      	mov	r0, r4
 8000d6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d6c:	3468      	adds	r4, #104	; 0x68
 8000d6e:	e7d9      	b.n	8000d24 <__sfp+0x1c>
 8000d70:	2104      	movs	r1, #4
 8000d72:	4638      	mov	r0, r7
 8000d74:	f7ff ff62 	bl	8000c3c <__sfmoreglue>
 8000d78:	4604      	mov	r4, r0
 8000d7a:	6030      	str	r0, [r6, #0]
 8000d7c:	2800      	cmp	r0, #0
 8000d7e:	d1d5      	bne.n	8000d2c <__sfp+0x24>
 8000d80:	f7ff ff78 	bl	8000c74 <__sfp_lock_release>
 8000d84:	230c      	movs	r3, #12
 8000d86:	603b      	str	r3, [r7, #0]
 8000d88:	e7ee      	b.n	8000d68 <__sfp+0x60>
 8000d8a:	bf00      	nop
 8000d8c:	08001798 	.word	0x08001798
 8000d90:	ffff0001 	.word	0xffff0001

08000d94 <_fwalk_reent>:
 8000d94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000d98:	4606      	mov	r6, r0
 8000d9a:	4688      	mov	r8, r1
 8000d9c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000da0:	2700      	movs	r7, #0
 8000da2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000da6:	f1b9 0901 	subs.w	r9, r9, #1
 8000daa:	d505      	bpl.n	8000db8 <_fwalk_reent+0x24>
 8000dac:	6824      	ldr	r4, [r4, #0]
 8000dae:	2c00      	cmp	r4, #0
 8000db0:	d1f7      	bne.n	8000da2 <_fwalk_reent+0xe>
 8000db2:	4638      	mov	r0, r7
 8000db4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000db8:	89ab      	ldrh	r3, [r5, #12]
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	d907      	bls.n	8000dce <_fwalk_reent+0x3a>
 8000dbe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	d003      	beq.n	8000dce <_fwalk_reent+0x3a>
 8000dc6:	4629      	mov	r1, r5
 8000dc8:	4630      	mov	r0, r6
 8000dca:	47c0      	blx	r8
 8000dcc:	4307      	orrs	r7, r0
 8000dce:	3568      	adds	r5, #104	; 0x68
 8000dd0:	e7e9      	b.n	8000da6 <_fwalk_reent+0x12>

08000dd2 <__retarget_lock_init_recursive>:
 8000dd2:	4770      	bx	lr

08000dd4 <__retarget_lock_acquire_recursive>:
 8000dd4:	4770      	bx	lr

08000dd6 <__retarget_lock_release_recursive>:
 8000dd6:	4770      	bx	lr

08000dd8 <__swhatbuf_r>:
 8000dd8:	b570      	push	{r4, r5, r6, lr}
 8000dda:	460e      	mov	r6, r1
 8000ddc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000de0:	2900      	cmp	r1, #0
 8000de2:	b096      	sub	sp, #88	; 0x58
 8000de4:	4614      	mov	r4, r2
 8000de6:	461d      	mov	r5, r3
 8000de8:	da07      	bge.n	8000dfa <__swhatbuf_r+0x22>
 8000dea:	2300      	movs	r3, #0
 8000dec:	602b      	str	r3, [r5, #0]
 8000dee:	89b3      	ldrh	r3, [r6, #12]
 8000df0:	061a      	lsls	r2, r3, #24
 8000df2:	d410      	bmi.n	8000e16 <__swhatbuf_r+0x3e>
 8000df4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000df8:	e00e      	b.n	8000e18 <__swhatbuf_r+0x40>
 8000dfa:	466a      	mov	r2, sp
 8000dfc:	f000 fc5a 	bl	80016b4 <_fstat_r>
 8000e00:	2800      	cmp	r0, #0
 8000e02:	dbf2      	blt.n	8000dea <__swhatbuf_r+0x12>
 8000e04:	9a01      	ldr	r2, [sp, #4]
 8000e06:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000e0a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000e0e:	425a      	negs	r2, r3
 8000e10:	415a      	adcs	r2, r3
 8000e12:	602a      	str	r2, [r5, #0]
 8000e14:	e7ee      	b.n	8000df4 <__swhatbuf_r+0x1c>
 8000e16:	2340      	movs	r3, #64	; 0x40
 8000e18:	2000      	movs	r0, #0
 8000e1a:	6023      	str	r3, [r4, #0]
 8000e1c:	b016      	add	sp, #88	; 0x58
 8000e1e:	bd70      	pop	{r4, r5, r6, pc}

08000e20 <__smakebuf_r>:
 8000e20:	898b      	ldrh	r3, [r1, #12]
 8000e22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000e24:	079d      	lsls	r5, r3, #30
 8000e26:	4606      	mov	r6, r0
 8000e28:	460c      	mov	r4, r1
 8000e2a:	d507      	bpl.n	8000e3c <__smakebuf_r+0x1c>
 8000e2c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000e30:	6023      	str	r3, [r4, #0]
 8000e32:	6123      	str	r3, [r4, #16]
 8000e34:	2301      	movs	r3, #1
 8000e36:	6163      	str	r3, [r4, #20]
 8000e38:	b002      	add	sp, #8
 8000e3a:	bd70      	pop	{r4, r5, r6, pc}
 8000e3c:	ab01      	add	r3, sp, #4
 8000e3e:	466a      	mov	r2, sp
 8000e40:	f7ff ffca 	bl	8000dd8 <__swhatbuf_r>
 8000e44:	9900      	ldr	r1, [sp, #0]
 8000e46:	4605      	mov	r5, r0
 8000e48:	4630      	mov	r0, r6
 8000e4a:	f000 f877 	bl	8000f3c <_malloc_r>
 8000e4e:	b948      	cbnz	r0, 8000e64 <__smakebuf_r+0x44>
 8000e50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000e54:	059a      	lsls	r2, r3, #22
 8000e56:	d4ef      	bmi.n	8000e38 <__smakebuf_r+0x18>
 8000e58:	f023 0303 	bic.w	r3, r3, #3
 8000e5c:	f043 0302 	orr.w	r3, r3, #2
 8000e60:	81a3      	strh	r3, [r4, #12]
 8000e62:	e7e3      	b.n	8000e2c <__smakebuf_r+0xc>
 8000e64:	4b0d      	ldr	r3, [pc, #52]	; (8000e9c <__smakebuf_r+0x7c>)
 8000e66:	62b3      	str	r3, [r6, #40]	; 0x28
 8000e68:	89a3      	ldrh	r3, [r4, #12]
 8000e6a:	6020      	str	r0, [r4, #0]
 8000e6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e70:	81a3      	strh	r3, [r4, #12]
 8000e72:	9b00      	ldr	r3, [sp, #0]
 8000e74:	6163      	str	r3, [r4, #20]
 8000e76:	9b01      	ldr	r3, [sp, #4]
 8000e78:	6120      	str	r0, [r4, #16]
 8000e7a:	b15b      	cbz	r3, 8000e94 <__smakebuf_r+0x74>
 8000e7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000e80:	4630      	mov	r0, r6
 8000e82:	f000 fc29 	bl	80016d8 <_isatty_r>
 8000e86:	b128      	cbz	r0, 8000e94 <__smakebuf_r+0x74>
 8000e88:	89a3      	ldrh	r3, [r4, #12]
 8000e8a:	f023 0303 	bic.w	r3, r3, #3
 8000e8e:	f043 0301 	orr.w	r3, r3, #1
 8000e92:	81a3      	strh	r3, [r4, #12]
 8000e94:	89a0      	ldrh	r0, [r4, #12]
 8000e96:	4305      	orrs	r5, r0
 8000e98:	81a5      	strh	r5, [r4, #12]
 8000e9a:	e7cd      	b.n	8000e38 <__smakebuf_r+0x18>
 8000e9c:	08000c31 	.word	0x08000c31

08000ea0 <_free_r>:
 8000ea0:	b538      	push	{r3, r4, r5, lr}
 8000ea2:	4605      	mov	r5, r0
 8000ea4:	2900      	cmp	r1, #0
 8000ea6:	d045      	beq.n	8000f34 <_free_r+0x94>
 8000ea8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000eac:	1f0c      	subs	r4, r1, #4
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	bfb8      	it	lt
 8000eb2:	18e4      	addlt	r4, r4, r3
 8000eb4:	f000 fc32 	bl	800171c <__malloc_lock>
 8000eb8:	4a1f      	ldr	r2, [pc, #124]	; (8000f38 <_free_r+0x98>)
 8000eba:	6813      	ldr	r3, [r2, #0]
 8000ebc:	4610      	mov	r0, r2
 8000ebe:	b933      	cbnz	r3, 8000ece <_free_r+0x2e>
 8000ec0:	6063      	str	r3, [r4, #4]
 8000ec2:	6014      	str	r4, [r2, #0]
 8000ec4:	4628      	mov	r0, r5
 8000ec6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000eca:	f000 bc2d 	b.w	8001728 <__malloc_unlock>
 8000ece:	42a3      	cmp	r3, r4
 8000ed0:	d90b      	bls.n	8000eea <_free_r+0x4a>
 8000ed2:	6821      	ldr	r1, [r4, #0]
 8000ed4:	1862      	adds	r2, r4, r1
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	bf04      	itt	eq
 8000eda:	681a      	ldreq	r2, [r3, #0]
 8000edc:	685b      	ldreq	r3, [r3, #4]
 8000ede:	6063      	str	r3, [r4, #4]
 8000ee0:	bf04      	itt	eq
 8000ee2:	1852      	addeq	r2, r2, r1
 8000ee4:	6022      	streq	r2, [r4, #0]
 8000ee6:	6004      	str	r4, [r0, #0]
 8000ee8:	e7ec      	b.n	8000ec4 <_free_r+0x24>
 8000eea:	461a      	mov	r2, r3
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	b10b      	cbz	r3, 8000ef4 <_free_r+0x54>
 8000ef0:	42a3      	cmp	r3, r4
 8000ef2:	d9fa      	bls.n	8000eea <_free_r+0x4a>
 8000ef4:	6811      	ldr	r1, [r2, #0]
 8000ef6:	1850      	adds	r0, r2, r1
 8000ef8:	42a0      	cmp	r0, r4
 8000efa:	d10b      	bne.n	8000f14 <_free_r+0x74>
 8000efc:	6820      	ldr	r0, [r4, #0]
 8000efe:	4401      	add	r1, r0
 8000f00:	1850      	adds	r0, r2, r1
 8000f02:	4283      	cmp	r3, r0
 8000f04:	6011      	str	r1, [r2, #0]
 8000f06:	d1dd      	bne.n	8000ec4 <_free_r+0x24>
 8000f08:	6818      	ldr	r0, [r3, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	6053      	str	r3, [r2, #4]
 8000f0e:	4401      	add	r1, r0
 8000f10:	6011      	str	r1, [r2, #0]
 8000f12:	e7d7      	b.n	8000ec4 <_free_r+0x24>
 8000f14:	d902      	bls.n	8000f1c <_free_r+0x7c>
 8000f16:	230c      	movs	r3, #12
 8000f18:	602b      	str	r3, [r5, #0]
 8000f1a:	e7d3      	b.n	8000ec4 <_free_r+0x24>
 8000f1c:	6820      	ldr	r0, [r4, #0]
 8000f1e:	1821      	adds	r1, r4, r0
 8000f20:	428b      	cmp	r3, r1
 8000f22:	bf04      	itt	eq
 8000f24:	6819      	ldreq	r1, [r3, #0]
 8000f26:	685b      	ldreq	r3, [r3, #4]
 8000f28:	6063      	str	r3, [r4, #4]
 8000f2a:	bf04      	itt	eq
 8000f2c:	1809      	addeq	r1, r1, r0
 8000f2e:	6021      	streq	r1, [r4, #0]
 8000f30:	6054      	str	r4, [r2, #4]
 8000f32:	e7c7      	b.n	8000ec4 <_free_r+0x24>
 8000f34:	bd38      	pop	{r3, r4, r5, pc}
 8000f36:	bf00      	nop
 8000f38:	20000084 	.word	0x20000084

08000f3c <_malloc_r>:
 8000f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f3e:	1ccd      	adds	r5, r1, #3
 8000f40:	f025 0503 	bic.w	r5, r5, #3
 8000f44:	3508      	adds	r5, #8
 8000f46:	2d0c      	cmp	r5, #12
 8000f48:	bf38      	it	cc
 8000f4a:	250c      	movcc	r5, #12
 8000f4c:	2d00      	cmp	r5, #0
 8000f4e:	4606      	mov	r6, r0
 8000f50:	db01      	blt.n	8000f56 <_malloc_r+0x1a>
 8000f52:	42a9      	cmp	r1, r5
 8000f54:	d903      	bls.n	8000f5e <_malloc_r+0x22>
 8000f56:	230c      	movs	r3, #12
 8000f58:	6033      	str	r3, [r6, #0]
 8000f5a:	2000      	movs	r0, #0
 8000f5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f5e:	f000 fbdd 	bl	800171c <__malloc_lock>
 8000f62:	4921      	ldr	r1, [pc, #132]	; (8000fe8 <_malloc_r+0xac>)
 8000f64:	680a      	ldr	r2, [r1, #0]
 8000f66:	4614      	mov	r4, r2
 8000f68:	b99c      	cbnz	r4, 8000f92 <_malloc_r+0x56>
 8000f6a:	4f20      	ldr	r7, [pc, #128]	; (8000fec <_malloc_r+0xb0>)
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	b923      	cbnz	r3, 8000f7a <_malloc_r+0x3e>
 8000f70:	4621      	mov	r1, r4
 8000f72:	4630      	mov	r0, r6
 8000f74:	f000 fb28 	bl	80015c8 <_sbrk_r>
 8000f78:	6038      	str	r0, [r7, #0]
 8000f7a:	4629      	mov	r1, r5
 8000f7c:	4630      	mov	r0, r6
 8000f7e:	f000 fb23 	bl	80015c8 <_sbrk_r>
 8000f82:	1c43      	adds	r3, r0, #1
 8000f84:	d123      	bne.n	8000fce <_malloc_r+0x92>
 8000f86:	230c      	movs	r3, #12
 8000f88:	6033      	str	r3, [r6, #0]
 8000f8a:	4630      	mov	r0, r6
 8000f8c:	f000 fbcc 	bl	8001728 <__malloc_unlock>
 8000f90:	e7e3      	b.n	8000f5a <_malloc_r+0x1e>
 8000f92:	6823      	ldr	r3, [r4, #0]
 8000f94:	1b5b      	subs	r3, r3, r5
 8000f96:	d417      	bmi.n	8000fc8 <_malloc_r+0x8c>
 8000f98:	2b0b      	cmp	r3, #11
 8000f9a:	d903      	bls.n	8000fa4 <_malloc_r+0x68>
 8000f9c:	6023      	str	r3, [r4, #0]
 8000f9e:	441c      	add	r4, r3
 8000fa0:	6025      	str	r5, [r4, #0]
 8000fa2:	e004      	b.n	8000fae <_malloc_r+0x72>
 8000fa4:	6863      	ldr	r3, [r4, #4]
 8000fa6:	42a2      	cmp	r2, r4
 8000fa8:	bf0c      	ite	eq
 8000faa:	600b      	streq	r3, [r1, #0]
 8000fac:	6053      	strne	r3, [r2, #4]
 8000fae:	4630      	mov	r0, r6
 8000fb0:	f000 fbba 	bl	8001728 <__malloc_unlock>
 8000fb4:	f104 000b 	add.w	r0, r4, #11
 8000fb8:	1d23      	adds	r3, r4, #4
 8000fba:	f020 0007 	bic.w	r0, r0, #7
 8000fbe:	1ac2      	subs	r2, r0, r3
 8000fc0:	d0cc      	beq.n	8000f5c <_malloc_r+0x20>
 8000fc2:	1a1b      	subs	r3, r3, r0
 8000fc4:	50a3      	str	r3, [r4, r2]
 8000fc6:	e7c9      	b.n	8000f5c <_malloc_r+0x20>
 8000fc8:	4622      	mov	r2, r4
 8000fca:	6864      	ldr	r4, [r4, #4]
 8000fcc:	e7cc      	b.n	8000f68 <_malloc_r+0x2c>
 8000fce:	1cc4      	adds	r4, r0, #3
 8000fd0:	f024 0403 	bic.w	r4, r4, #3
 8000fd4:	42a0      	cmp	r0, r4
 8000fd6:	d0e3      	beq.n	8000fa0 <_malloc_r+0x64>
 8000fd8:	1a21      	subs	r1, r4, r0
 8000fda:	4630      	mov	r0, r6
 8000fdc:	f000 faf4 	bl	80015c8 <_sbrk_r>
 8000fe0:	3001      	adds	r0, #1
 8000fe2:	d1dd      	bne.n	8000fa0 <_malloc_r+0x64>
 8000fe4:	e7cf      	b.n	8000f86 <_malloc_r+0x4a>
 8000fe6:	bf00      	nop
 8000fe8:	20000084 	.word	0x20000084
 8000fec:	20000088 	.word	0x20000088

08000ff0 <__sfputc_r>:
 8000ff0:	6893      	ldr	r3, [r2, #8]
 8000ff2:	3b01      	subs	r3, #1
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	b410      	push	{r4}
 8000ff8:	6093      	str	r3, [r2, #8]
 8000ffa:	da07      	bge.n	800100c <__sfputc_r+0x1c>
 8000ffc:	6994      	ldr	r4, [r2, #24]
 8000ffe:	42a3      	cmp	r3, r4
 8001000:	db01      	blt.n	8001006 <__sfputc_r+0x16>
 8001002:	290a      	cmp	r1, #10
 8001004:	d102      	bne.n	800100c <__sfputc_r+0x1c>
 8001006:	bc10      	pop	{r4}
 8001008:	f7ff bc6c 	b.w	80008e4 <__swbuf_r>
 800100c:	6813      	ldr	r3, [r2, #0]
 800100e:	1c58      	adds	r0, r3, #1
 8001010:	6010      	str	r0, [r2, #0]
 8001012:	7019      	strb	r1, [r3, #0]
 8001014:	4608      	mov	r0, r1
 8001016:	bc10      	pop	{r4}
 8001018:	4770      	bx	lr

0800101a <__sfputs_r>:
 800101a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800101c:	4606      	mov	r6, r0
 800101e:	460f      	mov	r7, r1
 8001020:	4614      	mov	r4, r2
 8001022:	18d5      	adds	r5, r2, r3
 8001024:	42ac      	cmp	r4, r5
 8001026:	d101      	bne.n	800102c <__sfputs_r+0x12>
 8001028:	2000      	movs	r0, #0
 800102a:	e007      	b.n	800103c <__sfputs_r+0x22>
 800102c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001030:	463a      	mov	r2, r7
 8001032:	4630      	mov	r0, r6
 8001034:	f7ff ffdc 	bl	8000ff0 <__sfputc_r>
 8001038:	1c43      	adds	r3, r0, #1
 800103a:	d1f3      	bne.n	8001024 <__sfputs_r+0xa>
 800103c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001040 <_vfiprintf_r>:
 8001040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001044:	460d      	mov	r5, r1
 8001046:	b09d      	sub	sp, #116	; 0x74
 8001048:	4614      	mov	r4, r2
 800104a:	4698      	mov	r8, r3
 800104c:	4606      	mov	r6, r0
 800104e:	b118      	cbz	r0, 8001058 <_vfiprintf_r+0x18>
 8001050:	6983      	ldr	r3, [r0, #24]
 8001052:	b90b      	cbnz	r3, 8001058 <_vfiprintf_r+0x18>
 8001054:	f7ff fe20 	bl	8000c98 <__sinit>
 8001058:	4b89      	ldr	r3, [pc, #548]	; (8001280 <_vfiprintf_r+0x240>)
 800105a:	429d      	cmp	r5, r3
 800105c:	d11b      	bne.n	8001096 <_vfiprintf_r+0x56>
 800105e:	6875      	ldr	r5, [r6, #4]
 8001060:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001062:	07d9      	lsls	r1, r3, #31
 8001064:	d405      	bmi.n	8001072 <_vfiprintf_r+0x32>
 8001066:	89ab      	ldrh	r3, [r5, #12]
 8001068:	059a      	lsls	r2, r3, #22
 800106a:	d402      	bmi.n	8001072 <_vfiprintf_r+0x32>
 800106c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800106e:	f7ff feb1 	bl	8000dd4 <__retarget_lock_acquire_recursive>
 8001072:	89ab      	ldrh	r3, [r5, #12]
 8001074:	071b      	lsls	r3, r3, #28
 8001076:	d501      	bpl.n	800107c <_vfiprintf_r+0x3c>
 8001078:	692b      	ldr	r3, [r5, #16]
 800107a:	b9eb      	cbnz	r3, 80010b8 <_vfiprintf_r+0x78>
 800107c:	4629      	mov	r1, r5
 800107e:	4630      	mov	r0, r6
 8001080:	f7ff fc82 	bl	8000988 <__swsetup_r>
 8001084:	b1c0      	cbz	r0, 80010b8 <_vfiprintf_r+0x78>
 8001086:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001088:	07dc      	lsls	r4, r3, #31
 800108a:	d50e      	bpl.n	80010aa <_vfiprintf_r+0x6a>
 800108c:	f04f 30ff 	mov.w	r0, #4294967295
 8001090:	b01d      	add	sp, #116	; 0x74
 8001092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001096:	4b7b      	ldr	r3, [pc, #492]	; (8001284 <_vfiprintf_r+0x244>)
 8001098:	429d      	cmp	r5, r3
 800109a:	d101      	bne.n	80010a0 <_vfiprintf_r+0x60>
 800109c:	68b5      	ldr	r5, [r6, #8]
 800109e:	e7df      	b.n	8001060 <_vfiprintf_r+0x20>
 80010a0:	4b79      	ldr	r3, [pc, #484]	; (8001288 <_vfiprintf_r+0x248>)
 80010a2:	429d      	cmp	r5, r3
 80010a4:	bf08      	it	eq
 80010a6:	68f5      	ldreq	r5, [r6, #12]
 80010a8:	e7da      	b.n	8001060 <_vfiprintf_r+0x20>
 80010aa:	89ab      	ldrh	r3, [r5, #12]
 80010ac:	0598      	lsls	r0, r3, #22
 80010ae:	d4ed      	bmi.n	800108c <_vfiprintf_r+0x4c>
 80010b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80010b2:	f7ff fe90 	bl	8000dd6 <__retarget_lock_release_recursive>
 80010b6:	e7e9      	b.n	800108c <_vfiprintf_r+0x4c>
 80010b8:	2300      	movs	r3, #0
 80010ba:	9309      	str	r3, [sp, #36]	; 0x24
 80010bc:	2320      	movs	r3, #32
 80010be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80010c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80010c6:	2330      	movs	r3, #48	; 0x30
 80010c8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800128c <_vfiprintf_r+0x24c>
 80010cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80010d0:	f04f 0901 	mov.w	r9, #1
 80010d4:	4623      	mov	r3, r4
 80010d6:	469a      	mov	sl, r3
 80010d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80010dc:	b10a      	cbz	r2, 80010e2 <_vfiprintf_r+0xa2>
 80010de:	2a25      	cmp	r2, #37	; 0x25
 80010e0:	d1f9      	bne.n	80010d6 <_vfiprintf_r+0x96>
 80010e2:	ebba 0b04 	subs.w	fp, sl, r4
 80010e6:	d00b      	beq.n	8001100 <_vfiprintf_r+0xc0>
 80010e8:	465b      	mov	r3, fp
 80010ea:	4622      	mov	r2, r4
 80010ec:	4629      	mov	r1, r5
 80010ee:	4630      	mov	r0, r6
 80010f0:	f7ff ff93 	bl	800101a <__sfputs_r>
 80010f4:	3001      	adds	r0, #1
 80010f6:	f000 80aa 	beq.w	800124e <_vfiprintf_r+0x20e>
 80010fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80010fc:	445a      	add	r2, fp
 80010fe:	9209      	str	r2, [sp, #36]	; 0x24
 8001100:	f89a 3000 	ldrb.w	r3, [sl]
 8001104:	2b00      	cmp	r3, #0
 8001106:	f000 80a2 	beq.w	800124e <_vfiprintf_r+0x20e>
 800110a:	2300      	movs	r3, #0
 800110c:	f04f 32ff 	mov.w	r2, #4294967295
 8001110:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001114:	f10a 0a01 	add.w	sl, sl, #1
 8001118:	9304      	str	r3, [sp, #16]
 800111a:	9307      	str	r3, [sp, #28]
 800111c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001120:	931a      	str	r3, [sp, #104]	; 0x68
 8001122:	4654      	mov	r4, sl
 8001124:	2205      	movs	r2, #5
 8001126:	f814 1b01 	ldrb.w	r1, [r4], #1
 800112a:	4858      	ldr	r0, [pc, #352]	; (800128c <_vfiprintf_r+0x24c>)
 800112c:	f7ff f870 	bl	8000210 <memchr>
 8001130:	9a04      	ldr	r2, [sp, #16]
 8001132:	b9d8      	cbnz	r0, 800116c <_vfiprintf_r+0x12c>
 8001134:	06d1      	lsls	r1, r2, #27
 8001136:	bf44      	itt	mi
 8001138:	2320      	movmi	r3, #32
 800113a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800113e:	0713      	lsls	r3, r2, #28
 8001140:	bf44      	itt	mi
 8001142:	232b      	movmi	r3, #43	; 0x2b
 8001144:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001148:	f89a 3000 	ldrb.w	r3, [sl]
 800114c:	2b2a      	cmp	r3, #42	; 0x2a
 800114e:	d015      	beq.n	800117c <_vfiprintf_r+0x13c>
 8001150:	9a07      	ldr	r2, [sp, #28]
 8001152:	4654      	mov	r4, sl
 8001154:	2000      	movs	r0, #0
 8001156:	f04f 0c0a 	mov.w	ip, #10
 800115a:	4621      	mov	r1, r4
 800115c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001160:	3b30      	subs	r3, #48	; 0x30
 8001162:	2b09      	cmp	r3, #9
 8001164:	d94e      	bls.n	8001204 <_vfiprintf_r+0x1c4>
 8001166:	b1b0      	cbz	r0, 8001196 <_vfiprintf_r+0x156>
 8001168:	9207      	str	r2, [sp, #28]
 800116a:	e014      	b.n	8001196 <_vfiprintf_r+0x156>
 800116c:	eba0 0308 	sub.w	r3, r0, r8
 8001170:	fa09 f303 	lsl.w	r3, r9, r3
 8001174:	4313      	orrs	r3, r2
 8001176:	9304      	str	r3, [sp, #16]
 8001178:	46a2      	mov	sl, r4
 800117a:	e7d2      	b.n	8001122 <_vfiprintf_r+0xe2>
 800117c:	9b03      	ldr	r3, [sp, #12]
 800117e:	1d19      	adds	r1, r3, #4
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	9103      	str	r1, [sp, #12]
 8001184:	2b00      	cmp	r3, #0
 8001186:	bfbb      	ittet	lt
 8001188:	425b      	neglt	r3, r3
 800118a:	f042 0202 	orrlt.w	r2, r2, #2
 800118e:	9307      	strge	r3, [sp, #28]
 8001190:	9307      	strlt	r3, [sp, #28]
 8001192:	bfb8      	it	lt
 8001194:	9204      	strlt	r2, [sp, #16]
 8001196:	7823      	ldrb	r3, [r4, #0]
 8001198:	2b2e      	cmp	r3, #46	; 0x2e
 800119a:	d10c      	bne.n	80011b6 <_vfiprintf_r+0x176>
 800119c:	7863      	ldrb	r3, [r4, #1]
 800119e:	2b2a      	cmp	r3, #42	; 0x2a
 80011a0:	d135      	bne.n	800120e <_vfiprintf_r+0x1ce>
 80011a2:	9b03      	ldr	r3, [sp, #12]
 80011a4:	1d1a      	adds	r2, r3, #4
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	9203      	str	r2, [sp, #12]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	bfb8      	it	lt
 80011ae:	f04f 33ff 	movlt.w	r3, #4294967295
 80011b2:	3402      	adds	r4, #2
 80011b4:	9305      	str	r3, [sp, #20]
 80011b6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800129c <_vfiprintf_r+0x25c>
 80011ba:	7821      	ldrb	r1, [r4, #0]
 80011bc:	2203      	movs	r2, #3
 80011be:	4650      	mov	r0, sl
 80011c0:	f7ff f826 	bl	8000210 <memchr>
 80011c4:	b140      	cbz	r0, 80011d8 <_vfiprintf_r+0x198>
 80011c6:	2340      	movs	r3, #64	; 0x40
 80011c8:	eba0 000a 	sub.w	r0, r0, sl
 80011cc:	fa03 f000 	lsl.w	r0, r3, r0
 80011d0:	9b04      	ldr	r3, [sp, #16]
 80011d2:	4303      	orrs	r3, r0
 80011d4:	3401      	adds	r4, #1
 80011d6:	9304      	str	r3, [sp, #16]
 80011d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80011dc:	482c      	ldr	r0, [pc, #176]	; (8001290 <_vfiprintf_r+0x250>)
 80011de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80011e2:	2206      	movs	r2, #6
 80011e4:	f7ff f814 	bl	8000210 <memchr>
 80011e8:	2800      	cmp	r0, #0
 80011ea:	d03f      	beq.n	800126c <_vfiprintf_r+0x22c>
 80011ec:	4b29      	ldr	r3, [pc, #164]	; (8001294 <_vfiprintf_r+0x254>)
 80011ee:	bb1b      	cbnz	r3, 8001238 <_vfiprintf_r+0x1f8>
 80011f0:	9b03      	ldr	r3, [sp, #12]
 80011f2:	3307      	adds	r3, #7
 80011f4:	f023 0307 	bic.w	r3, r3, #7
 80011f8:	3308      	adds	r3, #8
 80011fa:	9303      	str	r3, [sp, #12]
 80011fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80011fe:	443b      	add	r3, r7
 8001200:	9309      	str	r3, [sp, #36]	; 0x24
 8001202:	e767      	b.n	80010d4 <_vfiprintf_r+0x94>
 8001204:	fb0c 3202 	mla	r2, ip, r2, r3
 8001208:	460c      	mov	r4, r1
 800120a:	2001      	movs	r0, #1
 800120c:	e7a5      	b.n	800115a <_vfiprintf_r+0x11a>
 800120e:	2300      	movs	r3, #0
 8001210:	3401      	adds	r4, #1
 8001212:	9305      	str	r3, [sp, #20]
 8001214:	4619      	mov	r1, r3
 8001216:	f04f 0c0a 	mov.w	ip, #10
 800121a:	4620      	mov	r0, r4
 800121c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001220:	3a30      	subs	r2, #48	; 0x30
 8001222:	2a09      	cmp	r2, #9
 8001224:	d903      	bls.n	800122e <_vfiprintf_r+0x1ee>
 8001226:	2b00      	cmp	r3, #0
 8001228:	d0c5      	beq.n	80011b6 <_vfiprintf_r+0x176>
 800122a:	9105      	str	r1, [sp, #20]
 800122c:	e7c3      	b.n	80011b6 <_vfiprintf_r+0x176>
 800122e:	fb0c 2101 	mla	r1, ip, r1, r2
 8001232:	4604      	mov	r4, r0
 8001234:	2301      	movs	r3, #1
 8001236:	e7f0      	b.n	800121a <_vfiprintf_r+0x1da>
 8001238:	ab03      	add	r3, sp, #12
 800123a:	9300      	str	r3, [sp, #0]
 800123c:	462a      	mov	r2, r5
 800123e:	4b16      	ldr	r3, [pc, #88]	; (8001298 <_vfiprintf_r+0x258>)
 8001240:	a904      	add	r1, sp, #16
 8001242:	4630      	mov	r0, r6
 8001244:	f3af 8000 	nop.w
 8001248:	4607      	mov	r7, r0
 800124a:	1c78      	adds	r0, r7, #1
 800124c:	d1d6      	bne.n	80011fc <_vfiprintf_r+0x1bc>
 800124e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001250:	07d9      	lsls	r1, r3, #31
 8001252:	d405      	bmi.n	8001260 <_vfiprintf_r+0x220>
 8001254:	89ab      	ldrh	r3, [r5, #12]
 8001256:	059a      	lsls	r2, r3, #22
 8001258:	d402      	bmi.n	8001260 <_vfiprintf_r+0x220>
 800125a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800125c:	f7ff fdbb 	bl	8000dd6 <__retarget_lock_release_recursive>
 8001260:	89ab      	ldrh	r3, [r5, #12]
 8001262:	065b      	lsls	r3, r3, #25
 8001264:	f53f af12 	bmi.w	800108c <_vfiprintf_r+0x4c>
 8001268:	9809      	ldr	r0, [sp, #36]	; 0x24
 800126a:	e711      	b.n	8001090 <_vfiprintf_r+0x50>
 800126c:	ab03      	add	r3, sp, #12
 800126e:	9300      	str	r3, [sp, #0]
 8001270:	462a      	mov	r2, r5
 8001272:	4b09      	ldr	r3, [pc, #36]	; (8001298 <_vfiprintf_r+0x258>)
 8001274:	a904      	add	r1, sp, #16
 8001276:	4630      	mov	r0, r6
 8001278:	f000 f880 	bl	800137c <_printf_i>
 800127c:	e7e4      	b.n	8001248 <_vfiprintf_r+0x208>
 800127e:	bf00      	nop
 8001280:	080017bc 	.word	0x080017bc
 8001284:	080017dc 	.word	0x080017dc
 8001288:	0800179c 	.word	0x0800179c
 800128c:	080017fc 	.word	0x080017fc
 8001290:	08001806 	.word	0x08001806
 8001294:	00000000 	.word	0x00000000
 8001298:	0800101b 	.word	0x0800101b
 800129c:	08001802 	.word	0x08001802

080012a0 <_printf_common>:
 80012a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80012a4:	4616      	mov	r6, r2
 80012a6:	4699      	mov	r9, r3
 80012a8:	688a      	ldr	r2, [r1, #8]
 80012aa:	690b      	ldr	r3, [r1, #16]
 80012ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80012b0:	4293      	cmp	r3, r2
 80012b2:	bfb8      	it	lt
 80012b4:	4613      	movlt	r3, r2
 80012b6:	6033      	str	r3, [r6, #0]
 80012b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80012bc:	4607      	mov	r7, r0
 80012be:	460c      	mov	r4, r1
 80012c0:	b10a      	cbz	r2, 80012c6 <_printf_common+0x26>
 80012c2:	3301      	adds	r3, #1
 80012c4:	6033      	str	r3, [r6, #0]
 80012c6:	6823      	ldr	r3, [r4, #0]
 80012c8:	0699      	lsls	r1, r3, #26
 80012ca:	bf42      	ittt	mi
 80012cc:	6833      	ldrmi	r3, [r6, #0]
 80012ce:	3302      	addmi	r3, #2
 80012d0:	6033      	strmi	r3, [r6, #0]
 80012d2:	6825      	ldr	r5, [r4, #0]
 80012d4:	f015 0506 	ands.w	r5, r5, #6
 80012d8:	d106      	bne.n	80012e8 <_printf_common+0x48>
 80012da:	f104 0a19 	add.w	sl, r4, #25
 80012de:	68e3      	ldr	r3, [r4, #12]
 80012e0:	6832      	ldr	r2, [r6, #0]
 80012e2:	1a9b      	subs	r3, r3, r2
 80012e4:	42ab      	cmp	r3, r5
 80012e6:	dc26      	bgt.n	8001336 <_printf_common+0x96>
 80012e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80012ec:	1e13      	subs	r3, r2, #0
 80012ee:	6822      	ldr	r2, [r4, #0]
 80012f0:	bf18      	it	ne
 80012f2:	2301      	movne	r3, #1
 80012f4:	0692      	lsls	r2, r2, #26
 80012f6:	d42b      	bmi.n	8001350 <_printf_common+0xb0>
 80012f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80012fc:	4649      	mov	r1, r9
 80012fe:	4638      	mov	r0, r7
 8001300:	47c0      	blx	r8
 8001302:	3001      	adds	r0, #1
 8001304:	d01e      	beq.n	8001344 <_printf_common+0xa4>
 8001306:	6823      	ldr	r3, [r4, #0]
 8001308:	68e5      	ldr	r5, [r4, #12]
 800130a:	6832      	ldr	r2, [r6, #0]
 800130c:	f003 0306 	and.w	r3, r3, #6
 8001310:	2b04      	cmp	r3, #4
 8001312:	bf08      	it	eq
 8001314:	1aad      	subeq	r5, r5, r2
 8001316:	68a3      	ldr	r3, [r4, #8]
 8001318:	6922      	ldr	r2, [r4, #16]
 800131a:	bf0c      	ite	eq
 800131c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001320:	2500      	movne	r5, #0
 8001322:	4293      	cmp	r3, r2
 8001324:	bfc4      	itt	gt
 8001326:	1a9b      	subgt	r3, r3, r2
 8001328:	18ed      	addgt	r5, r5, r3
 800132a:	2600      	movs	r6, #0
 800132c:	341a      	adds	r4, #26
 800132e:	42b5      	cmp	r5, r6
 8001330:	d11a      	bne.n	8001368 <_printf_common+0xc8>
 8001332:	2000      	movs	r0, #0
 8001334:	e008      	b.n	8001348 <_printf_common+0xa8>
 8001336:	2301      	movs	r3, #1
 8001338:	4652      	mov	r2, sl
 800133a:	4649      	mov	r1, r9
 800133c:	4638      	mov	r0, r7
 800133e:	47c0      	blx	r8
 8001340:	3001      	adds	r0, #1
 8001342:	d103      	bne.n	800134c <_printf_common+0xac>
 8001344:	f04f 30ff 	mov.w	r0, #4294967295
 8001348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800134c:	3501      	adds	r5, #1
 800134e:	e7c6      	b.n	80012de <_printf_common+0x3e>
 8001350:	18e1      	adds	r1, r4, r3
 8001352:	1c5a      	adds	r2, r3, #1
 8001354:	2030      	movs	r0, #48	; 0x30
 8001356:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800135a:	4422      	add	r2, r4
 800135c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001360:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001364:	3302      	adds	r3, #2
 8001366:	e7c7      	b.n	80012f8 <_printf_common+0x58>
 8001368:	2301      	movs	r3, #1
 800136a:	4622      	mov	r2, r4
 800136c:	4649      	mov	r1, r9
 800136e:	4638      	mov	r0, r7
 8001370:	47c0      	blx	r8
 8001372:	3001      	adds	r0, #1
 8001374:	d0e6      	beq.n	8001344 <_printf_common+0xa4>
 8001376:	3601      	adds	r6, #1
 8001378:	e7d9      	b.n	800132e <_printf_common+0x8e>
	...

0800137c <_printf_i>:
 800137c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001380:	460c      	mov	r4, r1
 8001382:	4691      	mov	r9, r2
 8001384:	7e27      	ldrb	r7, [r4, #24]
 8001386:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001388:	2f78      	cmp	r7, #120	; 0x78
 800138a:	4680      	mov	r8, r0
 800138c:	469a      	mov	sl, r3
 800138e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001392:	d807      	bhi.n	80013a4 <_printf_i+0x28>
 8001394:	2f62      	cmp	r7, #98	; 0x62
 8001396:	d80a      	bhi.n	80013ae <_printf_i+0x32>
 8001398:	2f00      	cmp	r7, #0
 800139a:	f000 80d8 	beq.w	800154e <_printf_i+0x1d2>
 800139e:	2f58      	cmp	r7, #88	; 0x58
 80013a0:	f000 80a3 	beq.w	80014ea <_printf_i+0x16e>
 80013a4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80013a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80013ac:	e03a      	b.n	8001424 <_printf_i+0xa8>
 80013ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80013b2:	2b15      	cmp	r3, #21
 80013b4:	d8f6      	bhi.n	80013a4 <_printf_i+0x28>
 80013b6:	a001      	add	r0, pc, #4	; (adr r0, 80013bc <_printf_i+0x40>)
 80013b8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80013bc:	08001415 	.word	0x08001415
 80013c0:	08001429 	.word	0x08001429
 80013c4:	080013a5 	.word	0x080013a5
 80013c8:	080013a5 	.word	0x080013a5
 80013cc:	080013a5 	.word	0x080013a5
 80013d0:	080013a5 	.word	0x080013a5
 80013d4:	08001429 	.word	0x08001429
 80013d8:	080013a5 	.word	0x080013a5
 80013dc:	080013a5 	.word	0x080013a5
 80013e0:	080013a5 	.word	0x080013a5
 80013e4:	080013a5 	.word	0x080013a5
 80013e8:	08001535 	.word	0x08001535
 80013ec:	08001459 	.word	0x08001459
 80013f0:	08001517 	.word	0x08001517
 80013f4:	080013a5 	.word	0x080013a5
 80013f8:	080013a5 	.word	0x080013a5
 80013fc:	08001557 	.word	0x08001557
 8001400:	080013a5 	.word	0x080013a5
 8001404:	08001459 	.word	0x08001459
 8001408:	080013a5 	.word	0x080013a5
 800140c:	080013a5 	.word	0x080013a5
 8001410:	0800151f 	.word	0x0800151f
 8001414:	680b      	ldr	r3, [r1, #0]
 8001416:	1d1a      	adds	r2, r3, #4
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	600a      	str	r2, [r1, #0]
 800141c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001420:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001424:	2301      	movs	r3, #1
 8001426:	e0a3      	b.n	8001570 <_printf_i+0x1f4>
 8001428:	6825      	ldr	r5, [r4, #0]
 800142a:	6808      	ldr	r0, [r1, #0]
 800142c:	062e      	lsls	r6, r5, #24
 800142e:	f100 0304 	add.w	r3, r0, #4
 8001432:	d50a      	bpl.n	800144a <_printf_i+0xce>
 8001434:	6805      	ldr	r5, [r0, #0]
 8001436:	600b      	str	r3, [r1, #0]
 8001438:	2d00      	cmp	r5, #0
 800143a:	da03      	bge.n	8001444 <_printf_i+0xc8>
 800143c:	232d      	movs	r3, #45	; 0x2d
 800143e:	426d      	negs	r5, r5
 8001440:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001444:	485e      	ldr	r0, [pc, #376]	; (80015c0 <_printf_i+0x244>)
 8001446:	230a      	movs	r3, #10
 8001448:	e019      	b.n	800147e <_printf_i+0x102>
 800144a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800144e:	6805      	ldr	r5, [r0, #0]
 8001450:	600b      	str	r3, [r1, #0]
 8001452:	bf18      	it	ne
 8001454:	b22d      	sxthne	r5, r5
 8001456:	e7ef      	b.n	8001438 <_printf_i+0xbc>
 8001458:	680b      	ldr	r3, [r1, #0]
 800145a:	6825      	ldr	r5, [r4, #0]
 800145c:	1d18      	adds	r0, r3, #4
 800145e:	6008      	str	r0, [r1, #0]
 8001460:	0628      	lsls	r0, r5, #24
 8001462:	d501      	bpl.n	8001468 <_printf_i+0xec>
 8001464:	681d      	ldr	r5, [r3, #0]
 8001466:	e002      	b.n	800146e <_printf_i+0xf2>
 8001468:	0669      	lsls	r1, r5, #25
 800146a:	d5fb      	bpl.n	8001464 <_printf_i+0xe8>
 800146c:	881d      	ldrh	r5, [r3, #0]
 800146e:	4854      	ldr	r0, [pc, #336]	; (80015c0 <_printf_i+0x244>)
 8001470:	2f6f      	cmp	r7, #111	; 0x6f
 8001472:	bf0c      	ite	eq
 8001474:	2308      	moveq	r3, #8
 8001476:	230a      	movne	r3, #10
 8001478:	2100      	movs	r1, #0
 800147a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800147e:	6866      	ldr	r6, [r4, #4]
 8001480:	60a6      	str	r6, [r4, #8]
 8001482:	2e00      	cmp	r6, #0
 8001484:	bfa2      	ittt	ge
 8001486:	6821      	ldrge	r1, [r4, #0]
 8001488:	f021 0104 	bicge.w	r1, r1, #4
 800148c:	6021      	strge	r1, [r4, #0]
 800148e:	b90d      	cbnz	r5, 8001494 <_printf_i+0x118>
 8001490:	2e00      	cmp	r6, #0
 8001492:	d04d      	beq.n	8001530 <_printf_i+0x1b4>
 8001494:	4616      	mov	r6, r2
 8001496:	fbb5 f1f3 	udiv	r1, r5, r3
 800149a:	fb03 5711 	mls	r7, r3, r1, r5
 800149e:	5dc7      	ldrb	r7, [r0, r7]
 80014a0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80014a4:	462f      	mov	r7, r5
 80014a6:	42bb      	cmp	r3, r7
 80014a8:	460d      	mov	r5, r1
 80014aa:	d9f4      	bls.n	8001496 <_printf_i+0x11a>
 80014ac:	2b08      	cmp	r3, #8
 80014ae:	d10b      	bne.n	80014c8 <_printf_i+0x14c>
 80014b0:	6823      	ldr	r3, [r4, #0]
 80014b2:	07df      	lsls	r7, r3, #31
 80014b4:	d508      	bpl.n	80014c8 <_printf_i+0x14c>
 80014b6:	6923      	ldr	r3, [r4, #16]
 80014b8:	6861      	ldr	r1, [r4, #4]
 80014ba:	4299      	cmp	r1, r3
 80014bc:	bfde      	ittt	le
 80014be:	2330      	movle	r3, #48	; 0x30
 80014c0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80014c4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80014c8:	1b92      	subs	r2, r2, r6
 80014ca:	6122      	str	r2, [r4, #16]
 80014cc:	f8cd a000 	str.w	sl, [sp]
 80014d0:	464b      	mov	r3, r9
 80014d2:	aa03      	add	r2, sp, #12
 80014d4:	4621      	mov	r1, r4
 80014d6:	4640      	mov	r0, r8
 80014d8:	f7ff fee2 	bl	80012a0 <_printf_common>
 80014dc:	3001      	adds	r0, #1
 80014de:	d14c      	bne.n	800157a <_printf_i+0x1fe>
 80014e0:	f04f 30ff 	mov.w	r0, #4294967295
 80014e4:	b004      	add	sp, #16
 80014e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80014ea:	4835      	ldr	r0, [pc, #212]	; (80015c0 <_printf_i+0x244>)
 80014ec:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80014f0:	6823      	ldr	r3, [r4, #0]
 80014f2:	680e      	ldr	r6, [r1, #0]
 80014f4:	061f      	lsls	r7, r3, #24
 80014f6:	f856 5b04 	ldr.w	r5, [r6], #4
 80014fa:	600e      	str	r6, [r1, #0]
 80014fc:	d514      	bpl.n	8001528 <_printf_i+0x1ac>
 80014fe:	07d9      	lsls	r1, r3, #31
 8001500:	bf44      	itt	mi
 8001502:	f043 0320 	orrmi.w	r3, r3, #32
 8001506:	6023      	strmi	r3, [r4, #0]
 8001508:	b91d      	cbnz	r5, 8001512 <_printf_i+0x196>
 800150a:	6823      	ldr	r3, [r4, #0]
 800150c:	f023 0320 	bic.w	r3, r3, #32
 8001510:	6023      	str	r3, [r4, #0]
 8001512:	2310      	movs	r3, #16
 8001514:	e7b0      	b.n	8001478 <_printf_i+0xfc>
 8001516:	6823      	ldr	r3, [r4, #0]
 8001518:	f043 0320 	orr.w	r3, r3, #32
 800151c:	6023      	str	r3, [r4, #0]
 800151e:	2378      	movs	r3, #120	; 0x78
 8001520:	4828      	ldr	r0, [pc, #160]	; (80015c4 <_printf_i+0x248>)
 8001522:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001526:	e7e3      	b.n	80014f0 <_printf_i+0x174>
 8001528:	065e      	lsls	r6, r3, #25
 800152a:	bf48      	it	mi
 800152c:	b2ad      	uxthmi	r5, r5
 800152e:	e7e6      	b.n	80014fe <_printf_i+0x182>
 8001530:	4616      	mov	r6, r2
 8001532:	e7bb      	b.n	80014ac <_printf_i+0x130>
 8001534:	680b      	ldr	r3, [r1, #0]
 8001536:	6826      	ldr	r6, [r4, #0]
 8001538:	6960      	ldr	r0, [r4, #20]
 800153a:	1d1d      	adds	r5, r3, #4
 800153c:	600d      	str	r5, [r1, #0]
 800153e:	0635      	lsls	r5, r6, #24
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	d501      	bpl.n	8001548 <_printf_i+0x1cc>
 8001544:	6018      	str	r0, [r3, #0]
 8001546:	e002      	b.n	800154e <_printf_i+0x1d2>
 8001548:	0671      	lsls	r1, r6, #25
 800154a:	d5fb      	bpl.n	8001544 <_printf_i+0x1c8>
 800154c:	8018      	strh	r0, [r3, #0]
 800154e:	2300      	movs	r3, #0
 8001550:	6123      	str	r3, [r4, #16]
 8001552:	4616      	mov	r6, r2
 8001554:	e7ba      	b.n	80014cc <_printf_i+0x150>
 8001556:	680b      	ldr	r3, [r1, #0]
 8001558:	1d1a      	adds	r2, r3, #4
 800155a:	600a      	str	r2, [r1, #0]
 800155c:	681e      	ldr	r6, [r3, #0]
 800155e:	6862      	ldr	r2, [r4, #4]
 8001560:	2100      	movs	r1, #0
 8001562:	4630      	mov	r0, r6
 8001564:	f7fe fe54 	bl	8000210 <memchr>
 8001568:	b108      	cbz	r0, 800156e <_printf_i+0x1f2>
 800156a:	1b80      	subs	r0, r0, r6
 800156c:	6060      	str	r0, [r4, #4]
 800156e:	6863      	ldr	r3, [r4, #4]
 8001570:	6123      	str	r3, [r4, #16]
 8001572:	2300      	movs	r3, #0
 8001574:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001578:	e7a8      	b.n	80014cc <_printf_i+0x150>
 800157a:	6923      	ldr	r3, [r4, #16]
 800157c:	4632      	mov	r2, r6
 800157e:	4649      	mov	r1, r9
 8001580:	4640      	mov	r0, r8
 8001582:	47d0      	blx	sl
 8001584:	3001      	adds	r0, #1
 8001586:	d0ab      	beq.n	80014e0 <_printf_i+0x164>
 8001588:	6823      	ldr	r3, [r4, #0]
 800158a:	079b      	lsls	r3, r3, #30
 800158c:	d413      	bmi.n	80015b6 <_printf_i+0x23a>
 800158e:	68e0      	ldr	r0, [r4, #12]
 8001590:	9b03      	ldr	r3, [sp, #12]
 8001592:	4298      	cmp	r0, r3
 8001594:	bfb8      	it	lt
 8001596:	4618      	movlt	r0, r3
 8001598:	e7a4      	b.n	80014e4 <_printf_i+0x168>
 800159a:	2301      	movs	r3, #1
 800159c:	4632      	mov	r2, r6
 800159e:	4649      	mov	r1, r9
 80015a0:	4640      	mov	r0, r8
 80015a2:	47d0      	blx	sl
 80015a4:	3001      	adds	r0, #1
 80015a6:	d09b      	beq.n	80014e0 <_printf_i+0x164>
 80015a8:	3501      	adds	r5, #1
 80015aa:	68e3      	ldr	r3, [r4, #12]
 80015ac:	9903      	ldr	r1, [sp, #12]
 80015ae:	1a5b      	subs	r3, r3, r1
 80015b0:	42ab      	cmp	r3, r5
 80015b2:	dcf2      	bgt.n	800159a <_printf_i+0x21e>
 80015b4:	e7eb      	b.n	800158e <_printf_i+0x212>
 80015b6:	2500      	movs	r5, #0
 80015b8:	f104 0619 	add.w	r6, r4, #25
 80015bc:	e7f5      	b.n	80015aa <_printf_i+0x22e>
 80015be:	bf00      	nop
 80015c0:	0800180d 	.word	0x0800180d
 80015c4:	0800181e 	.word	0x0800181e

080015c8 <_sbrk_r>:
 80015c8:	b538      	push	{r3, r4, r5, lr}
 80015ca:	4d06      	ldr	r5, [pc, #24]	; (80015e4 <_sbrk_r+0x1c>)
 80015cc:	2300      	movs	r3, #0
 80015ce:	4604      	mov	r4, r0
 80015d0:	4608      	mov	r0, r1
 80015d2:	602b      	str	r3, [r5, #0]
 80015d4:	f7fe ff9a 	bl	800050c <_sbrk>
 80015d8:	1c43      	adds	r3, r0, #1
 80015da:	d102      	bne.n	80015e2 <_sbrk_r+0x1a>
 80015dc:	682b      	ldr	r3, [r5, #0]
 80015de:	b103      	cbz	r3, 80015e2 <_sbrk_r+0x1a>
 80015e0:	6023      	str	r3, [r4, #0]
 80015e2:	bd38      	pop	{r3, r4, r5, pc}
 80015e4:	200000a0 	.word	0x200000a0

080015e8 <__sread>:
 80015e8:	b510      	push	{r4, lr}
 80015ea:	460c      	mov	r4, r1
 80015ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80015f0:	f000 f8a0 	bl	8001734 <_read_r>
 80015f4:	2800      	cmp	r0, #0
 80015f6:	bfab      	itete	ge
 80015f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80015fa:	89a3      	ldrhlt	r3, [r4, #12]
 80015fc:	181b      	addge	r3, r3, r0
 80015fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001602:	bfac      	ite	ge
 8001604:	6563      	strge	r3, [r4, #84]	; 0x54
 8001606:	81a3      	strhlt	r3, [r4, #12]
 8001608:	bd10      	pop	{r4, pc}

0800160a <__swrite>:
 800160a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800160e:	461f      	mov	r7, r3
 8001610:	898b      	ldrh	r3, [r1, #12]
 8001612:	05db      	lsls	r3, r3, #23
 8001614:	4605      	mov	r5, r0
 8001616:	460c      	mov	r4, r1
 8001618:	4616      	mov	r6, r2
 800161a:	d505      	bpl.n	8001628 <__swrite+0x1e>
 800161c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001620:	2302      	movs	r3, #2
 8001622:	2200      	movs	r2, #0
 8001624:	f000 f868 	bl	80016f8 <_lseek_r>
 8001628:	89a3      	ldrh	r3, [r4, #12]
 800162a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800162e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001632:	81a3      	strh	r3, [r4, #12]
 8001634:	4632      	mov	r2, r6
 8001636:	463b      	mov	r3, r7
 8001638:	4628      	mov	r0, r5
 800163a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800163e:	f000 b817 	b.w	8001670 <_write_r>

08001642 <__sseek>:
 8001642:	b510      	push	{r4, lr}
 8001644:	460c      	mov	r4, r1
 8001646:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800164a:	f000 f855 	bl	80016f8 <_lseek_r>
 800164e:	1c43      	adds	r3, r0, #1
 8001650:	89a3      	ldrh	r3, [r4, #12]
 8001652:	bf15      	itete	ne
 8001654:	6560      	strne	r0, [r4, #84]	; 0x54
 8001656:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800165a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800165e:	81a3      	strheq	r3, [r4, #12]
 8001660:	bf18      	it	ne
 8001662:	81a3      	strhne	r3, [r4, #12]
 8001664:	bd10      	pop	{r4, pc}

08001666 <__sclose>:
 8001666:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800166a:	f000 b813 	b.w	8001694 <_close_r>
	...

08001670 <_write_r>:
 8001670:	b538      	push	{r3, r4, r5, lr}
 8001672:	4d07      	ldr	r5, [pc, #28]	; (8001690 <_write_r+0x20>)
 8001674:	4604      	mov	r4, r0
 8001676:	4608      	mov	r0, r1
 8001678:	4611      	mov	r1, r2
 800167a:	2200      	movs	r2, #0
 800167c:	602a      	str	r2, [r5, #0]
 800167e:	461a      	mov	r2, r3
 8001680:	f7fe fef7 	bl	8000472 <_write>
 8001684:	1c43      	adds	r3, r0, #1
 8001686:	d102      	bne.n	800168e <_write_r+0x1e>
 8001688:	682b      	ldr	r3, [r5, #0]
 800168a:	b103      	cbz	r3, 800168e <_write_r+0x1e>
 800168c:	6023      	str	r3, [r4, #0]
 800168e:	bd38      	pop	{r3, r4, r5, pc}
 8001690:	200000a0 	.word	0x200000a0

08001694 <_close_r>:
 8001694:	b538      	push	{r3, r4, r5, lr}
 8001696:	4d06      	ldr	r5, [pc, #24]	; (80016b0 <_close_r+0x1c>)
 8001698:	2300      	movs	r3, #0
 800169a:	4604      	mov	r4, r0
 800169c:	4608      	mov	r0, r1
 800169e:	602b      	str	r3, [r5, #0]
 80016a0:	f7fe ff03 	bl	80004aa <_close>
 80016a4:	1c43      	adds	r3, r0, #1
 80016a6:	d102      	bne.n	80016ae <_close_r+0x1a>
 80016a8:	682b      	ldr	r3, [r5, #0]
 80016aa:	b103      	cbz	r3, 80016ae <_close_r+0x1a>
 80016ac:	6023      	str	r3, [r4, #0]
 80016ae:	bd38      	pop	{r3, r4, r5, pc}
 80016b0:	200000a0 	.word	0x200000a0

080016b4 <_fstat_r>:
 80016b4:	b538      	push	{r3, r4, r5, lr}
 80016b6:	4d07      	ldr	r5, [pc, #28]	; (80016d4 <_fstat_r+0x20>)
 80016b8:	2300      	movs	r3, #0
 80016ba:	4604      	mov	r4, r0
 80016bc:	4608      	mov	r0, r1
 80016be:	4611      	mov	r1, r2
 80016c0:	602b      	str	r3, [r5, #0]
 80016c2:	f7fe fefd 	bl	80004c0 <_fstat>
 80016c6:	1c43      	adds	r3, r0, #1
 80016c8:	d102      	bne.n	80016d0 <_fstat_r+0x1c>
 80016ca:	682b      	ldr	r3, [r5, #0]
 80016cc:	b103      	cbz	r3, 80016d0 <_fstat_r+0x1c>
 80016ce:	6023      	str	r3, [r4, #0]
 80016d0:	bd38      	pop	{r3, r4, r5, pc}
 80016d2:	bf00      	nop
 80016d4:	200000a0 	.word	0x200000a0

080016d8 <_isatty_r>:
 80016d8:	b538      	push	{r3, r4, r5, lr}
 80016da:	4d06      	ldr	r5, [pc, #24]	; (80016f4 <_isatty_r+0x1c>)
 80016dc:	2300      	movs	r3, #0
 80016de:	4604      	mov	r4, r0
 80016e0:	4608      	mov	r0, r1
 80016e2:	602b      	str	r3, [r5, #0]
 80016e4:	f7fe fefb 	bl	80004de <_isatty>
 80016e8:	1c43      	adds	r3, r0, #1
 80016ea:	d102      	bne.n	80016f2 <_isatty_r+0x1a>
 80016ec:	682b      	ldr	r3, [r5, #0]
 80016ee:	b103      	cbz	r3, 80016f2 <_isatty_r+0x1a>
 80016f0:	6023      	str	r3, [r4, #0]
 80016f2:	bd38      	pop	{r3, r4, r5, pc}
 80016f4:	200000a0 	.word	0x200000a0

080016f8 <_lseek_r>:
 80016f8:	b538      	push	{r3, r4, r5, lr}
 80016fa:	4d07      	ldr	r5, [pc, #28]	; (8001718 <_lseek_r+0x20>)
 80016fc:	4604      	mov	r4, r0
 80016fe:	4608      	mov	r0, r1
 8001700:	4611      	mov	r1, r2
 8001702:	2200      	movs	r2, #0
 8001704:	602a      	str	r2, [r5, #0]
 8001706:	461a      	mov	r2, r3
 8001708:	f7fe fef3 	bl	80004f2 <_lseek>
 800170c:	1c43      	adds	r3, r0, #1
 800170e:	d102      	bne.n	8001716 <_lseek_r+0x1e>
 8001710:	682b      	ldr	r3, [r5, #0]
 8001712:	b103      	cbz	r3, 8001716 <_lseek_r+0x1e>
 8001714:	6023      	str	r3, [r4, #0]
 8001716:	bd38      	pop	{r3, r4, r5, pc}
 8001718:	200000a0 	.word	0x200000a0

0800171c <__malloc_lock>:
 800171c:	4801      	ldr	r0, [pc, #4]	; (8001724 <__malloc_lock+0x8>)
 800171e:	f7ff bb59 	b.w	8000dd4 <__retarget_lock_acquire_recursive>
 8001722:	bf00      	nop
 8001724:	20000098 	.word	0x20000098

08001728 <__malloc_unlock>:
 8001728:	4801      	ldr	r0, [pc, #4]	; (8001730 <__malloc_unlock+0x8>)
 800172a:	f7ff bb54 	b.w	8000dd6 <__retarget_lock_release_recursive>
 800172e:	bf00      	nop
 8001730:	20000098 	.word	0x20000098

08001734 <_read_r>:
 8001734:	b538      	push	{r3, r4, r5, lr}
 8001736:	4d07      	ldr	r5, [pc, #28]	; (8001754 <_read_r+0x20>)
 8001738:	4604      	mov	r4, r0
 800173a:	4608      	mov	r0, r1
 800173c:	4611      	mov	r1, r2
 800173e:	2200      	movs	r2, #0
 8001740:	602a      	str	r2, [r5, #0]
 8001742:	461a      	mov	r2, r3
 8001744:	f7fe fe78 	bl	8000438 <_read>
 8001748:	1c43      	adds	r3, r0, #1
 800174a:	d102      	bne.n	8001752 <_read_r+0x1e>
 800174c:	682b      	ldr	r3, [r5, #0]
 800174e:	b103      	cbz	r3, 8001752 <_read_r+0x1e>
 8001750:	6023      	str	r3, [r4, #0]
 8001752:	bd38      	pop	{r3, r4, r5, pc}
 8001754:	200000a0 	.word	0x200000a0

08001758 <_init>:
 8001758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800175a:	bf00      	nop
 800175c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800175e:	bc08      	pop	{r3}
 8001760:	469e      	mov	lr, r3
 8001762:	4770      	bx	lr

08001764 <_fini>:
 8001764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001766:	bf00      	nop
 8001768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800176a:	bc08      	pop	{r3}
 800176c:	469e      	mov	lr, r3
 800176e:	4770      	bx	lr
